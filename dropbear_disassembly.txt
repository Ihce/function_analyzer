/*
Type: ELF
Platform: linux-x86_64
Architecture: x86_64

Libraries: 
  libz.so.1
  libcrypt.so.1
  libc.so.6

Segments:
r--  0x00000000-0x00004180 
r-x  0x00005000-0x00033821 
r--  0x00034000-0x00043290 
rw-  0x00044bd0-0x000466f8 
rw-  0x000466f8-0x000476b8 
---  0x000476c0-0x00047b20 
---  0x00047b20-0x00047b48 

Sections:
0x00000318-0x00000334  .interp (PROGBITS)  {Read-only data}
0x00000338-0x00000378  .note.gnu.property (NOTE)  {Read-only data}
0x00000378-0x00000398  .note.ABI-tag (NOTE)  {Read-only data}
0x00000398-0x000003bc  .note.gnu.build-id (NOTE)  {Read-only data}
0x000003c0-0x00000810  .hash (HASH)  {Read-only data}
0x00000810-0x00000848  .gnu.hash  {Read-only data}
0x00000848-0x000015b0  .dynsym (DYNSYM)  {Read-only data}
0x000015b0-0x00001b36  .dynstr (STRTAB)  {Read-only data}
0x00001b36-0x00001c54  .gnu.version  {Read-only data}
0x00001c58-0x00001d38  .gnu.version_r  {Read-only data}
0x00001d38-0x00003508  .rela.dyn (RELA)  {Read-only data}
0x00003508-0x00004180  .rela.plt (RELA)  {Read-only data}
0x00005000-0x0000501b  .init (PROGBITS)  {Code}
0x00005020-0x00005880  .plt (PROGBITS)  {Code}
0x00005880-0x00005890  .plt.got (PROGBITS)  {Code}
0x000058c0-0x00033813  .text (PROGBITS)  {Code}
0x00033814-0x00033821  .fini (PROGBITS)  {Code}
0x00034000-0x0003a4b9  .rodata (PROGBITS)  {Read-only data}
0x0003a4bc-0x0003ba58  .eh_frame_hdr (PROGBITS)  {Read-only data}
0x0003ba58-0x00043290  .eh_frame (PROGBITS)  {Read-only data}
0x00044bd0-0x00044bd8  .init_array  {Writable data}
0x00044bd8-0x00044be0  .fini_array  {Writable data}
0x00044be0-0x00045960  .data.rel.ro (PROGBITS)  {Read-only data}
0x00045960-0x00045b80  .dynamic (DYNAMIC)  {Read-only data}
0x00045b80-0x00045ff0  .got (PROGBITS)  {Read-only data}
0x00046000-0x000466f8  .data (PROGBITS)  {Writable data}
0x00046700-0x000476b8  .bss (NOBITS)  {Writable data}
0x000476c0-0x00047b20  .extern  {External}
0x00047b20-0x00047b48  .synthetic_builtins  {External}
*/
00000000  struct Elf64_Header __elf_header = 
00000000  {
00000000      struct Elf64_Ident ident = 
00000000      {
00000000          char signature[0x4] = "\x7fELF"
00000004          uint8_t file_class = 0x2
00000005          uint8_t encoding = 0x1
00000006          uint8_t version = 0x1
00000007          uint8_t os = 0x0
00000008          uint8_t abi_version = 0x0
00000009          char pad[0x7] = "\x00\x00\x00\x00\x00\x00", 0
00000010      }
00000010      enum e_type type = ET_DYN
00000012      enum e_machine machine = EM_X86_64
00000014      uint32_t version = 0x1
00000018      void (* entry)() = _start
00000020      uint64_t program_header_offset = 0x40
00000028      uint64_t section_header_offset = 0x52da0
00000030      uint32_t flags = 0x0
00000034      uint16_t header_size = 0x40
00000036      uint16_t program_header_size = 0x38
00000038      uint16_t program_header_count = 0xd
0000003a      uint16_t section_header_size = 0x40
0000003c      uint16_t section_header_count = 0x28
0000003e      uint16_t string_table = 0x27
00000040  }
00000040  struct Elf64_ProgramHeader __elf_program_headers[0xd] = 
00000040  {
00000040      [0x0] = 
00000040      {
00000040          enum p_type type = PT_PHDR
00000044          enum p_flags flags = PF_R
00000048          uint64_t offset = 0x40
00000050          uint64_t virtual_address = 0x40
00000058          uint64_t physical_address = 0x40
00000060          uint64_t file_size = 0x2d8
00000068          uint64_t memory_size = 0x2d8
00000070          uint64_t align = 0x8
00000078      }
00000078      [0x1] = 
00000078      {
00000078          enum p_type type = PT_INTERP
0000007c          enum p_flags flags = PF_R
00000080          uint64_t offset = 0x318
00000088          uint64_t virtual_address = 0x318
00000090          uint64_t physical_address = 0x318
00000098          uint64_t file_size = 0x1c
000000a0          uint64_t memory_size = 0x1c
000000a8          uint64_t align = 0x1
000000b0      }
000000b0      [0x2] = 
000000b0      {
000000b0          enum p_type type = PT_LOAD
000000b4          enum p_flags flags = PF_R
000000b8          uint64_t offset = 0x0
000000c0          uint64_t virtual_address = 0x0
000000c8          uint64_t physical_address = 0x0
000000d0          uint64_t file_size = 0x4180
000000d8          uint64_t memory_size = 0x4180
000000e0          uint64_t align = 0x1000
000000e8      }
000000e8      [0x3] = 
000000e8      {
000000e8          enum p_type type = PT_LOAD
000000ec          enum p_flags flags = PF_X | PF_R
000000f0          uint64_t offset = 0x5000
000000f8          uint64_t virtual_address = 0x5000
00000100          uint64_t physical_address = 0x5000
00000108          uint64_t file_size = 0x2e821
00000110          uint64_t memory_size = 0x2e821
00000118          uint64_t align = 0x1000
00000120      }
00000120      [0x4] = 
00000120      {
00000120          enum p_type type = PT_LOAD
00000124          enum p_flags flags = PF_R
00000128          uint64_t offset = 0x34000
00000130          uint64_t virtual_address = 0x34000
00000138          uint64_t physical_address = 0x34000
00000140          uint64_t file_size = 0xf290
00000148          uint64_t memory_size = 0xf290
00000150          uint64_t align = 0x1000
00000158      }
00000158      [0x5] = 
00000158      {
00000158          enum p_type type = PT_LOAD
0000015c          enum p_flags flags = PF_W | PF_R
00000160          uint64_t offset = 0x43bd0
00000168          uint64_t virtual_address = 0x44bd0
00000170          uint64_t physical_address = 0x44bd0
00000178          uint64_t file_size = 0x1b28
00000180          uint64_t memory_size = 0x2ae8
00000188          uint64_t align = 0x1000
00000190      }
00000190      [0x6] = 
00000190      {
00000190          enum p_type type = PT_DYNAMIC
00000194          enum p_flags flags = PF_W | PF_R
00000198          uint64_t offset = 0x44960
000001a0          uint64_t virtual_address = 0x45960
000001a8          uint64_t physical_address = 0x45960
000001b0          uint64_t file_size = 0x220
000001b8          uint64_t memory_size = 0x220
000001c0          uint64_t align = 0x8
000001c8      }
000001c8      [0x7] = 
000001c8      {
000001c8          enum p_type type = PT_NOTE
000001cc          enum p_flags flags = PF_R
000001d0          uint64_t offset = 0x338
000001d8          uint64_t virtual_address = 0x338
000001e0          uint64_t physical_address = 0x338
000001e8          uint64_t file_size = 0x40
000001f0          uint64_t memory_size = 0x40
000001f8          uint64_t align = 0x8
00000200      }
00000200      [0x8] = 
00000200      {
00000200          enum p_type type = PT_NOTE
00000204          enum p_flags flags = PF_R
00000208          uint64_t offset = 0x378
00000210          uint64_t virtual_address = 0x378
00000218          uint64_t physical_address = 0x378
00000220          uint64_t file_size = 0x44
00000228          uint64_t memory_size = 0x44
00000230          uint64_t align = 0x4
00000238      }
00000238      [0x9] = 
00000238      {
00000238          enum p_type type = PT_GNU_PROPERTY
0000023c          enum p_flags flags = PF_R
00000240          uint64_t offset = 0x338
00000248          uint64_t virtual_address = 0x338
00000250          uint64_t physical_address = 0x338
00000258          uint64_t file_size = 0x40
00000260          uint64_t memory_size = 0x40
00000268          uint64_t align = 0x8
00000270      }
00000270      [0xa] = 
00000270      {
00000270          enum p_type type = PT_GNU_EH_FRAME
00000274          enum p_flags flags = PF_R
00000278          uint64_t offset = 0x3a4bc
00000280          uint64_t virtual_address = 0x3a4bc
00000288          uint64_t physical_address = 0x3a4bc
00000290          uint64_t file_size = 0x159c
00000298          uint64_t memory_size = 0x159c
000002a0          uint64_t align = 0x4
000002a8      }
000002a8      [0xb] = 
000002a8      {
000002a8          enum p_type type = PT_GNU_STACK
000002ac          enum p_flags flags = PF_W | PF_R
000002b0          uint64_t offset = 0x0
000002b8          uint64_t virtual_address = 0x0
000002c0          uint64_t physical_address = 0x0
000002c8          uint64_t file_size = 0x0
000002d0          uint64_t memory_size = 0x0
000002d8          uint64_t align = 0x10
000002e0      }
000002e0      [0xc] = 
000002e0      {
000002e0          enum p_type type = PT_GNU_RELRO
000002e4          enum p_flags flags = PF_R
000002e8          uint64_t offset = 0x43bd0
000002f0          uint64_t virtual_address = 0x44bd0
000002f8          uint64_t physical_address = 0x44bd0
00000300          uint64_t file_size = 0x1430
00000308          uint64_t memory_size = 0x1430
00000310          uint64_t align = 0x1
00000318      }
00000318  }

.interp (PROGBITS) section started  {0x318-0x334}
00000318  char __elf_interp[0x1c] = "/lib64/ld-linux-x86-64.so.2", 0
.interp (PROGBITS) section ended  {0x318-0x334}

00000334                                                              00 00 00 00                                              ....

.note.gnu.property (NOTE) section started  {0x338-0x378}
00000338                                                                          04 00 00 00 30 00 00 00                          ....0...
00000340  05 00 00 00 47 4e 55 00 02 80 00 c0 04 00 00 00 01 00 00 00 00 00 00 00 01 00 01 c0 04 00 00 00  ....GNU.........................
00000360  09 00 00 00 00 00 00 00 02 00 01 c0 04 00 00 00 01 00 00 00 00 00 00 00                          ........................
.note.gnu.property (NOTE) section ended  {0x338-0x378}

.note.ABI-tag (NOTE) section started  {0x378-0x398}
00000378  struct const __abi_tag = 
00000378  {
00000378      struct nhdr = 
00000378      {
00000378          unsigned int n_namesz = 0x4
0000037c          unsigned int n_descsz = 0x10
00000380          unsigned int n_type = 0x1
00000384      }
00000384      char name[0x4] = "GNU", 0
00000388      int desc[0x4] = 
00000388      {
00000388          [0x0] =  0x00000000
0000038c          [0x1] =  0x00000004
00000390          [0x2] =  0x00000003
00000394          [0x3] =  0x00000000
00000398      }
00000398  }
.note.ABI-tag (NOTE) section ended  {0x378-0x398}

.note.gnu.build-id (NOTE) section started  {0x398-0x3bc}
00000398                                                                          04 00 00 00 14 00 00 00                          ........
000003a0  03 00 00 00 47 4e 55 00 9f 85 c2 23 23 c3 3b 40 40 4c 9e fc 4f 0f a9 1c 3b c4 3a 00              ....GNU....##.;@@L..O...;.:.
.note.gnu.build-id (NOTE) section ended  {0x398-0x3bc}

000003bc                                                                                      00 00 00 00                              ....

.hash (HASH) section started  {0x3c0-0x810}
000003c0  struct Elf_HashTable __elf_hash_table = 
000003c0  {
000003c0      uint32_t nbucket = 0x83
000003c4      uint32_t nchain = 0x8f
000003c8      uint32_t buckets[0x83] = 
000003c8      {
000003c8          [0x00] =  0x00000000
000003cc          [0x01] =  0x00000063
000003d0          [0x02] =  0x00000008
000003d4          [0x03] =  0x00000084
000003d8          [0x04] =  0x0000000a
000003dc          [0x05] =  0x00000000
000003e0          [0x06] =  0x00000000
000003e4          [0x07] =  0x00000000
000003e8          [0x08] =  0x0000005a
000003ec          [0x09] =  0x0000004f
000003f0          [0x0a] =  0x00000046
000003f4          [0x0b] =  0x00000047
000003f8          [0x0c] =  0x00000064
000003fc          [0x0d] =  0x00000071
00000400          [0x0e] =  0x00000020
00000404          [0x0f] =  0x00000025
00000408          [0x10] =  0x0000002e
0000040c          [0x11] =  0x00000000
00000410          [0x12] =  0x00000004
00000414          [0x13] =  0x00000054
00000418          [0x14] =  0x00000000
0000041c          [0x15] =  0x00000000
00000420          [0x16] =  0x00000000
00000424          [0x17] =  0x0000003f
00000428          [0x18] =  0x00000083
0000042c          [0x19] =  0x00000000
00000430          [0x1a] =  0x00000076
00000434          [0x1b] =  0x00000000
00000438          [0x1c] =  0x0000004a
0000043c          [0x1d] =  0x00000000
00000440          [0x1e] =  0x00000000
00000444          [0x1f] =  0x00000002
00000448          [0x20] =  0x00000000
0000044c          [0x21] =  0x00000060
00000450          [0x22] =  0x00000000
00000454          [0x23] =  0x00000067
00000458          [0x24] =  0x00000000
0000045c          [0x25] =  0x00000074
00000460          [0x26] =  0x0000008c
00000464          [0x27] =  0x00000075
00000468          [0x28] =  0x0000005f
0000046c          [0x29] =  0x00000057
00000470          [0x2a] =  0x00000061
00000474          [0x2b] =  0x00000077
00000478          [0x2c] =  0x00000056
0000047c          [0x2d] =  0x00000001
00000480          [0x2e] =  0x00000000
00000484          [0x2f] =  0x00000072
00000488          [0x30] =  0x00000000
0000048c          [0x31] =  0x00000000
00000490          [0x32] =  0x00000089
00000494          [0x33] =  0x0000005b
00000498          [0x34] =  0x00000048
0000049c          [0x35] =  0x00000066
000004a0          [0x36] =  0x0000008e
000004a4          [0x37] =  0x00000023
000004a8          [0x38] =  0x0000006e
000004ac          [0x39] =  0x00000015
000004b0          [0x3a] =  0x0000003b
000004b4          [0x3b] =  0x00000000
000004b8          [0x3c] =  0x00000006
000004bc          [0x3d] =  0x0000007a
000004c0          [0x3e] =  0x00000082
000004c4          [0x3f] =  0x00000000
000004c8          [0x40] =  0x0000007f
000004cc          [0x41] =  0x00000059
000004d0          [0x42] =  0x00000052
000004d4          [0x43] =  0x00000000
000004d8          [0x44] =  0x00000000
000004dc          [0x45] =  0x00000045
000004e0          [0x46] =  0x00000080
000004e4          [0x47] =  0x00000011
000004e8          [0x48] =  0x00000000
000004ec          [0x49] =  0x0000006c
000004f0          [0x4a] =  0x00000044
000004f4          [0x4b] =  0x00000062
000004f8          [0x4c] =  0x00000068
000004fc          [0x4d] =  0x00000000
00000500          [0x4e] =  0x00000000
00000504          [0x4f] =  0x0000007c
00000508          [0x50] =  0x00000053
0000050c          [0x51] =  0x00000041
00000510          [0x52] =  0x0000007d
00000514          [0x53] =  0x00000000
00000518          [0x54] =  0x00000031
0000051c          [0x55] =  0x00000000
00000520          [0x56] =  0x00000042
00000524          [0x57] =  0x0000004b
00000528          [0x58] =  0x00000018
0000052c          [0x59] =  0x00000065
00000530          [0x5a] =  0x00000081
00000534          [0x5b] =  0x0000004c
00000538          [0x5c] =  0x00000087
0000053c          [0x5d] =  0x00000000
00000540          [0x5e] =  0x00000037
00000544          [0x5f] =  0x0000008b
00000548          [0x60] =  0x00000070
0000054c          [0x61] =  0x00000058
00000550          [0x62] =  0x00000021
00000554          [0x63] =  0x00000000
00000558          [0x64] =  0x00000000
0000055c          [0x65] =  0x0000006b
00000560          [0x66] =  0x00000078
00000564          [0x67] =  0x00000000
00000568          [0x68] =  0x0000004e
0000056c          [0x69] =  0x00000000
00000570          [0x6a] =  0x00000005
00000574          [0x6b] =  0x00000000
00000578          [0x6c] =  0x00000000
0000057c          [0x6d] =  0x0000008a
00000580          [0x6e] =  0x0000008d
00000584          [0x6f] =  0x00000033
00000588          [0x70] =  0x0000005e
0000058c          [0x71] =  0x00000022
00000590          [0x72] =  0x00000000
00000594          [0x73] =  0x00000038
00000598          [0x74] =  0x00000019
0000059c          [0x75] =  0x00000086
000005a0          [0x76] =  0x00000000
000005a4          [0x77] =  0x00000085
000005a8          [0x78] =  0x00000036
000005ac          [0x79] =  0x00000088
000005b0          [0x7a] =  0x0000007e
000005b4          [0x7b] =  0x00000079
000005b8          [0x7c] =  0x00000000
000005bc          [0x7d] =  0x0000000f
000005c0          [0x7e] =  0x00000073
000005c4          [0x7f] =  0x00000032
000005c8          [0x80] =  0x00000000
000005cc          [0x81] =  0x0000006d
000005d0          [0x82] =  0x00000000
000005d4      }
000005d4      uint32_t chains[0x8f] = 
000005d4      {
000005d4          [0x00] =  0x00000000
000005d8          [0x01] =  0x00000000
000005dc          [0x02] =  0x00000000
000005e0          [0x03] =  0x00000000
000005e4          [0x04] =  0x00000000
000005e8          [0x05] =  0x00000000
000005ec          [0x06] =  0x00000000
000005f0          [0x07] =  0x00000000
000005f4          [0x08] =  0x00000000
000005f8          [0x09] =  0x00000000
000005fc          [0x0a] =  0x00000000
00000600          [0x0b] =  0x00000000
00000604          [0x0c] =  0x0000000b
00000608          [0x0d] =  0x00000000
0000060c          [0x0e] =  0x00000000
00000610          [0x0f] =  0x00000000
00000614          [0x10] =  0x00000000
00000618          [0x11] =  0x00000000
0000061c          [0x12] =  0x00000000
00000620          [0x13] =  0x00000000
00000624          [0x14] =  0x00000000
00000628          [0x15] =  0x00000000
0000062c          [0x16] =  0x00000000
00000630          [0x17] =  0x00000000
00000634          [0x18] =  0x00000000
00000638          [0x19] =  0x00000000
0000063c          [0x1a] =  0x00000000
00000640          [0x1b] =  0x00000000
00000644          [0x1c] =  0x00000000
00000648          [0x1d] =  0x00000000
0000064c          [0x1e] =  0x00000007
00000650          [0x1f] =  0x00000000
00000654          [0x20] =  0x00000000
00000658          [0x21] =  0x00000000
0000065c          [0x22] =  0x00000000
00000660          [0x23] =  0x00000000
00000664          [0x24] =  0x00000000
00000668          [0x25] =  0x00000000
0000066c          [0x26] =  0x00000024
00000670          [0x27] =  0x00000009
00000674          [0x28] =  0x00000000
00000678          [0x29] =  0x00000000
0000067c          [0x2a] =  0x00000000
00000680          [0x2b] =  0x00000000
00000684          [0x2c] =  0x00000016
00000688          [0x2d] =  0x0000001c
0000068c          [0x2e] =  0x00000000
00000690          [0x2f] =  0x00000000
00000694          [0x30] =  0x00000000
00000698          [0x31] =  0x0000002d
0000069c          [0x32] =  0x00000027
000006a0          [0x33] =  0x00000000
000006a4          [0x34] =  0x00000000
000006a8          [0x35] =  0x0000001e
000006ac          [0x36] =  0x00000000
000006b0          [0x37] =  0x00000000
000006b4          [0x38] =  0x0000002b
000006b8          [0x39] =  0x00000017
000006bc          [0x3a] =  0x00000000
000006c0          [0x3b] =  0x00000000
000006c4          [0x3c] =  0x00000000
000006c8          [0x3d] =  0x00000000
000006cc          [0x3e] =  0x0000001a
000006d0          [0x3f] =  0x00000000
000006d4          [0x40] =  0x00000000
000006d8          [0x41] =  0x00000000
000006dc          [0x42] =  0x00000010
000006e0          [0x43] =  0x00000000
000006e4          [0x44] =  0x00000035
000006e8          [0x45] =  0x00000000
000006ec          [0x46] =  0x00000000
000006f0          [0x47] =  0x00000003
000006f4          [0x48] =  0x00000000
000006f8          [0x49] =  0x00000000
000006fc          [0x4a] =  0x0000001f
00000700          [0x4b] =  0x00000000
00000704          [0x4c] =  0x00000000
00000708          [0x4d] =  0x00000000
0000070c          [0x4e] =  0x00000034
00000710          [0x4f] =  0x00000028
00000714          [0x50] =  0x0000001d
00000718          [0x51] =  0x00000000
0000071c          [0x52] =  0x00000000
00000720          [0x53] =  0x0000002c
00000724          [0x54] =  0x00000049
00000728          [0x55] =  0x00000000
0000072c          [0x56] =  0x00000051
00000730          [0x57] =  0x00000040
00000734          [0x58] =  0x00000000
00000738          [0x59] =  0x00000000
0000073c          [0x5a] =  0x00000014
00000740          [0x5b] =  0x00000000
00000744          [0x5c] =  0x00000000
00000748          [0x5d] =  0x0000003e
0000074c          [0x5e] =  0x00000000
00000750          [0x5f] =  0x0000000d
00000754          [0x60] =  0x0000004d
00000758          [0x61] =  0x00000000
0000075c          [0x62] =  0x00000012
00000760          [0x63] =  0x00000000
00000764          [0x64] =  0x00000039
00000768          [0x65] =  0x00000000
0000076c          [0x66] =  0x0000003d
00000770          [0x67] =  0x00000050
00000774          [0x68] =  0x00000000
00000778          [0x69] =  0x00000000
0000077c          [0x6a] =  0x00000000
00000780          [0x6b] =  0x00000000
00000784          [0x6c] =  0x00000000
00000788          [0x6d] =  0x0000000e
0000078c          [0x6e] =  0x00000000
00000790          [0x6f] =  0x00000000
00000794          [0x70] =  0x00000000
00000798          [0x71] =  0x0000002f
0000079c          [0x72] =  0x00000000
000007a0          [0x73] =  0x00000000
000007a4          [0x74] =  0x0000005d
000007a8          [0x75] =  0x0000006a
000007ac          [0x76] =  0x00000000
000007b0          [0x77] =  0x0000000c
000007b4          [0x78] =  0x0000003c
000007b8          [0x79] =  0x00000000
000007bc          [0x7a] =  0x00000000
000007c0          [0x7b] =  0x00000029
000007c4          [0x7c] =  0x00000000
000007c8          [0x7d] =  0x00000000
000007cc          [0x7e] =  0x0000002a
000007d0          [0x7f] =  0x00000013
000007d4          [0x80] =  0x00000000
000007d8          [0x81] =  0x0000007b
000007dc          [0x82] =  0x00000043
000007e0          [0x83] =  0x0000003a
000007e4          [0x84] =  0x00000026
000007e8          [0x85] =  0x00000030
000007ec          [0x86] =  0x00000055
000007f0          [0x87] =  0x0000006f
000007f4          [0x88] =  0x0000001b
000007f8          [0x89] =  0x0000005c
000007fc          [0x8a] =  0x00000000
00000800          [0x8b] =  0x00000000
00000804          [0x8c] =  0x00000000
00000808          [0x8d] =  0x00000000
0000080c          [0x8e] =  0x00000069
00000810      }
00000810  }
.hash (HASH) section ended  {0x3c0-0x810}

.gnu.hash section started  {0x810-0x848}
00000810                                                  03 00 00 00 8a 00 00 00 01 00 00 00 06 00 00 00                  ................
00000820  10 01 a1 00 c0 00 40 02 8a 00 00 00 8c 00 00 00 00 00 00 00 a6 dd a3 6b d1 65 ce 6d 50 b5 a8 10  ......@................k.e.mP...
00000840  c4 b9 9c 40 39 f2 8b 1c                                                                          ...@9...
.gnu.hash section ended  {0x810-0x848}

.dynsym (DYNSYM) section started  {0x848-0x15b0}
00000848  struct Elf64_Sym __elf_symbol_table[0x8f] = 
00000848  {
00000848      [0x00] = 
00000848      {
00000848          uint32_t st_name = 0x0
0000084c          uint8_t st_info = 0x0
0000084d          uint8_t st_other = 0x0
0000084e          uint16_t st_shndx = 0x0
00000850          uint64_t st_value = 0x0
00000858          uint64_t st_size = 0x0
00000860      }
00000860      [0x01] = 
00000860      {
00000860          uint32_t st_name = 0x3a5
00000864          uint8_t st_info = 0x12
00000865          uint8_t st_other = 0x0
00000866          uint16_t st_shndx = 0x0
00000868          uint64_t st_value = 0x0
00000870          uint64_t st_size = 0x0
00000878      }
00000878      [0x02] = 
00000878      {
00000878          uint32_t st_name = 0x3db
0000087c          uint8_t st_info = 0x12
0000087d          uint8_t st_other = 0x0
0000087e          uint16_t st_shndx = 0x0
00000880          uint64_t st_value = 0x0
00000888          uint64_t st_size = 0x0
00000890      }
00000890      [0x03] = 
00000890      {
00000890          uint32_t st_name = 0x43b
00000894          uint8_t st_info = 0x12
00000895          uint8_t st_other = 0x0
00000896          uint16_t st_shndx = 0x0
00000898          uint64_t st_value = 0x0
000008a0          uint64_t st_size = 0x0
000008a8      }
000008a8      [0x04] = 
000008a8      {
000008a8          uint32_t st_name = 0x102
000008ac          uint8_t st_info = 0x12
000008ad          uint8_t st_other = 0x0
000008ae          uint16_t st_shndx = 0x0
000008b0          uint64_t st_value = 0x0
000008b8          uint64_t st_size = 0x0
000008c0      }
000008c0      [0x05] = 
000008c0      {
000008c0          uint32_t st_name = 0x369
000008c4          uint8_t st_info = 0x12
000008c5          uint8_t st_other = 0x0
000008c6          uint16_t st_shndx = 0x0
000008c8          uint64_t st_value = 0x0
000008d0          uint64_t st_size = 0x0
000008d8      }
000008d8      [0x06] = 
000008d8      {
000008d8          uint32_t st_name = 0x2fd
000008dc          uint8_t st_info = 0x12
000008dd          uint8_t st_other = 0x0
000008de          uint16_t st_shndx = 0x0
000008e0          uint64_t st_value = 0x0
000008e8          uint64_t st_size = 0x0
000008f0      }
000008f0      [0x07] = 
000008f0      {
000008f0          uint32_t st_name = 0x4ab
000008f4          uint8_t st_info = 0x12
000008f5          uint8_t st_other = 0x0
000008f6          uint16_t st_shndx = 0x0
000008f8          uint64_t st_value = 0x0
00000900          uint64_t st_size = 0x0
00000908      }
00000908      [0x08] = 
00000908      {
00000908          uint32_t st_name = 0x492
0000090c          uint8_t st_info = 0x12
0000090d          uint8_t st_other = 0x0
0000090e          uint16_t st_shndx = 0x0
00000910          uint64_t st_value = 0x0
00000918          uint64_t st_size = 0x0
00000920      }
00000920      [0x09] = 
00000920      {
00000920          uint32_t st_name = 0x1c0
00000924          uint8_t st_info = 0x12
00000925          uint8_t st_other = 0x0
00000926          uint16_t st_shndx = 0x0
00000928          uint64_t st_value = 0x0
00000930          uint64_t st_size = 0x0
00000938      }
00000938      [0x0a] = 
00000938      {
00000938          uint32_t st_name = 0xc7
0000093c          uint8_t st_info = 0x12
0000093d          uint8_t st_other = 0x0
0000093e          uint16_t st_shndx = 0x0
00000940          uint64_t st_value = 0x0
00000948          uint64_t st_size = 0x0
00000950      }
00000950      [0x0b] = 
00000950      {
00000950          uint32_t st_name = 0x4c6
00000954          uint8_t st_info = 0x12
00000955          uint8_t st_other = 0x0
00000956          uint16_t st_shndx = 0x0
00000958          uint64_t st_value = 0x0
00000960          uint64_t st_size = 0x0
00000968      }
00000968      [0x0c] = 
00000968      {
00000968          uint32_t st_name = 0x1
0000096c          uint8_t st_info = 0x20
0000096d          uint8_t st_other = 0x0
0000096e          uint16_t st_shndx = 0x0
00000970          uint64_t st_value = 0x0
00000978          uint64_t st_size = 0x0
00000980      }
00000980      [0x0d] = 
00000980      {
00000980          uint32_t st_name = 0x2a6
00000984          uint8_t st_info = 0x12
00000985          uint8_t st_other = 0x0
00000986          uint16_t st_shndx = 0x0
00000988          uint64_t st_value = 0x0
00000990          uint64_t st_size = 0x0
00000998      }
00000998      [0x0e] = 
00000998      {
00000998          uint32_t st_name = 0x263
0000099c          uint8_t st_info = 0x12
0000099d          uint8_t st_other = 0x0
0000099e          uint16_t st_shndx = 0x0
000009a0          uint64_t st_value = 0x0
000009a8          uint64_t st_size = 0x0
000009b0      }
000009b0      [0x0f] = 
000009b0      {
000009b0          uint32_t st_name = 0x66
000009b4          uint8_t st_info = 0x12
000009b5          uint8_t st_other = 0x0
000009b6          uint16_t st_shndx = 0x0
000009b8          uint64_t st_value = 0x0
000009c0          uint64_t st_size = 0x0
000009c8      }
000009c8      [0x10] = 
000009c8      {
000009c8          uint32_t st_name = 0x26a
000009cc          uint8_t st_info = 0x12
000009cd          uint8_t st_other = 0x0
000009ce          uint16_t st_shndx = 0x0
000009d0          uint64_t st_value = 0x0
000009d8          uint64_t st_size = 0x0
000009e0      }
000009e0      [0x11] = 
000009e0      {
000009e0          uint32_t st_name = 0x9d
000009e4          uint8_t st_info = 0x12
000009e5          uint8_t st_other = 0x0
000009e6          uint16_t st_shndx = 0x0
000009e8          uint64_t st_value = 0x0
000009f0          uint64_t st_size = 0x0
000009f8      }
000009f8      [0x12] = 
000009f8      {
000009f8          uint32_t st_name = 0x17e
000009fc          uint8_t st_info = 0x12
000009fd          uint8_t st_other = 0x0
000009fe          uint16_t st_shndx = 0x0
00000a00          uint64_t st_value = 0x0
00000a08          uint64_t st_size = 0x0
00000a10      }
00000a10      [0x13] = 
00000a10      {
00000a10          uint32_t st_name = 0x191
00000a14          uint8_t st_info = 0x12
00000a15          uint8_t st_other = 0x0
00000a16          uint16_t st_shndx = 0x0
00000a18          uint64_t st_value = 0x0
00000a20          uint64_t st_size = 0x0
00000a28      }
00000a28      [0x14] = 
00000a28      {
00000a28          uint32_t st_name = 0xa4
00000a2c          uint8_t st_info = 0x12
00000a2d          uint8_t st_other = 0x0
00000a2e          uint16_t st_shndx = 0x0
00000a30          uint64_t st_value = 0x0
00000a38          uint64_t st_size = 0x0
00000a40      }
00000a40      [0x15] = 
00000a40      {
00000a40          uint32_t st_name = 0x199
00000a44          uint8_t st_info = 0x12
00000a45          uint8_t st_other = 0x0
00000a46          uint16_t st_shndx = 0x0
00000a48          uint64_t st_value = 0x0
00000a50          uint64_t st_size = 0x0
00000a58      }
00000a58      [0x16] = 
00000a58      {
00000a58          uint32_t st_name = 0xd6
00000a5c          uint8_t st_info = 0x12
00000a5d          uint8_t st_other = 0x0
00000a5e          uint16_t st_shndx = 0x0
00000a60          uint64_t st_value = 0x0
00000a68          uint64_t st_size = 0x0
00000a70      }
00000a70      [0x17] = 
00000a70      {
00000a70          uint32_t st_name = 0x285
00000a74          uint8_t st_info = 0x12
00000a75          uint8_t st_other = 0x0
00000a76          uint16_t st_shndx = 0x0
00000a78          uint64_t st_value = 0x0
00000a80          uint64_t st_size = 0x0
00000a88      }
00000a88      [0x18] = 
00000a88      {
00000a88          uint32_t st_name = 0xbb
00000a8c          uint8_t st_info = 0x12
00000a8d          uint8_t st_other = 0x0
00000a8e          uint16_t st_shndx = 0x0
00000a90          uint64_t st_value = 0x0
00000a98          uint64_t st_size = 0x0
00000aa0      }
00000aa0      [0x19] = 
00000aa0      {
00000aa0          uint32_t st_name = 0x1c7
00000aa4          uint8_t st_info = 0x12
00000aa5          uint8_t st_other = 0x0
00000aa6          uint16_t st_shndx = 0x0
00000aa8          uint64_t st_value = 0x0
00000ab0          uint64_t st_size = 0x0
00000ab8      }
00000ab8      [0x1a] = 
00000ab8      {
00000ab8          uint32_t st_name = 0x3c7
00000abc          uint8_t st_info = 0x12
00000abd          uint8_t st_other = 0x0
00000abe          uint16_t st_shndx = 0x0
00000ac0          uint64_t st_value = 0x0
00000ac8          uint64_t st_size = 0x0
00000ad0      }
00000ad0      [0x1b] = 
00000ad0      {
00000ad0          uint32_t st_name = 0x20f
00000ad4          uint8_t st_info = 0x12
00000ad5          uint8_t st_other = 0x0
00000ad6          uint16_t st_shndx = 0x0
00000ad8          uint64_t st_value = 0x0
00000ae0          uint64_t st_size = 0x0
00000ae8      }
00000ae8      [0x1c] = 
00000ae8      {
00000ae8          uint32_t st_name = 0x14a
00000aec          uint8_t st_info = 0x12
00000aed          uint8_t st_other = 0x0
00000aee          uint16_t st_shndx = 0x0
00000af0          uint64_t st_value = 0x0
00000af8          uint64_t st_size = 0x0
00000b00      }
00000b00      [0x1d] = 
00000b00      {
00000b00          uint32_t st_name = 0x2e3
00000b04          uint8_t st_info = 0x12
00000b05          uint8_t st_other = 0x0
00000b06          uint16_t st_shndx = 0x0
00000b08          uint64_t st_value = 0x0
00000b10          uint64_t st_size = 0x0
00000b18      }
00000b18      [0x1e] = 
00000b18      {
00000b18          uint32_t st_name = 0x24b
00000b1c          uint8_t st_info = 0x12
00000b1d          uint8_t st_other = 0x0
00000b1e          uint16_t st_shndx = 0x0
00000b20          uint64_t st_value = 0x0
00000b28          uint64_t st_size = 0x0
00000b30      }
00000b30      [0x1f] = 
00000b30      {
00000b30          uint32_t st_name = 0x22d
00000b34          uint8_t st_info = 0x12
00000b35          uint8_t st_other = 0x0
00000b36          uint16_t st_shndx = 0x0
00000b38          uint64_t st_value = 0x0
00000b40          uint64_t st_size = 0x0
00000b48      }
00000b48      [0x20] = 
00000b48      {
00000b48          uint32_t st_name = 0x111
00000b4c          uint8_t st_info = 0x12
00000b4d          uint8_t st_other = 0x0
00000b4e          uint16_t st_shndx = 0x0
00000b50          uint64_t st_value = 0x0
00000b58          uint64_t st_size = 0x0
00000b60      }
00000b60      [0x21] = 
00000b60      {
00000b60          uint32_t st_name = 0xf1
00000b64          uint8_t st_info = 0x12
00000b65          uint8_t st_other = 0x0
00000b66          uint16_t st_shndx = 0x0
00000b68          uint64_t st_value = 0x0
00000b70          uint64_t st_size = 0x0
00000b78      }
00000b78      [0x22] = 
00000b78      {
00000b78          uint32_t st_name = 0x44a
00000b7c          uint8_t st_info = 0x12
00000b7d          uint8_t st_other = 0x0
00000b7e          uint16_t st_shndx = 0x0
00000b80          uint64_t st_value = 0x0
00000b88          uint64_t st_size = 0x0
00000b90      }
00000b90      [0x23] = 
00000b90      {
00000b90          uint32_t st_name = 0x280
00000b94          uint8_t st_info = 0x12
00000b95          uint8_t st_other = 0x0
00000b96          uint16_t st_shndx = 0x0
00000b98          uint64_t st_value = 0x0
00000ba0          uint64_t st_size = 0x0
00000ba8      }
00000ba8      [0x24] = 
00000ba8      {
00000ba8          uint32_t st_name = 0x37a
00000bac          uint8_t st_info = 0x12
00000bad          uint8_t st_other = 0x0
00000bae          uint16_t st_shndx = 0x0
00000bb0          uint64_t st_value = 0x0
00000bb8          uint64_t st_size = 0x0
00000bc0      }
00000bc0      [0x25] = 
00000bc0      {
00000bc0          uint32_t st_name = 0x130
00000bc4          uint8_t st_info = 0x12
00000bc5          uint8_t st_other = 0x0
00000bc6          uint16_t st_shndx = 0x0
00000bc8          uint64_t st_value = 0x0
00000bd0          uint64_t st_size = 0x0
00000bd8      }
00000bd8      [0x26] = 
00000bd8      {
00000bd8          uint32_t st_name = 0x93
00000bdc          uint8_t st_info = 0x12
00000bdd          uint8_t st_other = 0x0
00000bde          uint16_t st_shndx = 0x0
00000be0          uint64_t st_value = 0x0
00000be8          uint64_t st_size = 0x0
00000bf0      }
00000bf0      [0x27] = 
00000bf0      {
00000bf0          uint32_t st_name = 0x42e
00000bf4          uint8_t st_info = 0x12
00000bf5          uint8_t st_other = 0x0
00000bf6          uint16_t st_shndx = 0x0
00000bf8          uint64_t st_value = 0x0
00000c00          uint64_t st_size = 0x0
00000c08      }
00000c08      [0x28] = 
00000c08      {
00000c08          uint32_t st_name = 0x1b8
00000c0c          uint8_t st_info = 0x12
00000c0d          uint8_t st_other = 0x0
00000c0e          uint16_t st_shndx = 0x0
00000c10          uint64_t st_value = 0x0
00000c18          uint64_t st_size = 0x0
00000c20      }
00000c20      [0x29] = 
00000c20      {
00000c20          uint32_t st_name = 0x21d
00000c24          uint8_t st_info = 0x12
00000c25          uint8_t st_other = 0x0
00000c26          uint16_t st_shndx = 0x0
00000c28          uint64_t st_value = 0x0
00000c30          uint64_t st_size = 0x0
00000c38      }
00000c38      [0x2a] = 
00000c38      {
00000c38          uint32_t st_name = 0x4c0
00000c3c          uint8_t st_info = 0x12
00000c3d          uint8_t st_other = 0x0
00000c3e          uint16_t st_shndx = 0x0
00000c40          uint64_t st_value = 0x0
00000c48          uint64_t st_size = 0x0
00000c50      }
00000c50      [0x2b] = 
00000c50      {
00000c50          uint32_t st_name = 0x1d5
00000c54          uint8_t st_info = 0x12
00000c55          uint8_t st_other = 0x0
00000c56          uint16_t st_shndx = 0x0
00000c58          uint64_t st_value = 0x0
00000c60          uint64_t st_size = 0x0
00000c68      }
00000c68      [0x2c] = 
00000c68      {
00000c68          uint32_t st_name = 0x13c
00000c6c          uint8_t st_info = 0x12
00000c6d          uint8_t st_other = 0x0
00000c6e          uint16_t st_shndx = 0x0
00000c70          uint64_t st_value = 0x0
00000c78          uint64_t st_size = 0x0
00000c80      }
00000c80      [0x2d] = 
00000c80      {
00000c80          uint32_t st_name = 0x411
00000c84          uint8_t st_info = 0x12
00000c85          uint8_t st_other = 0x0
00000c86          uint16_t st_shndx = 0x0
00000c88          uint64_t st_value = 0x0
00000c90          uint64_t st_size = 0x0
00000c98      }
00000c98      [0x2e] = 
00000c98      {
00000c98          uint32_t st_name = 0x51
00000c9c          uint8_t st_info = 0x12
00000c9d          uint8_t st_other = 0x0
00000c9e          uint16_t st_shndx = 0x0
00000ca0          uint64_t st_value = 0x0
00000ca8          uint64_t st_size = 0x0
00000cb0      }
00000cb0      [0x2f] = 
00000cb0      {
00000cb0          uint32_t st_name = 0x3d4
00000cb4          uint8_t st_info = 0x12
00000cb5          uint8_t st_other = 0x0
00000cb6          uint16_t st_shndx = 0x0
00000cb8          uint64_t st_value = 0x0
00000cc0          uint64_t st_size = 0x0
00000cc8      }
00000cc8      [0x30] = 
00000cc8      {
00000cc8          uint32_t st_name = 0x4ce
00000ccc          uint8_t st_info = 0x12
00000ccd          uint8_t st_other = 0x0
00000cce          uint16_t st_shndx = 0x0
00000cd0          uint64_t st_value = 0x0
00000cd8          uint64_t st_size = 0x0
00000ce0      }
00000ce0      [0x31] = 
00000ce0      {
00000ce0          uint32_t st_name = 0x1a4
00000ce4          uint8_t st_info = 0x12
00000ce5          uint8_t st_other = 0x0
00000ce6          uint16_t st_shndx = 0x0
00000ce8          uint64_t st_value = 0x0
00000cf0          uint64_t st_size = 0x0
00000cf8      }
00000cf8      [0x32] = 
00000cf8      {
00000cf8          uint32_t st_name = 0x3ec
00000cfc          uint8_t st_info = 0x12
00000cfd          uint8_t st_other = 0x0
00000cfe          uint16_t st_shndx = 0x0
00000d00          uint64_t st_value = 0x0
00000d08          uint64_t st_size = 0x0
00000d10      }
00000d10      [0x33] = 
00000d10      {
00000d10          uint32_t st_name = 0x8d
00000d14          uint8_t st_info = 0x12
00000d15          uint8_t st_other = 0x0
00000d16          uint16_t st_shndx = 0x0
00000d18          uint64_t st_value = 0x0
00000d20          uint64_t st_size = 0x0
00000d28      }
00000d28      [0x34] = 
00000d28      {
00000d28          uint32_t st_name = 0x3c8
00000d2c          uint8_t st_info = 0x12
00000d2d          uint8_t st_other = 0x0
00000d2e          uint16_t st_shndx = 0x0
00000d30          uint64_t st_value = 0x0
00000d38          uint64_t st_size = 0x0
00000d40      }
00000d40      [0x35] = 
00000d40      {
00000d40          uint32_t st_name = 0x4bb
00000d44          uint8_t st_info = 0x12
00000d45          uint8_t st_other = 0x0
00000d46          uint16_t st_shndx = 0x0
00000d48          uint64_t st_value = 0x0
00000d50          uint64_t st_size = 0x0
00000d58      }
00000d58      [0x36] = 
00000d58      {
00000d58          uint32_t st_name = 0x29a
00000d5c          uint8_t st_info = 0x12
00000d5d          uint8_t st_other = 0x0
00000d5e          uint16_t st_shndx = 0x0
00000d60          uint64_t st_value = 0x0
00000d68          uint64_t st_size = 0x0
00000d70      }
00000d70      [0x37] = 
00000d70      {
00000d70          uint32_t st_name = 0xcf
00000d74          uint8_t st_info = 0x12
00000d75          uint8_t st_other = 0x0
00000d76          uint16_t st_shndx = 0x0
00000d78          uint64_t st_value = 0x0
00000d80          uint64_t st_size = 0x0
00000d88      }
00000d88      [0x38] = 
00000d88      {
00000d88          uint32_t st_name = 0x171
00000d8c          uint8_t st_info = 0x12
00000d8d          uint8_t st_other = 0x0
00000d8e          uint16_t st_shndx = 0x0
00000d90          uint64_t st_value = 0x0
00000d98          uint64_t st_size = 0x0
00000da0      }
00000da0      [0x39] = 
00000da0      {
00000da0          uint32_t st_name = 0x6e
00000da4          uint8_t st_info = 0x12
00000da5          uint8_t st_other = 0x0
00000da6          uint16_t st_shndx = 0x0
00000da8          uint64_t st_value = 0x0
00000db0          uint64_t st_size = 0x0
00000db8      }
00000db8      [0x3a] = 
00000db8      {
00000db8          uint32_t st_name = 0x323
00000dbc          uint8_t st_info = 0x12
00000dbd          uint8_t st_other = 0x0
00000dbe          uint16_t st_shndx = 0x0
00000dc0          uint64_t st_value = 0x0
00000dc8          uint64_t st_size = 0x0
00000dd0      }
00000dd0      [0x3b] = 
00000dd0      {
00000dd0          uint32_t st_name = 0x251
00000dd4          uint8_t st_info = 0x12
00000dd5          uint8_t st_other = 0x0
00000dd6          uint16_t st_shndx = 0x0
00000dd8          uint64_t st_value = 0x0
00000de0          uint64_t st_size = 0x0
00000de8      }
00000de8      [0x3c] = 
00000de8      {
00000de8          uint32_t st_name = 0x3c0
00000dec          uint8_t st_info = 0x12
00000ded          uint8_t st_other = 0x0
00000dee          uint16_t st_shndx = 0x0
00000df0          uint64_t st_value = 0x0
00000df8          uint64_t st_size = 0x0
00000e00      }
00000e00      [0x3d] = 
00000e00      {
00000e00          uint32_t st_name = 0x39a
00000e04          uint8_t st_info = 0x12
00000e05          uint8_t st_other = 0x0
00000e06          uint16_t st_shndx = 0x0
00000e08          uint64_t st_value = 0x0
00000e10          uint64_t st_size = 0x0
00000e18      }
00000e18      [0x3e] = 
00000e18      {
00000e18          uint32_t st_name = 0x3ce
00000e1c          uint8_t st_info = 0x12
00000e1d          uint8_t st_other = 0x0
00000e1e          uint16_t st_shndx = 0x0
00000e20          uint64_t st_value = 0x0
00000e28          uint64_t st_size = 0x0
00000e30      }
00000e30      [0x3f] = 
00000e30      {
00000e30          uint32_t st_name = 0x3ac
00000e34          uint8_t st_info = 0x12
00000e35          uint8_t st_other = 0x0
00000e36          uint16_t st_shndx = 0x0
00000e38          uint64_t st_value = 0x0
00000e40          uint64_t st_size = 0x0
00000e48      }
00000e48      [0x40] = 
00000e48      {
00000e48          uint32_t st_name = 0x373
00000e4c          uint8_t st_info = 0x12
00000e4d          uint8_t st_other = 0x0
00000e4e          uint16_t st_shndx = 0x0
00000e50          uint64_t st_value = 0x0
00000e58          uint64_t st_size = 0x0
00000e60      }
00000e60      [0x41] = 
00000e60      {
00000e60          uint32_t st_name = 0x483
00000e64          uint8_t st_info = 0x12
00000e65          uint8_t st_other = 0x0
00000e66          uint16_t st_shndx = 0x0
00000e68          uint64_t st_value = 0x0
00000e70          uint64_t st_size = 0x0
00000e78      }
00000e78      [0x42] = 
00000e78      {
00000e78          uint32_t st_name = 0x417
00000e7c          uint8_t st_info = 0x12
00000e7d          uint8_t st_other = 0x0
00000e7e          uint16_t st_shndx = 0x0
00000e80          uint64_t st_value = 0x0
00000e88          uint64_t st_size = 0x0
00000e90      }
00000e90      [0x43] = 
00000e90      {
00000e90          uint32_t st_name = 0x2ac
00000e94          uint8_t st_info = 0x12
00000e95          uint8_t st_other = 0x0
00000e96          uint16_t st_shndx = 0x0
00000e98          uint64_t st_value = 0x0
00000ea0          uint64_t st_size = 0x0
00000ea8      }
00000ea8      [0x44] = 
00000ea8      {
00000ea8          uint32_t st_name = 0x48a
00000eac          uint8_t st_info = 0x12
00000ead          uint8_t st_other = 0x0
00000eae          uint16_t st_shndx = 0x0
00000eb0          uint64_t st_value = 0x0
00000eb8          uint64_t st_size = 0x0
00000ec0      }
00000ec0      [0x45] = 
00000ec0      {
00000ec0          uint32_t st_name = 0x256
00000ec4          uint8_t st_info = 0x12
00000ec5          uint8_t st_other = 0x0
00000ec6          uint16_t st_shndx = 0x0
00000ec8          uint64_t st_value = 0x0
00000ed0          uint64_t st_size = 0x0
00000ed8      }
00000ed8      [0x46] = 
00000ed8      {
00000ed8          uint32_t st_name = 0x4a3
00000edc          uint8_t st_info = 0x12
00000edd          uint8_t st_other = 0x0
00000ede          uint16_t st_shndx = 0x0
00000ee0          uint64_t st_value = 0x0
00000ee8          uint64_t st_size = 0x0
00000ef0      }
00000ef0      [0x47] = 
00000ef0      {
00000ef0          uint32_t st_name = 0x451
00000ef4          uint8_t st_info = 0x12
00000ef5          uint8_t st_other = 0x0
00000ef6          uint16_t st_shndx = 0x0
00000ef8          uint64_t st_value = 0x0
00000f00          uint64_t st_size = 0x0
00000f08      }
00000f08      [0x48] = 
00000f08      {
00000f08          uint32_t st_name = 0x1d
00000f0c          uint8_t st_info = 0x20
00000f0d          uint8_t st_other = 0x0
00000f0e          uint16_t st_shndx = 0x0
00000f10          uint64_t st_value = 0x0
00000f18          uint64_t st_size = 0x0
00000f20      }
00000f20      [0x49] = 
00000f20      {
00000f20          uint32_t st_name = 0x153
00000f24          uint8_t st_info = 0x12
00000f25          uint8_t st_other = 0x0
00000f26          uint16_t st_shndx = 0x0
00000f28          uint64_t st_value = 0x0
00000f30          uint64_t st_size = 0x0
00000f38      }
00000f38      [0x4a] = 
00000f38      {
00000f38          uint32_t st_name = 0x46e
00000f3c          uint8_t st_info = 0x12
00000f3d          uint8_t st_other = 0x0
00000f3e          uint16_t st_shndx = 0x0
00000f40          uint64_t st_value = 0x0
00000f48          uint64_t st_size = 0x0
00000f50      }
00000f50      [0x4b] = 
00000f50      {
00000f50          uint32_t st_name = 0x234
00000f54          uint8_t st_info = 0x12
00000f55          uint8_t st_other = 0x0
00000f56          uint16_t st_shndx = 0x0
00000f58          uint64_t st_value = 0x0
00000f60          uint64_t st_size = 0x0
00000f68      }
00000f68      [0x4c] = 
00000f68      {
00000f68          uint32_t st_name = 0xb5
00000f6c          uint8_t st_info = 0x12
00000f6d          uint8_t st_other = 0x0
00000f6e          uint16_t st_shndx = 0x0
00000f70          uint64_t st_value = 0x0
00000f78          uint64_t st_size = 0x0
00000f80      }
00000f80      [0x4d] = 
00000f80      {
00000f80          uint32_t st_name = 0x46
00000f84          uint8_t st_info = 0x12
00000f85          uint8_t st_other = 0x0
00000f86          uint16_t st_shndx = 0x0
00000f88          uint64_t st_value = 0x0
00000f90          uint64_t st_size = 0x0
00000f98      }
00000f98      [0x4e] = 
00000f98      {
00000f98          uint32_t st_name = 0x395
00000f9c          uint8_t st_info = 0x12
00000f9d          uint8_t st_other = 0x0
00000f9e          uint16_t st_shndx = 0x0
00000fa0          uint64_t st_value = 0x0
00000fa8          uint64_t st_size = 0x0
00000fb0      }
00000fb0      [0x4f] = 
00000fb0      {
00000fb0          uint32_t st_name = 0x2d4
00000fb4          uint8_t st_info = 0x12
00000fb5          uint8_t st_other = 0x0
00000fb6          uint16_t st_shndx = 0x0
00000fb8          uint64_t st_value = 0x0
00000fc0          uint64_t st_size = 0x0
00000fc8      }
00000fc8      [0x50] = 
00000fc8      {
00000fc8          uint32_t st_name = 0x2b9
00000fcc          uint8_t st_info = 0x12
00000fcd          uint8_t st_other = 0x0
00000fce          uint16_t st_shndx = 0x0
00000fd0          uint64_t st_value = 0x0
00000fd8          uint64_t st_size = 0x0
00000fe0      }
00000fe0      [0x51] = 
00000fe0      {
00000fe0          uint32_t st_name = 0x225
00000fe4          uint8_t st_info = 0x12
00000fe5          uint8_t st_other = 0x0
00000fe6          uint16_t st_shndx = 0x0
00000fe8          uint64_t st_value = 0x0
00000ff0          uint64_t st_size = 0x0
00000ff8      }
00000ff8      [0x52] = 
00000ff8      {
00000ff8          uint32_t st_name = 0x38e
00000ffc          uint8_t st_info = 0x12
00000ffd          uint8_t st_other = 0x0
00000ffe          uint16_t st_shndx = 0x0
00001000          uint64_t st_value = 0x0
00001008          uint64_t st_size = 0x0
00001010      }
00001010      [0x53] = 
00001010      {
00001010          uint32_t st_name = 0x47c
00001014          uint8_t st_info = 0x12
00001015          uint8_t st_other = 0x0
00001016          uint16_t st_shndx = 0x0
00001018          uint64_t st_value = 0x0
00001020          uint64_t st_size = 0x0
00001028      }
00001028      [0x54] = 
00001028      {
00001028          uint32_t st_name = 0x2f1
0000102c          uint8_t st_info = 0x12
0000102d          uint8_t st_other = 0x0
0000102e          uint16_t st_shndx = 0x0
00001030          uint64_t st_value = 0x0
00001038          uint64_t st_size = 0x0
00001040      }
00001040      [0x55] = 
00001040      {
00001040          uint32_t st_name = 0x332
00001044          uint8_t st_info = 0x12
00001045          uint8_t st_other = 0x0
00001046          uint16_t st_shndx = 0x0
00001048          uint64_t st_value = 0x0
00001050          uint64_t st_size = 0x0
00001058      }
00001058      [0x56] = 
00001058      {
00001058          uint32_t st_name = 0x128
0000105c          uint8_t st_info = 0x12
0000105d          uint8_t st_other = 0x0
0000105e          uint16_t st_shndx = 0x0
00001060          uint64_t st_value = 0x0
00001068          uint64_t st_size = 0x0
00001070      }
00001070      [0x57] = 
00001070      {
00001070          uint32_t st_name = 0x31c
00001074          uint8_t st_info = 0x12
00001075          uint8_t st_other = 0x0
00001076          uint16_t st_shndx = 0x0
00001078          uint64_t st_value = 0x0
00001080          uint64_t st_size = 0x0
00001088      }
00001088      [0x58] = 
00001088      {
00001088          uint32_t st_name = 0x45d
0000108c          uint8_t st_info = 0x12
0000108d          uint8_t st_other = 0x0
0000108e          uint16_t st_shndx = 0x0
00001090          uint64_t st_value = 0x0
00001098          uint64_t st_size = 0x0
000010a0      }
000010a0      [0x59] = 
000010a0      {
000010a0          uint32_t st_name = 0x426
000010a4          uint8_t st_info = 0x12
000010a5          uint8_t st_other = 0x0
000010a6          uint16_t st_shndx = 0x0
000010a8          uint64_t st_value = 0x0
000010b0          uint64_t st_size = 0x0
000010b8      }
000010b8      [0x5a] = 
000010b8      {
000010b8          uint32_t st_name = 0x7c
000010bc          uint8_t st_info = 0x12
000010bd          uint8_t st_other = 0x0
000010be          uint16_t st_shndx = 0x0
000010c0          uint64_t st_value = 0x0
000010c8          uint64_t st_size = 0x0
000010d0      }
000010d0      [0x5b] = 
000010d0      {
000010d0          uint32_t st_name = 0x270
000010d4          uint8_t st_info = 0x12
000010d5          uint8_t st_other = 0x0
000010d6          uint16_t st_shndx = 0x0
000010d8          uint64_t st_value = 0x0
000010e0          uint64_t st_size = 0x0
000010e8      }
000010e8      [0x5c] = 
000010e8      {
000010e8          uint32_t st_name = 0x117
000010ec          uint8_t st_info = 0x12
000010ed          uint8_t st_other = 0x0
000010ee          uint16_t st_shndx = 0x0
000010f0          uint64_t st_value = 0x0
000010f8          uint64_t st_size = 0x0
00001100      }
00001100      [0x5d] = 
00001100      {
00001100          uint32_t st_name = 0x28c
00001104          uint8_t st_info = 0x12
00001105          uint8_t st_other = 0x0
00001106          uint16_t st_shndx = 0x0
00001108          uint64_t st_value = 0x0
00001110          uint64_t st_size = 0x0
00001118      }
00001118      [0x5e] = 
00001118      {
00001118          uint32_t st_name = 0x32a
0000111c          uint8_t st_info = 0x12
0000111d          uint8_t st_other = 0x0
0000111e          uint16_t st_shndx = 0x0
00001120          uint64_t st_value = 0x0
00001128          uint64_t st_size = 0x0
00001130      }
00001130      [0x5f] = 
00001130      {
00001130          uint32_t st_name = 0x292
00001134          uint8_t st_info = 0x12
00001135          uint8_t st_other = 0x0
00001136          uint16_t st_shndx = 0x0
00001138          uint64_t st_value = 0x0
00001140          uint64_t st_size = 0x0
00001148      }
00001148      [0x60] = 
00001148      {
00001148          uint32_t st_name = 0x59
0000114c          uint8_t st_info = 0x12
0000114d          uint8_t st_other = 0x0
0000114e          uint16_t st_shndx = 0x0
00001150          uint64_t st_value = 0x0
00001158          uint64_t st_size = 0x0
00001160      }
00001160      [0x61] = 
00001160      {
00001160          uint32_t st_name = 0xaf
00001164          uint8_t st_info = 0x12
00001165          uint8_t st_other = 0x0
00001166          uint16_t st_shndx = 0x0
00001168          uint64_t st_value = 0x0
00001170          uint64_t st_size = 0x0
00001178      }
00001178      [0x62] = 
00001178      {
00001178          uint32_t st_name = 0x19f
0000117c          uint8_t st_info = 0x12
0000117d          uint8_t st_other = 0x0
0000117e          uint16_t st_shndx = 0x0
00001180          uint64_t st_value = 0x0
00001188          uint64_t st_size = 0x0
00001190      }
00001190      [0x63] = 
00001190      {
00001190          uint32_t st_name = 0x2b5
00001194          uint8_t st_info = 0x12
00001195          uint8_t st_other = 0x0
00001196          uint16_t st_shndx = 0x0
00001198          uint64_t st_value = 0x0
000011a0          uint64_t st_size = 0x0
000011a8      }
000011a8      [0x64] = 
000011a8      {
000011a8          uint32_t st_name = 0x1cd
000011ac          uint8_t st_info = 0x12
000011ad          uint8_t st_other = 0x0
000011ae          uint16_t st_shndx = 0x0
000011b0          uint64_t st_value = 0x0
000011b8          uint64_t st_size = 0x0
000011c0      }
000011c0      [0x65] = 
000011c0      {
000011c0          uint32_t st_name = 0x381
000011c4          uint8_t st_info = 0x12
000011c5          uint8_t st_other = 0x0
000011c6          uint16_t st_shndx = 0x0
000011c8          uint64_t st_value = 0x0
000011d0          uint64_t st_size = 0x0
000011d8      }
000011d8      [0x66] = 
000011d8      {
000011d8          uint32_t st_name = 0x3ba
000011dc          uint8_t st_info = 0x12
000011dd          uint8_t st_other = 0x0
000011de          uint16_t st_shndx = 0x0
000011e0          uint64_t st_value = 0x0
000011e8          uint64_t st_size = 0x0
000011f0      }
000011f0      [0x67] = 
000011f0      {
000011f0          uint32_t st_name = 0x121
000011f4          uint8_t st_info = 0x12
000011f5          uint8_t st_other = 0x0
000011f6          uint16_t st_shndx = 0x0
000011f8          uint64_t st_value = 0x0
00001200          uint64_t st_size = 0x0
00001208      }
00001208      [0x68] = 
00001208      {
00001208          uint32_t st_name = 0x3f2
0000120c          uint8_t st_info = 0x12
0000120d          uint8_t st_other = 0x0
0000120e          uint16_t st_shndx = 0x0
00001210          uint64_t st_value = 0x0
00001218          uint64_t st_size = 0x0
00001220      }
00001220      [0x69] = 
00001220      {
00001220          uint32_t st_name = 0x3ff
00001224          uint8_t st_info = 0x12
00001225          uint8_t st_other = 0x0
00001226          uint16_t st_shndx = 0x0
00001228          uint64_t st_value = 0x0
00001230          uint64_t st_size = 0x0
00001238      }
00001238      [0x6a] = 
00001238      {
00001238          uint32_t st_name = 0x407
0000123c          uint8_t st_info = 0x12
0000123d          uint8_t st_other = 0x0
0000123e          uint16_t st_shndx = 0x0
00001240          uint64_t st_value = 0x0
00001248          uint64_t st_size = 0x0
00001250      }
00001250      [0x6b] = 
00001250      {
00001250          uint32_t st_name = 0x464
00001254          uint8_t st_info = 0x12
00001255          uint8_t st_other = 0x0
00001256          uint16_t st_shndx = 0x0
00001258          uint64_t st_value = 0x0
00001260          uint64_t st_size = 0x0
00001268      }
00001268      [0x6c] = 
00001268      {
00001268          uint32_t st_name = 0x1e2
0000126c          uint8_t st_info = 0x12
0000126d          uint8_t st_other = 0x0
0000126e          uint16_t st_shndx = 0x0
00001270          uint64_t st_value = 0x0
00001278          uint64_t st_size = 0x0
00001280      }
00001280      [0x6d] = 
00001280      {
00001280          uint32_t st_name = 0x2f8
00001284          uint8_t st_info = 0x12
00001285          uint8_t st_other = 0x0
00001286          uint16_t st_shndx = 0x0
00001288          uint64_t st_value = 0x0
00001290          uint64_t st_size = 0x0
00001298      }
00001298      [0x6e] = 
00001298      {
00001298          uint32_t st_name = 0x188
0000129c          uint8_t st_info = 0x12
0000129d          uint8_t st_other = 0x0
0000129e          uint16_t st_shndx = 0x0
000012a0          uint64_t st_value = 0x0
000012a8          uint64_t st_size = 0x0
000012b0      }
000012b0      [0x6f] = 
000012b0      {
000012b0          uint32_t st_name = 0x1f8
000012b4          uint8_t st_info = 0x12
000012b5          uint8_t st_other = 0x0
000012b6          uint16_t st_shndx = 0x0
000012b8          uint64_t st_value = 0x0
000012c0          uint64_t st_size = 0x0
000012c8      }
000012c8      [0x70] = 
000012c8      {
000012c8          uint32_t st_name = 0x1f7
000012cc          uint8_t st_info = 0x12
000012cd          uint8_t st_other = 0x0
000012ce          uint16_t st_shndx = 0x0
000012d0          uint64_t st_value = 0x0
000012d8          uint64_t st_size = 0x0
000012e0      }
000012e0      [0x71] = 
000012e0      {
000012e0          uint32_t st_name = 0x3b3
000012e4          uint8_t st_info = 0x12
000012e5          uint8_t st_other = 0x0
000012e6          uint16_t st_shndx = 0x0
000012e8          uint64_t st_value = 0x0
000012f0          uint64_t st_size = 0x0
000012f8      }
000012f8      [0x72] = 
000012f8      {
000012f8          uint32_t st_name = 0x34e
000012fc          uint8_t st_info = 0x12
000012fd          uint8_t st_other = 0x0
000012fe          uint16_t st_shndx = 0x0
00001300          uint64_t st_value = 0x0
00001308          uint64_t st_size = 0x0
00001310      }
00001310      [0x73] = 
00001310      {
00001310          uint32_t st_name = 0x2ec
00001314          uint8_t st_info = 0x12
00001315          uint8_t st_other = 0x0
00001316          uint16_t st_shndx = 0x0
00001318          uint64_t st_value = 0x0
00001320          uint64_t st_size = 0x0
00001328      }
00001328      [0x74] = 
00001328      {
00001328          uint32_t st_name = 0x346
0000132c          uint8_t st_info = 0x12
0000132d          uint8_t st_other = 0x0
0000132e          uint16_t st_shndx = 0x0
00001330          uint64_t st_value = 0x0
00001338          uint64_t st_size = 0x0
00001340      }
00001340      [0x75] = 
00001340      {
00001340          uint32_t st_name = 0x1c2
00001344          uint8_t st_info = 0x12
00001345          uint8_t st_other = 0x0
00001346          uint16_t st_shndx = 0x0
00001348          uint64_t st_value = 0x0
00001350          uint64_t st_size = 0x0
00001358      }
00001358      [0x76] = 
00001358      {
00001358          uint32_t st_name = 0x2a7
0000135c          uint8_t st_info = 0x12
0000135d          uint8_t st_other = 0x0
0000135e          uint16_t st_shndx = 0x0
00001360          uint64_t st_value = 0x0
00001368          uint64_t st_size = 0x0
00001370      }
00001370      [0x77] = 
00001370      {
00001370          uint32_t st_name = 0x41e
00001374          uint8_t st_info = 0x12
00001375          uint8_t st_other = 0x0
00001376          uint16_t st_shndx = 0x0
00001378          uint64_t st_value = 0x0
00001380          uint64_t st_size = 0x0
00001388      }
00001388      [0x78] = 
00001388      {
00001388          uint32_t st_name = 0x475
0000138c          uint8_t st_info = 0x12
0000138d          uint8_t st_other = 0x0
0000138e          uint16_t st_shndx = 0x0
00001390          uint64_t st_value = 0x0
00001398          uint64_t st_size = 0x0
000013a0      }
000013a0      [0x79] = 
000013a0      {
000013a0          uint32_t st_name = 0x2be
000013a4          uint8_t st_info = 0x12
000013a5          uint8_t st_other = 0x0
000013a6          uint16_t st_shndx = 0x0
000013a8          uint64_t st_value = 0x0
000013b0          uint64_t st_size = 0x0
000013b8      }
000013b8      [0x7a] = 
000013b8      {
000013b8          uint32_t st_name = 0x107
000013bc          uint8_t st_info = 0x12
000013bd          uint8_t st_other = 0x0
000013be          uint16_t st_shndx = 0x0
000013c0          uint64_t st_value = 0x0
000013c8          uint64_t st_size = 0x0
000013d0      }
000013d0      [0x7b] = 
000013d0      {
000013d0          uint32_t st_name = 0x2c
000013d4          uint8_t st_info = 0x20
000013d5          uint8_t st_other = 0x0
000013d6          uint16_t st_shndx = 0x0
000013d8          uint64_t st_value = 0x0
000013e0          uint64_t st_size = 0x0
000013e8      }
000013e8      [0x7c] = 
000013e8      {
000013e8          uint32_t st_name = 0x4b1
000013ec          uint8_t st_info = 0x12
000013ed          uint8_t st_other = 0x0
000013ee          uint16_t st_shndx = 0x0
000013f0          uint64_t st_value = 0x0
000013f8          uint64_t st_size = 0x0
00001400      }
00001400      [0x7d] = 
00001400      {
00001400          uint32_t st_name = 0x1b1
00001404          uint8_t st_info = 0x12
00001405          uint8_t st_other = 0x0
00001406          uint16_t st_shndx = 0x0
00001408          uint64_t st_value = 0x0
00001410          uint64_t st_size = 0x0
00001418      }
00001418      [0x7e] = 
00001418      {
00001418          uint32_t st_name = 0x165
0000141c          uint8_t st_info = 0x12
0000141d          uint8_t st_other = 0x0
0000141e          uint16_t st_shndx = 0x0
00001420          uint64_t st_value = 0x0
00001428          uint64_t st_size = 0x0
00001430      }
00001430      [0x7f] = 
00001430      {
00001430          uint32_t st_name = 0x432
00001434          uint8_t st_info = 0x12
00001435          uint8_t st_other = 0x0
00001436          uint16_t st_shndx = 0x0
00001438          uint64_t st_value = 0x0
00001440          uint64_t st_size = 0x0
00001448      }
00001448      [0x80] = 
00001448      {
00001448          uint32_t st_name = 0x204
0000144c          uint8_t st_info = 0x12
0000144d          uint8_t st_other = 0x0
0000144e          uint16_t st_shndx = 0x0
00001450          uint64_t st_value = 0x0
00001458          uint64_t st_size = 0x0
00001460      }
00001460      [0x81] = 
00001460      {
00001460          uint32_t st_name = 0x87
00001464          uint8_t st_info = 0x12
00001465          uint8_t st_other = 0x0
00001466          uint16_t st_shndx = 0x0
00001468          uint64_t st_value = 0x0
00001470          uint64_t st_size = 0x0
00001478      }
00001478      [0x82] = 
00001478      {
00001478          uint32_t st_name = 0xe4
0000147c          uint8_t st_info = 0x12
0000147d          uint8_t st_other = 0x0
0000147e          uint16_t st_shndx = 0x0
00001480          uint64_t st_value = 0x0
00001488          uint64_t st_size = 0x0
00001490      }
00001490      [0x83] = 
00001490      {
00001490          uint32_t st_name = 0x30f
00001494          uint8_t st_info = 0x12
00001495          uint8_t st_other = 0x0
00001496          uint16_t st_shndx = 0x0
00001498          uint64_t st_value = 0x0
000014a0          uint64_t st_size = 0x0
000014a8      }
000014a8      [0x84] = 
000014a8      {
000014a8          uint32_t st_name = 0x2cc
000014ac          uint8_t st_info = 0x12
000014ad          uint8_t st_other = 0x0
000014ae          uint16_t st_shndx = 0x0
000014b0          uint64_t st_value = 0x0
000014b8          uint64_t st_size = 0x0
000014c0      }
000014c0      [0x85] = 
000014c0      {
000014c0          uint32_t st_name = 0x218
000014c4          uint8_t st_info = 0x12
000014c5          uint8_t st_other = 0x0
000014c6          uint16_t st_shndx = 0x0
000014c8          uint64_t st_value = 0x0
000014d0          uint64_t st_size = 0x0
000014d8      }
000014d8      [0x86] = 
000014d8      {
000014d8          uint32_t st_name = 0x23d
000014dc          uint8_t st_info = 0x12
000014dd          uint8_t st_other = 0x0
000014de          uint16_t st_shndx = 0x0
000014e0          uint64_t st_value = 0x0
000014e8          uint64_t st_size = 0x0
000014f0      }
000014f0      [0x87] = 
000014f0      {
000014f0          uint32_t st_name = 0x158
000014f4          uint8_t st_info = 0x12
000014f5          uint8_t st_other = 0x0
000014f6          uint16_t st_shndx = 0x0
000014f8          uint64_t st_value = 0x0
00001500          uint64_t st_size = 0x0
00001508      }
00001508      [0x88] = 
00001508      {
00001508          uint32_t st_name = 0x1fd
0000150c          uint8_t st_info = 0x12
0000150d          uint8_t st_other = 0x0
0000150e          uint16_t st_shndx = 0x0
00001510          uint64_t st_value = 0x0
00001518          uint64_t st_size = 0x0
00001520      }
00001520      [0x89] = 
00001520      {
00001520          uint32_t st_name = 0x33e
00001524          uint8_t st_info = 0x12
00001525          uint8_t st_other = 0x0
00001526          uint16_t st_shndx = 0x0
00001528          uint64_t st_value = 0x0
00001530          uint64_t st_size = 0x0
00001538      }
00001538      [0x8a] = 
00001538      {
00001538          uint32_t st_name = 0x4d8
0000153c          uint8_t st_info = 0x21
0000153d          uint8_t st_other = 0x0
0000153e          uint16_t st_shndx = 0x1b
00001540          uint64_t st_value = 0x46700
00001548          uint64_t st_size = 0x8
00001550      }
00001550      [0x8b] = 
00001550      {
00001550          uint32_t st_name = 0x35a
00001554          uint8_t st_info = 0x22
00001555          uint8_t st_other = 0x0
00001556          uint16_t st_shndx = 0x0
00001558          uint64_t st_value = 0x0
00001560          uint64_t st_size = 0x0
00001568      }
00001568      [0x8c] = 
00001568      {
00001568          uint32_t st_name = 0x476
0000156c          uint8_t st_info = 0x12
0000156d          uint8_t st_other = 0x0
0000156e          uint16_t st_shndx = 0x0
00001570          uint64_t st_value = 0x0
00001578          uint64_t st_size = 0x0
00001580      }
00001580      [0x8d] = 
00001580      {
00001580          uint32_t st_name = 0x4d6
00001584          uint8_t st_info = 0x11
00001585          uint8_t st_other = 0x0
00001586          uint16_t st_shndx = 0x1b
00001588          uint64_t st_value = 0x46700
00001590          uint64_t st_size = 0x8
00001598      }
00001598      [0x8e] = 
00001598      {
00001598          uint32_t st_name = 0x315
0000159c          uint8_t st_info = 0x11
0000159d          uint8_t st_other = 0x0
0000159e          uint16_t st_shndx = 0x1b
000015a0          uint64_t st_value = 0x46720
000015a8          uint64_t st_size = 0x8
000015b0      }
000015b0  }
.dynsym (DYNSYM) section ended  {0x848-0x15b0}

.dynstr (STRTAB) section started  {0x15b0-0x1b36}
000015b0                                                  00                                                               .

000015b1  char data_15b1[0x1c] = "_ITM_deregisterTMCloneTable", 0
000015cd  char data_15cd[0xf] = "__gmon_start__", 0
000015dc  char data_15dc[0x1a] = "_ITM_registerTMCloneTable", 0
000015f6  char data_15f6[0xb] = "inflateEnd", 0
00001601  char data_1601[0x8] = "deflate", 0
00001609  char data_1609[0xd] = "inflateInit_", 0
00001616  char data_1616[0x8] = "inflate", 0
0000161e  char data_161e[0xe] = "deflateInit2_", 0
0000162c  char data_162c[0xb] = "deflateEnd", 0
00001637  char data_1637[0x6] = "crypt", 0
0000163d  char data_163d[0x6] = "fgetc", 0
00001643  char data_1643[0xa] = "nanosleep", 0
0000164d  char data_164d[0x7] = "writev", 0
00001654  char data_1654[0xb] = "setsockopt", 0
0000165f  char data_165f[0x6] = "chmod", 0
00001665  char data_1665[0x6] = "prctl", 0
0000166b  char data_166b[0xc] = "getpeername", 0
00001677  char data_1677[0x8] = "strncpy", 0
0000167f  char data_167f[0x7] = "setsid", 0
00001686  char data_1686[0xe] = "clock_gettime", 0
00001694  char data_1694[0xd] = "endusershell", 0
000016a1  char data_16a1[0x11] = "__stack_chk_fail", 0
000016b2  char data_16b2[0x5] = "free", 0
000016b7  char data_16b7[0xa] = "getrlimit", 0
000016c1  char data_16c1[0x6] = "chdir", 0
000016c7  char data_16c7[0xa] = "setrlimit", 0
000016d1  char data_16d1[0x7] = "setgid", 0
000016d8  char data_16d8[0x8] = "openpty", 0
000016e0  char data_16e0[0xc] = "__fdelt_chk", 0
000016ec  char data_16ec[0xe] = "__assert_fail", 0
000016fa  char data_16fa[0x9] = "clearenv", 0
00001703  char data_1703[0x5] = "stat", 0
00001708  char data_1708[0xd] = "freeaddrinfo", 0
00001715  char data_1715[0xc] = "getaddrinfo", 0
00001721  char data_1721[0xd] = "getusershell", 0
0000172e  char data_172e[0xa] = "sigaction", 0
00001738  char data_1738[0x9] = "getspnam", 0
00001741  char data_1741[0x8] = "logwtmp", 0
00001749  char data_1749[0x6] = "fcntl", 0
0000174f  char data_174f[0x5] = "bind", 0
00001754  char data_1754[0xd] = "setusershell", 0
00001761  char data_1761[0x7] = "setuid", 0
00001768  char data_1768[0x8] = "strrchr", 0
00001770  char data_1770[0x7] = "unlink", 0
00001777  char data_1777[0x6] = "clock", 0
0000177d  char data_177d[0x8] = "memmove", 0
00001785  char data_1785[0xd] = "gettimeofday", 0
00001792  char data_1792[0x15] = "__explicit_bzero_chk", 0
000017a7  char data_17a7[0x6] = "fopen", 0
000017ad  char data_17ad[0x7] = "socket", 0
000017b4  char data_17b4[0xb] = "initgroups", 0
000017bf  char data_17bf[0x9] = "getpwuid", 0
000017c8  char data_17c8[0x5] = "fork", 0
000017cd  char data_17cd[0x8] = "dirname", 0
000017d5  char data_17d5[0x8] = "strlcat", 0
000017dd  char data_17dd[0x7] = "strlen", 0
000017e4  char data_17e4[0x9] = "getgrnam", 0
000017ed  char data_17ed[0xe] = "__ctype_b_loc", 0
000017fb  char data_17fb[0x6] = "rmdir", 0
00001801  char data_1801[0x5] = "read", 0
00001806  char data_1806[0xd] = "__memcpy_chk", 0
00001813  char data_1813[0x7] = "logout", 0
0000181a  char data_181a[0x6] = "mkdir", 0
00001820  char data_1820[0x10] = "__vsnprintf_chk", 0
00001830  char data_1830[0x5] = "dup2", 0
00001835  char data_1835[0x7] = "getpid", 0
0000183c  char data_183c[0x6] = "chown", 0
00001842  char data_1842[0x8] = "realloc", 0
0000184a  char data_184a[0xc] = "getnameinfo", 0
00001856  char data_1856[0x6] = "_exit", 0
0000185c  char data_185c[0x9] = "getpwnam", 0
00001865  char data_1865[0x9] = "strftime", 0
0000186e  char data_186e[0xe] = "__fprintf_chk", 0
0000187c  char data_187c[0x8] = "setegid", 0
00001884  char data_1884[0xf] = "__xpg_basename", 0
00001893  char data_1893[0x9] = "shutdown", 0
0000189c  char data_189c[0x5] = "atoi", 0
000018a1  char data_18a1[0x7] = "malloc", 0
000018a8  char data_18a8[0x5] = "atol", 0
000018ad  char data_18ad[0x12] = "__libc_start_main", 0
000018bf  char data_18bf[0x6] = "execv", 0
000018c5  char data_18c5[0x7] = "stderr", 0
000018cc  char data_18cc[0x7] = "listen", 0
000018d3  char data_18d3[0x7] = "memchr", 0
000018da  char data_18da[0x8] = "ttyname", 0
000018e2  char data_18e2[0xc] = "strncasecmp", 0
000018ee  char data_18ee[0x8] = "seteuid", 0
000018f6  char data_18f6[0x8] = "openlog", 0
000018fe  char data_18fe[0xc] = "getsockname", 0
0000190a  char data_190a[0xf] = "__cxa_finalize", 0
00001919  char data_1919[0xa] = "localtime", 0
00001923  char data_1923[0x7] = "putenv", 0
0000192a  char data_192a[0x7] = "strchr", 0
00001931  char data_1931[0xd] = "__syslog_chk", 0
0000193e  char data_193e[0x7] = "getgid", 0
00001945  char data_1945[0x5] = "kill", 0
0000194a  char data_194a[0xb] = "getsockopt", 0
00001955  char data_1955[0x7] = "getenv", 0
0000195c  char data_195c[0x7] = "calloc", 0
00001963  char data_1963[0x7] = "accept", 0
0000196a  char data_196a[0x6] = "fsync", 0
00001970  char data_1970[0x7] = "memcmp", 0
00001977  char data_1977[0x7] = "fclose", 0
0000197e  char data_197e[0x6] = "login", 0
00001984  char data_1984[0x7] = "memset", 0
0000198b  char data_198b[0x11] = "__isoc23_strtoul", 0
0000199c  char data_199c[0x6] = "ioctl", 0
000019a2  char data_19a2[0xd] = "getgrouplist", 0
000019af  char data_19af[0x8] = "waitpid", 0
000019b7  char data_19b7[0xa] = "tcgetattr", 0
000019c1  char data_19c1[0x6] = "fputs", 0
000019c7  char data_19c7[0x7] = "signal", 0
000019ce  char data_19ce[0x8] = "connect", 0
000019d6  char data_19d6[0x8] = "strlcpy", 0
000019de  char data_19de[0xd] = "gai_strerror", 0
000019eb  char data_19eb[0xf] = "__snprintf_chk", 0
000019fa  char data_19fa[0x7] = "getuid", 0
00001a01  char data_1a01[0xc] = "sigemptyset", 0
00001a0d  char data_1a0d[0x7] = "daemon", 0
00001a14  char data_1a14[0xa] = "tcsetattr", 0
00001a1e  char data_1a1e[0x7] = "memcpy", 0
00001a25  char data_1a25[0x7] = "fwrite", 0
00001a2c  char data_1a2c[0x7] = "select", 0
00001a33  char data_1a33[0x7] = "strcmp", 0
00001a3a  char data_1a3a[0x8] = "fexecve", 0
00001a42  char data_1a42[0x11] = "__errno_location", 0
00001a53  char data_1a53[0x8] = "syscall", 0
00001a5b  char data_1a5b[0x6] = "abort", 0
00001a61  char data_1a61[0xa] = "getrandom", 0
00001a6b  char data_1a6b[0x5] = "pipe", 0
00001a70  char data_1a70[0x6] = "lseek", 0
00001a76  char data_1a76[0x8] = "strncmp", 0
00001a7e  char data_1a7e[0x8] = "geteuid", 0
00001a86  char data_1a86[0xa] = "__environ", 0
00001a90  char data_1a90[0xa] = "libz.so.1", 0
00001a9a  char data_1a9a[0xe] = "libcrypt.so.1", 0
00001aa8  char data_1aa8[0xa] = "libc.so.6", 0
00001ab2  char data_1ab2[0xb] = "XCRYPT_2.0", 0
00001abd  char data_1abd[0xa] = "GLIBC_2.3", 0
00001ac7  char data_1ac7[0xb] = "GLIBC_2.25", 0
00001ad2  char data_1ad2[0xb] = "GLIBC_2.14", 0
00001add  char data_1add[0xb] = "GLIBC_2.33", 0
00001ae8  char data_1ae8[0xb] = "GLIBC_2.15", 0
00001af3  char data_1af3[0xa] = "GLIBC_2.4", 0
00001afd  char data_1afd[0xb] = "GLIBC_2.17", 0
00001b08  char data_1b08[0xb] = "GLIBC_2.34", 0
00001b13  char data_1b13[0xc] = "GLIBC_2.3.4", 0
00001b1f  char data_1b1f[0xb] = "GLIBC_2.38", 0
00001b2a  char data_1b2a[0xc] = "GLIBC_2.2.5", 0
.dynstr (STRTAB) section ended  {0x15b0-0x1b36}

.gnu.version section started  {0x1b36-0x1c54}
00001b36                                                                    00 00 02 00 03 00 04 00 02 00                        ..........
00001b40  02 00 05 00 02 00 02 00 02 00 02 00 02 00 01 00 02 00 05 00 01 00 02 00 02 00 02 00 05 00 02 00  ................................
00001b60  02 00 06 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 07 00 02 00 02 00 02 00  ................................
00001b80  08 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 01 00 02 00 02 00 02 00 02 00 02 00 02 00  ................................
00001ba0  02 00 02 00 02 00 02 00 01 00 02 00 02 00 02 00 02 00 05 00 02 00 02 00 02 00 02 00 02 00 02 00  ................................
00001bc0  04 00 02 00 02 00 01 00 09 00 0a 00 02 00 02 00 01 00 02 00 02 00 02 00 03 00 02 00 02 00 02 00  ................................
00001be0  02 00 05 00 02 00 02 00 03 00 01 00 04 00 02 00 02 00 02 00 02 00 01 00 02 00 02 00 02 00 02 00  ................................
00001c00  07 00 02 00 02 00 02 00 02 00 02 00 02 00 0b 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00  ................................
00001c20  02 00 02 00 02 00 02 00 04 00 02 00 01 00 0b 00 02 00 02 00 02 00 02 00 0c 00 02 00 02 00 02 00  ................................
00001c40  02 00 0d 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00                                      ....................
.gnu.version section ended  {0x1b36-0x1c54}

00001c54                                                              00 00 00 00                                              ....

.gnu.version_r section started  {0x1c58-0x1d38}
00001c58                                                                          01 00 01 00 ea 04 00 00                          ........
00001c60  10 00 00 00 20 00 00 00 60 ed 5d 0e 00 00 0c 00 02 05 00 00 00 00 00 00 01 00 0b 00 f8 04 00 00  .... ...`.].....................
00001c80  10 00 00 00 00 00 00 00 13 69 69 0d 00 00 0d 00 0d 05 00 00 10 00 00 00 85 91 96 06 00 00 0b 00  .........ii.....................
00001ca0  17 05 00 00 10 00 00 00 94 91 96 06 00 00 0a 00 22 05 00 00 10 00 00 00 b3 91 96 06 00 00 09 00  ................"...............
00001cc0  2d 05 00 00 10 00 00 00 95 91 96 06 00 00 08 00 38 05 00 00 10 00 00 00 14 69 69 0d 00 00 07 00  -...............8........ii.....
00001ce0  43 05 00 00 10 00 00 00 97 91 96 06 00 00 06 00 4d 05 00 00 10 00 00 00 b4 91 96 06 00 00 05 00  C...............M...............
00001d00  58 05 00 00 10 00 00 00 74 19 69 09 00 00 04 00 63 05 00 00 10 00 00 00 b8 91 96 06 00 00 03 00  X.......t.i.....c...............
00001d20  6f 05 00 00 10 00 00 00 75 1a 69 09 00 00 02 00 7a 05 00 00 00 00 00 00                          o.......u.i.....z.......
.gnu.version_r section ended  {0x1c58-0x1d38}

.rela.dyn (RELA) section started  {0x1d38-0x3508}
00001d38  struct Elf64_Rela __elf_rela_table[0xfe] = 
00001d38  {
00001d38      [0x00] = 
00001d38      {
00001d38          uint64_t r_offset = 0x44bd0
00001d40          uint64_t r_info = 0x8
00001d48          int64_t r_addend = 0x5a30
00001d50      }
00001d50      [0x01] = 
00001d50      {
00001d50          uint64_t r_offset = 0x44bd8
00001d58          uint64_t r_info = 0x8
00001d60          int64_t r_addend = 0x59f0
00001d68      }
00001d68      [0x02] = 
00001d68      {
00001d68          uint64_t r_offset = 0x44be0
00001d70          uint64_t r_info = 0x8
00001d78          int64_t r_addend = 0x342e4
00001d80      }
00001d80      [0x03] = 
00001d80      {
00001d80          uint64_t r_offset = 0x44be8
00001d88          uint64_t r_info = 0x8
00001d90          int64_t r_addend = 0x342ec
00001d98      }
00001d98      [0x04] = 
00001d98      {
00001d98          uint64_t r_offset = 0x44bf0
00001da0          uint64_t r_info = 0x8
00001da8          int64_t r_addend = 0x34300
00001db0      }
00001db0      [0x05] = 
00001db0      {
00001db0          uint64_t r_offset = 0x44bf8
00001db8          uint64_t r_info = 0x8
00001dc0          int64_t r_addend = 0x34314
00001dc8      }
00001dc8      [0x06] = 
00001dc8      {
00001dc8          uint64_t r_offset = 0x44c00
00001dd0          uint64_t r_info = 0x8
00001dd8          int64_t r_addend = 0x34328
00001de0      }
00001de0      [0x07] = 
00001de0      {
00001de0          uint64_t r_offset = 0x44c08
00001de8          uint64_t r_info = 0x8
00001df0          int64_t r_addend = 0x3434b
00001df8      }
00001df8      [0x08] = 
00001df8      {
00001df8          uint64_t r_offset = 0x44c10
00001e00          uint64_t r_info = 0x8
00001e08          int64_t r_addend = 0x34357
00001e10      }
00001e10      [0x09] = 
00001e10      {
00001e10          uint64_t r_offset = 0x44c20
00001e18          uint64_t r_info = 0x8
00001e20          int64_t r_addend = 0x3451f
00001e28      }
00001e28      [0x0a] = 
00001e28      {
00001e28          uint64_t r_offset = 0x44c30
00001e30          uint64_t r_info = 0x8
00001e38          int64_t r_addend = 0x8986
00001e40      }
00001e40      [0x0b] = 
00001e40      {
00001e40          uint64_t r_offset = 0x44c38
00001e48          uint64_t r_info = 0x8
00001e50          int64_t r_addend = 0x898d
00001e58      }
00001e58      [0x0c] = 
00001e58      {
00001e58          uint64_t r_offset = 0x44c40
00001e60          uint64_t r_info = 0x8
00001e68          int64_t r_addend = 0x89fb
00001e70      }
00001e70      [0x0d] = 
00001e70      {
00001e70          uint64_t r_offset = 0x44c48
00001e78          uint64_t r_info = 0x8
00001e80          int64_t r_addend = 0x89c5
00001e88      }
00001e88      [0x0e] = 
00001e88      {
00001e88          uint64_t r_offset = 0x44c50
00001e90          uint64_t r_info = 0x8
00001e98          int64_t r_addend = 0x8a02
00001ea0      }
00001ea0      [0x0f] = 
00001ea0      {
00001ea0          uint64_t r_offset = 0x44c58
00001ea8          uint64_t r_info = 0x8
00001eb0          int64_t r_addend = 0x899b
00001eb8      }
00001eb8      [0x10] = 
00001eb8      {
00001eb8          uint64_t r_offset = 0x44c60
00001ec0          uint64_t r_info = 0x8
00001ec8          int64_t r_addend = 0x89f4
00001ed0      }
00001ed0      [0x11] = 
00001ed0      {
00001ed0          uint64_t r_offset = 0x44c68
00001ed8          uint64_t r_info = 0x8
00001ee0          int64_t r_addend = 0x8994
00001ee8      }
00001ee8      [0x12] = 
00001ee8      {
00001ee8          uint64_t r_offset = 0x44c80
00001ef0          uint64_t r_info = 0x8
00001ef8          int64_t r_addend = 0xd6d0
00001f00      }
00001f00      [0x13] = 
00001f00      {
00001f00          uint64_t r_offset = 0x44c88
00001f08          uint64_t r_info = 0x8
00001f10          int64_t r_addend = 0xd6d7
00001f18      }
00001f18      [0x14] = 
00001f18      {
00001f18          uint64_t r_offset = 0x44c90
00001f20          uint64_t r_info = 0x8
00001f28          int64_t r_addend = 0xd6d7
00001f30      }
00001f30      [0x15] = 
00001f30      {
00001f30          uint64_t r_offset = 0x44cc8
00001f38          uint64_t r_info = 0x8
00001f40          int64_t r_addend = 0x34e26
00001f48      }
00001f48      [0x16] = 
00001f48      {
00001f48          uint64_t r_offset = 0x44cd8
00001f50          uint64_t r_info = 0x8
00001f58          int64_t r_addend = 0x34e2b
00001f60      }
00001f60      [0x17] = 
00001f60      {
00001f60          uint64_t r_offset = 0x44ce8
00001f68          uint64_t r_info = 0x8
00001f70          int64_t r_addend = 0x34e30
00001f78      }
00001f78      [0x18] = 
00001f78      {
00001f78          uint64_t r_offset = 0x44cf8
00001f80          uint64_t r_info = 0x8
00001f88          int64_t r_addend = 0x34e34
00001f90      }
00001f90      [0x19] = 
00001f90      {
00001f90          uint64_t r_offset = 0x44d08
00001f98          uint64_t r_info = 0x8
00001fa0          int64_t r_addend = 0x34e3d
00001fa8      }
00001fa8      [0x1a] = 
00001fa8      {
00001fa8          uint64_t r_offset = 0x44d18
00001fb0          uint64_t r_info = 0x8
00001fb8          int64_t r_addend = 0x34e38
00001fc0      }
00001fc0      [0x1b] = 
00001fc0      {
00001fc0          uint64_t r_offset = 0x44d28
00001fc8          uint64_t r_info = 0x8
00001fd0          int64_t r_addend = 0x34e3c
00001fd8      }
00001fd8      [0x1c] = 
00001fd8      {
00001fd8          uint64_t r_offset = 0x44d38
00001fe0          uint64_t r_info = 0x8
00001fe8          int64_t r_addend = 0x34e41
00001ff0      }
00001ff0      [0x1d] = 
00001ff0      {
00001ff0          uint64_t r_offset = 0x44d48
00001ff8          uint64_t r_info = 0x8
00002000          int64_t r_addend = 0x34e46
00002008      }
00002008      [0x1e] = 
00002008      {
00002008          uint64_t r_offset = 0x44d58
00002010          uint64_t r_info = 0x8
00002018          int64_t r_addend = 0x34e4b
00002020      }
00002020      [0x1f] = 
00002020      {
00002020          uint64_t r_offset = 0x44d68
00002028          uint64_t r_info = 0x8
00002030          int64_t r_addend = 0x34e50
00002038      }
00002038      [0x20] = 
00002038      {
00002038          uint64_t r_offset = 0x44d78
00002040          uint64_t r_info = 0x8
00002048          int64_t r_addend = 0x34e55
00002050      }
00002050      [0x21] = 
00002050      {
00002050          uint64_t r_offset = 0x44d88
00002058          uint64_t r_info = 0x8
00002060          int64_t r_addend = 0x34e5a
00002068      }
00002068      [0x22] = 
00002068      {
00002068          uint64_t r_offset = 0x44da0
00002070          uint64_t r_info = 0x8
00002078          int64_t r_addend = 0x125e8
00002080      }
00002080      [0x23] = 
00002080      {
00002080          uint64_t r_offset = 0x44db8
00002088          uint64_t r_info = 0x8
00002090          int64_t r_addend = 0x1241e
00002098      }
00002098      [0x24] = 
00002098      {
00002098          uint64_t r_offset = 0x44dc0
000020a0          uint64_t r_info = 0x8
000020a8          int64_t r_addend = 0x12643
000020b0      }
000020b0      [0x25] = 
000020b0      {
000020b0          uint64_t r_offset = 0x44dc8
000020b8          uint64_t r_info = 0x8
000020c0          int64_t r_addend = 0x38140
000020c8      }
000020c8      [0x26] = 
000020c8      {
000020c8          uint64_t r_offset = 0x44dd0
000020d0          uint64_t r_info = 0x8
000020d8          int64_t r_addend = 0x38160
000020e0      }
000020e0      [0x27] = 
000020e0      {
000020e0          uint64_t r_offset = 0x44e00
000020e8          uint64_t r_info = 0x8
000020f0          int64_t r_addend = 0x3612b
000020f8      }
000020f8      [0x28] = 
000020f8      {
000020f8          uint64_t r_offset = 0x44e08
00002100          uint64_t r_info = 0x8
00002108          int64_t r_addend = 0x1ce79
00002110      }
00002110      [0x29] = 
00002110      {
00002110          uint64_t r_offset = 0x44e10
00002118          uint64_t r_info = 0x8
00002120          int64_t r_addend = 0x1ca7f
00002128      }
00002128      [0x2a] = 
00002128      {
00002128          uint64_t r_offset = 0x44e18
00002130          uint64_t r_info = 0x8
00002138          int64_t r_addend = 0x1d898
00002140      }
00002140      [0x2b] = 
00002140      {
00002140          uint64_t r_offset = 0x44e20
00002148          uint64_t r_info = 0x8
00002150          int64_t r_addend = 0x1cb96
00002158      }
00002158      [0x2c] = 
00002158      {
00002158          uint64_t r_offset = 0x44e28
00002160          uint64_t r_info = 0x8
00002168          int64_t r_addend = 0x1caa8
00002170      }
00002170      [0x2d] = 
00002170      {
00002170          uint64_t r_offset = 0x44e40
00002178          uint64_t r_info = 0x8
00002180          int64_t r_addend = 0x36967
00002188      }
00002188      [0x2e] = 
00002188      {
00002188          uint64_t r_offset = 0x44e80
00002190          uint64_t r_info = 0x8
00002198          int64_t r_addend = 0x36af5
000021a0      }
000021a0      [0x2f] = 
000021a0      {
000021a0          uint64_t r_offset = 0x44e88
000021a8          uint64_t r_info = 0x8
000021b0          int64_t r_addend = 0x1f755
000021b8      }
000021b8      [0x30] = 
000021b8      {
000021b8          uint64_t r_offset = 0x44ec0
000021c0          uint64_t r_info = 0x8
000021c8          int64_t r_addend = 0x36b14
000021d0      }
000021d0      [0x31] = 
000021d0      {
000021d0          uint64_t r_offset = 0x44ec8
000021d8          uint64_t r_info = 0x8
000021e0          int64_t r_addend = 0x1f5fe
000021e8      }
000021e8      [0x32] = 
000021e8      {
000021e8          uint64_t r_offset = 0x44f00
000021f0          uint64_t r_info = 0x8
000021f8          int64_t r_addend = 0x36b21
00002200      }
00002200      [0x33] = 
00002200      {
00002200          uint64_t r_offset = 0x44f40
00002208          uint64_t r_info = 0x8
00002210          int64_t r_addend = 0x36b7a
00002218      }
00002218      [0x34] = 
00002218      {
00002218          uint64_t r_offset = 0x44f60
00002220          uint64_t r_info = 0x8
00002228          int64_t r_addend = 0x1fb16
00002230      }
00002230      [0x35] = 
00002230      {
00002230          uint64_t r_offset = 0x44f68
00002238          uint64_t r_info = 0x8
00002240          int64_t r_addend = 0x1fdd3
00002248      }
00002248      [0x36] = 
00002248      {
00002248          uint64_t r_offset = 0x44f70
00002250          uint64_t r_info = 0x8
00002258          int64_t r_addend = 0x200c1
00002260      }
00002260      [0x37] = 
00002260      {
00002260          uint64_t r_offset = 0x44f78
00002268          uint64_t r_info = 0x8
00002270          int64_t r_addend = 0x1fb07
00002278      }
00002278      [0x38] = 
00002278      {
00002278          uint64_t r_offset = 0x44f80
00002280          uint64_t r_info = 0x8
00002288          int64_t r_addend = 0x1fb11
00002290      }
00002290      [0x39] = 
00002290      {
00002290          uint64_t r_offset = 0x44f88
00002298          uint64_t r_info = 0x8
000022a0          int64_t r_addend = 0x203c9
000022a8      }
000022a8      [0x3a] = 
000022a8      {
000022a8          uint64_t r_offset = 0x45000
000022b0          uint64_t r_info = 0x8
000022b8          int64_t r_addend = 0x34b1a
000022c0      }
000022c0      [0x3b] = 
000022c0      {
000022c0          uint64_t r_offset = 0x450a8
000022c8          uint64_t r_info = 0x8
000022d0          int64_t r_addend = 0x20428
000022d8      }
000022d8      [0x3c] = 
000022d8      {
000022d8          uint64_t r_offset = 0x450b0
000022e0          uint64_t r_info = 0x8
000022e8          int64_t r_addend = 0x20732
000022f0      }
000022f0      [0x3d] = 
000022f0      {
000022f0          uint64_t r_offset = 0x450b8
000022f8          uint64_t r_info = 0x8
00002300          int64_t r_addend = 0x2064f
00002308      }
00002308      [0x3e] = 
00002308      {
00002308          uint64_t r_offset = 0x450c0
00002310          uint64_t r_info = 0x8
00002318          int64_t r_addend = 0x2041e
00002320      }
00002320      [0x3f] = 
00002320      {
00002320          uint64_t r_offset = 0x450e0
00002328          uint64_t r_info = 0x8
00002330          int64_t r_addend = 0x34a5b
00002338      }
00002338      [0x40] = 
00002338      {
00002338          uint64_t r_offset = 0x45188
00002340          uint64_t r_info = 0x8
00002348          int64_t r_addend = 0x2096e
00002350      }
00002350      [0x41] = 
00002350      {
00002350          uint64_t r_offset = 0x45190
00002358          uint64_t r_info = 0x8
00002360          int64_t r_addend = 0x20cd9
00002368      }
00002368      [0x42] = 
00002368      {
00002368          uint64_t r_offset = 0x45198
00002370          uint64_t r_info = 0x8
00002378          int64_t r_addend = 0x20bf8
00002380      }
00002380      [0x43] = 
00002380      {
00002380          uint64_t r_offset = 0x451a0
00002388          uint64_t r_info = 0x8
00002390          int64_t r_addend = 0x20964
00002398      }
00002398      [0x44] = 
00002398      {
00002398          uint64_t r_offset = 0x451c8
000023a0          uint64_t r_info = 0x8
000023a8          int64_t r_addend = 0x36ebc
000023b0      }
000023b0      [0x45] = 
000023b0      {
000023b0          uint64_t r_offset = 0x451d0
000023b8          uint64_t r_info = 0x8
000023c0          int64_t r_addend = 0x36ec4
000023c8      }
000023c8      [0x46] = 
000023c8      {
000023c8          uint64_t r_offset = 0x451d8
000023d0          uint64_t r_info = 0x8
000023d8          int64_t r_addend = 0x36f05
000023e0      }
000023e0      [0x47] = 
000023e0      {
000023e0          uint64_t r_offset = 0x451e0
000023e8          uint64_t r_info = 0x8
000023f0          int64_t r_addend = 0x36f46
000023f8      }
000023f8      [0x48] = 
000023f8      {
000023f8          uint64_t r_offset = 0x451e8
00002400          uint64_t r_info = 0x8
00002408          int64_t r_addend = 0x36f87
00002410      }
00002410      [0x49] = 
00002410      {
00002410          uint64_t r_offset = 0x451f0
00002418          uint64_t r_info = 0x8
00002420          int64_t r_addend = 0x36fc8
00002428      }
00002428      [0x4a] = 
00002428      {
00002428          uint64_t r_offset = 0x45200
00002430          uint64_t r_info = 0x8
00002438          int64_t r_addend = 0x37009
00002440      }
00002440      [0x4b] = 
00002440      {
00002440          uint64_t r_offset = 0x45208
00002448          uint64_t r_info = 0x8
00002450          int64_t r_addend = 0x37011
00002458      }
00002458      [0x4c] = 
00002458      {
00002458          uint64_t r_offset = 0x45210
00002460          uint64_t r_info = 0x8
00002468          int64_t r_addend = 0x37072
00002470      }
00002470      [0x4d] = 
00002470      {
00002470          uint64_t r_offset = 0x45218
00002478          uint64_t r_info = 0x8
00002480          int64_t r_addend = 0x370d3
00002488      }
00002488      [0x4e] = 
00002488      {
00002488          uint64_t r_offset = 0x45220
00002490          uint64_t r_info = 0x8
00002498          int64_t r_addend = 0x37134
000024a0      }
000024a0      [0x4f] = 
000024a0      {
000024a0          uint64_t r_offset = 0x45228
000024a8          uint64_t r_info = 0x8
000024b0          int64_t r_addend = 0x37195
000024b8      }
000024b8      [0x50] = 
000024b8      {
000024b8          uint64_t r_offset = 0x45238
000024c0          uint64_t r_info = 0x8
000024c8          int64_t r_addend = 0x371f6
000024d0      }
000024d0      [0x51] = 
000024d0      {
000024d0          uint64_t r_offset = 0x45240
000024d8          uint64_t r_info = 0x8
000024e0          int64_t r_addend = 0x371fe
000024e8      }
000024e8      [0x52] = 
000024e8      {
000024e8          uint64_t r_offset = 0x45248
000024f0          uint64_t r_info = 0x8
000024f8          int64_t r_addend = 0x37282
00002500      }
00002500      [0x53] = 
00002500      {
00002500          uint64_t r_offset = 0x45250
00002508          uint64_t r_info = 0x8
00002510          int64_t r_addend = 0x37305
00002518      }
00002518      [0x54] = 
00002518      {
00002518          uint64_t r_offset = 0x45258
00002520          uint64_t r_info = 0x8
00002528          int64_t r_addend = 0x37389
00002530      }
00002530      [0x55] = 
00002530      {
00002530          uint64_t r_offset = 0x45260
00002538          uint64_t r_info = 0x8
00002540          int64_t r_addend = 0x3740c
00002548      }
00002548      [0x56] = 
00002548      {
00002548          uint64_t r_offset = 0x452a0
00002550          uint64_t r_info = 0x8
00002558          int64_t r_addend = 0x3a478
00002560      }
00002560      [0x57] = 
00002560      {
00002560          uint64_t r_offset = 0x452d8
00002568          uint64_t r_info = 0x8
00002570          int64_t r_addend = 0x45300
00002578      }
00002578      [0x58] = 
00002578      {
00002578          uint64_t r_offset = 0x452e0
00002580          uint64_t r_info = 0x8
00002588          int64_t r_addend = 0x450e0
00002590      }
00002590      [0x59] = 
00002590      {
00002590          uint64_t r_offset = 0x45310
00002598          uint64_t r_info = 0x8
000025a0          int64_t r_addend = 0x1423f
000025a8      }
000025a8      [0x5a] = 
000025a8      {
000025a8          uint64_t r_offset = 0x45318
000025b0          uint64_t r_info = 0x8
000025b8          int64_t r_addend = 0x14299
000025c0      }
000025c0      [0x5b] = 
000025c0      {
000025c0          uint64_t r_offset = 0x45320
000025c8          uint64_t r_info = 0x8
000025d0          int64_t r_addend = 0x1434a
000025d8      }
000025d8      [0x5c] = 
000025d8      {
000025d8          uint64_t r_offset = 0x45358
000025e0          uint64_t r_info = 0x8
000025e8          int64_t r_addend = 0x45380
000025f0      }
000025f0      [0x5d] = 
000025f0      {
000025f0          uint64_t r_offset = 0x45360
000025f8          uint64_t r_info = 0x8
00002600          int64_t r_addend = 0x45000
00002608      }
00002608      [0x5e] = 
00002608      {
00002608          uint64_t r_offset = 0x45390
00002610          uint64_t r_info = 0x8
00002618          int64_t r_addend = 0x19796
00002620      }
00002620      [0x5f] = 
00002620      {
00002620          uint64_t r_offset = 0x45398
00002628          uint64_t r_info = 0x8
00002630          int64_t r_addend = 0x19888
00002638      }
00002638      [0x60] = 
00002638      {
00002638          uint64_t r_offset = 0x453a0
00002640          uint64_t r_info = 0x8
00002648          int64_t r_addend = 0x19b56
00002650      }
00002650      [0x61] = 
00002650      {
00002650          uint64_t r_offset = 0x453e0
00002658          uint64_t r_info = 0x8
00002660          int64_t r_addend = 0x45000
00002668      }
00002668      [0x62] = 
00002668      {
00002668          uint64_t r_offset = 0x45418
00002670          uint64_t r_info = 0x8
00002678          int64_t r_addend = 0x46040
00002680      }
00002680      [0x63] = 
00002680      {
00002680          uint64_t r_offset = 0x45420
00002688          uint64_t r_info = 0x8
00002690          int64_t r_addend = 0x450e0
00002698      }
00002698      [0x64] = 
00002698      {
00002698          uint64_t r_offset = 0x45458
000026a0          uint64_t r_info = 0x8
000026a8          int64_t r_addend = 0x46060
000026b0      }
000026b0      [0x65] = 
000026b0      {
000026b0          uint64_t r_offset = 0x45460
000026b8          uint64_t r_info = 0x8
000026c0          int64_t r_addend = 0x456e0
000026c8      }
000026c8      [0x66] = 
000026c8      {
000026c8          uint64_t r_offset = 0x45498
000026d0          uint64_t r_info = 0x8
000026d8          int64_t r_addend = 0x46080
000026e0      }
000026e0      [0x67] = 
000026e0      {
000026e0          uint64_t r_offset = 0x454a0
000026e8          uint64_t r_info = 0x8
000026f0          int64_t r_addend = 0x45000
000026f8      }
000026f8      [0x68] = 
000026f8      {
000026f8          uint64_t r_offset = 0x454c8
00002700          uint64_t r_info = 0x8
00002708          int64_t r_addend = 0x38040
00002710      }
00002710      [0x69] = 
00002710      {
00002710          uint64_t r_offset = 0x454e0
00002718          uint64_t r_info = 0x8
00002720          int64_t r_addend = 0x45000
00002728      }
00002728      [0x6a] = 
00002728      {
00002728          uint64_t r_offset = 0x454f0
00002730          uint64_t r_info = 0x8
00002738          int64_t r_addend = 0x45000
00002740      }
00002740      [0x6b] = 
00002740      {
00002740          uint64_t r_offset = 0x45520
00002748          uint64_t r_info = 0x8
00002750          int64_t r_addend = 0xd6fa
00002758      }
00002758      [0x6c] = 
00002758      {
00002758          uint64_t r_offset = 0x45528
00002760          uint64_t r_info = 0x8
00002768          int64_t r_addend = 0x22faa
00002770      }
00002770      [0x6d] = 
00002770      {
00002770          uint64_t r_offset = 0x45530
00002778          uint64_t r_info = 0x8
00002780          int64_t r_addend = 0x22e43
00002788      }
00002788      [0x6e] = 
00002788      {
00002788          uint64_t r_offset = 0x45550
00002790          uint64_t r_info = 0x8
00002798          int64_t r_addend = 0x44f40
000027a0      }
000027a0      [0x6f] = 
000027a0      {
000027a0          uint64_t r_offset = 0x45570
000027a8          uint64_t r_info = 0x8
000027b0          int64_t r_addend = 0x44f40
000027b8      }
000027b8      [0x70] = 
000027b8      {
000027b8          uint64_t r_offset = 0x455a8
000027c0          uint64_t r_info = 0x8
000027c8          int64_t r_addend = 0xfcb9
000027d0      }
000027d0      [0x71] = 
000027d0      {
000027d0          uint64_t r_offset = 0x455b8
000027d8          uint64_t r_info = 0x8
000027e0          int64_t r_addend = 0xfccf
000027e8      }
000027e8      [0x72] = 
000027e8      {
000027e8          uint64_t r_offset = 0x455c8
000027f0          uint64_t r_info = 0x8
000027f8          int64_t r_addend = 0x1aafe
00002800      }
00002800      [0x73] = 
00002800      {
00002800          uint64_t r_offset = 0x455d8
00002808          uint64_t r_info = 0x8
00002810          int64_t r_addend = 0x1c9b9
00002818      }
00002818      [0x74] = 
00002818      {
00002818          uint64_t r_offset = 0x455e8
00002820          uint64_t r_info = 0x8
00002828          int64_t r_addend = 0xeb55
00002830      }
00002830      [0x75] = 
00002830      {
00002830          uint64_t r_offset = 0x455f8
00002838          uint64_t r_info = 0x8
00002840          int64_t r_addend = 0x1a465
00002848      }
00002848      [0x76] = 
00002848      {
00002848          uint64_t r_offset = 0x45608
00002850          uint64_t r_info = 0x8
00002858          int64_t r_addend = 0xea9a
00002860      }
00002860      [0x77] = 
00002860      {
00002860          uint64_t r_offset = 0x45618
00002868          uint64_t r_info = 0x8
00002870          int64_t r_addend = 0x1f7fb
00002878      }
00002878      [0x78] = 
00002878      {
00002878          uint64_t r_offset = 0x45628
00002880          uint64_t r_info = 0x8
00002888          int64_t r_addend = 0xfe78
00002890      }
00002890      [0x79] = 
00002890      {
00002890          uint64_t r_offset = 0x45638
00002898          uint64_t r_info = 0x8
000028a0          int64_t r_addend = 0xfd02
000028a8      }
000028a8      [0x7a] = 
000028a8      {
000028a8          uint64_t r_offset = 0x45648
000028b0          uint64_t r_info = 0x8
000028b8          int64_t r_addend = 0xfb11
000028c0      }
000028c0      [0x7b] = 
000028c0      {
000028c0          uint64_t r_offset = 0x45658
000028c8          uint64_t r_info = 0x8
000028d0          int64_t r_addend = 0xfb2e
000028d8      }
000028d8      [0x7c] = 
000028d8      {
000028d8          uint64_t r_offset = 0x45668
000028e0          uint64_t r_info = 0x8
000028e8          int64_t r_addend = 0xc622
000028f0      }
000028f0      [0x7d] = 
000028f0      {
000028f0          uint64_t r_offset = 0x45678
000028f8          uint64_t r_info = 0x8
00002900          int64_t r_addend = 0xc622
00002908      }
00002908      [0x7e] = 
00002908      {
00002908          uint64_t r_offset = 0x45688
00002910          uint64_t r_info = 0x8
00002918          int64_t r_addend = 0xc622
00002920      }
00002920      [0x7f] = 
00002920      {
00002920          uint64_t r_offset = 0x45698
00002928          uint64_t r_info = 0x8
00002930          int64_t r_addend = 0xc622
00002938      }
00002938      [0x80] = 
00002938      {
00002938          uint64_t r_offset = 0x456a8
00002940          uint64_t r_info = 0x8
00002948          int64_t r_addend = 0xffad
00002950      }
00002950      [0x81] = 
00002950      {
00002950          uint64_t r_offset = 0x456b8
00002958          uint64_t r_info = 0x8
00002960          int64_t r_addend = 0x10024
00002968      }
00002968      [0x82] = 
00002968      {
00002968          uint64_t r_offset = 0x456e0
00002970          uint64_t r_info = 0x8
00002978          int64_t r_addend = 0x36bc6
00002980      }
00002980      [0x83] = 
00002980      {
00002980          uint64_t r_offset = 0x45788
00002988          uint64_t r_info = 0x8
00002990          int64_t r_addend = 0x2082e
00002998      }
00002998      [0x84] = 
00002998      {
00002998          uint64_t r_offset = 0x45790
000029a0          uint64_t r_info = 0x8
000029a8          int64_t r_addend = 0x20cd9
000029b0      }
000029b0      [0x85] = 
000029b0      {
000029b0          uint64_t r_offset = 0x45798
000029b8          uint64_t r_info = 0x8
000029c0          int64_t r_addend = 0x208cc
000029c8      }
000029c8      [0x86] = 
000029c8      {
000029c8          uint64_t r_offset = 0x457a0
000029d0          uint64_t r_info = 0x8
000029d8          int64_t r_addend = 0x20824
000029e0      }
000029e0      [0x87] = 
000029e0      {
000029e0          uint64_t r_offset = 0x457c0
000029e8          uint64_t r_info = 0x8
000029f0          int64_t r_addend = 0x36cba
000029f8      }
000029f8      [0x88] = 
000029f8      {
000029f8          uint64_t r_offset = 0x457d0
00002a00          uint64_t r_info = 0x8
00002a08          int64_t r_addend = 0x22527
00002a10      }
00002a10      [0x89] = 
00002a10      {
00002a10          uint64_t r_offset = 0x457d8
00002a18          uint64_t r_info = 0x8
00002a20          int64_t r_addend = 0x22597
00002a28      }
00002a28      [0x8a] = 
00002a28      {
00002a28          uint64_t r_offset = 0x457e0
00002a30          uint64_t r_info = 0x8
00002a38          int64_t r_addend = 0x224ee
00002a40      }
00002a40      [0x8b] = 
00002a40      {
00002a40          uint64_t r_offset = 0x457e8
00002a48          uint64_t r_info = 0x8
00002a50          int64_t r_addend = 0x224a9
00002a58      }
00002a58      [0x8c] = 
00002a58      {
00002a58          uint64_t r_offset = 0x457f0
00002a60          uint64_t r_info = 0x8
00002a68          int64_t r_addend = 0x22464
00002a70      }
00002a70      [0x8d] = 
00002a70      {
00002a70          uint64_t r_offset = 0x457f8
00002a78          uint64_t r_info = 0x8
00002a80          int64_t r_addend = 0x22439
00002a88      }
00002a88      [0x8e] = 
00002a88      {
00002a88          uint64_t r_offset = 0x45800
00002a90          uint64_t r_info = 0x8
00002a98          int64_t r_addend = 0x22416
00002aa0      }
00002aa0      [0x8f] = 
00002aa0      {
00002aa0          uint64_t r_offset = 0x45808
00002aa8          uint64_t r_info = 0x8
00002ab0          int64_t r_addend = 0x21f05
00002ab8      }
00002ab8      [0x90] = 
00002ab8      {
00002ab8          uint64_t r_offset = 0x45810
00002ac0          uint64_t r_info = 0x8
00002ac8          int64_t r_addend = 0x21ee0
00002ad0      }
00002ad0      [0x91] = 
00002ad0      {
00002ad0          uint64_t r_offset = 0x45818
00002ad8          uint64_t r_info = 0x8
00002ae0          int64_t r_addend = 0x223c6
00002ae8      }
00002ae8      [0x92] = 
00002ae8      {
00002ae8          uint64_t r_offset = 0x45820
00002af0          uint64_t r_info = 0x8
00002af8          int64_t r_addend = 0x22390
00002b00      }
00002b00      [0x93] = 
00002b00      {
00002b00          uint64_t r_offset = 0x45828
00002b08          uint64_t r_info = 0x8
00002b10          int64_t r_addend = 0x21f6d
00002b18      }
00002b18      [0x94] = 
00002b18      {
00002b18          uint64_t r_offset = 0x45830
00002b20          uint64_t r_info = 0x8
00002b28          int64_t r_addend = 0x2236d
00002b30      }
00002b30      [0x95] = 
00002b30      {
00002b30          uint64_t r_offset = 0x45838
00002b38          uint64_t r_info = 0x8
00002b40          int64_t r_addend = 0x22342
00002b48      }
00002b48      [0x96] = 
00002b48      {
00002b48          uint64_t r_offset = 0x45840
00002b50          uint64_t r_info = 0x8
00002b58          int64_t r_addend = 0x222fd
00002b60      }
00002b60      [0x97] = 
00002b60      {
00002b60          uint64_t r_offset = 0x45848
00002b68          uint64_t r_info = 0x8
00002b70          int64_t r_addend = 0x222af
00002b78      }
00002b78      [0x98] = 
00002b78      {
00002b78          uint64_t r_offset = 0x45850
00002b80          uint64_t r_info = 0x8
00002b88          int64_t r_addend = 0x2228c
00002b90      }
00002b90      [0x99] = 
00002b90      {
00002b90          uint64_t r_offset = 0x45858
00002b98          uint64_t r_info = 0x8
00002ba0          int64_t r_addend = 0x22241
00002ba8      }
00002ba8      [0x9a] = 
00002ba8      {
00002ba8          uint64_t r_offset = 0x45860
00002bb0          uint64_t r_info = 0x8
00002bb8          int64_t r_addend = 0x221fc
00002bc0      }
00002bc0      [0x9b] = 
00002bc0      {
00002bc0          uint64_t r_offset = 0x45868
00002bc8          uint64_t r_info = 0x8
00002bd0          int64_t r_addend = 0x21e81
00002bd8      }
00002bd8      [0x9c] = 
00002bd8      {
00002bd8          uint64_t r_offset = 0x45870
00002be0          uint64_t r_info = 0x8
00002be8          int64_t r_addend = 0x221b7
00002bf0      }
00002bf0      [0x9d] = 
00002bf0      {
00002bf0          uint64_t r_offset = 0x45878
00002bf8          uint64_t r_info = 0x8
00002c00          int64_t r_addend = 0x21e22
00002c08      }
00002c08      [0x9e] = 
00002c08      {
00002c08          uint64_t r_offset = 0x45880
00002c10          uint64_t r_info = 0x8
00002c18          int64_t r_addend = 0x22172
00002c20      }
00002c20      [0x9f] = 
00002c20      {
00002c20          uint64_t r_offset = 0x45888
00002c28          uint64_t r_info = 0x8
00002c30          int64_t r_addend = 0x21dc3
00002c38      }
00002c38      [0xa0] = 
00002c38      {
00002c38          uint64_t r_offset = 0x45890
00002c40          uint64_t r_info = 0x8
00002c48          int64_t r_addend = 0x2212d
00002c50      }
00002c50      [0xa1] = 
00002c50      {
00002c50          uint64_t r_offset = 0x45898
00002c58          uint64_t r_info = 0x8
00002c60          int64_t r_addend = 0x220e8
00002c68      }
00002c68      [0xa2] = 
00002c68      {
00002c68          uint64_t r_offset = 0x458a0
00002c70          uint64_t r_info = 0x8
00002c78          int64_t r_addend = 0x220a2
00002c80      }
00002c80      [0xa3] = 
00002c80      {
00002c80          uint64_t r_offset = 0x458a8
00002c88          uint64_t r_info = 0x8
00002c90          int64_t r_addend = 0x2205d
00002c98      }
00002c98      [0xa4] = 
00002c98      {
00002c98          uint64_t r_offset = 0x458b0
00002ca0          uint64_t r_info = 0x8
00002ca8          int64_t r_addend = 0x21fd5
00002cb0      }
00002cb0      [0xa5] = 
00002cb0      {
00002cb0          uint64_t r_offset = 0x458b8
00002cb8          uint64_t r_info = 0x8
00002cc0          int64_t r_addend = 0x21d64
00002cc8      }
00002cc8      [0xa6] = 
00002cc8      {
00002cc8          uint64_t r_offset = 0x458c0
00002cd0          uint64_t r_info = 0x8
00002cd8          int64_t r_addend = 0x21d05
00002ce0      }
00002ce0      [0xa7] = 
00002ce0      {
00002ce0          uint64_t r_offset = 0x458c8
00002ce8          uint64_t r_info = 0x8
00002cf0          int64_t r_addend = 0x21c8b
00002cf8      }
00002cf8      [0xa8] = 
00002cf8      {
00002cf8          uint64_t r_offset = 0x458d0
00002d00          uint64_t r_info = 0x8
00002d08          int64_t r_addend = 0x21c2c
00002d10      }
00002d10      [0xa9] = 
00002d10      {
00002d10          uint64_t r_offset = 0x458d8
00002d18          uint64_t r_info = 0x8
00002d20          int64_t r_addend = 0x21bcd
00002d28      }
00002d28      [0xaa] = 
00002d28      {
00002d28          uint64_t r_offset = 0x458e0
00002d30          uint64_t r_info = 0x8
00002d38          int64_t r_addend = 0x21b39
00002d40      }
00002d40      [0xab] = 
00002d40      {
00002d40          uint64_t r_offset = 0x458e8
00002d48          uint64_t r_info = 0x8
00002d50          int64_t r_addend = 0x21f90
00002d58      }
00002d58      [0xac] = 
00002d58      {
00002d58          uint64_t r_offset = 0x458f0
00002d60          uint64_t r_info = 0x8
00002d68          int64_t r_addend = 0x21ad7
00002d70      }
00002d70      [0xad] = 
00002d70      {
00002d70          uint64_t r_offset = 0x458f8
00002d78          uint64_t r_info = 0x8
00002d80          int64_t r_addend = 0x21ad2
00002d88      }
00002d88      [0xae] = 
00002d88      {
00002d88          uint64_t r_offset = 0x45900
00002d90          uint64_t r_info = 0x8
00002d98          int64_t r_addend = 0x21a58
00002da0      }
00002da0      [0xaf] = 
00002da0      {
00002da0          uint64_t r_offset = 0x45908
00002da8          uint64_t r_info = 0x8
00002db0          int64_t r_addend = 0x219e6
00002db8      }
00002db8      [0xb0] = 
00002db8      {
00002db8          uint64_t r_offset = 0x45910
00002dc0          uint64_t r_info = 0x8
00002dc8          int64_t r_addend = 0x240ad
00002dd0      }
00002dd0      [0xb1] = 
00002dd0      {
00002dd0          uint64_t r_offset = 0x45918
00002dd8          uint64_t r_info = 0x8
00002de0          int64_t r_addend = 0x24652
00002de8      }
00002de8      [0xb2] = 
00002de8      {
00002de8          uint64_t r_offset = 0x45920
00002df0          uint64_t r_info = 0x8
00002df8          int64_t r_addend = 0x2511c
00002e00      }
00002e00      [0xb3] = 
00002e00      {
00002e00          uint64_t r_offset = 0x45928
00002e08          uint64_t r_info = 0x8
00002e10          int64_t r_addend = 0x23838
00002e18      }
00002e18      [0xb4] = 
00002e18      {
00002e18          uint64_t r_offset = 0x45930
00002e20          uint64_t r_info = 0x8
00002e28          int64_t r_addend = 0x23a58
00002e30      }
00002e30      [0xb5] = 
00002e30      {
00002e30          uint64_t r_offset = 0x45948
00002e38          uint64_t r_info = 0x8
00002e40          int64_t r_addend = 0x2196c
00002e48      }
00002e48      [0xb6] = 
00002e48      {
00002e48          uint64_t r_offset = 0x45950
00002e50          uint64_t r_info = 0x8
00002e58          int64_t r_addend = 0x218f2
00002e60      }
00002e60      [0xb7] = 
00002e60      {
00002e60          uint64_t r_offset = 0x45958
00002e68          uint64_t r_info = 0x8
00002e70          int64_t r_addend = 0x21f42
00002e78      }
00002e78      [0xb8] = 
00002e78      {
00002e78          uint64_t r_offset = 0x46008
00002e80          uint64_t r_info = 0x8
00002e88          int64_t r_addend = 0x46008
00002e90      }
00002e90      [0xb9] = 
00002e90      {
00002e90          uint64_t r_offset = 0x46010
00002e98          uint64_t r_info = 0x8
00002ea0          int64_t r_addend = 0x5aa0
00002ea8      }
00002ea8      [0xba] = 
00002ea8      {
00002ea8          uint64_t r_offset = 0x46018
00002eb0          uint64_t r_info = 0x8
00002eb8          int64_t r_addend = 0x5a39
00002ec0      }
00002ec0      [0xbb] = 
00002ec0      {
00002ec0          uint64_t r_offset = 0x46020
00002ec8          uint64_t r_info = 0x8
00002ed0          int64_t r_addend = 0x46080
00002ed8      }
00002ed8      [0xbc] = 
00002ed8      {
00002ed8          uint64_t r_offset = 0x46028
00002ee0          uint64_t r_info = 0x8
00002ee8          int64_t r_addend = 0x46060
00002ef0      }
00002ef0      [0xbd] = 
00002ef0      {
00002ef0          uint64_t r_offset = 0x46030
00002ef8          uint64_t r_info = 0x8
00002f00          int64_t r_addend = 0x46040
00002f08      }
00002f08      [0xbe] = 
00002f08      {
00002f08          uint64_t r_offset = 0x46050
00002f10          uint64_t r_info = 0x8
00002f18          int64_t r_addend = 0x450e0
00002f20      }
00002f20      [0xbf] = 
00002f20      {
00002f20          uint64_t r_offset = 0x46058
00002f28          uint64_t r_info = 0x8
00002f30          int64_t r_addend = 0x3431f
00002f38      }
00002f38      [0xc0] = 
00002f38      {
00002f38          uint64_t r_offset = 0x46070
00002f40          uint64_t r_info = 0x8
00002f48          int64_t r_addend = 0x456e0
00002f50      }
00002f50      [0xc1] = 
00002f50      {
00002f50          uint64_t r_offset = 0x46078
00002f58          uint64_t r_info = 0x8
00002f60          int64_t r_addend = 0x3430b
00002f68      }
00002f68      [0xc2] = 
00002f68      {
00002f68          uint64_t r_offset = 0x46090
00002f70          uint64_t r_info = 0x8
00002f78          int64_t r_addend = 0x45000
00002f80      }
00002f80      [0xc3] = 
00002f80      {
00002f80          uint64_t r_offset = 0x46098
00002f88          uint64_t r_info = 0x8
00002f90          int64_t r_addend = 0x342f7
00002f98      }
00002f98      [0xc4] = 
00002f98      {
00002f98          uint64_t r_offset = 0x460c0
00002fa0          uint64_t r_info = 0x8
00002fa8          int64_t r_addend = 0x34a4b
00002fb0      }
00002fb0      [0xc5] = 
00002fb0      {
00002fb0          uint64_t r_offset = 0x460d0
00002fb8          uint64_t r_info = 0x8
00002fc0          int64_t r_addend = 0x452c0
00002fc8      }
00002fc8      [0xc6] = 
00002fc8      {
00002fc8          uint64_t r_offset = 0x460e8
00002fd0          uint64_t r_info = 0x8
00002fd8          int64_t r_addend = 0x34a62
00002fe0      }
00002fe0      [0xc7] = 
00002fe0      {
00002fe0          uint64_t r_offset = 0x460f8
00002fe8          uint64_t r_info = 0x8
00002ff0          int64_t r_addend = 0x452c0
00002ff8      }
00002ff8      [0xc8] = 
00002ff8      {
00002ff8          uint64_t r_offset = 0x46110
00003000          uint64_t r_info = 0x8
00003008          int64_t r_addend = 0x34a85
00003010      }
00003010      [0xc9] = 
00003010      {
00003010          uint64_t r_offset = 0x46120
00003018          uint64_t r_info = 0x8
00003020          int64_t r_addend = 0x45340
00003028      }
00003028      [0xca] = 
00003028      {
00003028          uint64_t r_offset = 0x46138
00003030          uint64_t r_info = 0x8
00003038          int64_t r_addend = 0x34a9b
00003040      }
00003040      [0xcb] = 
00003040      {
00003040          uint64_t r_offset = 0x46148
00003048          uint64_t r_info = 0x8
00003050          int64_t r_addend = 0x453c0
00003058      }
00003058      [0xcc] = 
00003058      {
00003058          uint64_t r_offset = 0x46160
00003060          uint64_t r_info = 0x8
00003068          int64_t r_addend = 0x34aad
00003070      }
00003070      [0xcd] = 
00003070      {
00003070          uint64_t r_offset = 0x46170
00003078          uint64_t r_info = 0x8
00003080          int64_t r_addend = 0x453c0
00003088      }
00003088      [0xce] = 
00003088      {
00003088          uint64_t r_offset = 0x46188
00003090          uint64_t r_info = 0x8
00003098          int64_t r_addend = 0x34aca
000030a0      }
000030a0      [0xcf] = 
000030a0      {
000030a0          uint64_t r_offset = 0x46198
000030a8          uint64_t r_info = 0x8
000030b0          int64_t r_addend = 0x45400
000030b8      }
000030b8      [0xd0] = 
000030b8      {
000030b8          uint64_t r_offset = 0x461b0
000030c0          uint64_t r_info = 0x8
000030c8          int64_t r_addend = 0x34add
000030d0      }
000030d0      [0xd1] = 
000030d0      {
000030d0          uint64_t r_offset = 0x461c0
000030d8          uint64_t r_info = 0x8
000030e0          int64_t r_addend = 0x45440
000030e8      }
000030e8      [0xd2] = 
000030e8      {
000030e8          uint64_t r_offset = 0x461d8
000030f0          uint64_t r_info = 0x8
000030f8          int64_t r_addend = 0x34af0
00003100      }
00003100      [0xd3] = 
00003100      {
00003100          uint64_t r_offset = 0x461e8
00003108          uint64_t r_info = 0x8
00003110          int64_t r_addend = 0x45480
00003118      }
00003118      [0xd4] = 
00003118      {
00003118          uint64_t r_offset = 0x46200
00003120          uint64_t r_info = 0x8
00003128          int64_t r_addend = 0x34b03
00003130      }
00003130      [0xd5] = 
00003130      {
00003130          uint64_t r_offset = 0x46210
00003138          uint64_t r_info = 0x8
00003140          int64_t r_addend = 0x454c0
00003148      }
00003148      [0xd6] = 
00003148      {
00003148          uint64_t r_offset = 0x46228
00003150          uint64_t r_info = 0x8
00003158          int64_t r_addend = 0x34b21
00003160      }
00003160      [0xd7] = 
00003160      {
00003160          uint64_t r_offset = 0x46250
00003168          uint64_t r_info = 0x8
00003170          int64_t r_addend = 0x34b3b
00003178      }
00003178      [0xd8] = 
00003178      {
00003178          uint64_t r_offset = 0x46278
00003180          uint64_t r_info = 0x8
00003188          int64_t r_addend = 0x34b46
00003190      }
00003190      [0xd9] = 
00003190      {
00003190          uint64_t r_offset = 0x462a0
00003198          uint64_t r_info = 0x8
000031a0          int64_t r_addend = 0x34b63
000031a8      }
000031a8      [0xda] = 
000031a8      {
000031a8          uint64_t r_offset = 0x46300
000031b0          uint64_t r_info = 0x8
000031b8          int64_t r_addend = 0x3434b
000031c0      }
000031c0      [0xdb] = 
000031c0      {
000031c0          uint64_t r_offset = 0x46328
000031c8          uint64_t r_info = 0x8
000031d0          int64_t r_addend = 0x34357
000031d8      }
000031d8      [0xdc] = 
000031d8      {
000031d8          uint64_t r_offset = 0x46350
000031e0          uint64_t r_info = 0x8
000031e8          int64_t r_addend = 0x342ec
000031f0      }
000031f0      [0xdd] = 
000031f0      {
000031f0          uint64_t r_offset = 0x46378
000031f8          uint64_t r_info = 0x8
00003200          int64_t r_addend = 0x34300
00003208      }
00003208      [0xde] = 
00003208      {
00003208          uint64_t r_offset = 0x463a0
00003210          uint64_t r_info = 0x8
00003218          int64_t r_addend = 0x34314
00003220      }
00003220      [0xdf] = 
00003220      {
00003220          uint64_t r_offset = 0x463c8
00003228          uint64_t r_info = 0x8
00003230          int64_t r_addend = 0x34328
00003238      }
00003238      [0xe0] = 
00003238      {
00003238          uint64_t r_offset = 0x463f0
00003240          uint64_t r_info = 0x8
00003248          int64_t r_addend = 0x341bb
00003250      }
00003250      [0xe1] = 
00003250      {
00003250          uint64_t r_offset = 0x46440
00003258          uint64_t r_info = 0x8
00003260          int64_t r_addend = 0x34b80
00003268      }
00003268      [0xe2] = 
00003268      {
00003268          uint64_t r_offset = 0x464a0
00003270          uint64_t r_info = 0x8
00003278          int64_t r_addend = 0x34b85
00003280      }
00003280      [0xe3] = 
00003280      {
00003280          uint64_t r_offset = 0x464c8
00003288          uint64_t r_info = 0x8
00003290          int64_t r_addend = 0x34b80
00003298      }
00003298      [0xe4] = 
00003298      {
00003298          uint64_t r_offset = 0x46520
000032a0          uint64_t r_info = 0x8
000032a8          int64_t r_addend = 0x34b85
000032b0      }
000032b0      [0xe5] = 
000032b0      {
000032b0          uint64_t r_offset = 0x46548
000032b8          uint64_t r_info = 0x8
000032c0          int64_t r_addend = 0x34b96
000032c8      }
000032c8      [0xe6] = 
000032c8      {
000032c8          uint64_t r_offset = 0x46570
000032d0          uint64_t r_info = 0x8
000032d8          int64_t r_addend = 0x34b80
000032e0      }
000032e0      [0xe7] = 
000032e0      {
000032e0          uint64_t r_offset = 0x465c0
000032e8          uint64_t r_info = 0x8
000032f0          int64_t r_addend = 0x34b9b
000032f8      }
000032f8      [0xe8] = 
000032f8      {
000032f8          uint64_t r_offset = 0x465d0
00003300          uint64_t r_info = 0x8
00003308          int64_t r_addend = 0x454f0
00003310      }
00003310      [0xe9] = 
00003310      {
00003310          uint64_t r_offset = 0x46620
00003318          uint64_t r_info = 0x8
00003320          int64_t r_addend = 0x34ba9
00003328      }
00003328      [0xea] = 
00003328      {
00003328          uint64_t r_offset = 0x46630
00003330          uint64_t r_info = 0x8
00003338          int64_t r_addend = 0x44dd0
00003340      }
00003340      [0xeb] = 
00003340      {
00003340          uint64_t r_offset = 0x46640
00003348          uint64_t r_info = 0x8
00003350          int64_t r_addend = 0x44da0
00003358      }
00003358      [0xec] = 
00003358      {
00003358          uint64_t r_offset = 0x46648
00003360          uint64_t r_info = 0x8
00003368          int64_t r_addend = 0x34bc7
00003370      }
00003370      [0xed] = 
00003370      {
00003370          uint64_t r_offset = 0x46658
00003378          uint64_t r_info = 0x8
00003380          int64_t r_addend = 0x45570
00003388      }
00003388      [0xee] = 
00003388      {
00003388          uint64_t r_offset = 0x46668
00003390          uint64_t r_info = 0x8
00003398          int64_t r_addend = 0x45520
000033a0      }
000033a0      [0xef] = 
000033a0      {
000033a0          uint64_t r_offset = 0x46670
000033a8          uint64_t r_info = 0x8
000033b0          int64_t r_addend = 0x34bd2
000033b8      }
000033b8      [0xf0] = 
000033b8      {
000033b8          uint64_t r_offset = 0x46680
000033c0          uint64_t r_info = 0x8
000033c8          int64_t r_addend = 0x45550
000033d0      }
000033d0      [0xf1] = 
000033d0      {
000033d0          uint64_t r_offset = 0x46690
000033d8          uint64_t r_info = 0x8
000033e0          int64_t r_addend = 0x45520
000033e8      }
000033e8      [0xf2] = 
000033e8      {
000033e8          uint64_t r_offset = 0x466c0
000033f0          uint64_t r_info = 0x8
000033f8          int64_t r_addend = 0x44e00
00003400      }
00003400      [0xf3] = 
00003400      {
00003400          uint64_t r_offset = 0x466c8
00003408          uint64_t r_info = 0x8
00003410          int64_t r_addend = 0x44ec0
00003418      }
00003418      [0xf4] = 
00003418      {
00003418          uint64_t r_offset = 0x466d0
00003420          uint64_t r_info = 0x8
00003428          int64_t r_addend = 0x44e80
00003430      }
00003430      [0xf5] = 
00003430      {
00003430          uint64_t r_offset = 0x466e0
00003438          uint64_t r_info = 0x8
00003440          int64_t r_addend = 0x39b00
00003448      }
00003448      [0xf6] = 
00003448      {
00003448          uint64_t r_offset = 0x45fc0
00003450          uint64_t r_info = 0x600000006
00003458          int64_t r_addend = 0x0
00003460      }
00003460      [0xf7] = 
00003460      {
00003460          uint64_t r_offset = 0x45fc8
00003468          uint64_t r_info = 0xc00000006
00003470          int64_t r_addend = 0x0
00003478      }
00003478      [0xf8] = 
00003478      {
00003478          uint64_t r_offset = 0x45fd0
00003480          uint64_t r_info = 0x8c00000006
00003488          int64_t r_addend = 0x0
00003490      }
00003490      [0xf9] = 
00003490      {
00003490          uint64_t r_offset = 0x45fd8
00003498          uint64_t r_info = 0x4800000006
000034a0          int64_t r_addend = 0x0
000034a8      }
000034a8      [0xfa] = 
000034a8      {
000034a8          uint64_t r_offset = 0x45fe0
000034b0          uint64_t r_info = 0x7b00000006
000034b8          int64_t r_addend = 0x0
000034c0      }
000034c0      [0xfb] = 
000034c0      {
000034c0          uint64_t r_offset = 0x45fe8
000034c8          uint64_t r_info = 0x8b00000006
000034d0          int64_t r_addend = 0x0
000034d8      }
000034d8      [0xfc] = 
000034d8      {
000034d8          uint64_t r_offset = 0x46700
000034e0          uint64_t r_info = 0x8d00000005
000034e8          int64_t r_addend = 0x0
000034f0      }
000034f0      [0xfd] = 
000034f0      {
000034f0          uint64_t r_offset = 0x46720
000034f8          uint64_t r_info = 0x8e00000005
00003500          int64_t r_addend = 0x0
00003508      }
00003508  }
.rela.dyn (RELA) section ended  {0x1d38-0x3508}

.rela.plt (RELA) section started  {0x3508-0x4180}
00003508                          98 5b 04 00 00 00 00 00 07 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00          .[......................
00003520  a0 5b 04 00 00 00 00 00 07 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 a8 5b 04 00 00 00 00 00  .[.......................[......
00003540  07 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 b0 5b 04 00 00 00 00 00 07 00 00 00 04 00 00 00  .................[..............
00003560  00 00 00 00 00 00 00 00 b8 5b 04 00 00 00 00 00 07 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  .........[......................
00003580  c0 5b 04 00 00 00 00 00 07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 c8 5b 04 00 00 00 00 00  .[.......................[......
000035a0  07 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 d0 5b 04 00 00 00 00 00 07 00 00 00 09 00 00 00  .................[..............
000035c0  00 00 00 00 00 00 00 00 d8 5b 04 00 00 00 00 00 07 00 00 00 0a 00 00 00 00 00 00 00 00 00 00 00  .........[......................
000035e0  e0 5b 04 00 00 00 00 00 07 00 00 00 0b 00 00 00 00 00 00 00 00 00 00 00 e8 5b 04 00 00 00 00 00  .[.......................[......
00003600  07 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 f0 5b 04 00 00 00 00 00 07 00 00 00 0e 00 00 00  .................[..............
00003620  00 00 00 00 00 00 00 00 f8 5b 04 00 00 00 00 00 07 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00  .........[......................
00003640  00 5c 04 00 00 00 00 00 07 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 08 5c 04 00 00 00 00 00  .\.......................\......
00003660  07 00 00 00 11 00 00 00 00 00 00 00 00 00 00 00 10 5c 04 00 00 00 00 00 07 00 00 00 12 00 00 00  .................\..............
00003680  00 00 00 00 00 00 00 00 18 5c 04 00 00 00 00 00 07 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00  .........\......................
000036a0  20 5c 04 00 00 00 00 00 07 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 28 5c 04 00 00 00 00 00   \......................(\......
000036c0  07 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 30 5c 04 00 00 00 00 00 07 00 00 00 16 00 00 00  ................0\..............
000036e0  00 00 00 00 00 00 00 00 38 5c 04 00 00 00 00 00 07 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00  ........8\......................
00003700  40 5c 04 00 00 00 00 00 07 00 00 00 18 00 00 00 00 00 00 00 00 00 00 00 48 5c 04 00 00 00 00 00  @\......................H\......
00003720  07 00 00 00 19 00 00 00 00 00 00 00 00 00 00 00 50 5c 04 00 00 00 00 00 07 00 00 00 1a 00 00 00  ................P\..............
00003740  00 00 00 00 00 00 00 00 58 5c 04 00 00 00 00 00 07 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00  ........X\......................
00003760  60 5c 04 00 00 00 00 00 07 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 68 5c 04 00 00 00 00 00  `\......................h\......
00003780  07 00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 70 5c 04 00 00 00 00 00 07 00 00 00 1e 00 00 00  ................p\..............
000037a0  00 00 00 00 00 00 00 00 78 5c 04 00 00 00 00 00 07 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00  ........x\......................
000037c0  80 5c 04 00 00 00 00 00 07 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 88 5c 04 00 00 00 00 00  .\.......... ............\......
000037e0  07 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00 90 5c 04 00 00 00 00 00 07 00 00 00 22 00 00 00  ....!............\.........."...
00003800  00 00 00 00 00 00 00 00 98 5c 04 00 00 00 00 00 07 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00  .........\..........#...........
00003820  a0 5c 04 00 00 00 00 00 07 00 00 00 24 00 00 00 00 00 00 00 00 00 00 00 a8 5c 04 00 00 00 00 00  .\..........$............\......
00003840  07 00 00 00 25 00 00 00 00 00 00 00 00 00 00 00 b0 5c 04 00 00 00 00 00 07 00 00 00 26 00 00 00  ....%............\..........&...
00003860  00 00 00 00 00 00 00 00 b8 5c 04 00 00 00 00 00 07 00 00 00 27 00 00 00 00 00 00 00 00 00 00 00  .........\..........'...........
00003880  c0 5c 04 00 00 00 00 00 07 00 00 00 28 00 00 00 00 00 00 00 00 00 00 00 c8 5c 04 00 00 00 00 00  .\..........(............\......
000038a0  07 00 00 00 29 00 00 00 00 00 00 00 00 00 00 00 d0 5c 04 00 00 00 00 00 07 00 00 00 2a 00 00 00  ....)............\..........*...
000038c0  00 00 00 00 00 00 00 00 d8 5c 04 00 00 00 00 00 07 00 00 00 2b 00 00 00 00 00 00 00 00 00 00 00  .........\..........+...........
000038e0  e0 5c 04 00 00 00 00 00 07 00 00 00 2c 00 00 00 00 00 00 00 00 00 00 00 e8 5c 04 00 00 00 00 00  .\..........,............\......
00003900  07 00 00 00 2d 00 00 00 00 00 00 00 00 00 00 00 f0 5c 04 00 00 00 00 00 07 00 00 00 2e 00 00 00  ....-............\..............
00003920  00 00 00 00 00 00 00 00 f8 5c 04 00 00 00 00 00 07 00 00 00 2f 00 00 00 00 00 00 00 00 00 00 00  .........\........../...........
00003940  00 5d 04 00 00 00 00 00 07 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 08 5d 04 00 00 00 00 00  .]..........0............]......
00003960  07 00 00 00 31 00 00 00 00 00 00 00 00 00 00 00 10 5d 04 00 00 00 00 00 07 00 00 00 32 00 00 00  ....1............]..........2...
00003980  00 00 00 00 00 00 00 00 18 5d 04 00 00 00 00 00 07 00 00 00 33 00 00 00 00 00 00 00 00 00 00 00  .........]..........3...........
000039a0  20 5d 04 00 00 00 00 00 07 00 00 00 34 00 00 00 00 00 00 00 00 00 00 00 28 5d 04 00 00 00 00 00   ]..........4...........(]......
000039c0  07 00 00 00 35 00 00 00 00 00 00 00 00 00 00 00 30 5d 04 00 00 00 00 00 07 00 00 00 36 00 00 00  ....5...........0]..........6...
000039e0  00 00 00 00 00 00 00 00 38 5d 04 00 00 00 00 00 07 00 00 00 37 00 00 00 00 00 00 00 00 00 00 00  ........8]..........7...........
00003a00  40 5d 04 00 00 00 00 00 07 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 48 5d 04 00 00 00 00 00  @]..........8...........H]......
00003a20  07 00 00 00 39 00 00 00 00 00 00 00 00 00 00 00 50 5d 04 00 00 00 00 00 07 00 00 00 3a 00 00 00  ....9...........P]..........:...
00003a40  00 00 00 00 00 00 00 00 58 5d 04 00 00 00 00 00 07 00 00 00 3b 00 00 00 00 00 00 00 00 00 00 00  ........X]..........;...........
00003a60  60 5d 04 00 00 00 00 00 07 00 00 00 3c 00 00 00 00 00 00 00 00 00 00 00 68 5d 04 00 00 00 00 00  `]..........<...........h]......
00003a80  07 00 00 00 3d 00 00 00 00 00 00 00 00 00 00 00 70 5d 04 00 00 00 00 00 07 00 00 00 3e 00 00 00  ....=...........p]..........>...
00003aa0  00 00 00 00 00 00 00 00 78 5d 04 00 00 00 00 00 07 00 00 00 3f 00 00 00 00 00 00 00 00 00 00 00  ........x]..........?...........
00003ac0  80 5d 04 00 00 00 00 00 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 88 5d 04 00 00 00 00 00  .]..........@............]......
00003ae0  07 00 00 00 41 00 00 00 00 00 00 00 00 00 00 00 90 5d 04 00 00 00 00 00 07 00 00 00 42 00 00 00  ....A............]..........B...
00003b00  00 00 00 00 00 00 00 00 98 5d 04 00 00 00 00 00 07 00 00 00 43 00 00 00 00 00 00 00 00 00 00 00  .........]..........C...........
00003b20  a0 5d 04 00 00 00 00 00 07 00 00 00 44 00 00 00 00 00 00 00 00 00 00 00 a8 5d 04 00 00 00 00 00  .]..........D............]......
00003b40  07 00 00 00 45 00 00 00 00 00 00 00 00 00 00 00 b0 5d 04 00 00 00 00 00 07 00 00 00 46 00 00 00  ....E............]..........F...
00003b60  00 00 00 00 00 00 00 00 b8 5d 04 00 00 00 00 00 07 00 00 00 47 00 00 00 00 00 00 00 00 00 00 00  .........]..........G...........
00003b80  c0 5d 04 00 00 00 00 00 07 00 00 00 49 00 00 00 00 00 00 00 00 00 00 00 c8 5d 04 00 00 00 00 00  .]..........I............]......
00003ba0  07 00 00 00 4a 00 00 00 00 00 00 00 00 00 00 00 d0 5d 04 00 00 00 00 00 07 00 00 00 4b 00 00 00  ....J............]..........K...
00003bc0  00 00 00 00 00 00 00 00 d8 5d 04 00 00 00 00 00 07 00 00 00 4c 00 00 00 00 00 00 00 00 00 00 00  .........]..........L...........
00003be0  e0 5d 04 00 00 00 00 00 07 00 00 00 4d 00 00 00 00 00 00 00 00 00 00 00 e8 5d 04 00 00 00 00 00  .]..........M............]......
00003c00  07 00 00 00 4e 00 00 00 00 00 00 00 00 00 00 00 f0 5d 04 00 00 00 00 00 07 00 00 00 4f 00 00 00  ....N............]..........O...
00003c20  00 00 00 00 00 00 00 00 f8 5d 04 00 00 00 00 00 07 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00  .........]..........P...........
00003c40  00 5e 04 00 00 00 00 00 07 00 00 00 51 00 00 00 00 00 00 00 00 00 00 00 08 5e 04 00 00 00 00 00  .^..........Q............^......
00003c60  07 00 00 00 52 00 00 00 00 00 00 00 00 00 00 00 10 5e 04 00 00 00 00 00 07 00 00 00 53 00 00 00  ....R............^..........S...
00003c80  00 00 00 00 00 00 00 00 18 5e 04 00 00 00 00 00 07 00 00 00 54 00 00 00 00 00 00 00 00 00 00 00  .........^..........T...........
00003ca0  20 5e 04 00 00 00 00 00 07 00 00 00 55 00 00 00 00 00 00 00 00 00 00 00 28 5e 04 00 00 00 00 00   ^..........U...........(^......
00003cc0  07 00 00 00 56 00 00 00 00 00 00 00 00 00 00 00 30 5e 04 00 00 00 00 00 07 00 00 00 57 00 00 00  ....V...........0^..........W...
00003ce0  00 00 00 00 00 00 00 00 38 5e 04 00 00 00 00 00 07 00 00 00 58 00 00 00 00 00 00 00 00 00 00 00  ........8^..........X...........
00003d00  40 5e 04 00 00 00 00 00 07 00 00 00 59 00 00 00 00 00 00 00 00 00 00 00 48 5e 04 00 00 00 00 00  @^..........Y...........H^......
00003d20  07 00 00 00 5a 00 00 00 00 00 00 00 00 00 00 00 50 5e 04 00 00 00 00 00 07 00 00 00 5b 00 00 00  ....Z...........P^..........[...
00003d40  00 00 00 00 00 00 00 00 58 5e 04 00 00 00 00 00 07 00 00 00 5c 00 00 00 00 00 00 00 00 00 00 00  ........X^..........\...........
00003d60  60 5e 04 00 00 00 00 00 07 00 00 00 5d 00 00 00 00 00 00 00 00 00 00 00 68 5e 04 00 00 00 00 00  `^..........]...........h^......
00003d80  07 00 00 00 5e 00 00 00 00 00 00 00 00 00 00 00 70 5e 04 00 00 00 00 00 07 00 00 00 5f 00 00 00  ....^...........p^.........._...
00003da0  00 00 00 00 00 00 00 00 78 5e 04 00 00 00 00 00 07 00 00 00 60 00 00 00 00 00 00 00 00 00 00 00  ........x^..........`...........
00003dc0  80 5e 04 00 00 00 00 00 07 00 00 00 61 00 00 00 00 00 00 00 00 00 00 00 88 5e 04 00 00 00 00 00  .^..........a............^......
00003de0  07 00 00 00 62 00 00 00 00 00 00 00 00 00 00 00 90 5e 04 00 00 00 00 00 07 00 00 00 63 00 00 00  ....b............^..........c...
00003e00  00 00 00 00 00 00 00 00 98 5e 04 00 00 00 00 00 07 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00  .........^..........d...........
00003e20  a0 5e 04 00 00 00 00 00 07 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 a8 5e 04 00 00 00 00 00  .^..........e............^......
00003e40  07 00 00 00 66 00 00 00 00 00 00 00 00 00 00 00 b0 5e 04 00 00 00 00 00 07 00 00 00 67 00 00 00  ....f............^..........g...
00003e60  00 00 00 00 00 00 00 00 b8 5e 04 00 00 00 00 00 07 00 00 00 68 00 00 00 00 00 00 00 00 00 00 00  .........^..........h...........
00003e80  c0 5e 04 00 00 00 00 00 07 00 00 00 69 00 00 00 00 00 00 00 00 00 00 00 c8 5e 04 00 00 00 00 00  .^..........i............^......
00003ea0  07 00 00 00 6a 00 00 00 00 00 00 00 00 00 00 00 d0 5e 04 00 00 00 00 00 07 00 00 00 6b 00 00 00  ....j............^..........k...
00003ec0  00 00 00 00 00 00 00 00 d8 5e 04 00 00 00 00 00 07 00 00 00 6c 00 00 00 00 00 00 00 00 00 00 00  .........^..........l...........
00003ee0  e0 5e 04 00 00 00 00 00 07 00 00 00 6d 00 00 00 00 00 00 00 00 00 00 00 e8 5e 04 00 00 00 00 00  .^..........m............^......
00003f00  07 00 00 00 6e 00 00 00 00 00 00 00 00 00 00 00 f0 5e 04 00 00 00 00 00 07 00 00 00 6f 00 00 00  ....n............^..........o...
00003f20  00 00 00 00 00 00 00 00 f8 5e 04 00 00 00 00 00 07 00 00 00 70 00 00 00 00 00 00 00 00 00 00 00  .........^..........p...........
00003f40  00 5f 04 00 00 00 00 00 07 00 00 00 71 00 00 00 00 00 00 00 00 00 00 00 08 5f 04 00 00 00 00 00  ._..........q............_......
00003f60  07 00 00 00 72 00 00 00 00 00 00 00 00 00 00 00 10 5f 04 00 00 00 00 00 07 00 00 00 73 00 00 00  ....r............_..........s...
00003f80  00 00 00 00 00 00 00 00 18 5f 04 00 00 00 00 00 07 00 00 00 74 00 00 00 00 00 00 00 00 00 00 00  ........._..........t...........
00003fa0  20 5f 04 00 00 00 00 00 07 00 00 00 75 00 00 00 00 00 00 00 00 00 00 00 28 5f 04 00 00 00 00 00   _..........u...........(_......
00003fc0  07 00 00 00 76 00 00 00 00 00 00 00 00 00 00 00 30 5f 04 00 00 00 00 00 07 00 00 00 77 00 00 00  ....v...........0_..........w...
00003fe0  00 00 00 00 00 00 00 00 38 5f 04 00 00 00 00 00 07 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00  ........8_..........x...........
00004000  40 5f 04 00 00 00 00 00 07 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 48 5f 04 00 00 00 00 00  @_..........y...........H_......
00004020  07 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 50 5f 04 00 00 00 00 00 07 00 00 00 7c 00 00 00  ....z...........P_..........|...
00004040  00 00 00 00 00 00 00 00 58 5f 04 00 00 00 00 00 07 00 00 00 7d 00 00 00 00 00 00 00 00 00 00 00  ........X_..........}...........
00004060  60 5f 04 00 00 00 00 00 07 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 68 5f 04 00 00 00 00 00  `_..........~...........h_......
00004080  07 00 00 00 7f 00 00 00 00 00 00 00 00 00 00 00 70 5f 04 00 00 00 00 00 07 00 00 00 80 00 00 00  ................p_..............
000040a0  00 00 00 00 00 00 00 00 78 5f 04 00 00 00 00 00 07 00 00 00 81 00 00 00 00 00 00 00 00 00 00 00  ........x_......................
000040c0  80 5f 04 00 00 00 00 00 07 00 00 00 82 00 00 00 00 00 00 00 00 00 00 00 88 5f 04 00 00 00 00 00  ._......................._......
000040e0  07 00 00 00 83 00 00 00 00 00 00 00 00 00 00 00 90 5f 04 00 00 00 00 00 07 00 00 00 84 00 00 00  ................._..............
00004100  00 00 00 00 00 00 00 00 98 5f 04 00 00 00 00 00 07 00 00 00 85 00 00 00 00 00 00 00 00 00 00 00  ........._......................
00004120  a0 5f 04 00 00 00 00 00 07 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 a8 5f 04 00 00 00 00 00  ._......................._......
00004140  07 00 00 00 87 00 00 00 00 00 00 00 00 00 00 00 b0 5f 04 00 00 00 00 00 07 00 00 00 88 00 00 00  ................._..............
00004160  00 00 00 00 00 00 00 00 b8 5f 04 00 00 00 00 00 07 00 00 00 89 00 00 00 00 00 00 00 00 00 00 00  ........._......................
.rela.plt (RELA) section ended  {0x3508-0x4180}

.init (PROGBITS) section started  {0x5000-0x501b}

00005000    void _init()

00005000  f30f1efa           endbr64 
00005004  4883ec08           sub     rsp, 0x8
00005008  488b05c90f0400     mov     rax, qword [rel __gmon_start__]
0000500f  4885c0             test    rax, rax
00005012  7402               je      0x5016

00005014  ffd0               call    rax

00005016  4883c408           add     rsp, 0x8
0000501a  c3                 retn     {__return_addr}

.init (PROGBITS) section ended  {0x5000-0x501b}

0000501b                                                                                   00 00 00 00 00                             .....

.plt (PROGBITS) section started  {0x5020-0x5880}

00005020    int64_t sub_5020()

00005020  ff35620b0400       push    qword [rel data_45b88] {var_8}  {0x0}
00005026  ff25640b0400       jmp     qword [rel data_45b90]  {__elf_header}

0000502c                                      0f 1f 40 00                                                              ..@.

00005030    char* getenv(char const* name)

00005030  ff25620b0400       jmp     qword [rel getenv]


00005036    int64_t sub_5036()

00005036  6800000000         push    0x0 {var_8}
0000503b  e9e0ffffff         jmp     sub_5020


00005040    int64_t __isoc23_strtoul()

00005040  ff255a0b0400       jmp     qword [rel __isoc23_strtoul]


00005046    int64_t sub_5046()

00005046  6801000000         push    0x1 {var_8}
0000504b  e9d0ffffff         jmp     sub_5020


00005050    int32_t __snprintf_chk(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, ...)

00005050  ff25520b0400       jmp     qword [rel __snprintf_chk]


00005056    int64_t sub_5056()

00005056  6802000000         push    0x2 {var_8}
0000505b  e9c0ffffff         jmp     sub_5020


00005060    void free(void* ptr)

00005060  ff254a0b0400       jmp     qword [rel free]


00005066    int64_t sub_5066()

00005066  6803000000         push    0x3 {var_8}
0000506b  e9b0ffffff         jmp     sub_5020


00005070    struct tm* localtime(time_t* t)

00005070  ff25420b0400       jmp     qword [rel localtime]


00005076    int64_t sub_5076()

00005076  6804000000         push    0x4 {var_8}
0000507b  e9a0ffffff         jmp     sub_5020


00005080    void abort() __noreturn

00005080  ff253a0b0400       jmp     qword [rel abort]
{ Does not return }


00005086    int64_t sub_5086()

00005086  6805000000         push    0x5 {var_8}
0000508b  e990ffffff         jmp     sub_5020


00005090    int32_t* __errno_location()

00005090  ff25320b0400       jmp     qword [rel __errno_location]


00005096    int64_t sub_5096()

00005096  6806000000         push    0x6 {var_8}
0000509b  e980ffffff         jmp     sub_5020


000050a0    int64_t unlink()

000050a0  ff252a0b0400       jmp     qword [rel unlink]


000050a6    int64_t sub_50a6()

000050a6  6807000000         push    0x7 {var_8}
000050ab  e970ffffff         jmp     sub_5020


000050b0    char* strncpy(char* arg1, char const* arg2, uint64_t arg3)

000050b0  ff25220b0400       jmp     qword [rel strncpy]


000050b6    int64_t sub_50b6()

000050b6  6808000000         push    0x8 {var_8}
000050bb  e960ffffff         jmp     sub_5020


000050c0    int32_t strncmp(char const* arg1, char const* arg2, uint64_t arg3)

000050c0  ff251a0b0400       jmp     qword [rel strncmp]


000050c6    int64_t sub_50c6()

000050c6  6809000000         push    0x9 {var_8}
000050cb  e950ffffff         jmp     sub_5020


000050d0    void _exit(int32_t status) __noreturn

000050d0  ff25120b0400       jmp     qword [rel _exit]
{ Does not return }


000050d6    int64_t sub_50d6()

000050d6  680a000000         push    0xa {var_8}
000050db  e940ffffff         jmp     sub_5020


000050e0    int64_t logout()

000050e0  ff250a0b0400       jmp     qword [rel logout]


000050e6    int64_t sub_50e6()

000050e6  680b000000         push    0xb {var_8}
000050eb  e930ffffff         jmp     sub_5020


000050f0    int64_t inflate()

000050f0  ff25020b0400       jmp     qword [rel inflate]


000050f6    int64_t sub_50f6()

000050f6  680c000000         push    0xc {var_8}
000050fb  e920ffffff         jmp     sub_5020


00005100    int64_t mkdir()

00005100  ff25fa0a0400       jmp     qword [rel mkdir]


00005106    int64_t sub_5106()

00005106  680d000000         push    0xd {var_8}
0000510b  e910ffffff         jmp     sub_5020


00005110    ssize_t writev(int32_t fd, struct iovec* iov, int32_t iovcnt)

00005110  ff25f20a0400       jmp     qword [rel writev]


00005116    int64_t sub_5116()

00005116  680e000000         push    0xe {var_8}
0000511b  e900ffffff         jmp     sub_5020


00005120    int32_t sigaction(int32_t sig, struct sigaction* act, struct sigaction* oact)

00005120  ff25ea0a0400       jmp     qword [rel sigaction]


00005126    int64_t sub_5126()

00005126  680f000000         push    0xf {var_8}
0000512b  e9f0feffff         jmp     sub_5020


00005130    int64_t logwtmp()

00005130  ff25e20a0400       jmp     qword [rel logwtmp]


00005136    int64_t sub_5136()

00005136  6810000000         push    0x10 {var_8}
0000513b  e9e0feffff         jmp     sub_5020


00005140    int64_t setsockopt()

00005140  ff25da0a0400       jmp     qword [rel setsockopt]


00005146    int64_t sub_5146()

00005146  6811000000         push    0x11 {var_8}
0000514b  e9d0feffff         jmp     sub_5020


00005150    int32_t fcntl(int32_t fd, int32_t cmd, ...)

00005150  ff25d20a0400       jmp     qword [rel fcntl]


00005156    int64_t sub_5156()

00005156  6812000000         push    0x12 {var_8}
0000515b  e9c0feffff         jmp     sub_5020


00005160    int32_t clock_gettime(clockid_t clock_id, struct timespec* tp)

00005160  ff25ca0a0400       jmp     qword [rel clock_gettime]


00005166    int64_t sub_5166()

00005166  6813000000         push    0x13 {var_8}
0000516b  e9b0feffff         jmp     sub_5020


00005170    int64_t getpid()

00005170  ff25c20a0400       jmp     qword [rel getpid]


00005176    int64_t sub_5176()

00005176  6814000000         push    0x14 {var_8}
0000517b  e9a0feffff         jmp     sub_5020


00005180    int64_t getpeername()

00005180  ff25ba0a0400       jmp     qword [rel getpeername]


00005186    int64_t sub_5186()

00005186  6815000000         push    0x15 {var_8}
0000518b  e990feffff         jmp     sub_5020


00005190    clock_t clock()

00005190  ff25b20a0400       jmp     qword [rel clock]


00005196    int64_t sub_5196()

00005196  6816000000         push    0x16 {var_8}
0000519b  e980feffff         jmp     sub_5020


000051a0    int32_t fclose(FILE* fp)

000051a0  ff25aa0a0400       jmp     qword [rel fclose]


000051a6    int64_t sub_51a6()

000051a6  6817000000         push    0x17 {var_8}
000051ab  e970feffff         jmp     sub_5020


000051b0    struct passwd* getpwuid(uid_t uid)

000051b0  ff25a20a0400       jmp     qword [rel getpwuid]


000051b6    int64_t sub_51b6()

000051b6  6818000000         push    0x18 {var_8}
000051bb  e960feffff         jmp     sub_5020


000051c0    int32_t clearenv()

000051c0  ff259a0a0400       jmp     qword [rel clearenv]


000051c6    int64_t sub_51c6()

000051c6  6819000000         push    0x19 {var_8}
000051cb  e950feffff         jmp     sub_5020


000051d0    int64_t shutdown()

000051d0  ff25920a0400       jmp     qword [rel shutdown]


000051d6    int64_t sub_51d6()

000051d6  681a000000         push    0x1a {var_8}
000051db  e940feffff         jmp     sub_5020


000051e0    int64_t rmdir()

000051e0  ff258a0a0400       jmp     qword [rel rmdir]


000051e6    int64_t sub_51e6()

000051e6  681b000000         push    0x1b {var_8}
000051eb  e930feffff         jmp     sub_5020


000051f0    uint64_t strlen(char const* arg1)

000051f0  ff25820a0400       jmp     qword [rel strlen]


000051f6    int64_t sub_51f6()

000051f6  681c000000         push    0x1c {var_8}
000051fb  e920feffff         jmp     sub_5020


00005200    int64_t chdir()

00005200  ff257a0a0400       jmp     qword [rel chdir]


00005206    int64_t sub_5206()

00005206  681d000000         push    0x1d {var_8}
0000520b  e910feffff         jmp     sub_5020


00005210    void __stack_chk_fail() __noreturn

00005210  ff25720a0400       jmp     qword [rel __stack_chk_fail]
{ Does not return }


00005216    int64_t sub_5216()

00005216  681e000000         push    0x1e {var_8}
0000521b  e900feffff         jmp     sub_5020


00005220    int64_t getuid()

00005220  ff256a0a0400       jmp     qword [rel getuid]


00005226    int64_t sub_5226()

00005226  681f000000         push    0x1f {var_8}
0000522b  e9f0fdffff         jmp     sub_5020


00005230    int64_t dup2()

00005230  ff25620a0400       jmp     qword [rel dup2]


00005236    int64_t sub_5236()

00005236  6820000000         push    0x20 {var_8}
0000523b  e9e0fdffff         jmp     sub_5020


00005240    char* strchr(char const* arg1, int32_t arg2)

00005240  ff255a0a0400       jmp     qword [rel strchr]


00005246    int64_t sub_5246()

00005246  6821000000         push    0x21 {var_8}
0000524b  e9d0fdffff         jmp     sub_5020


00005250    int64_t __fdelt_chk(int64_t d)

00005250  ff25520a0400       jmp     qword [rel __fdelt_chk]


00005256    int64_t sub_5256()

00005256  6822000000         push    0x22 {var_8}
0000525b  e9c0fdffff         jmp     sub_5020


00005260    int32_t nanosleep(struct timespec* requested_time, struct timespec* remaining)

00005260  ff254a0a0400       jmp     qword [rel nanosleep]


00005266    int64_t sub_5266()

00005266  6823000000         push    0x23 {var_8}
0000526b  e9b0fdffff         jmp     sub_5020


00005270    char const* gai_strerror(int32_t code)

00005270  ff25420a0400       jmp     qword [rel gai_strerror]


00005276    int64_t sub_5276()

00005276  6824000000         push    0x24 {var_8}
0000527b  e9a0fdffff         jmp     sub_5020


00005280    char* strrchr(char const* arg1, int32_t arg2)

00005280  ff253a0a0400       jmp     qword [rel strrchr]


00005286    int64_t sub_5286()

00005286  6825000000         push    0x25 {var_8}
0000528b  e990fdffff         jmp     sub_5020


00005290    char* dirname(char* path)

00005290  ff25320a0400       jmp     qword [rel dirname]


00005296    int64_t sub_5296()

00005296  6826000000         push    0x26 {var_8}
0000529b  e980fdffff         jmp     sub_5020


000052a0    off64_t lseek(int32_t fd, int64_t __arg2, int32_t whence)

000052a0  ff252a0a0400       jmp     qword [rel lseek]


000052a6    int64_t sub_52a6()

000052a6  6827000000         push    0x27 {var_8}
000052ab  e970fdffff         jmp     sub_5020


000052b0    int32_t gettimeofday(struct timeval* arg1, void* arg2)

000052b0  ff25220a0400       jmp     qword [rel gettimeofday]


000052b6    int64_t sub_52b6()

000052b6  6828000000         push    0x28 {var_8}
000052bb  e960fdffff         jmp     sub_5020


000052c0    void __assert_fail(char const* assertion, char const* file, uint32_t line, char const* function) __noreturn

000052c0  ff251a0a0400       jmp     qword [rel __assert_fail]
{ Does not return }


000052c6    int64_t sub_52c6()

000052c6  6829000000         push    0x29 {var_8}
000052cb  e950fdffff         jmp     sub_5020


000052d0    int32_t fputs(char const* str, FILE* fp)

000052d0  ff25120a0400       jmp     qword [rel fputs]


000052d6    int64_t sub_52d6()

000052d6  682a000000         push    0x2a {var_8}
000052db  e940fdffff         jmp     sub_5020


000052e0    int64_t deflate()

000052e0  ff250a0a0400       jmp     qword [rel deflate]


000052e6    int64_t sub_52e6()

000052e6  682b000000         push    0x2b {var_8}
000052eb  e930fdffff         jmp     sub_5020


000052f0    int64_t memset(void* arg1, int32_t arg2, uint64_t arg3)

000052f0  ff25020a0400       jmp     qword [rel memset]


000052f6    int64_t sub_52f6()

000052f6  682c000000         push    0x2c {var_8}
000052fb  e920fdffff         jmp     sub_5020


00005300    int64_t geteuid()

00005300  ff25fa090400       jmp     qword [rel geteuid]


00005306    int64_t sub_5306()

00005306  682d000000         push    0x2d {var_8}
0000530b  e910fdffff         jmp     sub_5020


00005310    void setusershell()

00005310  ff25f2090400       jmp     qword [rel setusershell]


00005316    int64_t sub_5316()

00005316  682e000000         push    0x2e {var_8}
0000531b  e900fdffff         jmp     sub_5020


00005320    int64_t ioctl()

00005320  ff25ea090400       jmp     qword [rel ioctl]


00005326    int64_t sub_5326()

00005326  682f000000         push    0x2f {var_8}
0000532b  e9f0fcffff         jmp     sub_5020


00005330    int32_t fgetc(FILE* fp)

00005330  ff25e2090400       jmp     qword [rel fgetc]


00005336    int64_t sub_5336()

00005336  6830000000         push    0x30 {var_8}
0000533b  e9e0fcffff         jmp     sub_5020


00005340    int32_t close(int32_t fd)

00005340  ff25da090400       jmp     qword [rel close]


00005346    int64_t sub_5346()

00005346  6831000000         push    0x31 {var_8}
0000534b  e9d0fcffff         jmp     sub_5020


00005350    int64_t pipe()

00005350  ff25d2090400       jmp     qword [rel pipe]


00005356    int64_t sub_5356()

00005356  6832000000         push    0x32 {var_8}
0000535b  e9c0fcffff         jmp     sub_5020


00005360    int32_t getnameinfo(struct sockaddr* sa, socklen_t addrlen, char* host, socklen_t hostlen, char* serv, socklen_t servlen, int32_t flags)

00005360  ff25ca090400       jmp     qword [rel getnameinfo]


00005366    int64_t sub_5366()

00005366  6833000000         push    0x33 {var_8}
0000536b  e9b0fcffff         jmp     sub_5020


00005370    int64_t setsid()

00005370  ff25c2090400       jmp     qword [rel setsid]


00005376    int64_t sub_5376()

00005376  6834000000         push    0x34 {var_8}
0000537b  e9a0fcffff         jmp     sub_5020


00005380    char* getusershell()

00005380  ff25ba090400       jmp     qword [rel getusershell]


00005386    int64_t sub_5386()

00005386  6835000000         push    0x35 {var_8}
0000538b  e990fcffff         jmp     sub_5020


00005390    int64_t deflateInit2_()

00005390  ff25b2090400       jmp     qword [rel deflateInit2_]


00005396    int64_t sub_5396()

00005396  6836000000         push    0x36 {var_8}
0000539b  e980fcffff         jmp     sub_5020


000053a0    int64_t memchr(void const* arg1, int32_t arg2, uint64_t arg3)

000053a0  ff25aa090400       jmp     qword [rel memchr]


000053a6    int64_t sub_53a6()

000053a6  6837000000         push    0x37 {var_8}
000053ab  e970fcffff         jmp     sub_5020


000053b0    ssize_t read(int32_t fd, void* buf, uint64_t nbytes)

000053b0  ff25a2090400       jmp     qword [rel read]


000053b6    int64_t sub_53b6()

000053b6  6838000000         push    0x38 {var_8}
000053bb  e960fcffff         jmp     sub_5020


000053c0    int32_t memcmp(void const* arg1, void const* arg2, uint64_t arg3)

000053c0  ff259a090400       jmp     qword [rel memcmp]


000053c6    int64_t sub_53c6()

000053c6  6839000000         push    0x39 {var_8}
000053cb  e950fcffff         jmp     sub_5020


000053d0    int64_t getsockopt()

000053d0  ff2592090400       jmp     qword [rel getsockopt]


000053d6    int64_t sub_53d6()

000053d6  683a000000         push    0x3a {var_8}
000053db  e940fcffff         jmp     sub_5020


000053e0    int64_t login()

000053e0  ff258a090400       jmp     qword [rel login]


000053e6    int64_t sub_53e6()

000053e6  683b000000         push    0x3b {var_8}
000053eb  e930fcffff         jmp     sub_5020


000053f0    int64_t calloc(size_t nmemb, size_t size)

000053f0  ff2582090400       jmp     qword [rel calloc]


000053f6    int64_t sub_53f6()

000053f6  683c000000         push    0x3c {var_8}
000053fb  e920fcffff         jmp     sub_5020


00005400    int32_t putenv(char* string)

00005400  ff257a090400       jmp     qword [rel putenv]


00005406    int64_t sub_5406()

00005406  683d000000         push    0x3d {var_8}
0000540b  e910fcffff         jmp     sub_5020


00005410    int32_t strcmp(char const* arg1, char const* arg2)

00005410  ff2572090400       jmp     qword [rel strcmp]


00005416    int64_t sub_5416()

00005416  683e000000         push    0x3e {var_8}
0000541b  e900fcffff         jmp     sub_5020


00005420    __sighandler_t signal(int32_t sig, __sighandler_t handler)

00005420  ff256a090400       jmp     qword [rel signal]


00005426    int64_t sub_5426()

00005426  683f000000         push    0x3f {var_8}
0000542b  e9f0fbffff         jmp     sub_5020


00005430    struct passwd* getpwnam(char const* name)

00005430  ff2562090400       jmp     qword [rel getpwnam]


00005436    int64_t sub_5436()

00005436  6840000000         push    0x40 {var_8}
0000543b  e9e0fbffff         jmp     sub_5020


00005440    int32_t fexecve(int32_t fd, char* const* argv, char* const* envp)

00005440  ff255a090400       jmp     qword [rel fexecve]


00005446    int64_t sub_5446()

00005446  6841000000         push    0x41 {var_8}
0000544b  e9d0fbffff         jmp     sub_5020


00005450    int64_t __memcpy_chk(void* arg1, void const* arg2, uint64_t arg3, uint64_t arg4)

00005450  ff2552090400       jmp     qword [rel __memcpy_chk]


00005456    int64_t sub_5456()

00005456  6842000000         push    0x42 {var_8}
0000545b  e9c0fbffff         jmp     sub_5020


00005460    int64_t syscall()

00005460  ff254a090400       jmp     qword [rel syscall]


00005466    int64_t sub_5466()

00005466  6843000000         push    0x43 {var_8}
0000546b  e9b0fbffff         jmp     sub_5020


00005470    int32_t sigemptyset(sigset_t* set)

00005470  ff2542090400       jmp     qword [rel sigemptyset]


00005476    int64_t sub_5476()

00005476  6844000000         push    0x44 {var_8}
0000547b  e9a0fbffff         jmp     sub_5020


00005480    int64_t stat()

00005480  ff253a090400       jmp     qword [rel stat]


00005486    int64_t sub_5486()

00005486  6845000000         push    0x45 {var_8}
0000548b  e990fbffff         jmp     sub_5020


00005490    int64_t memcpy(void* arg1, void const* arg2, uint64_t arg3)

00005490  ff2532090400       jmp     qword [rel memcpy]


00005496    int64_t sub_5496()

00005496  6846000000         push    0x46 {var_8}
0000549b  e980fbffff         jmp     sub_5020


000054a0    struct group* getgrnam(char const* name)

000054a0  ff252a090400       jmp     qword [rel getgrnam]


000054a6    int64_t sub_54a6()

000054a6  6847000000         push    0x47 {var_8}
000054ab  e970fbffff         jmp     sub_5020


000054b0    int32_t prctl(int32_t option, ...)

000054b0  ff2522090400       jmp     qword [rel prctl]


000054b6    int64_t sub_54b6()

000054b6  6848000000         push    0x48 {var_8}
000054bb  e960fbffff         jmp     sub_5020


000054c0    int64_t inflateEnd()

000054c0  ff251a090400       jmp     qword [rel inflateEnd]


000054c6    int64_t sub_54c6()

000054c6  6849000000         push    0x49 {var_8}
000054cb  e950fbffff         jmp     sub_5020


000054d0    int64_t kill()

000054d0  ff2512090400       jmp     qword [rel kill]


000054d6    int64_t sub_54d6()

000054d6  684a000000         push    0x4a {var_8}
000054db  e940fbffff         jmp     sub_5020


000054e0    char* __xpg_basename(char* filename)

000054e0  ff250a090400       jmp     qword [rel __xpg_basename]


000054e6    int64_t sub_54e6()

000054e6  684b000000         push    0x4b {var_8}
000054eb  e930fbffff         jmp     sub_5020


000054f0    time_t time(time_t* arg1)

000054f0  ff2502090400       jmp     qword [rel time]


000054f6    int64_t sub_54f6()

000054f6  684c000000         push    0x4c {var_8}
000054fb  e920fbffff         jmp     sub_5020


00005500    int64_t strlcat()

00005500  ff25fa080400       jmp     qword [rel strlcat]


00005506    int64_t sub_5506()

00005506  684d000000         push    0x4d {var_8}
0000550b  e910fbffff         jmp     sub_5020


00005510    int64_t getgid()

00005510  ff25f2080400       jmp     qword [rel getgid]


00005516    int64_t sub_5516()

00005516  684e000000         push    0x4e {var_8}
0000551b  e900fbffff         jmp     sub_5020


00005520    int32_t select(int32_t nfds, struct fd_set* readfds, struct fd_set* writefds, struct fd_set* exceptfds, struct timeval* timeout)

00005520  ff25ea080400       jmp     qword [rel select]


00005526    int64_t sub_5526()

00005526  684f000000         push    0x4f {var_8}
0000552b  e9f0faffff         jmp     sub_5020


00005530    int64_t malloc(size_t n)

00005530  ff25e2080400       jmp     qword [rel malloc]


00005536    int64_t sub_5536()

00005536  6850000000         push    0x50 {var_8}
0000553b  e9e0faffff         jmp     sub_5020


00005540    int32_t strncasecmp(char const* arg1, char const* arg2, uint64_t arg3)

00005540  ff25da080400       jmp     qword [rel strncasecmp]


00005546    int64_t sub_5546()

00005546  6851000000         push    0x51 {var_8}
0000554b  e9d0faffff         jmp     sub_5020


00005550    int64_t openpty()

00005550  ff25d2080400       jmp     qword [rel openpty]


00005556    int64_t sub_5556()

00005556  6852000000         push    0x52 {var_8}
0000555b  e9c0faffff         jmp     sub_5020


00005560    int64_t listen()

00005560  ff25ca080400       jmp     qword [rel listen]


00005566    int64_t sub_5566()

00005566  6853000000         push    0x53 {var_8}
0000556b  e9b0faffff         jmp     sub_5020


00005570    int32_t daemon(int32_t nochdir, int32_t noclose)

00005570  ff25c2080400       jmp     qword [rel daemon]


00005576    int64_t sub_5576()

00005576  6854000000         push    0x54 {var_8}
0000557b  e9a0faffff         jmp     sub_5020


00005580    int64_t strlcpy()

00005580  ff25ba080400       jmp     qword [rel strlcpy]


00005586    int64_t sub_5586()

00005586  6855000000         push    0x55 {var_8}
0000558b  e990faffff         jmp     sub_5020


00005590    int64_t deflateEnd()

00005590  ff25b2080400       jmp     qword [rel deflateEnd]


00005596    int64_t sub_5596()

00005596  6856000000         push    0x56 {var_8}
0000559b  e980faffff         jmp     sub_5020


000055a0    int32_t __vsnprintf_chk(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, struct __va_list_tag* ap)

000055a0  ff25aa080400       jmp     qword [rel __vsnprintf_chk]


000055a6    int64_t sub_55a6()

000055a6  6857000000         push    0x57 {var_8}
000055ab  e970faffff         jmp     sub_5020


000055b0    int32_t setrlimit(enum __rlimit_resource resource, struct rlimit64* rlimits)

000055b0  ff25a2080400       jmp     qword [rel setrlimit]


000055b6    int64_t sub_55b6()

000055b6  6858000000         push    0x58 {var_8}
000055bb  e960faffff         jmp     sub_5020


000055c0    int64_t chown()

000055c0  ff259a080400       jmp     qword [rel chown]


000055c6    int64_t sub_55c6()

000055c6  6859000000         push    0x59 {var_8}
000055cb  e950faffff         jmp     sub_5020


000055d0    char* ttyname(int32_t fd)

000055d0  ff2592080400       jmp     qword [rel ttyname]


000055d6    int64_t sub_55d6()

000055d6  685a000000         push    0x5a {var_8}
000055db  e940faffff         jmp     sub_5020


000055e0    int64_t realloc(void* ptr, size_t n)

000055e0  ff258a080400       jmp     qword [rel realloc]


000055e6    int64_t sub_55e6()

000055e6  685b000000         push    0x5b {var_8}
000055eb  e930faffff         jmp     sub_5020


000055f0    int64_t inflateInit_()

000055f0  ff2582080400       jmp     qword [rel inflateInit_]


000055f6    int64_t sub_55f6()

000055f6  685c000000         push    0x5c {var_8}
000055fb  e920faffff         jmp     sub_5020


00005600    int64_t chmod()

00005600  ff257a080400       jmp     qword [rel chmod]


00005606    int64_t sub_5606()

00005606  685d000000         push    0x5d {var_8}
0000560b  e910faffff         jmp     sub_5020


00005610    int64_t bind()

00005610  ff2572080400       jmp     qword [rel bind]


00005616    int64_t sub_5616()

00005616  685e000000         push    0x5e {var_8}
0000561b  e900faffff         jmp     sub_5020


00005620    uint64_t strftime(char* s, uint64_t maxsize, char const* format, struct tm* tp)

00005620  ff256a080400       jmp     qword [rel strftime]


00005626    int64_t sub_5626()

00005626  685f000000         push    0x5f {var_8}
0000562b  e9f0f9ffff         jmp     sub_5020


00005630    int64_t memmove(void* arg1, void const* arg2, uint64_t arg3)

00005630  ff2562080400       jmp     qword [rel memmove]


00005636    int64_t sub_5636()

00005636  6860000000         push    0x60 {var_8}
0000563b  e9e0f9ffff         jmp     sub_5020


00005640    void __syslog_chk(int32_t pri, int32_t flag, char const* fmt, ...)

00005640  ff255a080400       jmp     qword [rel __syslog_chk]


00005646    int64_t sub_5646()

00005646  6861000000         push    0x61 {var_8}
0000564b  e9d0f9ffff         jmp     sub_5020


00005650    int32_t fsync(int32_t fd)

00005650  ff2552080400       jmp     qword [rel fsync]


00005656    int64_t sub_5656()

00005656  6862000000         push    0x62 {var_8}
0000565b  e9c0f9ffff         jmp     sub_5020


00005660    int32_t setgid(gid_t gid)

00005660  ff254a080400       jmp     qword [rel setgid]


00005666    int64_t sub_5666()

00005666  6863000000         push    0x63 {var_8}
0000566b  e9b0f9ffff         jmp     sub_5020


00005670    int32_t getgrouplist(char const* user, gid_t group, gid_t* groups, int32_t* ngroups)

00005670  ff2542080400       jmp     qword [rel getgrouplist]


00005676    int64_t sub_5676()

00005676  6864000000         push    0x64 {var_8}
0000567b  e9a0f9ffff         jmp     sub_5020


00005680    pid_t waitpid(pid_t pid, int32_t* stat_loc, int32_t options)

00005680  ff253a080400       jmp     qword [rel waitpid]


00005686    int64_t sub_5686()

00005686  6865000000         push    0x65 {var_8}
0000568b  e990f9ffff         jmp     sub_5020


00005690    int32_t tcgetattr(int32_t fd, struct termios* termios_p)

00005690  ff2532080400       jmp     qword [rel tcgetattr]


00005696    int64_t sub_5696()

00005696  6866000000         push    0x66 {var_8}
0000569b  e980f9ffff         jmp     sub_5020


000056a0    int32_t tcsetattr(int32_t fd, int32_t optional_actions, struct termios* termios_p)

000056a0  ff252a080400       jmp     qword [rel tcsetattr]


000056a6    int64_t sub_56a6()

000056a6  6867000000         push    0x67 {var_8}
000056ab  e970f9ffff         jmp     sub_5020


000056b0    void __explicit_bzero_chk(void* dst, uint64_t len, uint64_t dstlen)

000056b0  ff2522080400       jmp     qword [rel __explicit_bzero_chk]


000056b6    int64_t sub_56b6()

000056b6  6868000000         push    0x68 {var_8}
000056bb  e960f9ffff         jmp     sub_5020


000056c0    int64_t atol(char const* nptr)

000056c0  ff251a080400       jmp     qword [rel atol]


000056c6    int64_t sub_56c6()

000056c6  6869000000         push    0x69 {var_8}
000056cb  e950f9ffff         jmp     sub_5020


000056d0    struct spwd* getspnam(char const* name)

000056d0  ff2512080400       jmp     qword [rel getspnam]


000056d6    int64_t sub_56d6()

000056d6  686a000000         push    0x6a {var_8}
000056db  e940f9ffff         jmp     sub_5020


000056e0    int32_t open(char const* file, int32_t oflag, ...)

000056e0  ff250a080400       jmp     qword [rel open]


000056e6    int64_t sub_56e6()

000056e6  686b000000         push    0x6b {var_8}
000056eb  e930f9ffff         jmp     sub_5020


000056f0    FILE* fopen(char const* filename, char const* mode)

000056f0  ff2502080400       jmp     qword [rel fopen]


000056f6    int64_t sub_56f6()

000056f6  686c000000         push    0x6c {var_8}
000056fb  e920f9ffff         jmp     sub_5020


00005700    int32_t accept(int32_t fd, union __SOCKADDR_ARG addr, socklen_t* len)

00005700  ff25fa070400       jmp     qword [rel accept]


00005706    int64_t sub_5706()

00005706  686d000000         push    0x6d {var_8}
0000570b  e910f9ffff         jmp     sub_5020


00005710    int64_t getsockname()

00005710  ff25f2070400       jmp     qword [rel getsockname]


00005716    int64_t sub_5716()

00005716  686e000000         push    0x6e {var_8}
0000571b  e900f9ffff         jmp     sub_5020


00005720    int32_t atoi(char const* nptr)

00005720  ff25ea070400       jmp     qword [rel atoi]


00005726    int64_t sub_5726()

00005726  686f000000         push    0x6f {var_8}
0000572b  e9f0f8ffff         jmp     sub_5020


00005730    void openlog(char const* ident, int32_t logstat, int32_t logfac)

00005730  ff25e2070400       jmp     qword [rel openlog]


00005736    int64_t sub_5736()

00005736  6870000000         push    0x70 {var_8}
0000573b  e9e0f8ffff         jmp     sub_5020


00005740    int64_t link()

00005740  ff25da070400       jmp     qword [rel link]


00005746    int64_t sub_5746()

00005746  6871000000         push    0x71 {var_8}
0000574b  e9d0f8ffff         jmp     sub_5020


00005750    void exit(int32_t status) __noreturn

00005750  ff25d2070400       jmp     qword [rel exit]
{ Does not return }


00005756    int64_t sub_5756()

00005756  6872000000         push    0x72 {var_8}
0000575b  e9c0f8ffff         jmp     sub_5020


00005760    int32_t connect(int32_t fd, union __CONST_SOCKADDR_ARG addr, socklen_t len)

00005760  ff25ca070400       jmp     qword [rel connect]


00005766    int64_t sub_5766()

00005766  6873000000         push    0x73 {var_8}
0000576b  e9b0f8ffff         jmp     sub_5020


00005770    uint64_t fwrite(void const* buf, uint64_t size, uint64_t count, FILE* fp)

00005770  ff25c2070400       jmp     qword [rel fwrite]


00005776    int64_t sub_5776()

00005776  6874000000         push    0x74 {var_8}
0000577b  e9a0f8ffff         jmp     sub_5020


00005780    int32_t __fprintf_chk(FILE* fp, int32_t flag, char const* format, ...)

00005780  ff25ba070400       jmp     qword [rel __fprintf_chk]


00005786    int64_t sub_5786()

00005786  6875000000         push    0x75 {var_8}
0000578b  e990f8ffff         jmp     sub_5020


00005790    int32_t getrlimit(enum __rlimit_resource resource, struct rlimit64* rlimits)

00005790  ff25b2070400       jmp     qword [rel getrlimit]


00005796    int64_t sub_5796()

00005796  6876000000         push    0x76 {var_8}
0000579b  e980f8ffff         jmp     sub_5020


000057a0    ssize_t getrandom(void* buffer, uint64_t length, uint32_t flags)

000057a0  ff25aa070400       jmp     qword [rel getrandom]


000057a6    int64_t sub_57a6()

000057a6  6877000000         push    0x77 {var_8}
000057ab  e970f8ffff         jmp     sub_5020


000057b0    int32_t setuid(uid_t uid)

000057b0  ff25a2070400       jmp     qword [rel setuid]


000057b6    int64_t sub_57b6()

000057b6  6878000000         push    0x78 {var_8}
000057bb  e960f8ffff         jmp     sub_5020


000057c0    int32_t getaddrinfo(char const* name, char const* service, struct addrinfo* hints, struct addrinfo** pai)

000057c0  ff259a070400       jmp     qword [rel getaddrinfo]


000057c6    int64_t sub_57c6()

000057c6  6879000000         push    0x79 {var_8}
000057cb  e950f8ffff         jmp     sub_5020


000057d0    char* strerror(int32_t errnum)

000057d0  ff2592070400       jmp     qword [rel strerror]


000057d6    int64_t sub_57d6()

000057d6  687a000000         push    0x7a {var_8}
000057db  e940f8ffff         jmp     sub_5020


000057e0    int32_t initgroups(char const* user, gid_t group)

000057e0  ff258a070400       jmp     qword [rel initgroups]


000057e6    int64_t sub_57e6()

000057e6  687b000000         push    0x7b {var_8}
000057eb  e930f8ffff         jmp     sub_5020


000057f0    int64_t crypt()

000057f0  ff2582070400       jmp     qword [rel crypt]


000057f6    int64_t sub_57f6()

000057f6  687c000000         push    0x7c {var_8}
000057fb  e920f8ffff         jmp     sub_5020


00005800    void endusershell()

00005800  ff257a070400       jmp     qword [rel endusershell]


00005806    int64_t sub_5806()

00005806  687d000000         push    0x7d {var_8}
0000580b  e910f8ffff         jmp     sub_5020


00005810    int32_t execv(char const* path, char* const* argv)

00005810  ff2572070400       jmp     qword [rel execv]


00005816    int64_t sub_5816()

00005816  687e000000         push    0x7e {var_8}
0000581b  e900f8ffff         jmp     sub_5020


00005820    int32_t setegid(gid_t gid, gid_t gid)

00005820  ff256a070400       jmp     qword [rel setegid]


00005826    int64_t sub_5826()

00005826  687f000000         push    0x7f {var_8}
0000582b  e9f0f7ffff         jmp     sub_5020


00005830    pid_t fork()

00005830  ff2562070400       jmp     qword [rel fork]


00005836    int64_t sub_5836()

00005836  6880000000         push    0x80 {var_8}
0000583b  e9e0f7ffff         jmp     sub_5020


00005840    uint16_t** __ctype_b_loc()

00005840  ff255a070400       jmp     qword [rel __ctype_b_loc]


00005846    int64_t sub_5846()

00005846  6881000000         push    0x81 {var_8}
0000584b  e9d0f7ffff         jmp     sub_5020


00005850    void freeaddrinfo(struct addrinfo* ai)

00005850  ff2552070400       jmp     qword [rel freeaddrinfo]


00005856    int64_t sub_5856()

00005856  6882000000         push    0x82 {var_8}
0000585b  e9c0f7ffff         jmp     sub_5020


00005860    int64_t socket()

00005860  ff254a070400       jmp     qword [rel socket]


00005866    int64_t sub_5866()

00005866  6883000000         push    0x83 {var_8}
0000586b  e9b0f7ffff         jmp     sub_5020


00005870    int32_t seteuid(uid_t uid, uid_t uid)

00005870  ff2542070400       jmp     qword [rel seteuid]


00005876    int64_t sub_5876()

00005876  6884000000         push    0x84 {var_8}
0000587b  e9a0f7ffff         jmp     sub_5020

.plt (PROGBITS) section ended  {0x5020-0x5880}

.plt.got (PROGBITS) section started  {0x5880-0x5890}

00005880    ssize_t write(int32_t fd, void const* buf, uint64_t nbytes)

00005880  ff254a070400       jmp     qword [rel write]

00005886                    66 90                                                                                f.

00005888    void __cxa_finalize(void* d)

00005888  ff255a070400       jmp     qword [rel __cxa_finalize]

0000588e                                            66 90                                                                f.
.plt.got (PROGBITS) section ended  {0x5880-0x5890}

00005890                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
000058a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

.text (PROGBITS) section started  {0x58c0-0x33813}

000058c0    int32_t main(int32_t argc, char** argv, char** envp)

000058c0  55                 push    rbp {var_8}
000058c1  4889f5             mov     rbp, rsi
000058c4  53                 push    rbx {var_10}
000058c5  89fb               mov     ebx, edi
000058c7  50                 push    rax {var_18}
000058c8  488d05156e0100     lea     rax, [rel svr_dropbear_exit]
000058cf  48890542070400     mov     qword [rel _dropbear_exit], rax  {svr_dropbear_exit}
000058d6  488d05906f0100     lea     rax, [rel svr_dropbear_log]
000058dd  4889052c070400     mov     qword [rel _dropbear_log], rax  {svr_dropbear_log}
000058e4  e8ad090000         call    disallow_core
{ Does not return }

000058e9                             85 db 7f 0e 48 8d 3d e3 11 03 00 31 c0 e8 d6 02 00 00 48 89 ee 89 df           ....H.=....1......H....
00005900  e8 bb 85 01 00 83 3d ec 11 04 00 00 75 25 83 3d e7 11 04 00 00 78 21 48 8b 7d 00 e8 c0 fb ff ff  ......=.....u%.=.....x!H.}......
00005920  31 c9 31 d2 bf 0f 00 00 00 48 89 c6 31 c0 e8 7d fb ff ff e8 75 94 01 00 48 89 ee 89 df e8 c9 95  1.1......H..1..}....u...H.......
00005940  01 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                                                  ..f...........@.

00005950    void _start() __noreturn

00005950  f30f1efa           endbr64 
00005954  31ed               xor     ebp, ebp  {0x0}
00005956  4989d1             mov     r9, rdx
00005959  5e                 pop     rsi {__return_addr}
0000595a  4889e2             mov     rdx, rsp {ubp_av}
0000595d  4883e4f0           and     rsp, 0xfffffffffffffff0
00005961  50                 push    rax {stack_end}
00005962  54                 push    rsp {stack_end} {var_10}
00005963  4531c0             xor     r8d, r8d  {0x0}
00005966  31c9               xor     ecx, ecx  {0x0}
00005968  488d3d51ffffff     lea     rdi, [rel main]
0000596f  ff154b060400       call    qword [rel __libc_start_main]
{ Does not return }

00005975                                                                 f4 66 2e 0f 1f 84 00 00 00 00 00                       .f.........

00005980    void deregister_tm_clones()

00005980  488d3d710d0400     lea     rdi, [rel __TMC_END__]
00005987  488d056a0d0400     lea     rax, [rel __TMC_END__]
0000598e  4839f8             cmp     rax, rdi
00005991  7415               je      0x59a8  {0x1}

00005993  488b052e060400     mov     rax, qword [rel _ITM_deregisterTMCloneTable]
0000599a  4885c0             test    rax, rax
0000599d  7409               je      0x59a8

0000599f  ffe0               jmp     rax

000059a1     0f 1f 80 00 00 00 00                                                                           .......

000059a8  c3                 retn     {__return_addr}

000059a9                             0f 1f 80 00 00 00 00                                                           .......

000059b0    void register_tm_clones()

000059b0  488d3d410d0400     lea     rdi, [rel __TMC_END__]
000059b7  488d353a0d0400     lea     rsi, [rel __TMC_END__]
000059be  4829fe             sub     rsi, rdi
000059c1  4889f0             mov     rax, rsi
000059c4  48c1ee3f           shr     rsi, 0x3f
000059c8  48c1f803           sar     rax, 0x3
000059cc  4801c6             add     rsi, rax
000059cf  48d1fe             sar     rsi, 0x1  {0x0}
000059d2  7414               je      0x59e8  {0x1}

000059d4  488b0505060400     mov     rax, qword [rel _ITM_registerTMCloneTable]
000059db  4885c0             test    rax, rax
000059de  7408               je      0x59e8

000059e0  ffe0               jmp     rax

000059e2        66 0f 1f 44 00 00                                                                            f..D..

000059e8  c3                 retn     {__return_addr}

000059e9                             0f 1f 80 00 00 00 00                                                           .......

000059f0    void __do_global_dtors_aux()

000059f0  f30f1efa           endbr64 
000059f4  803d2d0d040000     cmp     byte [rel completed.0], 0x0
000059fb  752b               jne     0x5a28  {completed.0}

000059fd  55                 push    rbp {__saved_rbp}
000059fe  48833de205040000   cmp     qword [rel __cxa_finalize], 0x0
00005a06  4889e5             mov     rbp, rsp {__saved_rbp}
00005a09  740c               je      0x5a17

00005a0b  488b3df6050400     mov     rdi, qword [rel __dso_handle]
00005a12  e871feffff         call    __cxa_finalize

00005a17  e864ffffff         call    deregister_tm_clones
00005a1c  c605050d040001     mov     byte [rel completed.0], 0x1
00005a23  5d                 pop     rbp {__saved_rbp}
00005a24  c3                 retn     {__return_addr}

00005a25                 0f 1f 00                                                                               ...

00005a28  c3                 retn     {__return_addr}

00005a29                             0f 1f 80 00 00 00 00                                                           .......

00005a30    void frame_dummy()

00005a30  f30f1efa           endbr64 
00005a34  e977ffffff         jmp     register_tm_clones


00005a39    void generic_dropbear_exit(int32_t arg1, int64_t arg2) __noreturn

00005a39  4154               push    r12 {var_8}
00005a3b  4989f1             mov     r9, rsi
00005a3e  b92c010000         mov     ecx, 0x12c
00005a43  4c8d05bae50200     lea     r8, [rel data_34004]  {"Exited: %s"}
00005a4a  55                 push    rbp {var_10}
00005a4b  be2c010000         mov     esi, 0x12c
00005a50  4889d5             mov     rbp, rdx
00005a53  ba01000000         mov     edx, 0x1
00005a58  53                 push    rbx {var_18}
00005a59  89fb               mov     ebx, edi
00005a5b  4881ec40010000     sub     rsp, 0x140
00005a62  64488b0425280000…  mov     rax, qword [fs:0x28]
00005a6b  4889842438010000   mov     qword [rsp+0x138 {var_20}], rax
00005a73  31c0               xor     eax, eax  {0x0}
00005a75  4c8d64240c         lea     r12, [rsp+0xc {s}]
00005a7a  4c89e7             mov     rdi, r12 {s}
00005a7d  e8cef5ffff         call    __snprintf_chk
00005a82  bf06000000         mov     edi, 0x6
00005a87  4889ea             mov     rdx, rbp
00005a8a  4c89e6             mov     rsi, r12 {s}
00005a8d  488b057c050400     mov     rax, qword [rel _dropbear_log]
00005a94  e8930c0000         call    __x86_indirect_thunk_rax
{ Does not return }

00005a99                                                                             89 df e8 b0 fc ff ff                           .......

00005aa0    void generic_dropbear_log(int64_t arg1, char* arg2, struct __va_list_tag* arg3) __noreturn

00005aa0  53                 push    rbx {__saved_rbx}
00005aa1  4989f0             mov     r8, rsi
00005aa4  b900040000         mov     ecx, 0x400
00005aa9  be00040000         mov     esi, 0x400
00005aae  4881ec10040000     sub     rsp, 0x410
00005ab5  644c8b0c25280000…  mov     r9, qword [fs:0x28]
00005abe  4c898c2408040000   mov     qword [rsp+0x408 {var_10}], r9
00005ac6  4989d1             mov     r9, rdx
00005ac9  488d5c2408         lea     rbx, [rsp+0x8 {s}]
00005ace  ba01000000         mov     edx, 0x1
00005ad3  4889df             mov     rdi, rbx {s}
00005ad6  e8c5faffff         call    __vsnprintf_chk
00005adb  31c0               xor     eax, eax  {0x0}
00005add  4889d9             mov     rcx, rbx {s}
00005ae0  be01000000         mov     esi, 0x1
00005ae5  488b3d340c0400     mov     rdi, qword [rel stderr]
00005aec  488d15e0040300     lea     rdx, [rel data_35fd3]  {"%s\n"}
00005af3  e888fcffff         call    __fprintf_chk
00005af8  488b842408040000   mov     rax, qword [rsp+0x408 {var_10}]
00005b00  64482b0425280000…  sub     rax, qword [fs:0x28]
00005b09  7405               je      0x5b10

00005b0b  e800f7ffff         call    __stack_chk_fail
{ Does not return }

00005b10  4881c410040000     add     rsp, 0x410
00005b17  5b                 pop     rbx {__saved_rbx}
00005b18  e9ec0b0000         jmp     __x86_return_thunk
{ Does not return }


00005b1d    int64_t startsyslog(char* arg1)

00005b1d  ba50000000         mov     edx, 0x50
00005b22  be01000000         mov     esi, 0x1
00005b27  e904fcffff         jmp     openlog


00005b2c    void dropbear_close(char arg1 @ rax) __noreturn

00005b2c  4881ecd8000000     sub     rsp, 0xd8
00005b33  4889742428         mov     qword [rsp+0x28 {var_b0}], rsi
00005b38  4889542430         mov     qword [rsp+0x30 {var_a8}], rdx
00005b3d  48894c2438         mov     qword [rsp+0x38 {var_a0}], rcx
00005b42  4c89442440         mov     qword [rsp+0x40 {var_98}], r8
00005b47  4c894c2448         mov     qword [rsp+0x48 {var_90}], r9
00005b4c  84c0               test    al, al
00005b4e  7437               je      0x5b87

00005b50  0f29442450         movaps  xmmword [rsp+0x50 {var_88_1}], xmm0
00005b55  0f294c2460         movaps  xmmword [rsp+0x60 {var_78_1}], xmm1
00005b5a  0f29542470         movaps  xmmword [rsp+0x70 {var_68_1}], xmm2
00005b5f  0f299c2480000000   movaps  xmmword [rsp+0x80 {var_58_1}], xmm3
00005b67  0f29a42490000000   movaps  xmmword [rsp+0x90 {var_48_1}], xmm4
00005b6f  0f29ac24a0000000   movaps  xmmword [rsp+0xa0 {var_38_1}], xmm5
00005b77  0f29b424b0000000   movaps  xmmword [rsp+0xb0 {var_28_1}], xmm6
00005b7f  0f29bc24c0000000   movaps  xmmword [rsp+0xc0 {var_18_1}], xmm7

00005b87  64488b0425280000…  mov     rax, qword [fs:0x28]
00005b90  4889442418         mov     qword [rsp+0x18 {var_c0}], rax
00005b95  31c0               xor     eax, eax  {0x0}
00005b97  488d8424e0000000   lea     rax, [rsp+0xe0 {arg_8}]
00005b9f  4889fe             mov     rsi, rdi
00005ba2  4889e2             mov     rdx, rsp
00005ba5  4889442408         mov     qword [rsp+0x8 {var_d0}], rax {arg_8}
00005baa  488d442420         lea     rax, [rsp+0x20 {var_b8}]
00005baf  31ff               xor     edi, edi  {0x0}
00005bb1  4889442410         mov     qword [rsp+0x10 {var_c8}], rax {var_b8}
00005bb6  488b055b040400     mov     rax, qword [rel _dropbear_exit]
00005bbd  c7042408000000     mov     dword [rsp {var_d8}], 0x8
00005bc4  c744240430000000   mov     dword [rsp+0x4 {var_d4}], 0x30
00005bcc  e85b0b0000         call    __x86_indirect_thunk_rax
{ Does not return }


00005bd1    void dropbear_exit(char arg1 @ rax) __noreturn

00005bd1  4881ecd8000000     sub     rsp, 0xd8
00005bd8  4889742428         mov     qword [rsp+0x28 {var_b0}], rsi
00005bdd  4889542430         mov     qword [rsp+0x30 {var_a8}], rdx
00005be2  48894c2438         mov     qword [rsp+0x38 {var_a0}], rcx
00005be7  4c89442440         mov     qword [rsp+0x40 {var_98}], r8
00005bec  4c894c2448         mov     qword [rsp+0x48 {var_90}], r9
00005bf1  84c0               test    al, al
00005bf3  7437               je      0x5c2c

00005bf5  0f29442450         movaps  xmmword [rsp+0x50 {var_88_1}], xmm0
00005bfa  0f294c2460         movaps  xmmword [rsp+0x60 {var_78_1}], xmm1
00005bff  0f29542470         movaps  xmmword [rsp+0x70 {var_68_1}], xmm2
00005c04  0f299c2480000000   movaps  xmmword [rsp+0x80 {var_58_1}], xmm3
00005c0c  0f29a42490000000   movaps  xmmword [rsp+0x90 {var_48_1}], xmm4
00005c14  0f29ac24a0000000   movaps  xmmword [rsp+0xa0 {var_38_1}], xmm5
00005c1c  0f29b424b0000000   movaps  xmmword [rsp+0xb0 {var_28_1}], xmm6
00005c24  0f29bc24c0000000   movaps  xmmword [rsp+0xc0 {var_18_1}], xmm7

00005c2c  64488b0425280000…  mov     rax, qword [fs:0x28]
00005c35  4889442418         mov     qword [rsp+0x18 {var_c0}], rax
00005c3a  31c0               xor     eax, eax  {0x0}
00005c3c  488d8424e0000000   lea     rax, [rsp+0xe0 {arg_8}]
00005c44  4889fe             mov     rsi, rdi
00005c47  4889e2             mov     rdx, rsp
00005c4a  4889442408         mov     qword [rsp+0x8 {var_d0}], rax {arg_8}
00005c4f  488d442420         lea     rax, [rsp+0x20 {var_b8}]
00005c54  bf01000000         mov     edi, 0x1
00005c59  4889442410         mov     qword [rsp+0x10 {var_c8}], rax {var_b8}
00005c5e  488b05b3030400     mov     rax, qword [rel _dropbear_exit]
00005c65  c7042408000000     mov     dword [rsp {var_d8}], 0x8
00005c6c  c744240430000000   mov     dword [rsp+0x4 {var_d4}], 0x30
00005c74  e8b30a0000         call    __x86_indirect_thunk_rax
{ Does not return }


00005c79    void fail_assert() __noreturn

00005c79  50                 push    rax {var_8}
00005c7a  4889f9             mov     rcx, rdi
00005c7d  31c0               xor     eax, eax  {0x0}
00005c7f  488d3d89e30200     lea     rdi, [rel data_3400f]  {"Failed assertion (%s:%d): `%s'"}
00005c86  e846ffffff         call    dropbear_exit
{ Does not return }


00005c8b    void dropbear_log(char arg1 @ rax) __noreturn

00005c8b  4881ecd8000000     sub     rsp, 0xd8
00005c92  4889542430         mov     qword [rsp+0x30 {var_a8}], rdx
00005c97  48894c2438         mov     qword [rsp+0x38 {var_a0}], rcx
00005c9c  4c89442440         mov     qword [rsp+0x40 {var_98}], r8
00005ca1  4c894c2448         mov     qword [rsp+0x48 {var_90}], r9
00005ca6  84c0               test    al, al
00005ca8  7437               je      0x5ce1

00005caa  0f29442450         movaps  xmmword [rsp+0x50 {var_88_1}], xmm0
00005caf  0f294c2460         movaps  xmmword [rsp+0x60 {var_78_1}], xmm1
00005cb4  0f29542470         movaps  xmmword [rsp+0x70 {var_68_1}], xmm2
00005cb9  0f299c2480000000   movaps  xmmword [rsp+0x80 {var_58_1}], xmm3
00005cc1  0f29a42490000000   movaps  xmmword [rsp+0x90 {var_48_1}], xmm4
00005cc9  0f29ac24a0000000   movaps  xmmword [rsp+0xa0 {var_38_1}], xmm5
00005cd1  0f29b424b0000000   movaps  xmmword [rsp+0xb0 {var_28_1}], xmm6
00005cd9  0f29bc24c0000000   movaps  xmmword [rsp+0xc0 {var_18_1}], xmm7

00005ce1  64488b0425280000…  mov     rax, qword [fs:0x28]
00005cea  4889442418         mov     qword [rsp+0x18 {var_c0}], rax
00005cef  31c0               xor     eax, eax  {0x0}
00005cf1  488d8424e0000000   lea     rax, [rsp+0xe0 {arg_8}]
00005cf9  4889e2             mov     rdx, rsp
00005cfc  c7042410000000     mov     dword [rsp {var_d8}], 0x10
00005d03  4889442408         mov     qword [rsp+0x8 {var_d0}], rax {arg_8}
00005d08  488d442420         lea     rax, [rsp+0x20 {var_b8}]
00005d0d  4889442410         mov     qword [rsp+0x10 {var_c8}], rax {var_b8}
00005d12  488b05f7020400     mov     rax, qword [rel _dropbear_log]
00005d19  c744240430000000   mov     dword [rsp+0x4 {var_d4}], 0x30
00005d21  e8060a0000         call    __x86_indirect_thunk_rax
{ Does not return }

00005d26                    48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 d5 f4 ff ff 48 81 c4 d8 00        H.D$.dH+.%(...t......H....
00005d40  00 00 e9 c2 09 00 00                                                                             .......

00005d47    void stripcontrol(char* arg1) __noreturn

00005d47  55                 push    rbp {var_8}
00005d48  4889fd             mov     rbp, rdi
00005d4b  53                 push    rbx {var_10}
00005d4c  51                 push    rcx {var_18}
00005d4d  e89ef4ffff         call    strlen
00005d52  89c3               mov     ebx, eax
00005d54  ffc0               inc     eax
00005d56  4863f8             movsxd  rdi, eax
00005d59  e8b2580000         call    m_malloc
{ Does not return }

00005d5e                                                                                            31 c9                                1.
00005d60  31 ff 48 63 d7 48 01 c2 39 cb 7e 32 40 8a 74 0d 00 44 8d 46 e0 44 8d 4e f7 41 80 f8 5e 41 0f 96  1.Hc.H..9.~2@.t..D.F.D.N.A..^A..
00005d80  c0 41 80 f9 01 41 0f 96 c1 45 08 c8 75 06 40 80 fe 0d 75 05 40 88 32 ff c7 48 ff c1 eb c4 c6 02  .A...A...E..u.@...u.@.2..H......
00005da0  00 5a 5b 5d e9 60 09 00 00                                                                       .Z[].`...

00005da9    void buf_getline(void* arg1) __noreturn

00005da9  4154               push    r12 {var_8}
00005dab  4989f4             mov     r12, rsi
00005dae  31f6               xor     esi, esi  {0x0}
00005db0  55                 push    rbp {var_10}
00005db1  83cdff             or      ebp, 0xffffffff  {0xffffffff}
00005db4  53                 push    rbx {var_18}
00005db5  4889fb             mov     rbx, rdi
00005db8  e88d0a0000         call    buf_setpos
{ Does not return }

00005dbd                                                                                         31 f6 48                               1.H
00005dc0  89 df e8 35 0a 00 00 8b 43 10 39 43 0c 73 26 4c 89 e7 e8 59 f5 ff ff 89 c5 83 f8 0a 74 2e 83 f8  ...5....C.9C.s&L...Y........t...
00005de0  0d 74 29 83 f8 ff 74 1b 0f b6 f0 48 89 df e8 22 0b 00 00 eb d2 31 f6 48 89 df e8 fd 09 00 00 ff  .t)...t....H...".....1.H........
00005e00  c5 75 09 83 c8 ff 83 7b 0c 00 74 0c 31 f6 48 89 df e8 34 0a 00 00 31 c0 5b 5d 41 5c e9 e8 08 00  .u.....{..t.1.H...4...1.[]A\....
00005e20  00                                                                                               .

00005e21    void m_close(int32_t arg1) __noreturn

00005e21  85ff               test    edi, edi
00005e23  783d               js      0x5e62

00005e25  53                 push    rbx {__saved_rbx}
00005e26  89fb               mov     ebx, edi

00005e28  89df               mov     edi, ebx
00005e2a  e811f5ffff         call    close
00005e2f  85c0               test    eax, eax
00005e31  7929               jns     0x5e5c

00005e33  e858f2ffff         call    __errno_location
00005e38  8b38               mov     edi, dword [rax]
00005e3a  83ff04             cmp     edi, 0x4
00005e3d  74e9               je      0x5e28

00005e3f  83ff09             cmp     edi, 0x9
00005e42  7418               je      0x5e5c

00005e44  e887f9ffff         call    strerror
00005e49  89de               mov     esi, ebx
00005e4b  488d3ddce10200     lea     rdi, [rel data_3402e]  {"Error closing fd %d, %s"}
00005e52  4889c2             mov     rdx, rax
00005e55  31c0               xor     eax, eax  {0x0}
00005e57  e875fdffff         call    dropbear_exit
{ Does not return }

00005e5c  5b                 pop     rbx {__saved_rbx}
00005e5d  e9a7080000         jmp     __x86_return_thunk
{ Does not return }

00005e62  e9a2080000         jmp     __x86_return_thunk
{ Does not return }


00005e67    void connect_unix(int64_t arg1) __noreturn

00005e67  55                 push    rbp {__saved_rbp}
00005e68  4889fe             mov     rsi, rdi
00005e6b  b91b000000         mov     ecx, 0x1b
00005e70  ba6c000000         mov     edx, 0x6c
00005e75  53                 push    rbx {__saved_rbx}
00005e76  4881ec88000000     sub     rsp, 0x88
00005e7d  64488b0425280000…  mov     rax, qword [fs:0x28]
00005e86  4889442478         mov     qword [rsp+0x78 {var_20}], rax
00005e8b  31c0               xor     eax, eax  {0x0}
00005e8d  4c8d44240c         lea     r8, [rsp+0xc {s}]
00005e92  66c744240a0100     mov     word [rsp+0xa {addr}], 0x1
00005e99  4c89c7             mov     rdi, r8 {s}
00005e9c  f3ab               rep stosd dword [rdi] {var_f8} {s}  {0x0}
00005e9e  4c89c7             mov     rdi, r8 {s}
00005ea1  e8daf6ffff         call    strlcpy
00005ea6  31d2               xor     edx, edx  {0x0}
00005ea8  be01000000         mov     esi, 0x1
00005ead  bf01000000         mov     edi, 0x1
00005eb2  e8a9f9ffff         call    socket
00005eb7  85c0               test    eax, eax
00005eb9  7821               js      0x5edc

00005ebb  488d6c240a         lea     rbp, [rsp+0xa {addr}]
00005ec0  ba6e000000         mov     edx, 0x6e
00005ec5  89c7               mov     edi, eax
00005ec7  89c3               mov     ebx, eax
00005ec9  4889ee             mov     rsi, rbp {addr}
00005ecc  e88ff8ffff         call    connect
00005ed1  85c0               test    eax, eax
00005ed3  790a               jns     0x5edf

00005ed5  89df               mov     edi, ebx
00005ed7  e845ffffff         call    m_close
{ Does not return }

00005edc  83cbff             or      ebx, 0xffffffff  {0xffffffff}

00005edf  488b442478         mov     rax, qword [rsp+0x78 {var_20}]
00005ee4  64482b0425280000…  sub     rax, qword [fs:0x28]
00005eed  7405               je      0x5ef4

00005eef  e81cf3ffff         call    __stack_chk_fail
{ Does not return }

00005ef4  4881c488000000     add     rsp, 0x88
00005efb  89d8               mov     eax, ebx
00005efd  5b                 pop     rbx {__saved_rbx}
00005efe  5d                 pop     rbp {__saved_rbp}
00005eff  e905080000         jmp     __x86_return_thunk
{ Does not return }


00005f04    void run_shell_command(int64_t arg1, int32_t arg2, char* arg3) __noreturn

00005f04  4154               push    r12 {__saved_r12}
00005f06  4189f4             mov     r12d, esi
00005f09  55                 push    rbp {__saved_rbp}
00005f0a  53                 push    rbx {__saved_rbx}
00005f0b  4889fb             mov     rbx, rdi
00005f0e  4889d7             mov     rdi, rdx
00005f11  4883ec40           sub     rsp, 0x40
00005f15  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00005f1e  48896c2438         mov     qword [rsp+0x38 {var_20}], rbp
00005f23  4889d5             mov     rbp, rdx
00005f26  e8b5f5ffff         call    __xpg_basename
00005f2b  4885db             test    rbx, rbx
00005f2e  741f               je      0x5f4f

00005f30  4889442418         mov     qword [rsp+0x18 {argv}], rax
00005f35  31d2               xor     edx, edx  {0x0}
00005f37  488d0505ec0200     lea     rax, [rel data_34b3b[8]]  {"-c"}
00005f3e  4889442420         mov     qword [rsp+0x20 {var_38}], rax  {data_34b3b[8], "-c"}
00005f43  48895c2428         mov     qword [rsp+0x28 {var_30}], rbx
00005f48  4889542430         mov     qword [rsp+0x30 {var_28}], rdx  {0x0}
00005f4d  eb49               jmp     0x5f98

00005f4f  4889c7             mov     rdi, rax
00005f52  4889442408         mov     qword [rsp+0x8 {argv_2}], rax
00005f57  e894f2ffff         call    strlen
00005f5c  8d5802             lea     ebx, [rax+0x2]
00005f5f  4863db             movsxd  rbx, ebx
00005f62  4889df             mov     rdi, rbx
00005f65  e8a6560000         call    m_malloc
{ Does not return }

00005f6a                                4c 8b 4c 24 08 48 83 c9 ff 48 89 de 48 89 44 24 18 48 89 c7 ba 01            L.L$.H...H..H.D$.H....
00005f80  00 00 00 31 c0 4c 8d 05 35 e6 02 00 e8 bf f0 ff ff 31 c0 48 89 44 24 20                          ...1.L..5........1.H.D$ 

00005f98  31f6               xor     esi, esi  {0x0}
00005f9a  bf0d000000         mov     edi, 0xd
00005f9f  bb03000000         mov     ebx, 0x3
00005fa4  e877f4ffff         call    signal
00005fa9  48ffc0             inc     rax
00005fac  750e               jne     0x5fbc

00005fae  488d3d91e00200     lea     rdi, [rel data_34046]  {"signal() error"}
00005fb5  31c0               xor     eax, eax  {0x0}
00005fb7  e815fcffff         call    dropbear_exit
{ Does not return }

00005fbc  4139dc             cmp     r12d, ebx
00005fbf  720b               jb      0x5fcc

00005fc1  89df               mov     edi, ebx  {0x3}
00005fc3  ffc3               inc     ebx  {0x4}
00005fc5  e857feffff         call    m_close
{ Does not return }

00005fca                                eb f0                                                                        ..

00005fcc  488d742418         lea     rsi, [rsp+0x18 {argv}]
00005fd1  4889ef             mov     rdi, rbp
00005fd4  e837f8ffff         call    execv
00005fd9  488b442438         mov     rax, qword [rsp+0x38 {var_20}]
00005fde  64482b0425280000…  sub     rax, qword [fs:0x28]
00005fe7  7405               je      0x5fee

00005fe9  e822f2ffff         call    __stack_chk_fail
{ Does not return }

00005fee  4883c440           add     rsp, 0x40
00005ff2  5b                 pop     rbx {__saved_rbx}
00005ff3  5d                 pop     rbp {__saved_rbp}
00005ff4  415c               pop     r12 {__saved_r12}
00005ff6  e90e070000         jmp     __x86_return_thunk
{ Does not return }


00005ffb    void buf_readfile(void* arg1, char* arg2) __noreturn

00005ffb  4155               push    r13 {__saved_r13}
00005ffd  31c0               xor     eax, eax  {0x0}
00005fff  4154               push    r12 {__saved_r12}
00006001  4989fc             mov     r12, rdi
00006004  4889f7             mov     rdi, rsi
00006007  31f6               xor     esi, esi  {0x0}
00006009  55                 push    rbp {__saved_rbp}
0000600a  53                 push    rbx {__saved_rbx}
0000600b  83cbff             or      ebx, 0xffffffff
0000600e  51                 push    rcx {var_28}
0000600f  e8ccf6ffff         call    open
00006014  89c5               mov     ebp, eax
00006016  85c0               test    eax, eax
00006018  7861               js      0x607b

0000601a  458b6c2410         mov     r13d, dword [r12+0x10]
0000601f  452b6c240c         sub     r13d, dword [r12+0xc]
00006024  4c89e7             mov     rdi, r12
00006027  4489ee             mov     esi, r13d
0000602a  e83e090000         call    buf_getwriteptr
{ Does not return }

0000602f                                               49 63 d5 89 ef 48 89 c6 e8 74 f3 ff ff 48 89 c3 89                 Ic...H...t...H...
00006040  c6 85 c0 79 1c e8 46 f0 ff ff 8b 00 83 f8 04 0f 94 c3 83 f8 0b 0f 94 c0 09 c3 0f b6 db ff cb eb  ...y..F.........................
00006060  13 4c 89 e7 e8 fd 07 00 00 41 39 dd 7e 04 85 db 75 a8 31 db 89 ef e8 a6 fd ff ff                 .L.......A9.~...u.1........

0000607b  5a                 pop     rdx {var_28}
0000607c  89d8               mov     eax, ebx  {0xffffffff}
0000607e  5b                 pop     rbx {__saved_rbx}
0000607f  5d                 pop     rbp {__saved_rbp}
00006080  415c               pop     r12 {__saved_r12}
00006082  415d               pop     r13 {__saved_r13}
00006084  e980060000         jmp     __x86_return_thunk
{ Does not return }


00006089    void setnonblocking(int32_t arg1) __noreturn

00006089  4883ec18           sub     rsp, 0x18
0000608d  31d2               xor     edx, edx  {0x0}
0000608f  31c0               xor     eax, eax  {0x0}
00006091  be03000000         mov     esi, 0x3
00006096  897c240c           mov     dword [rsp+0xc {var_c}], edi
0000609a  e8b1f0ffff         call    fcntl
0000609f  8b7c240c           mov     edi, dword [rsp+0xc {var_c}]
000060a3  83f8ff             cmp     eax, 0xffffffff
000060a6  750e               jne     0x60b6

000060a8  488d3da6df0200     lea     rdi, [rel data_34055]  {"Couldn't set nonblocking"}
000060af  31c0               xor     eax, eax  {0x0}
000060b1  e81bfbffff         call    dropbear_exit
{ Does not return }

000060b6  80cc08             or      ah, 0x8
000060b9  be04000000         mov     esi, 0x4
000060be  89c2               mov     edx, eax
000060c0  31c0               xor     eax, eax  {0x0}
000060c2  e889f0ffff         call    fcntl
000060c7  ffc0               inc     eax
000060c9  750a               jne     0x60d5

000060cb  e8c0efffff         call    __errno_location
000060d0  833813             cmp     dword [rax], 0x13
000060d3  75d3               jne     0x60a8

000060d5  4883c418           add     rsp, 0x18
000060d9  e92b060000         jmp     __x86_return_thunk
{ Does not return }


000060de    void spawn_command(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) __noreturn

000060de  4157               push    r15 {__saved_r15}
000060e0  4989ff             mov     r15, rdi
000060e3  4156               push    r14 {__saved_r14}
000060e5  4989d6             mov     r14, rdx
000060e8  4155               push    r13 {__saved_r13}
000060ea  4154               push    r12 {__saved_r12}
000060ec  55                 push    rbp {__saved_rbp}
000060ed  53                 push    rbx {__saved_rbx}
000060ee  4c89c3             mov     rbx, r8
000060f1  4883ec38           sub     rsp, 0x38
000060f5  48893424           mov     qword [rsp {var_68}], rsi
000060f9  488d7c2410         lea     rdi, [rsp+0x10 {fd}]
000060fe  48894c2408         mov     qword [rsp+0x8 {var_60}], rcx
00006103  644c8b2425280000…  mov     r12, qword [fs:0x28]
0000610c  4c89642428         mov     qword [rsp+0x28 {var_40}], r12
00006111  4d89cc             mov     r12, r9
00006114  e837f2ffff         call    pipe
00006119  85c0               test    eax, eax
0000611b  0f85e5000000       jne     0x6206

00006121  488d7c2418         lea     rdi, [rsp+0x18 {fd_2}]
00006126  e825f2ffff         call    pipe
0000612b  89c5               mov     ebp, eax
0000612d  85c0               test    eax, eax
0000612f  0f85d1000000       jne     0x6206

00006135  4885db             test    rbx, rbx
00006138  7511               jne     0x614b

0000613a  e8f1f6ffff         call    fork
0000613f  4189c5             mov     r13d, eax
00006142  85c0               test    eax, eax
00006144  7918               jns     0x615e

00006146  e9bb000000         jmp     0x6206

0000614b  488d7c2420         lea     rdi, [rsp+0x20 {fd_4}]
00006150  e8fbf1ffff         call    pipe
00006155  85c0               test    eax, eax
00006157  74e1               je      0x613a

00006159  e9a8000000         jmp     0x6206

0000615e  0f85a7000000       jne     0x620b

00006164  31f6               xor     esi, esi  {0x0}
00006166  bf11000000         mov     edi, 0x11
0000616b  e8b0f2ffff         call    signal
00006170  488d3dcfde0200     lea     rdi, [rel data_34046]  {"signal() error"}
00006177  48ffc0             inc     rax
0000617a  7416               je      0x6192

0000617c  8b7c2410           mov     edi, dword [rsp+0x10 {fd}]
00006180  31f6               xor     esi, esi  {0x0}
00006182  e8a9f0ffff         call    dup2
00006187  85c0               test    eax, eax
00006189  790e               jns     0x6199

0000618b  488d3ddcde0200     lea     rdi, [rel data_3406e]  {"Child dup2() failure"}

00006192  31c0               xor     eax, eax  {0x0}
00006194  e838faffff         call    dropbear_exit
{ Does not return }

00006199  8b7c241c           mov     edi, dword [rsp+0x1c {fd_3}]
0000619d  be01000000         mov     esi, 0x1
000061a2  e889f0ffff         call    dup2
000061a7  85c0               test    eax, eax
000061a9  78e0               js      0x618b

000061ab  4885db             test    rbx, rbx
000061ae  7412               je      0x61c2

000061b0  8b7c2424           mov     edi, dword [rsp+0x24 {fd_5}]
000061b4  be02000000         mov     esi, 0x2
000061b9  e872f0ffff         call    dup2
000061be  85c0               test    eax, eax
000061c0  78c9               js      0x618b

000061c2  8b7c2414           mov     edi, dword [rsp+0x14 {fd_1}]
000061c6  e875f1ffff         call    close
000061cb  8b7c2410           mov     edi, dword [rsp+0x10 {fd}]
000061cf  e86cf1ffff         call    close
000061d4  8b7c2418           mov     edi, dword [rsp+0x18 {fd_2}]
000061d8  e863f1ffff         call    close
000061dd  8b7c241c           mov     edi, dword [rsp+0x1c {fd_3}]
000061e1  e85af1ffff         call    close
000061e6  4885db             test    rbx, rbx
000061e9  7412               je      0x61fd

000061eb  8b7c2420           mov     edi, dword [rsp+0x20 {fd_4}]
000061ef  e84cf1ffff         call    close
000061f4  8b7c2424           mov     edi, dword [rsp+0x24 {fd_5}]
000061f8  e843f1ffff         call    close

000061fd  488b3c24           mov     rdi, qword [rsp {var_68}]
00006201  e815050000         call    __x86_indirect_thunk_r15
{ Does not return }

00006206  83cdff             or      ebp, 0xffffffff
00006209  eb61               jmp     0x626c

0000620b  8b7c2410           mov     edi, dword [rsp+0x10 {fd}]
0000620f  e82cf1ffff         call    close
00006214  8b7c241c           mov     edi, dword [rsp+0x1c {fd_3}]
00006218  e823f1ffff         call    close
0000621d  8b7c2418           mov     edi, dword [rsp+0x18 {fd_2}]
00006221  e863feffff         call    setnonblocking
{ Does not return }

00006226                    8b 7c 24 14 e8 5a fe ff ff 48 85 db 74 12 8b 7c 24 24 e8 03 f1 ff ff 8b 7c 24        .|$..Z...H..t..|$$......|$
00006240  20 e8 43 fe ff ff 4d 85 e4 74 04 45 89 2c 24 8b 44 24 14 48 8b 54 24 08 41 89 06 8b 44 24 18 89   .C...M..t.E.,$.D$.H.T$.A...D$..
00006260  02 48 85 db 74 06 8b 44 24 20 89 03                                                              .H..t..D$ ..

0000626c  488b442428         mov     rax, qword [rsp+0x28 {var_40}]
00006271  64482b0425280000…  sub     rax, qword [fs:0x28]
0000627a  7405               je      0x6281

0000627c  e88fefffff         call    __stack_chk_fail
{ Does not return }

00006281  4883c438           add     rsp, 0x38
00006285  89e8               mov     eax, ebp  {0xffffffff}
00006287  5b                 pop     rbx {__saved_rbx}
00006288  5d                 pop     rbp {__saved_rbp}
00006289  415c               pop     r12 {__saved_r12}
0000628b  415d               pop     r13 {__saved_r13}
0000628d  415e               pop     r14 {__saved_r14}
0000628f  415f               pop     r15 {__saved_r15}
00006291  e973040000         jmp     __x86_return_thunk
{ Does not return }


00006296    void disallow_core() __noreturn

00006296  53                 push    rbx {__saved_rbx}
00006297  0f57c0             xorps   xmm0, xmm0
0000629a  bf04000000         mov     edi, 0x4
0000629f  4883ec20           sub     rsp, 0x20
000062a3  64488b0425280000…  mov     rax, qword [fs:0x28]
000062ac  4889442418         mov     qword [rsp+0x18 {var_10}], rax
000062b1  31c0               xor     eax, eax  {0x0}
000062b3  488d5c2408         lea     rbx, [rsp+0x8 {rlimits}]
000062b8  0f11442408         movups  xmmword [rsp+0x8 {rlimits}], xmm0
000062bd  4889de             mov     rsi, rbx {rlimits}
000062c0  e8cbf4ffff         call    getrlimit
000062c5  31c0               xor     eax, eax  {0x0}
000062c7  4889de             mov     rsi, rbx {rlimits}
000062ca  bf04000000         mov     edi, 0x4
000062cf  4889442408         mov     qword [rsp+0x8 {rlimits}], rax  {0x0}
000062d4  e8d7f2ffff         call    setrlimit
000062d9  488b442418         mov     rax, qword [rsp+0x18 {var_10}]
000062de  64482b0425280000…  sub     rax, qword [fs:0x28]
000062e7  7405               je      0x62ee

000062e9  e822efffff         call    __stack_chk_fail
{ Does not return }

000062ee  4883c420           add     rsp, 0x20
000062f2  5b                 pop     rbx {__saved_rbx}
000062f3  e911040000         jmp     __x86_return_thunk
{ Does not return }


000062f8    void m_str_to_uint(int64_t arg1, int32_t* arg2) __noreturn

000062f8  4154               push    r12 {__saved_r12}
000062fa  ba0a000000         mov     edx, 0xa
000062ff  55                 push    rbp {__saved_rbp}
00006300  4889fd             mov     rbp, rdi
00006303  53                 push    rbx {__saved_rbx}
00006304  4883ec10           sub     rsp, 0x10
00006308  644c8b2425280000…  mov     r12, qword [fs:0x28]
00006311  4c89642408         mov     qword [rsp+0x8 {var_20}], r12
00006316  4989f4             mov     r12, rsi
00006319  4889e6             mov     rsi, rsp {var_28}
0000631c  e81fedffff         call    __isoc23_strtoul
00006321  488b1424           mov     rdx, qword [rsp {var_28}]
00006325  4889c3             mov     rbx, rax
00006328  83c8ff             or      eax, 0xffffffff
0000632b  4839ea             cmp     rdx, rbp
0000632e  742f               je      0x635f

00006330  803a00             cmp     byte [rdx], 0x0
00006333  752a               jne     0x635f

00006335  4885db             test    rbx, rbx
00006338  7512               jne     0x634c

0000633a  e851edffff         call    __errno_location
0000633f  4889c2             mov     rdx, rax
00006342  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00006345  833a16             cmp     dword [rdx], 0x16
00006348  750f               jne     0x6359

0000634a  eb13               jmp     0x635f

0000634c  baffffffff         mov     edx, 0xffffffff
00006351  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00006354  4839da             cmp     rdx, rbx
00006357  7206               jb      0x635f

00006359  41891c24           mov     dword [r12], ebx
0000635d  31c0               xor     eax, eax  {0x0}

0000635f  488b542408         mov     rdx, qword [rsp+0x8 {var_20}]
00006364  64482b1425280000…  sub     rdx, qword [fs:0x28]
0000636d  7405               je      0x6374

0000636f  e89ceeffff         call    __stack_chk_fail
{ Does not return }

00006374  4883c410           add     rsp, 0x10
00006378  5b                 pop     rbx {__saved_rbx}
00006379  5d                 pop     rbp {__saved_rbp}
0000637a  415c               pop     r12 {__saved_r12}
0000637c  e988030000         jmp     __x86_return_thunk
{ Does not return }


00006381    void expand_homedir_path_home(char* arg1, char* arg2) __noreturn

00006381  4155               push    r13 {__saved_r13}
00006383  ba02000000         mov     edx, 0x2
00006388  4154               push    r12 {__saved_r12}
0000638a  4989f4             mov     r12, rsi
0000638d  488d35efdc0200     lea     rsi, [rel data_34083]
00006394  55                 push    rbp {__saved_rbp}
00006395  53                 push    rbx {__saved_rbx}
00006396  4889fb             mov     rbx, rdi
00006399  51                 push    rcx {var_28}
0000639a  e821edffff         call    strncmp
0000639f  4d85e4             test    r12, r12
000063a2  7404               je      0x63a8

000063a4  85c0               test    eax, eax
000063a6  740f               je      0x63b7

000063a8  5a                 pop     rdx {var_28}
000063a9  4889df             mov     rdi, rbx
000063ac  5b                 pop     rbx {__saved_rbx}
000063ad  5d                 pop     rbp {__saved_rbp}
000063ae  415c               pop     r12 {__saved_r12}
000063b0  415d               pop     r13 {__saved_r13}
000063b2  e9a1520000         jmp     m_strdup
{ Does not return }

000063b7  4889df             mov     rdi, rbx
000063ba  4883c302           add     rbx, 0x2
000063be  e82deeffff         call    strlen
000063c3  4c89e7             mov     rdi, r12
000063c6  4889c5             mov     rbp, rax
000063c9  e822eeffff         call    strlen
000063ce  4801c5             add     rbp, rax
000063d1  4889ef             mov     rdi, rbp
000063d4  e837520000         call    m_malloc
{ Does not return }

000063d9                                                                             4d 89 e1 48 89 ee 48                           M..H..H
000063e0  83 c9 ff 49 89 c5 50 4c 8d 05 98 dc 02 00 ba 01 00 00 00 53 4c 89 ef 31 c0 e8 52 ec ff ff 48 83  ...I..PL...........SL..1..R...H.
00006400  c4 18 4c 89 e8 5b 5d 41 5c 41 5d e9 f9 02 00 00                                                  ..L..[]A\A].....

00006410    void expand_homedir_path(char* arg1) __noreturn

00006410  53                 push    rbx {__saved_rbx}
00006411  4889fb             mov     rbx, rdi
00006414  488d3d71dc0200     lea     rdi, [rel data_3408c]  {"HOME"}
0000641b  e810ecffff         call    getenv
00006420  4885c0             test    rax, rax
00006423  7515               jne     0x643a

00006425  e8f6edffff         call    getuid
0000642a  89c7               mov     edi, eax
0000642c  e87fedffff         call    getpwuid
00006431  4885c0             test    rax, rax
00006434  7404               je      0x643a

00006436  488b4020           mov     rax, qword [rax+0x20]

0000643a  4889df             mov     rdi, rbx
0000643d  4889c6             mov     rsi, rax
00006440  5b                 pop     rbx {__saved_rbx}
00006441  e93bffffff         jmp     expand_homedir_path_home
{ Does not return }


00006446    void constant_time_memcmp(char* arg1, char* arg2, int64_t arg3) __noreturn

00006446  31c9               xor     ecx, ecx  {0x0}
00006448  31c0               xor     eax, eax  {0x0}

0000644a  4839d1             cmp     rcx, rdx
0000644d  7410               je      0x645f

0000644f  448a040f           mov     r8b, byte [rdi+rcx]
00006453  4432040e           xor     r8b, byte [rsi+rcx]
00006457  48ffc1             inc     rcx
0000645a  4409c0             or      eax, r8d
0000645d  ebeb               jmp     0x644a

0000645f  0fb6c0             movzx   eax, al
00006462  e9a2020000         jmp     __x86_return_thunk
{ Does not return }


00006467    void gettime_wrapper(struct timespec* arg1) __noreturn

00006467  53                 push    rbx {__saved_rbx}
00006468  4889fe             mov     rsi, rdi
0000646b  4883ec20           sub     rsp, 0x20
0000646f  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00006478  48895c2418         mov     qword [rsp+0x18 {var_10}], rbx
0000647d  4889fb             mov     rbx, rdi
00006480  bf01000000         mov     edi, 0x1
00006485  e8d6ecffff         call    clock_gettime
0000648a  85c0               test    eax, eax
0000648c  744d               je      0x64db

0000648e  833d9702040000     cmp     dword [rel linux_monotonic_failed.0], 0x0
00006495  7523               jne     0x64ba  {linux_monotonic_failed.0}

00006497  31c0               xor     eax, eax  {0x0}
00006499  4889da             mov     rdx, rbx
0000649c  be01000000         mov     esi, 0x1
000064a1  bfe4000000         mov     edi, 0xe4
000064a6  e8b5efffff         call    syscall
000064ab  4885c0             test    rax, rax
000064ae  742b               je      0x64db

000064b0  c705720204000100…  mov     dword [rel linux_monotonic_failed.0], 0x1

000064ba  488d7c2408         lea     rdi, [rsp+0x8 {var_20}]
000064bf  31f6               xor     esi, esi  {0x0}
000064c1  e8eaedffff         call    gettimeofday
000064c6  488b442408         mov     rax, qword [rsp+0x8 {var_20}]
000064cb  488903             mov     qword [rbx {timespec::tv_sec}], rax
000064ce  4869442410e80300…  imul    rax, qword [rsp+0x10 {var_18}], 0x3e8
000064d7  48894308           mov     qword [rbx+0x8 {timespec::tv_nsec}], rax

000064db  488b442418         mov     rax, qword [rsp+0x18 {var_10}]
000064e0  64482b0425280000…  sub     rax, qword [fs:0x28]
000064e9  7405               je      0x64f0

000064eb  e820edffff         call    __stack_chk_fail
{ Does not return }

000064f0  4883c420           add     rsp, 0x20
000064f4  5b                 pop     rbx {__saved_rbx}
000064f5  e90f020000         jmp     __x86_return_thunk
{ Does not return }


000064fa    void monotonic_now() __noreturn

000064fa  4883ec28           sub     rsp, 0x28
000064fe  64488b3c25280000…  mov     rdi, qword [fs:0x28]
00006507  48897c2418         mov     qword [rsp+0x18 {var_10}], rdi
0000650c  488d7c2408         lea     rdi, [rsp+0x8 {var_20}]
00006511  e851ffffff         call    gettime_wrapper
{ Does not return }

00006516                                                                    48 8b 44 24 08 48 8b 54 24 18                        H.D$.H.T$.
00006520  64 48 2b 14 25 28 00 00 00 74 05 e8 e0 ec ff ff 48 83 c4 28 e9 d0 01 00 00                       dH+.%(...t......H..(.....

00006539    void fsync_parent_dir(char* arg1) __noreturn

00006539  55                 push    rbp {var_8}
0000653a  53                 push    rbx {var_10}
0000653b  52                 push    rdx {var_18}
0000653c  e817510000         call    m_strdup
{ Does not return }

00006541     48 89 c7 48 89 c5 e8 44 ed ff ff 31 f6 48 89 c7 31 c0 e8 88 f1 ff ff 83 f8 ff 74 10 89 c3 89   H..H...D...1.H..1.........t....
00006560  c7 e8 ea f0 ff ff 89 df e8 b4 f8 ff ff 58 48 89 ef 5b 5d e9 e8 ea ff ff                          .............XH..[].....

00006578    void fd_read_pending(int32_t arg1) __noreturn

00006578  4156               push    r14 {__saved_r14}
0000657a  b920000000         mov     ecx, 0x20
0000657f  4155               push    r13 {__saved_r13}
00006581  4c63ef             movsxd  r13, edi
00006584  4154               push    r12 {__saved_r12}
00006586  55                 push    rbp {__saved_rbp}
00006587  4c89ed             mov     rbp, r13
0000658a  53                 push    rbx {__saved_rbx}
0000658b  bb01000000         mov     ebx, 0x1
00006590  4881eca0000000     sub     rsp, 0xa0
00006597  64488b0425280000…  mov     rax, qword [fs:0x28]
000065a0  4889842498000000   mov     qword [rsp+0x98 {var_30}], rax
000065a8  31c0               xor     eax, eax  {0x0}
000065aa  4c8d642418         lea     r12, [rsp+0x18 {var_b0}]
000065af  4c8d742408         lea     r14, [rsp+0x8 {timeout}]
000065b4  4c89e7             mov     rdi, r12 {var_b0}
000065b7  f3ab               rep stosd dword [rdi] {var_130} {var_b0}  {0x0}
000065b9  4c89ef             mov     rdi, r13
000065bc  e88fecffff         call    __fdelt_chk
000065c1  4489e9             mov     ecx, r13d
000065c4  48d3e3             shl     rbx, cl
000065c7  48095cc418         or      qword [rsp+rax*8+0x18 {var_b0}], rbx

000065cc  31c0               xor     eax, eax  {0x0}
000065ce  31c9               xor     ecx, ecx  {0x0}
000065d0  31d2               xor     edx, edx  {0x0}
000065d2  4d89f0             mov     r8, r14 {timeout}
000065d5  8d7d01             lea     edi, [rbp+0x1]
000065d8  4c89e6             mov     rsi, r12 {var_b0}
000065db  4889442408         mov     qword [rsp+0x8 {timeout}], rax  {0x0}
000065e0  4889442410         mov     qword [rsp+0x10 {var_b8_1}], rax  {0x0}
000065e5  e836efffff         call    select
000065ea  85c0               test    eax, eax
000065ec  790e               jns     0x65fc

000065ee  e89deaffff         call    __errno_location
000065f3  833804             cmp     dword [rax], 0x4
000065f6  74d4               je      0x65cc

000065f8  31c0               xor     eax, eax  {0x0}
000065fa  eb13               jmp     0x660f

000065fc  4c89ef             mov     rdi, r13
000065ff  e84cecffff         call    __fdelt_chk
00006604  48235cc418         and     rbx, qword [rsp+rax*8+0x18 {var_b0}]
00006609  0f95c0             setne   al
0000660c  0fb6c0             movzx   eax, al

0000660f  488b942498000000   mov     rdx, qword [rsp+0x98 {var_30}]
00006617  64482b1425280000…  sub     rdx, qword [fs:0x28]
00006620  7405               je      0x6627

00006622  e8e9ebffff         call    __stack_chk_fail
{ Does not return }

00006627  4881c4a0000000     add     rsp, 0xa0
0000662e  5b                 pop     rbx {__saved_rbx}
0000662f  5d                 pop     rbp {__saved_rbp}
00006630  415c               pop     r12 {__saved_r12}
00006632  415d               pop     r13 {__saved_r13}
00006634  415e               pop     r14 {__saved_r14}
00006636  e9ce000000         jmp     __x86_return_thunk
{ Does not return }


0000663b    void m_snprintf(char* arg1, uint64_t arg2, char* arg3, char arg4 @ rax) __noreturn

0000663b  4881ecd8000000     sub     rsp, 0xd8
00006642  48894c2438         mov     qword [rsp+0x38 {var_a0}], rcx
00006647  4c89442440         mov     qword [rsp+0x40 {var_98}], r8
0000664c  4c894c2448         mov     qword [rsp+0x48 {var_90}], r9
00006651  84c0               test    al, al
00006653  7437               je      0x668c

00006655  0f29442450         movaps  xmmword [rsp+0x50 {var_88_1}], xmm0
0000665a  0f294c2460         movaps  xmmword [rsp+0x60 {var_78_1}], xmm1
0000665f  0f29542470         movaps  xmmword [rsp+0x70 {var_68_1}], xmm2
00006664  0f299c2480000000   movaps  xmmword [rsp+0x80 {var_58_1}], xmm3
0000666c  0f29a42490000000   movaps  xmmword [rsp+0x90 {var_48_1}], xmm4
00006674  0f29ac24a0000000   movaps  xmmword [rsp+0xa0 {var_38_1}], xmm5
0000667c  0f29b424b0000000   movaps  xmmword [rsp+0xb0 {var_28_1}], xmm6
00006684  0f29bc24c0000000   movaps  xmmword [rsp+0xc0 {var_18_1}], xmm7

0000668c  64488b0425280000…  mov     rax, qword [fs:0x28]
00006695  4889442418         mov     qword [rsp+0x18 {var_c0}], rax
0000669a  31c0               xor     eax, eax  {0x0}
0000669c  488d8424e0000000   lea     rax, [rsp+0xe0 {arg_8}]
000066a4  4989d0             mov     r8, rdx
000066a7  4989e1             mov     r9, rsp {ap}
000066aa  4889442408         mov     qword [rsp+0x8 {var_d0}], rax {arg_8}
000066af  4883c9ff           or      rcx, 0xffffffffffffffff
000066b3  488d442420         lea     rax, [rsp+0x20 {var_b8}]
000066b8  ba01000000         mov     edx, 0x1
000066bd  c7042418000000     mov     dword [rsp {ap}], 0x18
000066c4  c744240430000000   mov     dword [rsp+0x4 {var_d4}], 0x30
000066cc  4889442410         mov     qword [rsp+0x10 {var_c8}], rax {var_b8}
000066d1  e8caeeffff         call    __vsnprintf_chk
000066d6  85c0               test    eax, eax
000066d8  790e               jns     0x66e8

000066da  488d3db0d90200     lea     rdi, [rel data_34091]  {"snprintf failed"}
000066e1  31c0               xor     eax, eax  {0x0}
000066e3  e8e9f4ffff         call    dropbear_exit
{ Does not return }

000066e8  488b542418         mov     rdx, qword [rsp+0x18 {var_c0}]
000066ed  64482b1425280000…  sub     rdx, qword [fs:0x28]
000066f6  7405               je      0x66fd

000066f8  e813ebffff         call    __stack_chk_fail
{ Does not return }

000066fd  4881c4d8000000     add     rsp, 0xd8
00006704  e900000000         jmp     __x86_return_thunk
{ Does not return }


00006709    void __x86_return_thunk() __noreturn

00006709  e807000000         call    sub_6715

0000670e  f390               pause   
00006710  0faee8             lfence  
00006713  ebf9               jmp     0x670e


00006715    int64_t sub_6715() __pure

00006715  488d642408         lea     rsp, [rsp+0x8]
0000671a  c3                 retn     {arg_8}


0000671b    void __x86_indirect_thunk_r15() __noreturn

0000671b  e807000000         call    sub_6727

00006720  f390               pause   
00006722  0faee8             lfence  
00006725  ebf9               jmp     0x6720


00006727    int64_t sub_6727() __pure

00006727  4c893c24           mov     qword [rsp {__return_addr}], r15
0000672b  c3                 retn     {__return_addr}


0000672c    void __x86_indirect_thunk_rax() __noreturn

0000672c  e807000000         call    sub_6738

00006731  f390               pause   
00006733  0faee8             lfence  
00006736  ebf9               jmp     0x6731


00006738    void sub_6738() __pure

00006738  48890424           mov     qword [rsp {__return_addr}], rax
0000673c  c3                 retn     {__return_addr}


0000673d    void buf_new(int32_t arg1) __noreturn

0000673d  53                 push    rbx {var_8}
0000673e  81ff00ca9a3b       cmp     edi, 0x3b9aca00
00006744  760e               jbe     0x6754

00006746  488d3d54d90200     lea     rdi, [rel data_340a1]  {"buf->size too big"}
0000674d  31c0               xor     eax, eax  {0x0}
0000674f  e87df4ffff         call    dropbear_exit
{ Does not return }

00006754  89fb               mov     ebx, edi
00006756  89ff               mov     edi, edi
00006758  4883c718           add     rdi, 0x18
0000675c  e8af4e0000         call    m_malloc
{ Does not return }

00006761     48 8d 50 18 89 58 10 48 89 10 5b e9 98 ff ff ff                                                H.P..X.H..[.....

00006771    void buf_free(void* ptr)

00006771  e9eae8ffff         jmp     free


00006776    int64_t buf_burn_free(int64_t* arg1)

00006776  53                 push    rbx {__saved_rbx}
00006777  4889fb             mov     rbx, rdi
0000677a  8b7710             mov     esi, dword [rdi+0x10]
0000677d  488b3f             mov     rdi, qword [rdi]
00006780  e8aa050000         call    m_burn
00006785  4889df             mov     rdi, rbx
00006788  5b                 pop     rbx {__saved_rbx}
00006789  e9d2e8ffff         jmp     free


0000678e    void buf_resize(int64_t arg1, int32_t arg2) __noreturn

0000678e  53                 push    rbx {var_8}
0000678f  81fe00ca9a3b       cmp     esi, 0x3b9aca00
00006795  760e               jbe     0x67a5

00006797  488d3d03d90200     lea     rdi, [rel data_340a1]  {"buf->size too big"}
0000679e  31c0               xor     eax, eax  {0x0}
000067a0  e82cf4ffff         call    dropbear_exit
{ Does not return }

000067a5  89f3               mov     ebx, esi
000067a7  89f6               mov     esi, esi
000067a9  4883c618           add     rsi, 0x18
000067ad  e8cf4e0000         call    m_realloc
{ Does not return }

000067b2                                                        48 8d 50 18 89 58 10 48 89 10 8b 50 08 39                    H.P..X.H...P.9
000067c0  da 0f 47 d3 89 50 08 8b 50 0c 39 da 0f 47 d3 89 50 0c 5b e9 31 ff ff ff                          ..G..P..P.9..G..P.[.1...

000067d8    void buf_newcopy(void* arg1) __noreturn

000067d8  53                 push    rbx {var_8}
000067d9  4889fb             mov     rbx, rdi
000067dc  8b7f08             mov     edi, dword [rdi+0x8]
000067df  e859ffffff         call    buf_new
{ Does not return }

000067e4              8b 4b 08 89 48 08 85 c9 74 08 48 8b 33 48 8b 38 f3 a4 5b e9 0d ff ff ff                  .K..H...t.H.3H.8..[.....

000067fc    void buf_setlen(void* arg1, int32_t arg2) __noreturn

000067fc  397710             cmp     dword [rdi+0x10], esi
000067ff  730f               jae     0x6810

00006801  50                 push    rax {var_8}
00006802  488d3daad80200     lea     rdi, [rel data_340b3]  {"Bad buf_setlen"}
00006809  31c0               xor     eax, eax  {0x0}
0000680b  e8c1f3ffff         call    dropbear_exit
{ Does not return }

00006810  8b470c             mov     eax, dword [rdi+0xc]
00006813  897708             mov     dword [rdi+0x8], esi
00006816  39f0               cmp     eax, esi
00006818  0f47c6             cmova   eax, esi
0000681b  89470c             mov     dword [rdi+0xc], eax
0000681e  e9e6feffff         jmp     __x86_return_thunk
{ Does not return }


00006823    void buf_incrlen(void* arg1, int32_t arg2) __noreturn

00006823  81fe00ca9a3b       cmp     esi, 0x3b9aca00
00006829  7708               ja      0x6833

0000682b  037708             add     esi, dword [rdi+0x8]
0000682e  397710             cmp     dword [rdi+0x10], esi
00006831  730f               jae     0x6842

00006833  50                 push    rax {var_8}
00006834  488d3d87d80200     lea     rdi, [rel data_340c2]  {"Bad buf_incrlen"}
0000683b  31c0               xor     eax, eax  {0x0}
0000683d  e88ff3ffff         call    dropbear_exit
{ Does not return }

00006842  897708             mov     dword [rdi+0x8], esi
00006845  e9bffeffff         jmp     __x86_return_thunk
{ Does not return }


0000684a    void buf_setpos(void* arg1, int32_t arg2) __noreturn

0000684a  397708             cmp     dword [rdi+0x8], esi
0000684d  730f               jae     0x685e

0000684f  50                 push    rax {var_8}
00006850  488d3d7bd80200     lea     rdi, [rel data_340d2]  {"Bad buf_setpos"}
00006857  31c0               xor     eax, eax  {0x0}
00006859  e873f3ffff         call    dropbear_exit
{ Does not return }

0000685e  89770c             mov     dword [rdi+0xc], esi
00006861  e9a3feffff         jmp     __x86_return_thunk
{ Does not return }


00006866    void buf_incrwritepos(void* arg1, int32_t arg2) __noreturn

00006866  81fe00ca9a3b       cmp     esi, 0x3b9aca00
0000686c  7708               ja      0x6876

0000686e  03770c             add     esi, dword [rdi+0xc]
00006871  397710             cmp     dword [rdi+0x10], esi
00006874  730f               jae     0x6885

00006876  50                 push    rax {var_8}
00006877  488d3d63d80200     lea     rdi, [rel data_340e1]  {"Bad buf_incrwritepos"}
0000687e  31c0               xor     eax, eax  {0x0}
00006880  e84cf3ffff         call    dropbear_exit
{ Does not return }

00006885  89770c             mov     dword [rdi+0xc], esi
00006888  397708             cmp     dword [rdi+0x8], esi
0000688b  7303               jae     0x6890

0000688d  897708             mov     dword [rdi+0x8], esi

00006890  e974feffff         jmp     __x86_return_thunk
{ Does not return }


00006895    void buf_incrpos(void* arg1, int32_t arg2) __noreturn

00006895  81fe00ca9a3b       cmp     esi, 0x3b9aca00
0000689b  7708               ja      0x68a5

0000689d  03770c             add     esi, dword [rdi+0xc]
000068a0  397708             cmp     dword [rdi+0x8], esi
000068a3  730f               jae     0x68b4

000068a5  50                 push    rax {var_8}
000068a6  488d3d49d80200     lea     rdi, [rel data_340f6]  {"Bad buf_incrpos"}
000068ad  31c0               xor     eax, eax  {0x0}
000068af  e81df3ffff         call    dropbear_exit
{ Does not return }

000068b4  89770c             mov     dword [rdi+0xc], esi
000068b7  e94dfeffff         jmp     __x86_return_thunk
{ Does not return }


000068bc    void buf_decrpos(void* arg1, int32_t arg2) __noreturn

000068bc  8b470c             mov     eax, dword [rdi+0xc]
000068bf  39f0               cmp     eax, esi
000068c1  730f               jae     0x68d2

000068c3  50                 push    rax {var_8}
000068c4  488d3d3bd80200     lea     rdi, [rel data_34106]  {"Bad buf_decrpos"}
000068cb  31c0               xor     eax, eax  {0x0}
000068cd  e8fff2ffff         call    dropbear_exit
{ Does not return }

000068d2  29f0               sub     eax, esi
000068d4  89470c             mov     dword [rdi+0xc], eax
000068d7  e92dfeffff         jmp     __x86_return_thunk
{ Does not return }


000068dc    void buf_getbyte(int64_t* arg1) __noreturn

000068dc  8b470c             mov     eax, dword [rdi+0xc]
000068df  3b4708             cmp     eax, dword [rdi+0x8]
000068e2  720f               jb      0x68f3

000068e4  50                 push    rax {var_8}
000068e5  488d3d2ad80200     lea     rdi, [rel data_34116]  {"Bad buf_getbyte"}
000068ec  31c0               xor     eax, eax  {0x0}
000068ee  e8def2ffff         call    dropbear_exit
{ Does not return }

000068f3  488b17             mov     rdx, qword [rdi]
000068f6  8d4801             lea     ecx, [rax+0x1]
000068f9  894f0c             mov     dword [rdi+0xc], ecx
000068fc  8a0402             mov     al, byte [rdx+rax]
000068ff  e905feffff         jmp     __x86_return_thunk
{ Does not return }


00006904    void buf_getbool(int64_t* arg1) __noreturn

00006904  50                 push    rax {var_8}
00006905  e8d2ffffff         call    buf_getbyte
{ Does not return }

0000690a                                5a 84 c0 0f 95 c0 e9 f4 fd ff ff                                             Z..........

00006915    void buf_putbyte(int64_t* arg1, char arg2) __noreturn

00006915  4154               push    r12 {__saved_r12}
00006917  4189f4             mov     r12d, esi
0000691a  55                 push    rbp {__saved_rbp}
0000691b  8b6f0c             mov     ebp, dword [rdi+0xc]
0000691e  53                 push    rbx {__saved_rbx}
0000691f  4889fb             mov     rbx, rdi
00006922  3b6f08             cmp     ebp, dword [rdi+0x8]
00006925  720a               jb      0x6931

00006927  be01000000         mov     esi, 0x1
0000692c  e8f2feffff         call    buf_incrlen
{ Does not return }

00006931  488b03             mov     rax, qword [rbx]
00006934  44882428           mov     byte [rax+rbp], r12b
00006938  ff430c             inc     dword [rbx+0xc]
0000693b  5b                 pop     rbx {__saved_rbx}
0000693c  5d                 pop     rbp {__saved_rbp}
0000693d  415c               pop     r12 {__saved_r12}
0000693f  e9c5fdffff         jmp     __x86_return_thunk
{ Does not return }


00006944    void buf_getptr(void* arg1, int32_t arg2) __noreturn

00006944  81fe00ca9a3b       cmp     esi, 0x3b9aca00
0000694a  770a               ja      0x6956

0000694c  8b470c             mov     eax, dword [rdi+0xc]
0000694f  01c6               add     esi, eax
00006951  397708             cmp     dword [rdi+0x8], esi
00006954  730f               jae     0x6965

00006956  50                 push    rax {var_8}
00006957  488d3dc8d70200     lea     rdi, [rel data_34126]  {"Bad buf_getptr"}
0000695e  31c0               xor     eax, eax  {0x0}
00006960  e86cf2ffff         call    dropbear_exit
{ Does not return }

00006965  480307             add     rax, qword [rdi]
00006968  e99cfdffff         jmp     __x86_return_thunk
{ Does not return }


0000696d    void buf_getwriteptr(void* arg1, int32_t arg2) __noreturn

0000696d  81fe00ca9a3b       cmp     esi, 0x3b9aca00
00006973  770a               ja      0x697f

00006975  8b470c             mov     eax, dword [rdi+0xc]
00006978  01c6               add     esi, eax
0000697a  397710             cmp     dword [rdi+0x10], esi
0000697d  730f               jae     0x698e

0000697f  50                 push    rax {var_8}
00006980  488d3daed70200     lea     rdi, [rel data_34135]  {"Bad buf_getwriteptr"}
00006987  31c0               xor     eax, eax  {0x0}
00006989  e843f2ffff         call    dropbear_exit
{ Does not return }

0000698e  480307             add     rax, qword [rdi]
00006991  e973fdffff         jmp     __x86_return_thunk
{ Does not return }


00006996    void buf_getint(void* arg1) __noreturn

00006996  55                 push    rbp {var_8}
00006997  be04000000         mov     esi, 0x4
0000699c  4883ec10           sub     rsp, 0x10
000069a0  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
000069a5  e89affffff         call    buf_getptr
{ Does not return }

000069aa                                48 8b 7c 24 08 be 04 00 00 00 8b 28 e8 da fe ff ff                           H.|$.......(.....

000069bb    void sub_69bb(int32_t arg1 @ rbp, int64_t arg2) __noreturn

000069bb  4883c410           add     rsp, 0x10
000069bf  0fcd               bswap   ebp
000069c1  89e8               mov     eax, ebp
000069c3  5d                 pop     rbp {arg2}
000069c4  e940fdffff         jmp     __x86_return_thunk
{ Does not return }


000069c9    void buf_getstring(void* arg1) __noreturn

000069c9  4156               push    r14 {var_8}
000069cb  4155               push    r13 {var_10}
000069cd  4154               push    r12 {var_18}
000069cf  4989fc             mov     r12, rdi
000069d2  55                 push    rbp {var_20}
000069d3  4889f5             mov     rbp, rsi
000069d6  53                 push    rbx {var_28}
000069d7  4883ec10           sub     rsp, 0x10
000069db  e8b6ffffff         call    buf_getint
{ Does not return }

000069e0  3d 28 23 00 00 76 0e 48 8d 3d 5b d7 02 00 31 c0 e8 dc f1 ff ff 89 c3 48 85 ed 74 03 89 45 00 89  =(#..v.H.=[...1........H..t..E..
00006a00  de 4c 89 e7 41 89 de e8 38 ff ff ff 8d 7b 01 49 89 c5 e8 f9 4b 00 00 4c 89 ee 4c 89 f1 48 89 c7  .L..A...8....{.I....K..L..L..H..
00006a20  48 89 44 24 08 f3 a4 89 de 4c 89 e7 e8 64 fe ff ff 48 8b 44 24 08 42 c6 04 30 00 48 83 c4 10 5b  H.D$.....L...d...H.D$.B..0.H...[
00006a40  5d 41 5c 41 5d 41 5e e9 bd fc ff ff                                                              ]A\A]A^.....

00006a4c    void buf_eatstring(void* arg1) __noreturn

00006a4c  4883ec18           sub     rsp, 0x18
00006a50  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00006a55  e83cffffff         call    buf_getint
{ Does not return }

00006a5a                                                                                48 8b 7c 24 08 48                            H.|$.H
00006a60  83 c4 18 89 c6 e9 2b fe ff ff                                                                    ......+...

00006a6a    void buf_putint(void* arg1, int32_t arg2) __noreturn

00006a6a  55                 push    rbp {var_8}
00006a6b  0fce               bswap   esi
00006a6d  89f5               mov     ebp, esi
00006a6f  be04000000         mov     esi, 0x4
00006a74  4883ec10           sub     rsp, 0x10
00006a78  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00006a7d  e8ebfeffff         call    buf_getwriteptr
{ Does not return }

00006a82        48 8b 7c 24 08 be 04 00 00 00 89 28 48 83 c4 10 5d e9 ce fd ff ff                            H.|$.......(H...].....

00006a98    void buf_getstringbuf_int(void* arg1, int32_t arg2) __noreturn

00006a98  4155               push    r13 {var_8}
00006a9a  4189f5             mov     r13d, esi
00006a9d  4154               push    r12 {var_10}
00006a9f  4989fc             mov     r12, rdi
00006aa2  55                 push    rbp {var_18}
00006aa3  53                 push    rbx {var_20}
00006aa4  51                 push    rcx {var_28}
00006aa5  e8ecfeffff         call    buf_getint
{ Does not return }

00006aaa                                3d 28 23 00 00 76 0e 48 8d 3d 91 d6 02 00 31 c0 e8 12 f1 ff ff 42            =(#..v.H.=....1......B
00006ac0  8d 3c a8 89 c3 e8 73 fc ff ff 48 89 c5 45 85 ed 74 0a 89 de 48 89 c7 e8 8e ff ff ff 89 de 4c 89  .<....s...H..E..t...H.........L.
00006ae0  e7 e8 5e fe ff ff 89 de 48 89 ef 49 89 c5 e8 7a fe ff ff 89 d9 4c 89 ee 48 89 c7 f3 a4 89 de 4c  ..^.....H..I...z.....L..H......L
00006b00  89 e7 e8 8e fd ff ff 89 de 48 89 ef e8 12 fd ff ff 48 89 ef 31 f6 e8 2f fd ff ff 5a 48 89 e8 5b  .........H.......H..1../...ZH..[
00006b20  5d 41 5c 41 5d e9 df fb ff ff                                                                    ]A\A].....

00006b2a    void buf_getstringbuf(void* arg1) __noreturn

00006b2a  31f6               xor     esi, esi  {0x0}
00006b2c  e967ffffff         jmp     buf_getstringbuf_int
{ Does not return }


00006b31    void buf_getbuf(void* arg1) __noreturn

00006b31  be01000000         mov     esi, 0x1
00006b36  e95dffffff         jmp     buf_getstringbuf_int
{ Does not return }


00006b3b    void buf_putbytes(void* arg1, int64_t arg2, int32_t arg3) __noreturn

00006b3b  4154               push    r12 {var_8}
00006b3d  4989fc             mov     r12, rdi
00006b40  55                 push    rbp {var_10}
00006b41  4889f5             mov     rbp, rsi
00006b44  89d6               mov     esi, edx
00006b46  53                 push    rbx {var_18}
00006b47  89d3               mov     ebx, edx
00006b49  e81ffeffff         call    buf_getwriteptr
{ Does not return }

00006b4e                                            89 d9 48 89 ee 48 89 c7 f3 a4 89 de 4c 89 e7 5b 5d 41                ..H..H......L..[]A
00006b60  5c e9 00 fd ff ff                                                                                \.....

00006b66    void buf_getptrcopy(void* arg1, int32_t arg2) __noreturn

00006b66  4154               push    r12 {var_8}
00006b68  55                 push    rbp {var_10}
00006b69  89f5               mov     ebp, esi
00006b6b  53                 push    rbx {var_18}
00006b6c  e8d3fdffff         call    buf_getptr
{ Does not return }

00006b71                                                     89 ef 49 89 c4 e8 c2 fb ff ff 89 ea 4c 89 e6                   ..I.........L..
00006b80  48 89 c3 48 89 c7 e8 b0 ff ff ff 48 89 df 31 f6 e8 b5 fc ff ff 48 89 d8 5b 5d 41 5c e9 68 fb ff  H..H.......H..1......H..[]A\.h..
00006ba0  ff                                                                                               .

00006ba1    void buf_putstring(void* arg1, int64_t arg2, int32_t arg3) __noreturn

00006ba1  4154               push    r12 {var_8}
00006ba3  4989f4             mov     r12, rsi
00006ba6  89d6               mov     esi, edx
00006ba8  4883ec10           sub     rsp, 0x10
00006bac  8954240c           mov     dword [rsp+0xc {var_c}], edx
00006bb0  48893c24           mov     qword [rsp {var_18}], rdi
00006bb4  e8b1feffff         call    buf_putint
{ Does not return }

00006bb9                                                                             8b 54 24 0c 48 8b 3c                           .T$.H.<
00006bc0  24 4c 89 e6 48 83 c4 10 41 5c e9 6c ff ff ff                                                     $L..H...A\.l...

00006bcf    void buf_putbufstring(void* arg1, int64_t* arg2) __noreturn

00006bcf  8b5608             mov     edx, dword [rsi+0x8]
00006bd2  488b36             mov     rsi, qword [rsi]
00006bd5  ebca               jmp     buf_putstring
{ Does not return }


00006bd7    void buf_putmpint(void* arg1, int32_t* arg2) __noreturn

00006bd7  4155               push    r13 {var_8}
00006bd9  4154               push    r12 {var_10}
00006bdb  55                 push    rbp {var_18}
00006bdc  53                 push    rbx {var_20}
00006bdd  4883ec18           sub     rsp, 0x18
00006be1  64488b0425280000…  mov     rax, qword [fs:0x28]
00006bea  4889442408         mov     qword [rsp+0x8 {var_30}], rax
00006bef  31c0               xor     eax, eax  {0x0}
00006bf1  4885f6             test    rsi, rsi
00006bf4  7518               jne     0x6c0e

00006bf6  ba3c010000         mov     edx, 0x13c
00006bfb  488d3557d50200     lea     rsi, [rel data_34159]  {"src/buffer.c"}
00006c02  488d3d5dd50200     lea     rdi, [rel data_34166]  {"mp != NULL"}
00006c09  e86bf0ffff         call    fail_assert
{ Does not return }

00006c0e  837e0800           cmp     dword [rsi+0x8], 0x0
00006c12  4889f5             mov     rbp, rsi
00006c15  7409               je      0x6c20

00006c17  488d3d53d50200     lea     rdi, [rel data_34171]  {"negative bignum"}
00006c1e  eb6c               jmp     0x6c8c

00006c20  833e00             cmp     dword [rsi], 0x0
00006c23  4989fc             mov     r12, rdi
00006c26  741a               je      0x6c42

00006c28  4889f7             mov     rdi, rsi
00006c2b  4531ed             xor     r13d, r13d  {0x0}
00006c2e  e8ad030200         call    mp_count_bits
{ Does not return }

00006c33                                                           a8 07 89 c3 41 0f 94 c5 c1 eb 03 ff c3                     ....A........
00006c40  eb 05                                                                                            ..

00006c42  4531ed             xor     r13d, r13d  {0x0}
00006c45  31db               xor     ebx, ebx
00006c47  89de               mov     esi, ebx  {0x0}
00006c49  4c89e7             mov     rdi, r12
00006c4c  e819feffff         call    buf_putint
{ Does not return }

00006c51                                                     85 db 74 49 45 85 ed 74 0a 31 f6 4c 89 e7 e8                   ..tIE..t.1.L...
00006c60  b1 fc ff ff 44 29 eb 4c 89 e7 89 de e8 fc fc ff ff 48 89 e1 89 da 48 89 ef 48 89 c6 e8 cf 57 02  ....D).L.........H....H..H....W.
00006c80  00 85 c0 74 0e 48 8d 3d f5 d4 02 00                                                              ...t.H.=....

00006c8c  31c0               xor     eax, eax  {0x0}
00006c8e  e83eefffff         call    dropbear_exit
{ Does not return }

00006c93                                                           8b 34 24 4c 89 e7 e8 c8 fb ff ff 48 8b                     .4$L.......H.
00006ca0  44 24 08 64 48 2b 04 25 28 00 00 00 74 05 e8 5d e5 ff ff 48 83 c4 18 5b 5d 41 5c 41 5d e9 47 fa  D$.dH+.%(...t..]...H...[]A\A].G.
00006cc0  ff ff                                                                                            ..

00006cc2    void buf_getmpint(void* arg1) __noreturn

00006cc2  4154               push    r12 {var_8}
00006cc4  4989f4             mov     r12, rsi
00006cc7  55                 push    rbp {var_10}
00006cc8  4889fd             mov     rbp, rdi
00006ccb  53                 push    rbx {var_18}
00006ccc  e8c5fcffff         call    buf_getint
{ Does not return }

00006cd1                                                     85 c0 75 0a 4c 89 e7 e8 a3 59 02 00 eb 45 89                   ..u.L....Y...E.
00006ce0  c3 3d 06 04 00 00 76 05 83 c8 ff eb 39 be 01 00 00 00 48 89 ef e8 4a fc ff ff 80 38 00 78 e9 89  .=....v.....9.....H...J....8.x..
00006d00  de 48 89 ef e8 3b fc ff ff 89 da 4c 89 e7 48 89 c6 e8 7a 13 02 00 85 c0 75 ce 89 de 48 89 ef e8  .H...;.....L..H...z.....u...H...
00006d20  71 fb ff ff 31 c0 5b 5d 41 5c e9 da f9 ff ff                                                     q...1.[]A\.....

00006d2f    int64_t m_burn(int64_t arg1, int32_t arg2)

00006d2f  89f6               mov     esi, esi
00006d31  4883caff           or      rdx, 0xffffffffffffffff
00006d35  e976e9ffff         jmp     __explicit_bzero_chk


00006d3a    void m_mp_init() __noreturn

00006d3a  52                 push    rdx {var_8}
00006d3b  e830180200         call    mp_init
{ Does not return }

00006d40  85 c0 74 0e 48 8d 3d 42 d4 02 00 31 c0 e8 7f ee ff ff 58 e9 b1 f9 ff ff                          ..t.H.=B...1......X.....

00006d58    void m_mp_init_multi(int64_t arg1) __noreturn

00006d58  4883ec58           sub     rsp, 0x58
00006d5c  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
00006d61  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
00006d66  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
00006d6b  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
00006d70  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
00006d75  64488b0425280000…  mov     rax, qword [fs:0x28]
00006d7e  4889442418         mov     qword [rsp+0x18 {var_40}], rax
00006d83  31c0               xor     eax, eax  {0x0}
00006d85  488d442460         lea     rax, [rsp+0x60 {arg_8}]
00006d8a  c7042408000000     mov     dword [rsp {var_58}], 0x8
00006d91  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
00006d96  488d442420         lea     rax, [rsp+0x20 {var_38}]
00006d9b  4889442410         mov     qword [rsp+0x10 {var_48}], rax {var_38}
00006da0  4885ff             test    rdi, rdi
00006da3  7441               je      0x6de6

00006da5  e8c6170200         call    mp_init
{ Does not return }

00006daa                                85 c0 74 0e 48 8d 3d d8 d3 02 00 31 c0 e8 15 ee ff ff 8b 14 24 83            ..t.H.=....1........$.
00006dc0  fa 2f 77 0f 89 d0 83 c2 08 48 03 44 24 10 89 14 24 eb 0e 48 8b 44 24 08 48 8d 50 08 48 89 54 24  ./w......H.D$...$..H.D$.H.P.H.T$
00006de0  08 48 8b 38 eb ba                                                                                .H.8..

00006de6  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
00006deb  64482b0425280000…  sub     rax, qword [fs:0x28]
00006df4  7405               je      0x6dfb

00006df6  e815e4ffff         call    __stack_chk_fail
{ Does not return }

00006dfb  4883c458           add     rsp, 0x58
00006dff  e905f9ffff         jmp     __x86_return_thunk
{ Does not return }


00006e04    void m_mp_alloc_init_multi(int64_t arg1) __noreturn

00006e04  53                 push    rbx {__saved_rbx}
00006e05  4889fb             mov     rbx, rdi
00006e08  4883ec50           sub     rsp, 0x50
00006e0c  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
00006e11  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
00006e16  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
00006e1b  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
00006e20  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
00006e25  64488b0425280000…  mov     rax, qword [fs:0x28]
00006e2e  4889442418         mov     qword [rsp+0x18 {var_40}], rax
00006e33  31c0               xor     eax, eax  {0x0}
00006e35  488d442460         lea     rax, [rsp+0x60 {arg_8}]
00006e3a  c7042408000000     mov     dword [rsp {var_58}], 0x8
00006e41  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
00006e46  488d442420         lea     rax, [rsp+0x20 {var_38}]
00006e4b  4889442410         mov     qword [rsp+0x10 {var_48}], rax {var_38}
00006e50  4885db             test    rbx, rbx
00006e53  7451               je      0x6ea6

00006e55  bf18000000         mov     edi, 0x18
00006e5a  e8b1470000         call    m_malloc
{ Does not return }

00006e5f                                                                                               48                                 H
00006e60  89 03 48 89 c7 e8 06 17 02 00 85 c0 74 0e 48 8d 3d 18 d3 02 00 31 c0 e8 55 ed ff ff 8b 14 24 83  ..H.........t.H.=....1..U.....$.
00006e80  fa 2f 77 0f 89 d0 83 c2 08 48 03 44 24 10 89 14 24 eb 0e 48 8b 44 24 08 48 8d 50 08 48 89 54 24  ./w......H.D$...$..H.D$.H.P.H.T$
00006ea0  08 48 8b 18 eb aa                                                                                .H....

00006ea6  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
00006eab  64482b0425280000…  sub     rax, qword [fs:0x28]
00006eb4  7405               je      0x6ebb

00006eb6  e855e3ffff         call    __stack_chk_fail
{ Does not return }

00006ebb  4883c450           add     rsp, 0x50
00006ebf  5b                 pop     rbx {__saved_rbx}
00006ec0  e944f8ffff         jmp     __x86_return_thunk
{ Does not return }


00006ec5    void m_mp_free_multi(int64_t* arg1) __noreturn

00006ec5  53                 push    rbx {__saved_rbx}
00006ec6  4889fb             mov     rbx, rdi
00006ec9  4883ec50           sub     rsp, 0x50
00006ecd  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
00006ed2  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
00006ed7  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
00006edc  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
00006ee1  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
00006ee6  64488b0425280000…  mov     rax, qword [fs:0x28]
00006eef  4889442418         mov     qword [rsp+0x18 {var_40}], rax
00006ef4  31c0               xor     eax, eax  {0x0}
00006ef6  488d442460         lea     rax, [rsp+0x60 {arg_8}]
00006efb  c7042408000000     mov     dword [rsp {var_58}], 0x8
00006f02  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
00006f07  488d442420         lea     rax, [rsp+0x20 {var_38}]
00006f0c  4889442410         mov     qword [rsp+0x10 {var_48}], rax {var_38}

00006f11  4885db             test    rbx, rbx
00006f14  7444               je      0x6f5a

00006f16  488b3b             mov     rdi, qword [rbx]
00006f19  4885ff             test    rdi, rdi
00006f1c  7405               je      0x6f23

00006f1e  e8fdf70100         call    mp_clear
{ Does not return }

00006f23  488b3b             mov     rdi, qword [rbx]
00006f26  e835e1ffff         call    free
00006f2b  8b1424             mov     edx, dword [rsp {var_58}]
00006f2e  31c0               xor     eax, eax  {0x0}
00006f30  488903             mov     qword [rbx], rax  {0x0}
00006f33  83fa2f             cmp     edx, 0x2f
00006f36  770f               ja      0x6f47

00006f38  89d0               mov     eax, edx
00006f3a  83c208             add     edx, 0x8
00006f3d  4803442410         add     rax, qword [rsp+0x10 {var_48}]
00006f42  891424             mov     dword [rsp {var_58}], edx
00006f45  eb0e               jmp     0x6f55

00006f47  488b442408         mov     rax, qword [rsp+0x8 {var_50}]
00006f4c  488d5008           lea     rdx, [rax+0x8]
00006f50  4889542408         mov     qword [rsp+0x8 {var_50}], rdx

00006f55  488b18             mov     rbx, qword [rax]
00006f58  ebb7               jmp     0x6f11

00006f5a  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
00006f5f  64482b0425280000…  sub     rax, qword [fs:0x28]
00006f68  7405               je      0x6f6f

00006f6a  e8a1e2ffff         call    __stack_chk_fail
{ Does not return }

00006f6f  4883c450           add     rsp, 0x50
00006f73  5b                 pop     rbx {__saved_rbx}
00006f74  e990f7ffff         jmp     __x86_return_thunk
{ Does not return }


00006f79    void bytes_to_mp(int32_t* arg1, int32_t arg2, int32_t arg3) __noreturn

00006f79  51                 push    rcx {var_8}
00006f7a  89d2               mov     edx, edx
00006f7c  e80f110200         call    mp_from_ubin
{ Does not return }

00006f81     85 c0 74 0e 48 8d 3d 01 d2 02 00 31 c0 e8 3e ec ff ff 58 e9 70 f7 ff ff                        ..t.H.=....1..>...X.p...

00006f99    void hash_process_mp() __noreturn

00006f99  4155               push    r13 {var_8}
00006f9b  4989d5             mov     r13, rdx
00006f9e  4154               push    r12 {var_10}
00006fa0  4989fc             mov     r12, rdi
00006fa3  bf14020000         mov     edi, 0x214
00006fa8  55                 push    rbp {var_18}
00006fa9  4889f5             mov     rbp, rsi
00006fac  53                 push    rbx {var_20}
00006fad  50                 push    rax {var_28}
00006fae  e88af7ffff         call    buf_new
{ Does not return }

00006fb3                                                           4c 89 ee 48 89 c3 48 89 c7 e8 16 fc ff                     L..H..H......
00006fc0  ff 48 8b 33 8b 53 08 48 89 ef 49 8b 84 24 b0 00 00 00 e8 55 f7 ff ff 5a 48 89 df 5b 5d 41 5c 41  .H.3.S.H..I..$.....U...ZH..[]A\A
00006fe0  5d e9 90 f7 ff ff                                                                                ].....

00006fe6    void sign_key_sha256_fingerprint(int64_t arg1, int32_t arg2) __noreturn

00006fe6  4154               push    r12 {var_8}
00006fe8  4989fc             mov     r12, rdi
00006feb  55                 push    rbp {var_10}
00006fec  53                 push    rbx {var_18}
00006fed  4881ec00010000     sub     rsp, 0x100
00006ff4  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00006ffd  48899c24f8000000   mov     qword [rsp+0xf8 {var_20}], rbx
00007005  89f3               mov     ebx, esi
00007007  488d6c2408         lea     rbp, [rsp+0x8 {var_110}]
0000700c  4889ef             mov     rdi, rbp {var_110}
0000700f  e814940100         call    sha256_init
{ Does not return }

00007014                                                              4c 89 e6 48 89 ef 4c 8d a4 24 d8 00                      L..H..L..$..
00007020  00 00 89 da e8 09 97 01 00 4c 89 e6 48 89 ef e8 1b 96 01 00 bf 36 00 00 00 48 c7 04 24 2f 00 00  .........L..H........6...H..$/..
00007040  00 e8 ca 45 00 00 48 89 e1 be 20 00 00 00 4c 89 e7 c7 00 53 48 41 32 48 8d 50 07 48 89 c3 c7 40  ...E..H... ...L....SHA2H.P.H...@
00007060  03 32 35 36 3a e8 a8 b9 01 00 85 c0 74 0e 48 8d 3d 28 d1 02 00 31 c0 e8 55 eb ff ff c6 43 32 00  .256:.......t.H.=(...1..U....C2.
00007080  48 8b 84 24 f8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 78 e1 ff ff 48 81 c4 00 01 00 00 48  H..$....dH+.%(...t..x...H......H
000070a0  89 d8 5b 5d 41 5c e9 5e f6 ff ff                                                                 ..[]A\.^...

000070ab    void new_sign_key() __noreturn

000070ab  50                 push    rax {var_8}
000070ac  bf48000000         mov     edi, 0x48
000070b1  e85a450000         call    m_malloc
{ Does not return }

000070b6                                                                    48 ba 5a 00 00 00 02 00 00 00                        H.Z.......
000070c0  48 89 10 5a e9 40 f6 ff ff                                                                       H..Z.@...

000070c9    void signkey_name_from_type(int32_t arg1, int32_t* arg2) __noreturn

000070c9  55                 push    rbp {__saved_rbp}
000070ca  53                 push    rbx {__saved_rbx}
000070cb  51                 push    rcx {var_18}
000070cc  83ff06             cmp     edi, 0x6
000070cf  7610               jbe     0x70e1

000070d1  89fe               mov     esi, edi
000070d3  31c0               xor     eax, eax  {0x0}
000070d5  488d3dcfd00200     lea     rdi, [rel data_341ab]  {"Bad key type %d"}
000070dc  e8f0eaffff         call    dropbear_exit
{ Does not return }

000070e1  89ff               mov     edi, edi
000070e3  488d05f6da0300     lea     rax, [rel signkey_names]
000070ea  4889f3             mov     rbx, rsi
000070ed  488b2cf8           mov     rbp, qword [rax+rdi*8]
000070f1  4885f6             test    rsi, rsi
000070f4  740a               je      0x7100

000070f6  4889ef             mov     rdi, rbp
000070f9  e8f2e0ffff         call    strlen
000070fe  8903               mov     dword [rbx], eax

00007100  4889e8             mov     rax, rbp
00007103  5a                 pop     rdx {var_18}
00007104  5b                 pop     rbx {__saved_rbx}
00007105  5d                 pop     rbp {__saved_rbp}
00007106  e9fef5ffff         jmp     __x86_return_thunk
{ Does not return }


0000710b    void signkey_type_from_name(int64_t arg1, int32_t arg2) __noreturn

0000710b  4156               push    r14 {__saved_r14}
0000710d  4c8d35ccda0300     lea     r14, [rel signkey_names]
00007114  4155               push    r13 {__saved_r13}
00007116  4154               push    r12 {__saved_r12}
00007118  4989fc             mov     r12, rdi
0000711b  55                 push    rbp {__saved_rbp}
0000711c  89f5               mov     ebp, esi
0000711e  53                 push    rbx {__saved_rbx}
0000711f  31db               xor     ebx, ebx  {0x0}

00007121  4d8b2cde           mov     r13, qword [r14+rbx*8]
00007125  4c89ef             mov     rdi, r13
00007128  e8c3e0ffff         call    strlen
0000712d  4839c5             cmp     rbp, rax
00007130  7512               jne     0x7144

00007132  4889ea             mov     rdx, rbp
00007135  4c89e6             mov     rsi, r12
00007138  4c89ef             mov     rdi, r13
0000713b  e880e2ffff         call    memcmp
00007140  85c0               test    eax, eax
00007142  7410               je      0x7154

00007144  48ffc3             inc     rbx
00007147  4883fb07           cmp     rbx, 0x7
0000714b  75d4               jne     0x7121

0000714d  b85a000000         mov     eax, 0x5a
00007152  eb02               jmp     0x7156

00007154  89d8               mov     eax, ebx

00007156  5b                 pop     rbx {__saved_rbx}
00007157  5d                 pop     rbp {__saved_rbp}
00007158  415c               pop     r12 {__saved_r12}
0000715a  415d               pop     r13 {__saved_r13}
0000715c  415e               pop     r14 {__saved_r14}
0000715e  e9a6f5ffff         jmp     __x86_return_thunk
{ Does not return }


00007163    void signature_name_from_type(int32_t arg1, int32_t* arg2) __noreturn

00007163  83ff65             cmp     edi, 0x65
00007166  750d               jne     0x7175

00007168  4885f6             test    rsi, rsi
0000716b  740d               je      0x717a

0000716d  c7060c000000       mov     dword [rsi], 0xc
00007173  eb05               jmp     0x717a

00007175  e94fffffff         jmp     signkey_name_from_type
{ Does not return }

0000717a  488d053ad00200     lea     rax, [rel data_341bb]  {"rsa-sha2-256"}
00007181  e983f5ffff         jmp     __x86_return_thunk
{ Does not return }


00007186    void signature_type_from_name(int64_t arg1, int32_t arg2) __noreturn

00007186  55                 push    rbp {__saved_rbp}
00007187  89f5               mov     ebp, esi
00007189  4883ec10           sub     rsp, 0x10
0000718d  83fe0c             cmp     esi, 0xc
00007190  751f               jne     0x71b1

00007192  ba0c000000         mov     edx, 0xc
00007197  488d351dd00200     lea     rsi, [rel data_341bb]  {"rsa-sha2-256"}
0000719e  48897c2408         mov     qword [rsp+0x8 {var_10_1}], rdi
000071a3  e818e2ffff         call    memcmp
000071a8  488b7c2408         mov     rdi, qword [rsp+0x8 {var_10_1}]
000071ad  85c0               test    eax, eax
000071af  740c               je      0x71bd

000071b1  4883c410           add     rsp, 0x10
000071b5  89ee               mov     esi, ebp
000071b7  5d                 pop     rbp {__saved_rbp}
000071b8  e94effffff         jmp     signkey_type_from_name
{ Does not return }

000071bd  4883c410           add     rsp, 0x10
000071c1  b865000000         mov     eax, 0x65
000071c6  5d                 pop     rbp {__saved_rbp}
000071c7  e93df5ffff         jmp     __x86_return_thunk
{ Does not return }


000071cc    void signature_type_from_signkey(int32_t arg1) __noreturn

000071cc  51                 push    rcx {var_8}
000071cd  85ff               test    edi, edi
000071cf  751c               jne     0x71ed

000071d1  488d0d98050300     lea     rcx, [rel __PRETTY_FUNCTION__.1]  {"signature_type_from_signkey"}
000071d8  baa7000000         mov     edx, 0xa7
000071dd  488d35e4cf0200     lea     rsi, [rel data_341c8]  {"src/signkey.c"}
000071e4  488d3debcf0200     lea     rdi, [rel data_341d6]  {"keytype != DROPBEAR_SIGNKEY_RSA"}
000071eb  eb21               jmp     0x720e

000071ed  89f8               mov     eax, edi
000071ef  83ff06             cmp     edi, 0x6
000071f2  761f               jbe     0x7213

000071f4  488d0d75050300     lea     rcx, [rel __PRETTY_FUNCTION__.1]  {"signature_type_from_signkey"}
000071fb  baa9000000         mov     edx, 0xa9
00007200  488d35c1cf0200     lea     rsi, [rel data_341c8]  {"src/signkey.c"}
00007207  488d3de8cf0200     lea     rdi, [rel data_341f6]  {"keytype < DROPBEAR_SIGNKEY_NUM_N…"}

0000720e  e8ade0ffff         call    __assert_fail
{ Does not return }

00007213  5a                 pop     rdx {var_8}
00007214  e9f0f4ffff         jmp     __x86_return_thunk
{ Does not return }


00007219    void signkey_type_from_signature(int32_t arg1) __noreturn

00007219  83ff65             cmp     edi, 0x65
0000721c  7427               je      0x7245

0000721e  89f8               mov     eax, edi
00007220  83ff06             cmp     edi, 0x6
00007223  7e22               jle     0x7247

00007225  50                 push    rax {var_8}
00007226  488d0d23050300     lea     rcx, [rel __PRETTY_FUNCTION__.0]  {"signkey_type_from_signature"}
0000722d  baba000000         mov     edx, 0xba
00007232  488d358fcf0200     lea     rsi, [rel data_341c8]  {"src/signkey.c"}
00007239  488d3ddbcf0200     lea     rdi, [rel data_3421b]  {"(int)sigtype < (int)DROPBEAR_SIG…"}
00007240  e87be0ffff         call    __assert_fail
{ Does not return }

00007245  31c0               xor     eax, eax  {0x0}

00007247  e9bdf4ffff         jmp     __x86_return_thunk
{ Does not return }


0000724c    void signkey_key_ptr(int64_t arg1, int32_t arg2) __noreturn

0000724c  488d4728           lea     rax, [rdi+0x28]
00007250  83fe03             cmp     esi, 0x3
00007253  743a               je      0x728f

00007255  7713               ja      0x726a

00007257  83fe01             cmp     esi, 0x1
0000725a  7426               je      0x7282

0000725c  488d4720           lea     rax, [rdi+0x20]
00007260  83fe02             cmp     esi, 0x2
00007263  7526               jne     0x728b

00007265  e99ff4ffff         jmp     __x86_return_thunk
{ Does not return }

0000726a  83fe04             cmp     esi, 0x4
0000726d  7413               je      0x7282

0000726f  83ee05             sub     esi, 0x5
00007272  31c0               xor     eax, eax  {0x0}
00007274  83fe01             cmp     esi, 0x1
00007277  7716               ja      0x728f

00007279  488d4730           lea     rax, [rdi+0x30]
0000727d  e987f4ffff         jmp     __x86_return_thunk
{ Does not return }

00007282  488d4718           lea     rax, [rdi+0x18]
00007286  e97ef4ffff         jmp     __x86_return_thunk
{ Does not return }

0000728b  488d4710           lea     rax, [rdi+0x10]

0000728f  e975f4ffff         jmp     __x86_return_thunk
{ Does not return }


00007294    void buf_get_pub_key(void* arg1) __noreturn

00007294  4157               push    r15 {var_8}
00007296  4156               push    r14 {var_10}
00007298  4155               push    r13 {var_18}
0000729a  4989fd             mov     r13, rdi
0000729d  4154               push    r12 {var_20}
0000729f  55                 push    rbp {var_28}
000072a0  53                 push    rbx {var_30}
000072a1  4889f3             mov     rbx, rsi
000072a4  4883ec18           sub     rsp, 0x18
000072a8  644c8b3425280000…  mov     r14, qword [fs:0x28]
000072b1  4c89742408         mov     qword [rsp+0x8 {var_40}], r14
000072b6  4989d6             mov     r14, rdx
000072b9  488d742404         lea     rsi, [rsp+0x4 {var_44}]
000072be  e806f7ffff         call    buf_getstring
{ Does not return }

000072c3           8b 74 24 04 48 89 c5 48 89 c7 e8 39 fe ff ff 48 89 ef 41 89 c4 e8 83 dd ff ff 41 8b 06     .t$.H..H...9...H..A.......A..
000072e0  83 f8 50 74 0c 83 cd ff 44 39 e0 0f 85 05 01 00 00 8b 44 24 04 45 89 26 4c 89 ef 83 cd ff 8d 70  ..Pt....D9........D$.E.&L......p
00007300  04 e8 b6 f5 ff ff 45 85 e4 75 38 48 8b 7b 10 e8 e1 0a 00 00 bf 28 00 00 00 e8 f2 42 00 00 4c 89  ......E..u8H.{.......(.....B..L.
00007320  ef 48 89 43 10 48 89 c6 e8 37 09 00 00 89 c5 83 f8 ff 75 0f 48 8b 7b 10 e8 b8 0a 00 00 31 c9 48  .H.C.H...7........u.H.{......1.H
00007340  89 4b 10 44 89 e7 45 89 e7 e8 11 1c 00 00 41 83 e7 fd 41 83 fc 04 74 04 85 c0 74 3f 44 89 e6 48  .K.D..E.......A...A...t...t?D..H
00007360  89 df e8 e5 fe ff ff 49 89 c6 48 85 c0 74 2c 48 8b 38 48 85 ff 74 12 e8 2c c1 01 00 49 8b 3e e8  .......I..H..t,H.8H..t..,...I.>.
00007380  dc dc ff ff 31 d2 49 89 16 4c 89 ef e8 9b 1c 00 00 49 89 06 48 85 c0 74 02 31 ed 41 8d 44 24 fb  ....1.I..L.......I..H..t.1.A.D$.
000073a0  83 f8 01 77 3b 48 8b 7b 30 e8 69 3e 00 00 bf 40 00 00 00 e8 58 42 00 00 44 89 e2 4c 89 ef 48 89  ...w;H.{0.i>...@....XB..D..L..H.
000073c0  43 30 48 89 c6 e8 be 3c 00 00 89 c5 83 f8 ff 75 0f 48 8b 7b 30 e8 86 dc ff ff 31 c0 48 89 43 30  C0H....<.......u.H.{0.....1.H.C0
000073e0  41 83 ff 04 75 10 48 8d 73 40 4c 89 ef e8 d7 f5 ff ff 48 89 43 38 48 8b 44 24 08 64 48 2b 04 25  A...u.H.s@L.......H.C8H.D$.dH+.%
00007400  28 00 00 00 74 05 e8 05 de ff ff 48 83 c4 18 89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 e9 f2 ff ff  (...t......H.....[]A\A]A^A_.....

00007420    void buf_get_priv_key(void* arg1) __noreturn

00007420  4156               push    r14 {var_8}
00007422  4155               push    r13 {var_10}
00007424  4989fd             mov     r13, rdi
00007427  4154               push    r12 {var_18}
00007429  55                 push    rbp {var_20}
0000742a  4889f5             mov     rbp, rsi
0000742d  53                 push    rbx {var_28}
0000742e  4883ec10           sub     rsp, 0x10
00007432  644c8b3425280000…  mov     r14, qword [fs:0x28]
0000743b  4c89742408         mov     qword [rsp+0x8 {var_30}], r14
00007440  4989d6             mov     r14, rdx
00007443  488d742404         lea     rsi, [rsp+0x4 {var_34}]
00007448  e87cf5ffff         call    buf_getstring
{ Does not return }

0000744d                                         8b 74 24 04 48 89 c3 48 89 c7 e8 af fc ff ff 48 89 df 41               .t$.H..H.......H..A
00007460  89 c4 e8 f9 db ff ff 41 8b 06 44 39 e0 74 0c 83 cb ff 83 f8 50 0f 85 dc 00 00 00 8b 44 24 04 45  .......A..D9.t......P.......D$.E
00007480  89 26 4c 89 ef 83 cb ff 8d 70 04 e8 2c f4 ff ff 45 85 e4 75 39 48 8b 7d 10 e8 57 09 00 00 bf 28  .&L......p..,...E..u9H.}..W....(
000074a0  00 00 00 e8 68 41 00 00 4c 89 ef 48 89 45 10 48 89 c6 e8 7b 08 00 00 89 c3 83 f8 ff 75 10 48 8b  ....hA..L..H.E.H...{........u.H.
000074c0  7d 10 e8 2e 09 00 00 45 31 c0 4c 89 45 10 44 89 e7 e8 89 1a 00 00 85 c0 74 3f 44 89 e6 48 89 ef  }......E1.L.E.D.........t?D..H..
000074e0  e8 67 fd ff ff 49 89 c6 48 85 c0 74 2c 48 8b 38 48 85 ff 74 12 e8 ae bf 01 00 49 8b 3e e8 5e db  .g...I..H..t,H.8H..t......I.>.^.
00007500  ff ff 31 ff 49 89 3e 4c 89 ef e8 37 1c 00 00 49 89 06 48 85 c0 74 02 31 db 41 83 fc 05 75 38 48  ..1.I.>L...7...I..H..t.1.A...u8H
00007520  8b 7d 30 e8 ef 3c 00 00 bf 40 00 00 00 e8 de 40 00 00 4c 89 ef 48 89 45 30 48 89 c6 e8 2d 3c 00  .}0..<...@.....@..L..H.E0H...-<.
00007540  00 89 c3 83 f8 ff 75 0f 48 8b 7d 30 e8 0f db ff ff 31 f6 48 89 75 30 48 8b 44 24 08 64 48 2b 04  ......u.H.}0.....1.H.u0H.D$.dH+.
00007560  25 28 00 00 00 74 05 e8 a4 dc ff ff 48 83 c4 10 89 d8 5b 5d 41 5c 41 5d 41 5e e9 8a f1 ff ff     %(...t......H.....[]A\A]A^.....

0000757f    void buf_put_pub_key(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

0000757f  4155               push    r13 {var_8}
00007581  4989fd             mov     r13, rdi
00007584  bf58020000         mov     edi, 0x258
00007589  4154               push    r12 {var_10}
0000758b  4989f4             mov     r12, rsi
0000758e  55                 push    rbp {var_18}
0000758f  53                 push    rbx {var_20}
00007590  89d3               mov     ebx, edx
00007592  51                 push    rcx {var_28}
00007593  e8a5f1ffff         call    buf_new
{ Does not return }

00007598                                                                          48 89 c5 85 db 75 0d 49                          H....u.I
000075a0  8b 74 24 10 48 89 c7 e8 7d 08 00 00 89 df e8 ac 19 00 00 83 fb 04 74 04 85 c0 74 1f 89 de 4c 89  .t$.H...}.............t...t...L.
000075c0  e7 e8 86 fc ff ff 48 85 c0 74 10 48 8b 30 48 85 f6 74 08 48 89 ef e8 b3 1b 00 00 83 eb 05 83 fb  ......H..t.H.0H..t.H............
000075e0  01 77 0d 49 8b 74 24 30 48 89 ef e8 52 3c 00 00 83 7d 08 00 75 0e 48 8d 3d 4d cc 02 00 31 c0 e8  .w.I.t$0H...R<...}..u.H.=M...1..
00007600  cd e5 ff ff 4c 89 ef 48 89 ee e8 c0 f5 ff ff 58 48 89 ef 5b 5d 41 5c 41 5d e9 53 f1 ff ff        ....L..H.......XH..[]A\A].S...

0000761e    void buf_put_priv_key(void* arg1, void* arg2, int32_t arg3) __noreturn

0000761e  4154               push    r12 {__saved_r12}
00007620  4989f4             mov     r12, rsi
00007623  55                 push    rbp {__saved_rbp}
00007624  4889fd             mov     rbp, rdi
00007627  53                 push    rbx {__saved_rbx}
00007628  85d2               test    edx, edx
0000762a  750d               jne     0x7639

0000762c  488b7610           mov     rsi, qword [rsi+0x10]
00007630  5b                 pop     rbx {__saved_rbx}
00007631  5d                 pop     rbp {__saved_rbp}
00007632  415c               pop     r12 {__saved_r12}
00007634  e942080000         jmp     buf_put_rsa_priv_key
{ Does not return }

00007639  89d7               mov     edi, edx
0000763b  89d3               mov     ebx, edx
0000763d  e81d190000         call    signkey_is_ecdsa
{ Does not return }

00007642        85 c0 74 23 89 de 4c 89 e7 e8 fc fb ff ff 48 85 c0 74 14 48 8b 30 48 85 f6 74 0c 5b 48 89    ..t#..L.......H..t.H.0H..t.[H.
00007660  ef 5d 41 5c e9 d6 1b 00 00 83 fb 05 75 11 49 8b 74 24 30 5b 48 89 ef 5d 41 5c e9 16 3c 00 00 48  .]A\........u.I.t$0[H..]A\..<..H
00007680  8d 3d e5 cb 02 00 31 c0 e8 44 e5 ff ff                                                           .=....1..D...

0000768d    void sign_key_free(void* arg1) __noreturn

0000768d  53                 push    rbx {var_8}
0000768e  4889fb             mov     rbx, rdi
00007691  488b7f10           mov     rdi, qword [rdi+0x10]
00007695  e85b070000         call    rsa_key_free
{ Does not return }

0000769a                                                                                48 8b 7b 18 31 f6                            H.{.1.
000076a0  48 89 73 10 48 85 ff 74 14 e8 fa bd 01 00 48 8b 7b 18 e8 a9 d9 ff ff 31 c9 48 89 4b 18 48 8b 7b  H.s.H..t......H.{......1.H.K.H.{
000076c0  20 48 85 ff 74 14 e8 dd bd 01 00 48 8b 7b 20 e8 8c d9 ff ff 31 d2 48 89 53 20 48 8b 7b 28 48 85   H..t......H.{ .....1.H.S H.{(H.
000076e0  ff 74 14 e8 c0 bd 01 00 48 8b 7b 28 e8 6f d9 ff ff 31 c0 48 89 43 28 48 8b 7b 30 e8 17 3b 00 00  .t......H.{(.o...1.H.C(H.{0..;..
00007700  48 8b 7b 08 e8 57 d9 ff ff 48 8b 7b 38 48 85 ff 74 05 e8 49 d9 ff ff 48 89 df 5b e9 40 d9 ff ff  H.{..W...H.{8H..t..I...H..[.@...

00007720    void sign_key_fingerprint(int64_t arg1, int32_t arg2) __noreturn

00007720  e9c1f8ffff         jmp     sign_key_sha256_fingerprint
{ Does not return }


00007725    void buf_put_sign(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00007725  4157               push    r15 {var_8}
00007727  4189d7             mov     r15d, edx
0000772a  4156               push    r14 {var_10}
0000772c  4989fe             mov     r14, rdi
0000772f  bf58020000         mov     edi, 0x258
00007734  4155               push    r13 {var_18}
00007736  4989f5             mov     r13, rsi
00007739  4154               push    r12 {var_20}
0000773b  4989cc             mov     r12, rcx
0000773e  55                 push    rbp {var_28}
0000773f  53                 push    rbx {var_30}
00007740  4150               push    r8 {var_38}
00007742  e8f6efffff         call    buf_new
{ Does not return }

00007747                       44 89 ff 48 89 c3 e8 c7 fa ff ff 89 c5 85 c0 75 12 49 8b 75 10 4c 89 e1 44         D..H...........u.I.u.L..D
00007760  89 fa 48 89 df e8 d8 08 00 00 89 ef e8 ee 17 00 00 85 c0 74 22 89 ee 4c 89 ef e8 cd fa ff ff 48  ..H................t"..L.......H
00007780  85 c0 74 13 48 8b 30 48 85 f6 74 0b 4c 89 e2 48 89 df e8 cd 1a 00 00 83 fd 05 75 0f 49 8b 75 30  ..t.H.0H..t.L..H..........u.I.u0
000077a0  4c 89 e2 48 89 df e8 52 3b 00 00 83 7b 08 00 75 0e 48 8d 3d d0 ca 02 00 31 c0 e8 12 e4 ff ff 4c  L..H...R;...{..u.H.=....1......L
000077c0  89 f7 48 89 de e8 05 f4 ff ff 58 48 89 df 5b 5d 41 5c 41 5d 41 5e 41 5f e9 94 ef ff ff           ..H.......XH..[]A\A]A^A_.....

000077dd    void buf_verify(void* arg1, int64_t arg2, int32_t arg3) __noreturn

000077dd  4157               push    r15 {var_8}
000077df  31c0               xor     eax, eax  {0x0}
000077e1  4189d7             mov     r15d, edx
000077e4  4156               push    r14 {var_10}
000077e6  4155               push    r13 {var_18}
000077e8  4154               push    r12 {var_20}
000077ea  55                 push    rbp {var_28}
000077eb  4889fd             mov     rbp, rdi
000077ee  53                 push    rbx {var_30}
000077ef  4889f3             mov     rbx, rsi
000077f2  4883ec18           sub     rsp, 0x18
000077f6  644c8b2c25280000…  mov     r13, qword [fs:0x28]
000077ff  4c896c2408         mov     qword [rsp+0x8 {var_40}], r13
00007804  4989cd             mov     r13, rcx
00007807  89442404           mov     dword [rsp+0x4 {var_44}], eax  {0x0}
0000780b  e886f1ffff         call    buf_getint
{ Does not return }

00007810                                                  48 8d 74 24 04 48 89 ef e8 ac f1 ff ff 8b 74 24                  H.t$.H........t$
00007820  04 48 89 c7 49 89 c4 e8 5a f9 ff ff 4c 89 e7 41 89 c6 e8 29 d8 ff ff 45 39 fe 74 09 48 8d 3d 45  .H..I...Z...L..A...)...E9.t.H.=E
00007840  ca 02 00 eb 1f 44 89 f7 e8 cc f9 ff ff 41 89 c4 85 c0 75 2a 48 8b 73 10 48 85 f6 75 0e 48 8d 3d  .....D.......A....u*H.s.H..u.H.=
00007860  3e ca 02 00 31 c0 e8 66 e3 ff ff 4c 89 e9 44 89 f2 48 89 ef e8 66 06 00 00 e9 c6 00 00 00 89 c7  >...1..f...L..D..H...f..........
00007880  e8 da 16 00 00 85 c0 74 28 44 89 e6 48 89 df e8 b8 f9 ff ff 48 85 c0 74 18 48 8b 30 48 85 f6 74  .......t(D..H.......H..t.H.0H..t
000078a0  10 4c 89 ea 48 89 ef e8 f8 1c 00 00 e9 93 00 00 00 41 83 fc 05 75 1d 48 8b 73 30 48 8d 3d ff c9  .L..H............A...u.H.s0H.=..
000078c0  02 00 48 85 f6 74 9d 4c 89 ea 48 89 ef e8 c9 3a 00 00 eb 70 41 83 fc 04 75 31 48 83 fb e8 0f 84  ..H..t.L..H....:...pA...u1H.....
000078e0  58 ff ff ff 48 8b 73 18 48 85 f6 0f 84 4b ff ff ff 48 8b 4b 38 44 0f b6 4b 44 4c 89 ea 48 89 ef  X...H.s.H....K...H.K8D..KDL..H..
00007900  44 8b 43 40 e8 e6 21 00 00 eb 39 41 83 fc 06 0f 85 27 ff ff ff 48 83 fb d0 0f 84 1d ff ff ff 48  D.C@..!...9A.....'...H.........H
00007920  8b 73 30 48 85 f6 0f 84 10 ff ff ff 48 8b 4b 38 44 0f b6 4b 44 4c 89 ea 48 89 ef 44 8b 43 40 e8  .s0H........H.K8D..KDL..H..D.C@.
00007940  d8 3a 00 00 48 8b 54 24 08 64 48 2b 14 25 28 00 00 00 74 05 e8 b7 d8 ff ff 48 83 c4 18 5b 5d 41  .:..H.T$.dH+.%(...t......H...[]A
00007960  5c 41 5d 41 5e 41 5f e9 9d ed ff ff                                                              \A]A^A_.....

0000796c    void cmp_base64_key(int64_t arg1, int32_t arg2, int64_t arg3, int32_t arg4, void* arg5) __noreturn

0000796c  4157               push    r15 {__saved_r15}
0000796e  4156               push    r14 {__saved_r14}
00007970  4155               push    r13 {__saved_r13}
00007972  4154               push    r12 {__saved_r12}
00007974  55                 push    rbp {__saved_rbp}
00007975  53                 push    rbx {__saved_rbx}
00007976  4883ec38           sub     rsp, 0x38
0000797a  4889542408         mov     qword [rsp+0x8 {var_60}], rdx
0000797f  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00007988  48896c2428         mov     qword [rsp+0x28 {var_40}], rbp
0000798d  418b6808           mov     ebp, dword [r8+0x8]
00007991  4c89442418         mov     qword [rsp+0x18 {var_50}], r8
00007996  412b680c           sub     ebp, dword [r8+0xc]
0000799a  0f84e9000000       je      0x7a89

000079a0  8d442d00           lea     eax, [rbp+rbp]
000079a4  4989ff             mov     r15, rdi
000079a7  4189cc             mov     r12d, ecx
000079aa  4d89ce             mov     r14, r9
000079ad  4889c7             mov     rdi, rax
000079b0  4189f5             mov     r13d, esi
000079b3  4889442420         mov     qword [rsp+0x20 {var_48}], rax
000079b8  e880edffff         call    buf_new
{ Does not return }

000079bd                                                                                         8b 70 10                               .p.
000079c0  48 89 c7 48 89 c3 e8 a2 ef ff ff 48 8b 7c 24 18 89 ee 48 89 44 24 10 e8 68 ef ff ff 48 8b 54 24  H..H.......H.|$...H.D$..h...H.T$
000079e0  10 48 8d 4c 24 20 89 ee 48 89 c7 e8 0f b0 01 00 85 c0 74 05 83 c8 ff eb 7e 8b 74 24 20 48 89 df  .H.L$ ..H.........t.....~.t$ H..
00007a00  e8 1e ee ff ff 4d 85 f6 74 1b 8b 6c 24 20 48 89 df 89 ee e8 2c ef ff ff 89 ee 48 89 c7 e8 c4 f5  .....M..t..l$ H.....,.....H.....
00007a20  ff ff 49 89 06 4c 3b 6c 24 20 75 c8 8b 6b 08 48 89 df 89 ee e8 0b ef ff ff 89 ea 4c 89 fe 48 89  ..I..L;l$ u..k.H...........L..H.
00007a40  c7 e8 7a d9 ff ff 85 c0 75 aa 48 89 df e8 44 ef ff ff 48 89 df 89 c6 89 c5 e8 e6 ee ff ff 48 89  ..z.....u.H...D...H...........H.
00007a60  c7 44 39 e5 75 8e 48 8b 74 24 08 44 89 e2 e8 4d d9 ff ff f7 d8 19 c0 48 89 df 89 44 24 08 e8 ee  .D9.u.H.t$.D...M.......H...D$...
00007a80  ec ff ff 8b 44 24 08 eb 03                                                                       ....D$...

00007a89  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00007a8c  488b542428         mov     rdx, qword [rsp+0x28 {var_40}]
00007a91  64482b1425280000…  sub     rdx, qword [fs:0x28]
00007a9a  7405               je      0x7aa1

00007a9c  e86fd7ffff         call    __stack_chk_fail
{ Does not return }

00007aa1  4883c438           add     rsp, 0x38
00007aa5  5b                 pop     rbx {__saved_rbx}
00007aa6  5d                 pop     rbp {__saved_rbp}
00007aa7  415c               pop     r12 {__saved_r12}
00007aa9  415d               pop     r13 {__saved_r13}
00007aab  415e               pop     r14 {__saved_r14}
00007aad  415f               pop     r15 {__saved_r15}
00007aaf  e955ecffff         jmp     __x86_return_thunk
{ Does not return }


00007ab4    void rsa_pad_em(int64_t* arg1, int64_t arg2, int64_t arg3, int32_t arg4) __noreturn

00007ab4  48b83031300d0609…  mov     rax, 0x866009060d303130
00007abe  4156               push    r14 {var_8}
00007ac0  4155               push    r13 {var_10}
00007ac2  4154               push    r12 {var_18}
00007ac4  55                 push    rbp {var_20}
00007ac5  53                 push    rbx {var_28}
00007ac6  4881ecf0000000     sub     rsp, 0xf0
00007acd  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00007ad6  4c89ac24e8000000   mov     qword [rsp+0xe8 {var_30}], r13
00007ade  4989d5             mov     r13, rdx
00007ae1  48898424d5000000   mov     qword [rsp+0xd5], rax  {-0x799ff6f9f2cfced0}
00007ae9  48ba480165030402…  mov     rdx, 0x501020403650148
00007af3  48899424dd000000   mov     qword [rsp+0xdd {var_3b}], rdx  {0x501020403650148}
00007afb  c78424e400000005…  mov     dword [rsp+0xe4 {var_3b+0x7}], 0x20040005
00007b06  83f965             cmp     ecx, 0x65
00007b09  7535               jne     0x7b40

00007b0b  488b3f             mov     rdi, qword [rdi]
00007b0e  4989f4             mov     r12, rsi
00007b11  e83a4b0200         call    mp_ubin_size
{ Does not return }

00007b16                                                                    89 c7 e8 20 ec ff ff 31 f6 48                        ... ...1.H
00007b20  89 c3 48 89 c7 e8 eb ed ff ff                                                                    ..H.......

00007b2a    void sub_7b2a(int64_t* arg1 @ rbx) __noreturn

00007b2a  be01000000         mov     esi, 0x1
00007b2f  4889df             mov     rdi, rbx
00007b32  e8deedffff         call    buf_putbyte
{ Does not return }

00007b37                                                                       48 8b 2d d2 d4 03 00 eb 1f                         H.-......

{ Continuation of function rsa_pad_em }

00007b40  488d0d49fc0200     lea     rcx, [rel __PRETTY_FUNCTION__.0]  {"rsa_pad_em"}
00007b47  ba8e010000         mov     edx, 0x18e
00007b4c  488d351fc80200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007b53  488d3de4fa0200     lea     rdi, [rel data_37631[0xd]]  {"0"}
00007b5a  e861d7ffff         call    __assert_fail
{ Does not return }

00007b5f                                                                                               8b                                 .
00007b60  43 10 8b 53 0c 48 29 e8 48 83 e8 14 48 39 c2 74 0f be ff 00 00 00 48 89 df e8 97 ed ff ff eb df  C..S.H).H...H9.t......H.........
00007b80  31 f6 48 89 df e8 8b ed ff ff 48 8d b4 24 d5 00 00 00 ba 13 00 00 00 48 89 df e8 9c ef ff ff 48  1.H.......H..$.........H.......H
00007ba0  89 e7 48 8b 05 ff d4 03 00 e8 7e eb ff ff 41 8b 54 24 08 49 8b 34 24 48 89 e7 48 8b 05 ef d4 03  ..H.......~...A.T$.I.4$H..H.....
00007bc0  00 e8 66 eb ff ff 89 ee 48 89 df e8 9d ed ff ff 48 89 e7 48 89 c6 48 8b 05 db d4 03 00 e8 4a eb  ..f.....H.......H..H..H.......J.
00007be0  ff ff 89 ee 48 89 df e8 7a ec ff ff 8b 43 10 39 43 0c 74 18 ba a6 01 00 00 48 8d 35 72 c7 02 00  ....H...z....C.9C.t......H.5r...
00007c00  48 8d 3d 75 c7 02 00 e8 6d e0 ff ff 31 f6 48 89 df e8 34 ec ff ff 8b 6b 10 48 89 df 89 ee e8 21  H.=u....m...1.H...4....k.H.....!
00007c20  ed ff ff 4c 89 ef 89 ea 48 89 c6 e8 49 f3 ff ff 48 89 df e8 39 eb ff ff 48 8b 84 24 e8 00 00 00  ...L....H...I...H...9...H..$....
00007c40  64 48 2b 04 25 28 00 00 00 74 05 e8 c0 d5 ff ff 48 81 c4 f0 00 00 00 5b 5d 41 5c 41 5d 41 5e e9  dH+.%(...t......H......[]A\A]A^.
00007c60  a5 ea ff ff                                                                                      ....

00007c64    void buf_get_rsa_pub_key(int64_t arg1, int64_t arg2) __noreturn

00007c64  4154               push    r12 {var_8}
00007c66  55                 push    rbp {var_10}
00007c67  53                 push    rbx {var_18}
00007c68  4885f6             test    rsi, rsi
00007c6b  7518               jne     0x7c85

00007c6d  ba39000000         mov     edx, 0x39
00007c72  488d35f9c60200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007c79  488d3dc8ee0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00007c80  e8f4dfffff         call    fail_assert
{ Does not return }

00007c85  4c8d6608           lea     r12, [rsi+0x8]
00007c89  31d2               xor     edx, edx  {0x0}
00007c8b  4889fd             mov     rbp, rdi
00007c8e  31c0               xor     eax, eax  {0x0}
00007c90  4c89e7             mov     rdi, r12
00007c93  4889f3             mov     rbx, rsi
00007c96  e869f1ffff         call    m_mp_alloc_init_multi
{ Does not return }

00007c9b                                                                                   31 c0 be 0b 00                             1....
00007ca0  00 00 48 89 ef 48 89 43 10 48 89 43 18 48 89 43 20 e8 df eb ff ff 48 8b 73 08 48 89 ef e8 00 f0  ..H..H.C.H.C.H.C .....H.s.H.....
00007cc0  ff ff ff c0 74 51 48 8b 33 48 89 ef e8 f1 ef ff ff ff c0 74 42 48 8b 3b e8 03 f3 01 00 3d ff 03  ....tQH.3H.........tBH.;.....=..
00007ce0  00 00 7f 10 48 8d 35 ad c6 02 00 bf 04 00 00 00 31 c0 eb 1e 48 8b 7b 08 e8 e3 f2 01 00 89 c2 31  ....H.5.........1...H.{........1
00007d00  c0 83 fa 40 7e 23 48 8d 35 9d c6 02 00 bf 04 00 00 00 e8 74 df ff ff 31 c0 31 d2 48 89 de 4c 89  ...@~#H.5..........t...1.1.H..L.
00007d20  e7 e8 9f f1 ff ff 83 c8 ff 5b 5d 41 5c e9 d7 e9 ff ff                                            .........[]A\.....

00007d32    void buf_get_rsa_priv_key(int64_t arg1, int64_t arg2) __noreturn

00007d32  4154               push    r12 {var_8}
00007d34  55                 push    rbp {var_10}
00007d35  53                 push    rbx {var_18}
00007d36  4885f6             test    rsi, rsi
00007d39  7518               jne     0x7d53

00007d3b  ba62000000         mov     edx, 0x62
00007d40  488d352bc60200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007d47  488d3dfaed0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00007d4e  e826dfffff         call    fail_assert
{ Does not return }

00007d53  4889fd             mov     rbp, rdi
00007d56  4889f3             mov     rbx, rsi
00007d59  e806ffffff         call    buf_get_rsa_pub_key
{ Does not return }

00007d5e                                                                                            ff c0                                ..
00007d60  0f 84 83 00 00 00 31 c0 4c 8d 63 10 31 f6 48 89 43 10 4c 89 e7 48 89 43 18 48 89 43 20 31 c0 e8  ......1.L.c.1.H.C.L..H.C.H.C 1..
00007d80  80 f0 ff ff 48 8b 73 10 48 89 ef e8 32 ef ff ff ff c0 75 16 48 8d 53 20 48 8d 73 18 31 c9 4c 89  ....H.s.H...2.....u.H.S H.s.1.L.
00007da0  e7 31 c0 e8 1d f1 ff ff eb 3f 8b 45 08 39 45 0c 75 04 31 c0 eb 36 31 d2 48 8d 73 20 48 8d 7b 18  .1.......?.E.9E.u.1..61.H.s H.{.
00007dc0  31 c0 e8 3d f0 ff ff 48 8b 73 18 48 89 ef e8 ef ee ff ff ff c0 74 bd 48 8b 73 20 48 89 ef e8 df  1..=...H.s.H.........t.H.s H....
00007de0  ee ff ff ff c0 75 cb eb ab 83 c8 ff 5b 5d 41 5c e9 14 e9 ff ff                                   .....u......[]A\.....

00007df5    void rsa_key_free(void* arg1) __noreturn

00007df5  4885ff             test    rdi, rdi
00007df8  742a               je      0x7e24

00007dfa  53                 push    rbx {var_8}
00007dfb  4889fb             mov     rbx, rdi
00007dfe  488d4f20           lea     rcx, [rdi+0x20]
00007e02  488d5718           lea     rdx, [rdi+0x18]
00007e06  488d7708           lea     rsi, [rdi+0x8]
00007e0a  4989d8             mov     r8, rbx
00007e0d  488d7f10           lea     rdi, [rdi+0x10]
00007e11  4531c9             xor     r9d, r9d  {0x0}
00007e14  31c0               xor     eax, eax  {0x0}
00007e16  e8aaf0ffff         call    m_mp_free_multi
{ Does not return }

00007e1b                                                                                   48 89 df 5b e9                             H..[.
00007e20  3c d2 ff ff                                                                                      <...

00007e24  e9e0e8ffff         jmp     __x86_return_thunk
{ Does not return }


00007e29    void buf_put_rsa_pub_key(void* arg1, int64_t arg2) __noreturn

00007e29  55                 push    rbp {var_8}
00007e2a  53                 push    rbx {var_10}
00007e2b  52                 push    rdx {var_18}
00007e2c  4885f6             test    rsi, rsi
00007e2f  7518               jne     0x7e49

00007e31  baa4000000         mov     edx, 0xa4
00007e36  488d3535c50200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007e3d  488d3d04ed0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00007e44  e830deffff         call    fail_assert
{ Does not return }

00007e49  4889f5             mov     rbp, rsi
00007e4c  ba07000000         mov     edx, 0x7
00007e51  488d358cc40200     lea     rsi, [rel data_342e4]  {"ssh-rsa"}
00007e58  4889fb             mov     rbx, rdi
00007e5b  e841edffff         call    buf_putstring
{ Does not return }

00007e60  48 8b 75 08 48 89 df e8 6b ed ff ff 48 8b 75 00 48 89 df 58 5b 5d e9 5c ed ff ff                 H.u.H...k...H.u.H..X[].\...

00007e7b    void buf_put_rsa_priv_key(void* arg1, int64_t arg2) __noreturn

00007e7b  55                 push    rbp {var_8}
00007e7c  53                 push    rbx {var_10}
00007e7d  51                 push    rcx {var_18}
00007e7e  4885f6             test    rsi, rsi
00007e81  7518               jne     0x7e9b

00007e83  bab3000000         mov     edx, 0xb3
00007e88  488d35e3c40200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007e8f  488d3db2ec0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00007e96  e8deddffff         call    fail_assert
{ Does not return }

00007e9b  4889f3             mov     rbx, rsi
00007e9e  4889fd             mov     rbp, rdi
00007ea1  e883ffffff         call    buf_put_rsa_pub_key
{ Does not return }

00007ea6                    48 8b 73 10 48 89 ef e8 25 ed ff ff 48 8b 73 18 48 85 f6 74 08 48 89 ef e8 14        H.s.H...%...H.s.H..t.H....
00007ec0  ed ff ff 48 8b 73 20 48 85 f6 74 0b 5a 48 89 ef 5b 5d e9 00 ed ff ff 58 5b 5d e9 2a e8 ff ff     ...H.s H..t.ZH..[].....X[].*...

00007edf    void buf_rsa_verify(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00007edf  4157               push    r15 {var_8}
00007ee1  4156               push    r14 {var_10}
00007ee3  4989ce             mov     r14, rcx
00007ee6  b906000000         mov     ecx, 0x6
00007eeb  4155               push    r13 {var_18}
00007eed  4154               push    r12 {var_20}
00007eef  4989fc             mov     r12, rdi
00007ef2  55                 push    rbp {var_28}
00007ef3  53                 push    rbx {var_30}
00007ef4  4883ec68           sub     rsp, 0x68
00007ef8  64488b0425280000…  mov     rax, qword [fs:0x28]
00007f01  4889442458         mov     qword [rsp+0x58 {var_40}], rax
00007f06  31c0               xor     eax, eax  {0x0}
00007f08  488d7c2410         lea     rdi, [rsp+0x10 {s}]
00007f0d  4885f6             test    rsi, rsi
00007f10  f3ab               rep stosd dword [rdi] {var_a0} {s}  {0x0}
00007f12  488d7c2428         lea     rdi, [rsp+0x28 {s_1}]
00007f17  b906000000         mov     ecx, 0x6
00007f1c  f3ab               rep stosd dword [rdi] {s} {s_1}  {0x0}
00007f1e  488d7c2440         lea     rdi, [rsp+0x40 {s_2}]
00007f23  b906000000         mov     ecx, 0x6
00007f28  f3ab               rep stosd dword [rdi] {s_1} {s_2}  {0x0}
00007f2a  488d442410         lea     rax, [rsp+0x10 {s}]
00007f2f  48890424           mov     qword [rsp {var_98}], rax {s}
00007f33  488d442428         lea     rax, [rsp+0x28 {s_1}]
00007f38  4889442408         mov     qword [rsp+0x8 {var_90}], rax {s_1}
00007f3d  7518               jne     0x7f57

00007f3f  bad1000000         mov     edx, 0xd1
00007f44  488d3527c40200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
00007f4b  488d3df6eb0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00007f52  e822ddffff         call    fail_assert
{ Does not return }

00007f57  488b7c2408         mov     rdi, qword [rsp+0x8 {var_90}]
00007f5c  4889f3             mov     rbx, rsi
00007f5f  4c8d6c2440         lea     r13, [rsp+0x40 {s_2}]
00007f64  31c9               xor     ecx, ecx  {0x0}
00007f66  488b3424           mov     rsi, qword [rsp {var_98}]
00007f6a  31c0               xor     eax, eax  {0x0}
00007f6c  4189d7             mov     r15d, edx
00007f6f  4c89ea             mov     rdx, r13 {s_2}
00007f72  e8e1edffff         call    m_mp_init_multi
{ Does not return }

00007f77                                                                       4c 89 e7 e8 17 ea ff ff 48                         L.......H
00007f80  8b 3b 89 c5 e8 c7 46 02 00 39 c5 74 05 83 cb ff eb 71 41 8b 6c 24 08 41 2b 6c 24 0c 4c 89 e7 89  .;....F..9.t.....qA.l$.A+l$.L...
00007fa0  ee e8 9e e9 ff ff 48 8b 3c 24 89 ea 48 89 c6 e8 dc 00 02 00 85 c0 75 d5 48 8b 33 48 8b 3c 24 e8  ......H.<$..H.........u.H.3H.<$.
00007fc0  7c e8 01 00 ff c0 75 c5 44 89 f9 4c 89 ea 4c 89 f6 48 89 df e8 db fa ff ff 48 8b 73 08 48 8b 4c  |.....u.D..L..L..H.......H.s.H.L
00007fe0  24 08 48 8b 13 48 8b 3c 24 e8 c2 fe 01 00 85 c0 75 9b 48 8b 74 24 08 4c 89 ef e8 41 e8 01 00 f7  $.H..H.<$.......u.H.t$.L...A....
00008000  d8 19 db 48 8b 34 24 48 8b 7c 24 08 31 c9 31 c0 4c 89 ea e8 68 e7 01 00 48 8b 44 24 58 64 48 2b  ...H.4$H.|$.1.1.L...h...H.D$XdH+
00008020  04 25 28 00 00 00 74 05 e8 e3 d1 ff ff 48 83 c4 68 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 c7 e6  .%(...t......H..h..[]A\A]A^A_...
00008040  ff ff                                                                                            ..

00008042    void buf_put_rsa_sign(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00008042  4157               push    r15 {var_8}
00008044  4989cf             mov     r15, rcx
00008047  31c9               xor     ecx, ecx  {0x0}
00008049  4156               push    r14 {var_10}
0000804b  4155               push    r13 {var_18}
0000804d  4154               push    r12 {var_20}
0000804f  55                 push    rbp {var_28}
00008050  53                 push    rbx {var_30}
00008051  4881ec98000000     sub     rsp, 0x98
00008058  48897c2408         mov     qword [rsp+0x8 {var_c0}], rdi
0000805d  488d7c2428         lea     rdi, [rsp+0x28 {s}]
00008062  64488b0425280000…  mov     rax, qword [fs:0x28]
0000806b  4889842488000000   mov     qword [rsp+0x88 {var_40}], rax
00008073  31c0               xor     eax, eax  {0x0}
00008075  894c241c           mov     dword [rsp+0x1c {var_ac}], ecx  {0x0}
00008079  b906000000         mov     ecx, 0x6
0000807e  4885f6             test    rsi, rsi
00008081  f3ab               rep stosd dword [rdi] {var_b8} {s}  {0x0}
00008083  488d7c2440         lea     rdi, [rsp+0x40 {s_1}]
00008088  b906000000         mov     ecx, 0x6
0000808d  f3ab               rep stosd dword [rdi] {s} {s_1}  {0x0}
0000808f  488d7c2458         lea     rdi, [rsp+0x58 {s_2}]
00008094  b906000000         mov     ecx, 0x6
00008099  f3ab               rep stosd dword [rdi] {s_1} {s_2}  {0x0}
0000809b  488d7c2470         lea     rdi, [rsp+0x70 {s_3}]
000080a0  b906000000         mov     ecx, 0x6
000080a5  f3ab               rep stosd dword [rdi] {s_2} {s_3}  {0x0}
000080a7  488d442428         lea     rax, [rsp+0x28 {s}]
000080ac  48890424           mov     qword [rsp {var_c8}], rax {s}
000080b0  7518               jne     0x80ca

000080b2  ba0b010000         mov     edx, 0x10b
000080b7  488d35b4c20200     lea     rsi, [rel data_34372]  {"src/rsa.c"}
000080be  488d3d83ea0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
000080c5  e934010000         jmp     0x81fe

000080ca  488d6c2458         lea     rbp, [rsp+0x58 {s_2}]
000080cf  488b3c24           mov     rdi, qword [rsp {var_c8}]
000080d3  4c8d642440         lea     r12, [rsp+0x40 {s_1}]
000080d8  31c0               xor     eax, eax  {0x0}
000080da  4c8d742470         lea     r14, [rsp+0x70 {s_3}]
000080df  4889f3             mov     rbx, rsi
000080e2  4531c0             xor     r8d, r8d  {0x0}
000080e5  4189d5             mov     r13d, edx
000080e8  4c89f1             mov     rcx, r14 {s_3}
000080eb  4889ea             mov     rdx, rbp {s_2}
000080ee  4c89e6             mov     rsi, r12 {s_1}
000080f1  e862ecffff         call    m_mp_init_multi
{ Does not return }

000080f6                                                                    44 89 e9 4c 89 e2 4c 89 fe 48                        D..L..L..H
00008100  89 df e8 ad f9 ff ff 48 8b 3b 48 89 ee e8 50 06 00 00 48 8b 73 08 48 8b 0c 24 48 89 ef 48 8b 13  .......H.;H...P...H.s.H..$H..H..
00008120  e8 8b fd 01 00 85 c0 74 0e 48 8d 3d 88 c2 02 00 31 c0 e8 9a da ff ff 48 8b 33 4c 89 f2 48 89 ef  .......t.H.=....1......H.3L..H..
00008140  e8 7b 08 02 00 85 c0 75 e0 48 8b 13 48 8b 34 24 48 89 e9 4c 89 e7 e8 65 1c 02 00 85 c0 75 ca 48  .{.....u.H..H.4$H..L...e.....u.H
00008160  8b 73 10 48 8b 13 4c 89 e1 48 89 ef e8 3f fd 01 00 85 c0 75 b4 48 8b 0c 24 48 8b 13 4c 89 f6 4c  .s.H..L..H...?.....u.H..$H..L..L
00008180  89 e7 e8 39 1c 02 00 85 c0 75 9e 31 c9 4c 89 f2 48 89 ee 4c 89 e7 e8 e5 e5 01 00 44 89 ef 48 8d  ...9.....u.1.L..H..L.......D..H.
000081a0  74 24 1c 45 31 ed e8 b8 ef ff ff 8b 54 24 1c 48 8b 7c 24 08 48 89 c6 e8 e5 e9 ff ff 48 8b 3b e8  t$.E1.......T$.H.|$.H.......H.;.
000081c0  8c 44 02 00 48 8b 7c 24 08 89 c6 89 c5 49 89 c4 e8 95 e8 ff ff 48 8b 3c 24 e8 72 44 02 00 48 89  .D..H.|$.....I.......H.<$.rD..H.
000081e0  c3 41 89 c6 29 c5 41 39 c4 73 18 ba 4c 01 00 00 48 8d 35 7b c1 02 00 48 8d 3d c4 c1 02 00        .A..).A9.s..L...H.5{...H.=....

000081fe  e876daffff         call    fail_assert
{ Does not return }

00008203           41 39 ed 73 11 48 8b 7c 24 08 31 f6 41 ff c5 e8 fe e6 ff ff eb ea 48 8b 7c 24 08 44 89     A9.s.H.|$.1.A.........H.|$.D.
00008220  f6 e8 47 e7 ff ff 48 8b 3c 24 48 8d 4c 24 20 89 da 48 89 c6 e8 17 42 02 00 85 c0 0f 85 e8 fe ff  ..G...H.<$H.L$ ..H....B.........
00008240  ff 48 8b 7c 24 08 8b 74 24 20 e8 17 e6 ff ff 48 8b 3c 24 e8 c8 e4 01 00 48 8b 84 24 88 00 00 00  .H.|$..t$ .....H.<$.....H..$....
00008260  64 48 2b 04 25 28 00 00 00 74 05 e8 a0 cf ff ff 48 81 c4 98 00 00 00 5b 5d 41 5c 41 5d 41 5e 41  dH+.%(...t......H......[]A\A]A^A
00008280  5f e9 83 e4 ff ff                                                                                _.....

00008286    void process_file.constprop.0(int64_t* arg1, char* arg2, int32_t arg3) __noreturn

00008286  4157               push    r15 {__saved_r15}
00008288  4156               push    r14 {__saved_r14}
0000828a  4155               push    r13 {__saved_r13}
0000828c  4154               push    r12 {__saved_r12}
0000828e  55                 push    rbp {__saved_rbp}
0000828f  53                 push    rbx {__saved_rbx}
00008290  89d3               mov     ebx, edx
00008292  4881ec28100000     sub     rsp, 0x1028
00008299  48897c2408         mov     qword [rsp+0x8 {var_1050}], rdi
0000829e  4889f7             mov     rdi, rsi
000082a1  31f6               xor     esi, esi  {0x0}
000082a3  64488b0425280000…  mov     rax, qword [fs:0x28]
000082ac  4889842418100000   mov     qword [rsp+0x1018 {var_40}], rax
000082b4  31c0               xor     eax, eax  {0x0}
000082b6  e825d4ffff         call    open
000082bb  89c5               mov     ebp, eax
000082bd  85c0               test    eax, eax
000082bf  7866               js      0x8327

000082c1  448d7bff           lea     r15d, [rbx-0x1]
000082c5  4531e4             xor     r12d, r12d  {0x0}
000082c8  4c8d742418         lea     r14, [rsp+0x18 {buf}]

000082cd  ba00100000         mov     edx, 0x1000
000082d2  85db               test    ebx, ebx
000082d4  7410               je      0x82e6

000082d6  89da               mov     edx, ebx
000082d8  b800100000         mov     eax, 0x1000
000082dd  4429e2             sub     edx, r12d
000082e0  39c2               cmp     edx, eax
000082e2  480f47d0           cmova   rdx, rax  {0x1000}

000082e6  4c89f6             mov     rsi, r14 {buf}
000082e9  89ef               mov     edi, ebp
000082eb  e8c0d0ffff         call    read
000082f0  4989c5             mov     r13, rax
000082f3  85c0               test    eax, eax
000082f5  7f14               jg      0x830b

000082f7  740c               je      0x8305

000082f9  e892cdffff         call    __errno_location
000082fe  833804             cmp     dword [rax], 0x4
00008301  7524               jne     0x8327

00008303  eb19               jmp     0x831e

00008305  85db               test    ebx, ebx
00008307  741a               je      0x8323

00008309  eb1c               jmp     0x8327

0000830b  488b7c2408         mov     rdi, qword [rsp+0x8 {var_1050}]
00008310  4863d0             movsxd  rdx, eax
00008313  4c89f6             mov     rsi, r14 {buf}
00008316  4501ec             add     r12d, r13d
00008319  e814840100         call    sha256_process
{ Does not return }

0000831e  4539e7             cmp     r15d, r12d
00008321  73aa               jae     0x82cd

00008323  31db               xor     ebx, ebx  {0x0}
00008325  eb03               jmp     0x832a

00008327  83cbff             or      ebx, 0xffffffff  {0xffffffff}

0000832a  89ef               mov     edi, ebp
0000832c  e80fd0ffff         call    close
00008331  488b842418100000   mov     rax, qword [rsp+0x1018 {var_40}]
00008339  64482b0425280000…  sub     rax, qword [fs:0x28]
00008342  7405               je      0x8349

00008344  e8c7ceffff         call    __stack_chk_fail
{ Does not return }

00008349  4881c428100000     add     rsp, 0x1028
00008350  89d8               mov     eax, ebx
00008352  5b                 pop     rbx {__saved_rbx}
00008353  5d                 pop     rbp {__saved_rbp}
00008354  415c               pop     r12 {__saved_r12}
00008356  415d               pop     r13 {__saved_r13}
00008358  415e               pop     r14 {__saved_r14}
0000835a  415f               pop     r15 {__saved_r15}
0000835c  e9a8e3ffff         jmp     __x86_return_thunk
{ Does not return }


00008361    void addrandom(int64_t arg1, int32_t arg2) __noreturn

00008361  4155               push    r13 {var_8}
00008363  4c8d2df6e30300     lea     r13, [rel hashpool]
0000836a  4154               push    r12 {var_10}
0000836c  4989fc             mov     r12, rdi
0000836f  55                 push    rbp {var_18}
00008370  53                 push    rbx {var_20}
00008371  4881ece8000000     sub     rsp, 0xe8
00008378  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00008381  48899c24d8000000   mov     qword [rsp+0xd8 {var_30}], rbx
00008389  89f3               mov     ebx, esi
0000838b  488d6c2408         lea     rbp, [rsp+0x8 {var_100}]
00008390  4889ef             mov     rdi, rbp {var_100}
00008393  e890800100         call    sha256_init
{ Does not return }

00008398                                                                          ba 20 00 00 00 4c 89 ee                          . ...L..
000083a0  48 89 ef e8 8a 83 01 00 4c 89 e6 48 89 ef 89 da e8 7d 83 01 00 4c 89 ee 48 89 ef e8 8f 82 01 00  H.......L..H.....}...L..H.......
000083c0  48 8b 84 24 d8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 38 ce ff ff 48 81 c4 e8 00 00 00 5b  H..$....dH+.%(...t..8...H......[
000083e0  5d 41 5c 41 5d e9 1f e3 ff ff                                                                    ]A\A].....

000083ea    void genrandom(int64_t arg1, int32_t arg2) __noreturn

000083ea  4156               push    r14 {__saved_r14}
000083ec  4155               push    r13 {__saved_r13}
000083ee  4154               push    r12 {__saved_r12}
000083f0  55                 push    rbp {__saved_rbp}
000083f1  53                 push    rbx {__saved_rbx}
000083f2  4881ec00010000     sub     rsp, 0x100
000083f9  64488b0425280000…  mov     rax, qword [fs:0x28]
00008402  48898424f8000000   mov     qword [rsp+0xf8 {var_30}], rax
0000840a  31c0               xor     eax, eax  {0x0}
0000840c  833d2de3030000     cmp     dword [rel donerandinit], 0x0
00008413  750c               jne     0x8421  {donerandinit}

00008415  488d3db5bf0200     lea     rdi, [rel data_343d1]  {"seedrandom not done"}
0000841c  e8b0d7ffff         call    dropbear_exit
{ Does not return }

00008421  4989fc             mov     r12, rdi
00008424  89f3               mov     ebx, esi
00008426  4c8d2d33e30300     lea     r13, [rel hashpool]
0000842d  85db               test    ebx, ebx
0000842f  488dac24d8000000   lea     rbp, [rsp+0xd8 {var_50}]
00008437  7471               je      0x84aa

00008439  4c8d742408         lea     r14, [rsp+0x8 {var_120}]
0000843e  4c89f7             mov     rdi, r14 {var_120}
00008441  e8e27f0100         call    sha256_init
{ Does not return }

00008446                    ba 20 00 00 00 4c 89 ee 4c 89 f7 e8 dc 82 01 00 ba 04 00 00 00 48 8d 35 1e e3        . ...L..L............H.5..
00008460  03 00 4c 89 f7 e8 c8 82 01 00 48 89 ee 4c 89 f7 e8 da 81 01 00 8b 05 05 e3 03 00 ff c0 89 05 fd  ..L.......H..L..................
00008480  e2 03 00 3d 00 00 00 40 76 05 e8 54 00 00 00 b8 20 00 00 00 4c 89 e7 48 89 ee 39 c3 0f 46 c3 89  ...=...@v..T.... ...L..H..9..F..
000084a0  c1 29 c3 f3 a4 49 89 fc eb 83                                                                    .)...I....

000084aa  be20000000         mov     esi, 0x20
000084af  4889ef             mov     rdi, rbp {var_50}
000084b2  e878e8ffff         call    m_burn
000084b7  488b8424f8000000   mov     rax, qword [rsp+0xf8 {var_30}]
000084bf  64482b0425280000…  sub     rax, qword [fs:0x28]
000084c8  7405               je      0x84cf

000084ca  e841cdffff         call    __stack_chk_fail
{ Does not return }

000084cf  4881c400010000     add     rsp, 0x100
000084d6  5b                 pop     rbx {__saved_rbx}
000084d7  5d                 pop     rbp {__saved_rbp}
000084d8  415c               pop     r12 {__saved_r12}
000084da  415d               pop     r13 {__saved_r13}
000084dc  415e               pop     r14 {__saved_r14}
000084de  e926e2ffff         jmp     __x86_return_thunk
{ Does not return }


000084e3    void seedrandom() __noreturn

000084e3  4155               push    r13 {var_8}
000084e5  4154               push    r12 {var_10}
000084e7  4c8d2572e20300     lea     r12, [rel hashpool]
000084ee  55                 push    rbp {var_18}
000084ef  53                 push    rbx {var_20}
000084f0  4881ec28010000     sub     rsp, 0x128
000084f7  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00008500  48899c2418010000   mov     qword [rsp+0x118 {var_30}], rbx
00008508  488d5c2428         lea     rbx, [rsp+0x28 {var_120}]
0000850d  488dac24f8000000   lea     rbp, [rsp+0xf8 {var_50}]
00008515  4889df             mov     rdi, rbx {var_120}
00008518  e80b7f0100         call    sha256_init
{ Does not return }

0000851d                                                                                         ba 20 00                               . .
00008520  00 00 4c 89 e6 48 89 df e8 05 82 01 00 ba 01 00 00 00 be 20 00 00 00 48 89 ef e8 61 d2 ff ff 48  ..L..H............. ...H...a...H
00008540  83 f8 ff 75 52 e8 46 cb ff ff 8b 00 83 f8 26 75 2c 4c 8d 2d 8d be 02 00 ba 20 00 00 00 48 89 df  ...uR.F.......&u,L.-..... ...H..
00008560  4c 89 ee e8 1e fd ff ff 85 c0 74 78 4c 89 ee 48 8d 3d af be 02 00 31 c0 e8 54 d6 ff ff 83 f8 0b  L.........txL..H.=....1..T......
00008580  75 1b 48 8d 35 69 be 02 00 bf 04 00 00 00 31 c0 e8 f6 d6 ff ff eb 06 48 83 f8 20 74 15 31 d2 be  u.H.5i........1........H.. t.1..
000085a0  20 00 00 00 48 89 ef e8 f4 d1 ff ff 48 83 f8 20 75 12 ba 20 00 00 00 48 89 ee 48 89 df e8 70 81   ...H.......H.. u.. ...H..H...p.
000085c0  01 00 eb 20 48 83 f8 ff 75 10 e8 c1 ca ff ff 83 38 04 0f 85 79 ff ff ff eb c3 48 85 c0 79 be e9  ... H...u.......8...y.....H..y..
000085e0  6d ff ff ff 48 89 df 31 d2 4c 8d 6c 24 18 48 8d 35 51 be 02 00 e8 8c fc ff ff 48 89 df 31 d2 48  m...H..1.L.l$.H.5Q........H..1.H
00008600  8d 35 51 be 02 00 e8 7b fc ff ff 48 89 df 31 d2 48 8d 35 4e be 02 00 e8 6a fc ff ff 48 89 df ba  .5Q....{...H..1.H.5N....j...H...
00008620  00 10 00 00 48 8d 35 60 be 02 00 e8 56 fc ff ff 48 89 df ba 00 10 00 00 48 8d 35 5e be 02 00 e8  ....H.5`....V...H.......H.5^....
00008640  42 fc ff ff 48 89 df ba 00 10 00 00 48 8d 35 58 be 02 00 e8 2e fc ff ff 48 89 df ba 00 10 00 00  B...H.......H.5X........H.......
00008660  48 8d 35 52 be 02 00 e8 1a fc ff ff 48 89 df 31 d2 48 8d 35 54 be 02 00 e8 09 fc ff ff e8 ee ca  H.5R........H..1.H.5T...........
00008680  ff ff ba 04 00 00 00 48 89 df 48 8d 74 24 0c 89 44 24 0c e8 9a 80 01 00 0f 57 c0 31 f6 4c 89 ef  .......H..H.t$..D$.......W.1.L..
000086a0  0f 11 44 24 18 e8 06 cc ff ff 48 89 df ba 10 00 00 00 4c 89 ee e8 78 80 01 00 e8 d1 ca ff ff ba  ..D$......H.......L...x.........
000086c0  08 00 00 00 48 89 df 48 8d 74 24 10 48 89 44 24 10 e8 5c 80 01 00 48 89 df 4c 89 e6 e8 6e 7f 01  ....H..H.t$.H.D$..\...H..L...n..
000086e0  00                                                                                               .

000086e1    void sub_86e1(int64_t arg1 @ rbp, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) __noreturn

000086e1  31c0               xor     eax, eax  {0x0}
000086e3  488d3542c60200     lea     rsi, [rel data_34d06[0x26]]  {"w"}
000086ea  488d3df4bc0200     lea     rdi, [rel data_343e5]  {"/dev/urandom"}
000086f1  890589e00300       mov     dword [rel counter], eax  {0x0}
000086f7  c7053fe003000100…  mov     dword [rel donerandinit], 0x1
00008701  e8eacfffff         call    fopen
00008706  4889c3             mov     rbx, rax
00008709  4885c0             test    rax, rax
0000870c  742a               je      0x8738

0000870e  be20000000         mov     esi, 0x20
00008713  4889ef             mov     rdi, rbp
00008716  e8cffcffff         call    genrandom
{ Does not return }

0000871b                                                                                   48 89 ef 48 89                             H..H.
00008720  d9 ba 01 00 00 00 be 20 00 00 00 e8 40 d0 ff ff 48 89 df e8 68 ca ff ff                          ....... ....@...H...h...

00008738  488b842418010000   mov     rax, qword [rsp+0x118 {arg2}]
00008740  64482b0425280000…  sub     rax, qword [fs:0x28]
00008749  7405               je      0x8750

0000874b  e8c0caffff         call    __stack_chk_fail
{ Does not return }

00008750  4881c428010000     add     rsp, 0x128
00008757  5b                 pop     rbx {arg3}
00008758  5d                 pop     rbp {arg4}
00008759  415c               pop     r12 {arg5}
0000875b  415d               pop     r13 {arg6}
0000875d  e9a7dfffff         jmp     __x86_return_thunk
{ Does not return }


00008762    void gen_random_mpint(int32_t* arg1) __noreturn

00008762  48b8ff0103070f1f…  mov     rax, 0x7f3f1f0f070301ff
0000876c  4156               push    r14 {var_8}
0000876e  4155               push    r13 {var_10}
00008770  4154               push    r12 {var_18}
00008772  4989fc             mov     r12, rdi
00008775  55                 push    rbp {var_20}
00008776  53                 push    rbx {var_28}
00008777  bb08000000         mov     ebx, 0x8
0000877c  4883ec10           sub     rsp, 0x10
00008780  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00008789  48896c2408         mov     qword [rsp+0x8 {var_30}], rbp
0000878e  4889f5             mov     rbp, rsi
00008791  48890424           mov     qword [rsp {var_38}], rax  {0x7f3f1f0f070301ff}
00008795  e846e80100         call    mp_count_bits
{ Does not return }

0000879a                                                                                99 89 c1 f7 fb 83                            ......
000087a0  e1 07 83 f9 01 83 d8 ff 4c 63 ea 89 c7 49 89 fe e8 5b 2e 00 00 48 89 c3 44 89 f6 48 89 df e8 27  ........Lc...I...[...H..D..H...'
000087c0  fc ff ff 42 8a 04 2c 20 03 44 89 f2 48 89 de 48 89 ef e8 a2 e7 ff ff 4c 89 e6 48 89 ef e8 5e e0  ...B.., .D..H..H.......L..H...^.
000087e0  01 00 ff c0 75 d2 31 f6 48 89 ef e8 a0 e0 01 00 ff c8 75 c4 44 89 f6 48 89 df e8 30 e5 ff ff 48  ....u.1.H.........u.D..H...0...H
00008800  8b 44 24 08 64 48 2b 04 25 28 00 00 00 74 05 e8 fc c9 ff ff 48 83 c4 10 48 89 df 5b 5d 41 5c 41  .D$.dH+.%(...t......H...H..[]A\A
00008820  5d 41 5e e9 38 c8 ff ff                                                                          ]A^.8...

00008828    void initqueue(int64_t arg1) __noreturn

00008828  31c0               xor     eax, eax  {0x0}
0000882a  31d2               xor     edx, edx  {0x0}
0000882c  488907             mov     qword [rdi], rax  {0x0}
0000882f  48894708           mov     qword [rdi+0x8], rax  {0x0}
00008833  895710             mov     dword [rdi+0x10], edx  {0x0}
00008836  e9cedeffff         jmp     __x86_return_thunk
{ Does not return }


0000883b    void isempty(int64_t* arg1) __noreturn

0000883b  31c0               xor     eax, eax  {0x0}
0000883d  48833f00           cmp     qword [rdi], 0x0
00008841  0f94c0             sete    al
00008844  e9c0deffff         jmp     __x86_return_thunk
{ Does not return }


00008849    void dequeue(int64_t* arg1) __noreturn

00008849  55                 push    rbp {__saved_rbp}
0000884a  53                 push    rbx {__saved_rbx}
0000884b  4889fb             mov     rbx, rdi
0000884e  56                 push    rsi {var_18}
0000884f  488b3f             mov     rdi, qword [rdi]
00008852  4885ff             test    rdi, rdi
00008855  7518               jne     0x886f

00008857  ba2d000000         mov     edx, 0x2d
0000885c  488d3576bc0200     lea     rsi, [rel data_344d9]  {"src/queue.c"}
00008863  488d3d7bbc0200     lea     rdi, [rel data_344e5]  {"!isempty(queue)"}
0000886a  e80ad4ffff         call    fail_assert
{ Does not return }

0000886f  488b4708           mov     rax, qword [rdi+0x8]
00008873  488b2f             mov     rbp, qword [rdi]
00008876  4885c0             test    rax, rax
00008879  7405               je      0x8880

0000887b  488903             mov     qword [rbx], rax
0000887e  eb09               jmp     0x8889

00008880  31c9               xor     ecx, ecx  {0x0}
00008882  48890b             mov     qword [rbx], rcx  {0x0}
00008885  48894b08           mov     qword [rbx+0x8], rcx  {0x0}

00008889  e8d2c7ffff         call    free
0000888e  ff4b10             dec     dword [rbx+0x10]
00008891  4889e8             mov     rax, rbp
00008894  5a                 pop     rdx {var_18}
00008895  5b                 pop     rbx {__saved_rbx}
00008896  5d                 pop     rbp {__saved_rbp}
00008897  e96ddeffff         jmp     __x86_return_thunk
{ Does not return }


0000889c    void examine(int64_t* arg1) __noreturn

0000889c  488b07             mov     rax, qword [rdi]
0000889f  4885c0             test    rax, rax
000088a2  7519               jne     0x88bd

000088a4  50                 push    rax {var_8}
000088a5  ba41000000         mov     edx, 0x41
000088aa  488d3528bc0200     lea     rsi, [rel data_344d9]  {"src/queue.c"}
000088b1  488d3d2dbc0200     lea     rdi, [rel data_344e5]  {"!isempty(queue)"}
000088b8  e8bcd3ffff         call    fail_assert
{ Does not return }

000088bd  488b00             mov     rax, qword [rax]
000088c0  e944deffff         jmp     __x86_return_thunk
{ Does not return }


000088c5    void enqueue() __noreturn

000088c5  55                 push    rbp {var_8}
000088c6  4889f5             mov     rbp, rsi
000088c9  53                 push    rbx {var_10}
000088ca  4889fb             mov     rbx, rdi
000088cd  bf10000000         mov     edi, 0x10
000088d2  52                 push    rdx {var_18}
000088d3  e8382d0000         call    m_malloc
{ Does not return }

000088d8                                                                          48 8b 53 08 31 c9 48 89                          H.S.1.H.
000088e0  28 48 89 48 08 48 85 d2 74 04 48 89 42 08 48 83 3b 00 48 89 43 08 75 03 48 89 03 ff 43 10 58 5b  (H.H.H..t.H.B.H.;.H.C.u.H...C.X[
00008900  5d e9 03 de ff ff                                                                                ].....

00008906    void atomicio(int64_t arg1, int32_t arg2, int64_t arg3, int64_t arg4) __noreturn

00008906  4156               push    r14 {__saved_r14}
00008908  4989d6             mov     r14, rdx
0000890b  4155               push    r13 {__saved_r13}
0000890d  4189f5             mov     r13d, esi
00008910  4154               push    r12 {__saved_r12}
00008912  4989fc             mov     r12, rdi
00008915  55                 push    rbp {__saved_rbp}
00008916  4889cd             mov     rbp, rcx
00008919  53                 push    rbx {__saved_rbx}
0000891a  31db               xor     ebx, ebx  {0x0}
0000891c  4839eb             cmp     rbx, rbp
0000891f  7344               jae     0x8965

00008921  4889ea             mov     rdx, rbp
00008924  498d341e           lea     rsi, [r14+rbx]
00008928  4489ef             mov     edi, r13d
0000892b  4829da             sub     rdx, rbx
0000892e  e842000000         call    __x86_indirect_thunk_r12
{ Does not return }

00008933                                                           48 83 f8 ff 74 12 48 85 c0 75 22 e8 4d                     H...t.H..u".M
00008940  c7 ff ff c7 00 20 00 00 00 eb 1a e8 40 c7 ff ff 8b 00 83 f8 04 74 c5 83 f8 0b 74 c0 31 db eb 05  ..... ......@........t....t.1...
00008960  48 01 c3 eb b7                                                                                   H....

00008965  4889d8             mov     rax, rbx  {0x0}
00008968  5b                 pop     rbx {__saved_rbx}
00008969  5d                 pop     rbp {__saved_rbp}
0000896a  415c               pop     r12 {__saved_r12}
0000896c  415d               pop     r13 {__saved_r13}
0000896e  415e               pop     r14 {__saved_r14}
00008970  e994ddffff         jmp     __x86_return_thunk
{ Does not return }


00008975    void __x86_indirect_thunk_r12() __noreturn

00008975  e807000000         call    sub_8981

0000897a  f390               pause   
0000897c  0faee8             lfence  
0000897f  ebf9               jmp     0x897a


00008981    int64_t sub_8981() __pure

00008981  4c892424           mov     qword [rsp {__return_addr}], r12
00008985  c3                 retn     {__return_addr}


00008986    void dropbear_prng_start() __noreturn

00008986  31c0               xor     eax, eax  {0x0}
00008988  e97cddffff         jmp     __x86_return_thunk
{ Does not return }


0000898d    void dropbear_prng_add_entropy() __noreturn

0000898d  31c0               xor     eax, eax  {0x0}
0000898f  e975ddffff         jmp     __x86_return_thunk
{ Does not return }


00008994    void dropbear_prng_test() __noreturn

00008994  31c0               xor     eax, eax  {0x0}
00008996  e96eddffff         jmp     __x86_return_thunk
{ Does not return }


0000899b    void dropbear_prng_export(int64_t arg1, int64_t* arg2) __noreturn

0000899b  4885f6             test    rsi, rsi
0000899e  7519               jne     0x89b9

000089a0  52                 push    rdx {var_8}
000089a1  488d354dbb0200     lea     rsi, [rel data_344f5]  {"src/ltc_prng.c"}
000089a8  ba5f000000         mov     edx, 0x5f
000089ad  488d3d50bb0200     lea     rdi, [rel data_34504]  {"outlen != NULL"}
000089b4  e8caa10100         call    crypt_argchk
{ Does not return }

000089b9  31c0               xor     eax, eax  {0x0}
000089bb  488906             mov     qword [rsi], rax  {0x0}
000089be  31c0               xor     eax, eax  {0x0}
000089c0  e944ddffff         jmp     __x86_return_thunk
{ Does not return }


000089c5    void dropbear_prng_read(int64_t arg1, int64_t arg2) __noreturn

000089c5  53                 push    rbx {var_8}
000089c6  4885ff             test    rdi, rdi
000089c9  7518               jne     0x89e3

000089cb  ba47000000         mov     edx, 0x47
000089d0  488d351ebb0200     lea     rsi, [rel data_344f5]  {"src/ltc_prng.c"}
000089d7  488d3d35bb0200     lea     rdi, [rel data_34513]  {"out != NULL"}
000089de  e8a0a10100         call    crypt_argchk
{ Does not return }

000089e3  4889f3             mov     rbx, rsi
000089e6  e8fff9ffff         call    genrandom
{ Does not return }

000089eb                                   48 89 d8 5b e9 15 dd ff ff                                                 H..[.....

000089f4    void dropbear_prng_import() __noreturn

000089f4  31c0               xor     eax, eax  {0x0}
000089f6  e90eddffff         jmp     __x86_return_thunk
{ Does not return }


000089fb    void dropbear_prng_ready() __noreturn

000089fb  31c0               xor     eax, eax  {0x0}
000089fd  e907ddffff         jmp     __x86_return_thunk
{ Does not return }


00008a02    void dropbear_prng_done() __noreturn

00008a02  31c0               xor     eax, eax  {0x0}
00008a04  e900ddffff         jmp     __x86_return_thunk
{ Does not return }


00008a09    void dropbear_ecc_fill_dp() __noreturn

00008a09  488d15b0c70300     lea     rdx, [rel ltc_ecc_sets]
00008a10  488d0d09d60300     lea     rcx, [rel dropbear_ecc_curves]

00008a17  488b01             mov     rax, qword [rcx]
00008a1a  4885c0             test    rax, rax
00008a1d  7436               je      0x8a55

00008a1f  8b32               mov     esi, dword [rdx]
00008a21  85f6               test    esi, esi
00008a23  7e10               jle     0x8a35

00008a25  3930               cmp     dword [rax], esi
00008a27  7506               jne     0x8a2f

00008a29  48895008           mov     qword [rax+0x8], rdx
00008a2d  eb06               jmp     0x8a35

00008a2f  4883c238           add     rdx, 0x38
00008a33  ebea               jmp     0x8a1f

00008a35  4883780800         cmp     qword [rax+0x8], 0x0
00008a3a  7513               jne     0x8a4f

00008a3c  52                 push    rdx {var_8}
00008a3d  488b7018           mov     rsi, qword [rax+0x18]
00008a41  488d3de5ba0200     lea     rdi, [rel data_3452d]  {"Missing ECC params %s"}
00008a48  31c0               xor     eax, eax  {0x0}
00008a4a  e882d1ffff         call    dropbear_exit
{ Does not return }

00008a4f  4883c108           add     rcx, 0x8
00008a53  ebc2               jmp     0x8a17

00008a55  e9afdcffff         jmp     __x86_return_thunk
{ Does not return }


00008a5a    void curve_for_dp(int64_t arg1) __noreturn

00008a5a  488d15bfd50300     lea     rdx, [rel dropbear_ecc_curves]

00008a61  488b02             mov     rax, qword [rdx]
00008a64  4885c0             test    rax, rax
00008a67  740c               je      0x8a75

00008a69  48397808           cmp     qword [rax+0x8], rdi
00008a6d  7426               je      0x8a95

00008a6f  4883c208           add     rdx, 0x8
00008a73  ebec               jmp     0x8a61

00008a75  50                 push    rax {var_8}
00008a76  488d0d23ed0200     lea     rcx, [rel __PRETTY_FUNCTION__.0]  {"curve_for_dp"}
00008a7d  ba47000000         mov     edx, 0x47
00008a82  488d35baba0200     lea     rsi, [rel data_34543]  {"src/ecc.c"}
00008a89  488d3dbdba0200     lea     rdi, [rel data_3454d]  {"*curve"}
00008a90  e82bc8ffff         call    __assert_fail
{ Does not return }

00008a95  e96fdcffff         jmp     __x86_return_thunk
{ Does not return }


00008a9a    void new_ecc_key() __noreturn

00008a9a  53                 push    rbx {var_8}
00008a9b  bf30000000         mov     edi, 0x30
00008aa0  e86b2b0000         call    m_malloc
{ Does not return }

00008aa5                 45 31 c0 48 89 c3 48 8d 48 28 48 8d 50 20 48 8d 70 18 48 8d 78 10 31 c0 e8 42 e3       E1.H..H.H(H.P H.p.H.x.1..B.
00008ac0  ff ff 48 89 d8 5b e9 3e dc ff ff                                                                 ..H..[.>...

00008acb    void buf_put_ecc_raw_pubkey_string(void* arg1, void* arg2) __noreturn

00008acb  55                 push    rbp {var_8}
00008acc  53                 push    rbx {var_10}
00008acd  4889fb             mov     rbx, rdi
00008ad0  4883ec18           sub     rsp, 0x18
00008ad4  488b4608           mov     rax, qword [rsi+0x8]
00008ad8  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00008ae1  48896c2408         mov     qword [rsp+0x8 {var_20}], rbp
00008ae6  4889f5             mov     rbp, rsi
00008ae9  8b00               mov     eax, dword [rax]
00008aeb  8d740001           lea     esi, [rax+rax+0x1]
00008aef  4863c6             movsxd  rax, esi
00008af2  48890424           mov     qword [rsp {var_28}], rax
00008af6  e86fdfffff         call    buf_putint
{ Does not return }

00008afb                                                                                   8b 34 24 48 89                             .4$H.
00008b00  df e8 67 de ff ff 48 89 e2 48 89 ef 48 89 c6 e8 e0 a7 01 00 85 c0 74 0e 48 8d 3d 35 ba 02 00 31  ..g...H..H..H.........t.H.=5...1
00008b20  c0 e8 ab d0 ff ff 8b 34 24 48 89 df e8 35 dd ff ff 48 8b 44 24 08 64 48 2b 04 25 28 00 00 00 74  .......4$H...5...H.D$.dH+.%(...t
00008b40  05 e8 ca c6 ff ff 48 83 c4 18 5b 5d e9 b8 db ff ff                                               ......H...[].....

00008b51    void buf_get_ecc_raw_pubkey(void* arg1, void* arg2) __noreturn

00008b51  4155               push    r13 {var_8}
00008b53  4154               push    r12 {var_10}
00008b55  55                 push    rbp {var_18}
00008b56  53                 push    rbx {var_20}
00008b57  4889fb             mov     rbx, rdi
00008b5a  4883ec38           sub     rsp, 0x38
00008b5e  488b4608           mov     rax, qword [rsi+0x8]
00008b62  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00008b6b  4c896c2428         mov     qword [rsp+0x28 {var_30}], r13
00008b70  4989f5             mov     r13, rsi
00008b73  31f6               xor     esi, esi  {0x0}
00008b75  448b20             mov     r12d, dword [rax]
00008b78  e8cddcffff         call    buf_setpos
{ Does not return }

00008b7d                                                                                         48 89 df                               H..
00008b80  e8 57 dd ff ff 8d 50 fe 80 fa 01 77 15 48 8d 35 ca b9 02 00 bf 04 00 00 00 31 c0 e8 eb d0 ff ff  .W....P....w.H.5.........1......
00008ba0  eb 4f 3c 04 75 4b 43 8d 44 24 01 39 43 08 75 41 e8 e5 fe ff ff 44 89 e6 48 89 df 48 89 c5 49 8b  .O<.uKC.D$.9C.uA.....D..H..H..I.
00008bc0  45 08 45 89 e5 48 89 45 08 e8 76 dd ff ff 48 8b 7d 10 4c 89 ea 48 89 c6 e8 b3 f4 01 00 85 c0 74  E.E..H.E..v...H.}.L..H.........t
00008be0  17 48 89 ef e8 bf a8 01 00 48 89 ef e8 6f c4 ff ff 31 ed e9 62 02 00 00 44 89 e6 48 89 df e8 92  .H.......H...o...1..b...D..H....
00008c00  dc ff ff 44 89 e6 48 89 df e8 36 dd ff ff 48 8b 7d 18 4c 89 ea 48 89 c6 e8 73 f4 01 00 85 c0 75  ...D..H...6...H.}.L..H...s.....u
00008c20  c0 48 89 df 44 89 e6 e8 69 dc ff ff 48 8b 7d 20 be 01 00 00 00 e8 b6 2d 02 00 48 8d 4c 24 20 45  .H..D...i...H.} .......-..H.L$ E
00008c40  31 c0 31 c0 48 8d 54 24 18 48 8d 74 24 10 48 8d 7c 24 08 e8 ac e1 ff ff 48 8b 45 08 48 8b 7c 24  1.1.H.T$.H.t$.H.|$......H.E.H.|$
00008c60  08 ba 10 00 00 00 48 8b 70 10 e8 d1 24 02 00 89 c3 85 c0 0f 85 6d 01 00 00 48 8b 45 08 48 8b 7c  ......H.p...$........m...H.E.H.|
00008c80  24 10 ba 10 00 00 00 48 8b 70 18 e8 b0 24 02 00 89 c3 85 c0 0f 85 4c 01 00 00 48 8b 7d 18 48 8b  $......H.p...$........L...H.}.H.
00008ca0  74 24 18 e8 68 2e 02 00 89 c3 85 c0 0f 85 34 01 00 00 48 8b 7d 10 48 8b 74 24 20 e8 50 2e 02 00  t$..h.........4...H.}.H.t$ .P...
00008cc0  89 c3 85 c0 0f 85 1c 01 00 00 48 8b 7c 24 20 48 8b 74 24 08 48 89 fa e8 84 01 02 00 89 c3 85 c0  ..........H.|$ H.t$.H...........
00008ce0  0f 85 00 01 00 00 48 8b 74 24 20 48 8b 7d 10 48 89 f2 e8 19 09 02 00 89 c3 85 c0 0f 85 e5 00 00  ......H.t$ H.}.H................
00008d00  00 48 8b 7c 24 18 48 8b 74 24 20 48 89 fa e8 dd 2e 02 00 89 c3 85 c0 0f 85 c9 00 00 00 48 8b 7c  .H.|$.H.t$ H.................H.|
00008d20  24 18 48 8b 75 10 48 89 fa e8 32 d4 01 00 89 c3 85 c0 0f 85 ae 00 00 00 48 8b 7c 24 18 48 8b 75  $.H.u.H...2.............H.|$.H.u
00008d40  10 48 89 fa e8 17 d4 01 00 89 c3 85 c0 0f 85 93 00 00 00 48 8b 7c 24 18 48 8b 75 10 48 89 fa e8  .H.................H.|$.H.u.H...
00008d60  fc d3 01 00 89 c3 85 c0 75 7c 48 8b 7c 24 18 48 8b 74 24 08 48 89 fa e8 e4 00 02 00 89 c3 85 c0  ........u|H.|$.H.t$.H...........
00008d80  75 64 48 8b 7c 24 18 31 f6 e8 02 db 01 00 48 8b 7c 24 18 48 8b 74 24 08 ff c0 75 1d 48 89 fa e8  udH.|$.1......H.|$.H.t$...u.H...
00008da0  bc d3 01 00 eb d6 48 8b 74 24 08 48 89 fa e8 3d 2e 02 00 89 c3 85 c0 75 2d 48 8b 7c 24 18 48 8b  ......H.t$.H...=.......u-H.|$.H.
00008dc0  74 24 08 e8 78 da 01 00 48 8b 7c 24 18 ff c0 75 d5 48 8b 74 24 10 e8 65 da 01 00 89 c3 85 c0 74  t$..x...H.|$...u.H.t$..e.......t
00008de0  05 bb 07 00 00 00 48 8b 4c 24 20 48 8b 54 24 18 45 31 c0 31 c0 48 8b 74 24 10 48 8b 7c 24 08 e8  ......H.L$ H.T$.E1.1.H.t$.H.|$..
00008e00  7c d9 01 00 48 8b 7c 24 08 e8 52 c2 ff ff 48 8b 7c 24 10 e8 48 c2 ff ff 48 8b 7c 24 18 e8 3e c2  |...H.|$..R...H.|$..H...H.|$..>.
00008e20  ff ff 48 8b 7c 24 20 e8 34 c2 ff ff 85 db 0f 85 ad fd ff ff 48 8b 7d 10 31 f6 e8 51 da 01 00 85  ..H.|$ .4...........H.}.1..Q....
00008e40  c0 0f 84 9a fd ff ff 48 8b 7d 18 31 f6 e8 3e da 01 00 85 c0 0f 84 87 fd ff ff 48 8b 44 24 28 64  .......H.}.1..>...........H.D$(d
00008e60  48 2b 04 25 28 00 00 00 74 05 e8 a1 c3 ff ff 48 83 c4 38 48 89 e8 5b 5d 41 5c 41 5d e9 88 d8 ff  H+.%(...t......H..8H..[]A\A]....
00008e80  ff                                                                                               .

00008e81    void dropbear_ecc_shared_secret(void* arg1, int32_t* arg2) __noreturn

00008e81  4155               push    r13 {var_8}
00008e83  4154               push    r12 {var_10}
00008e85  55                 push    rbp {var_18}
00008e86  53                 push    rbx {var_20}
00008e87  51                 push    rcx {var_28}
00008e88  833e01             cmp     dword [rsi], 0x1
00008e8b  0f8599000000       jne     0x8f2a

00008e91  488b4708           mov     rax, qword [rdi+0x8]
00008e95  4989fc             mov     r12, rdi
00008e98  4989f5             mov     r13, rsi
00008e9b  48394608           cmp     qword [rsi+0x8], rax
00008e9f  0f8585000000       jne     0x8f2a

00008ea5  e83ab70100         call    ltc_ecc_new_point
{ Does not return }

00008eaa                                48 89 c5 48 85 c0 74 78 bf 18 00 00 00 e8 54 27 00 00 48 89 c7 48            H..H..tx......T'..H..H
00008ec0  89 c3 e8 73 de ff ff 49 8b 45 08 ba 10 00 00 00 48 89 df 48 8b 70 10 e8 64 22 02 00 85 c0 75 4a  ...s...I.E......H..H.p..d"....uJ
00008ee0  49 8b 7d 28 49 8d 74 24 10 48 89 d9 48 89 ea 48 8b 05 1a e2 03 00 41 b8 01 00 00 00 e8 2b d8 ff  I.}(I.t$.H..H..H......A......+..
00008f00  ff 85 c0 75 25 bf 18 00 00 00 e8 01 27 00 00 48 89 c7 49 89 c4 e8 20 de ff ff 48 8b 7d 00 4c 89  ...u%.......'..H..I... ...H.}.L.
00008f20  e6 e8 ca dd 01 00 85 c0 74 0e                                                                    ........t.

00008f2a  488d3d23b60200     lea     rdi, [rel data_34554]  {"ECC error"}
00008f31  31c0               xor     eax, eax  {0x0}
00008f33  e899ccffff         call    dropbear_exit
{ Does not return }

00008f38                                                                          48 89 df e8 e0 d7 01 00                          H.......
00008f40  48 89 df e8 18 c1 ff ff 48 89 ef e8 d7 b6 01 00 5a 4c 89 e0 5b 5d 41 5c 41 5d e9 aa d7 ff ff     H.......H.......ZL..[]A\A].....

00008f5f    void signkey_is_ecdsa(int32_t arg1) __noreturn

00008f5f  ffcf               dec     edi
00008f61  31c0               xor     eax, eax  {0x0}
00008f63  83ff02             cmp     edi, 0x2
00008f66  0f96c0             setbe   al
00008f69  e99bd7ffff         jmp     __x86_return_thunk
{ Does not return }


00008f6e    void ecdsa_signkey_type(void* arg1) __noreturn

00008f6e  488b5708           mov     rdx, qword [rdi+0x8]
00008f72  483b150fd10300     cmp     rdx, qword [rel data_46088]
00008f79  b801000000         mov     eax, 0x1
00008f7e  7421               je      0x8fa1

00008f80  483b15e1d00300     cmp     rdx, qword [rel data_46068]
00008f87  b802000000         mov     eax, 0x2
00008f8c  7413               je      0x8fa1

00008f8e  483b15b3d00300     cmp     rdx, qword [rel data_46048]
00008f95  b803000000         mov     eax, 0x3
00008f9a  7405               je      0x8fa1

00008f9c  b85a000000         mov     eax, 0x5a

00008fa1  e963d7ffff         jmp     __x86_return_thunk
{ Does not return }


00008fa6    void gen_ecdsa_priv_key(int32_t arg1) __noreturn

00008fa6  55                 push    rbp {var_8}
00008fa7  89fe               mov     esi, edi
00008fa9  53                 push    rbx {var_10}
00008faa  51                 push    rcx {var_18}
00008fab  81ff80010000       cmp     edi, 0x180
00008fb1  7419               je      0x8fcc

00008fb3  81ff09020000       cmp     edi, 0x209
00008fb9  741a               je      0x8fd5

00008fbb  488b2dc6d00300     mov     rbp, qword [rel data_46088]
00008fc2  81ff00010000       cmp     edi, 0x100
00008fc8  7412               je      0x8fdc

00008fca  eb15               jmp     0x8fe1

00008fcc  488b2d95d00300     mov     rbp, qword [rel data_46068]
00008fd3  eb07               jmp     0x8fdc

00008fd5  488b2d6cd00300     mov     rbp, qword [rel data_46048]

00008fdc  4885ed             test    rbp, rbp
00008fdf  750e               jne     0x8fef

00008fe1  488d3da5b50200     lea     rdi, [rel data_3458d]  {"Key size %d isn't valid. Try 256…"}
00008fe8  31c0               xor     eax, eax  {0x0}
00008fea  e8e2cbffff         call    dropbear_exit
{ Does not return }

00008fef  bf30000000         mov     edi, 0x30
00008ff4  e817260000         call    m_malloc
{ Does not return }

00008ff9                                                                             8b 35 a1 d0 03 00 31                           .5....1
00009000  ff 48 89 e9 48 89 c2 48 89 c3 e8 d1 a4 01 00 85 c0 74 0e 48 8d 3d 3a b5 02 00 31 c0 e8 b0 cb ff  .H..H..H.........t.H.=:...1.....
00009020  ff 48 89 d8 5a 5b 5d e9 dd d6 ff ff                                                              .H..Z[].....

0000902c    void buf_get_ecdsa_pub_key(void* arg1) __noreturn

0000902c  4156               push    r14 {var_8}
0000902e  4155               push    r13 {var_10}
00009030  4154               push    r12 {var_18}
00009032  55                 push    rbp {var_20}
00009033  53                 push    rbx {var_28}
00009034  4883ec10           sub     rsp, 0x10
00009038  644c8b3425280000…  mov     r14, qword [fs:0x28]
00009041  4c89742408         mov     qword [rsp+0x8 {var_30}], r14
00009046  4989fe             mov     r14, rdi
00009049  4889e6             mov     rsi, rsp {var_38}
0000904c  e878d9ffff         call    buf_getstring
{ Does not return }

00009051                                                     48 8d 74 24 04 49 89 c5 4c 89 f7 e8 68 d9 ff                   H.t$.I..L...h..
00009060  ff 48 8d 35 c0 b2 02 00 4c 89 ef 49 89 c4 e8 9d c3 ff ff 85 c0 75 11 48 8d 35 79 b2 02 00 4c 89  .H.5....L..I.........u.H.5y...L.
00009080  e7 e8 8a c3 ff ff eb 1c 8b 54 24 04 8b 0c 24 48 8d 42 0b 48 39 c1 75 64 49 8d 7d 0b 4c 89 e6 e8  .........T$...$H.B.H9.udI.}.L...
000090a0  1c c3 ff ff 48 8d 2d 75 cf 03 00 85 c0 75 4d 48 8b 5d 00 48 85 db 74 24 48 8b 5b 18 48 89 df e8  ....H.-u.....uMH.].H..t$H.[.H...
000090c0  2c c1 ff ff 48 89 de 4c 89 e7 48 89 c2 e8 ee c2 ff ff 85 c0 74 0a 48 83 c5 08 eb d3 31 ed eb 20  ,...H..L..H.........t.H.....1.. 
000090e0  4c 89 f7 e8 42 da ff ff 48 8b 75 00 48 89 c7 48 89 c3 e8 5a fa ff ff 48 89 c5 eb 04 31 ed 31 db  L...B...H.u.H..H...Z...H....1.1.
00009100  4c 89 ef e8 58 bf ff ff 4c 89 e7 e8 50 bf ff ff 48 85 db 74 08 48 89 df e8 54 d6 ff ff 48 8b 44  L...X...L...P...H..t.H...T...H.D
00009120  24 08 64 48 2b 04 25 28 00 00 00 74 05 e8 de c0 ff ff 48 83 c4 10 48 89 e8 5b 5d 41 5c 41 5d 41  $.dH+.%(...t......H...H..[]A\A]A
00009140  5e e9 c3 d5 ff ff                                                                                ^.....

00009146    void buf_get_ecdsa_priv_key(void* arg1) __noreturn

00009146  53                 push    rbx {var_8}
00009147  4883ec10           sub     rsp, 0x10
0000914b  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00009150  e8d7feffff         call    buf_get_ecdsa_pub_key
{ Does not return }

00009155                                                                 48 85 c0 74 25 48 8b 70 28 48 8b                       H..t%H.p(H.
00009160  7c 24 08 48 89 c3 e8 57 db ff ff 85 c0 74 12 48 89 df e8 31 a3 01 00 48 89 df e8 e1 be ff ff 31  |$.H...W.....t.H...1...H.......1
00009180  db 48 83 c4 10 48 89 d8 5b e9 7b d5 ff ff                                                        .H...H..[.{...

0000918e    void buf_put_ecdsa_pub_key(int64_t arg1, void* arg2) __noreturn

0000918e  4155               push    r13 {var_8}
00009190  4154               push    r12 {var_10}
00009192  55                 push    rbp {var_18}
00009193  53                 push    rbx {var_20}
00009194  4889fb             mov     rbx, rdi
00009197  4883ec38           sub     rsp, 0x38
0000919b  488b7e08           mov     rdi, qword [rsi+0x8]
0000919f  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000091a8  48896c2428         mov     qword [rsp+0x28 {var_30}], rbp
000091ad  4889f5             mov     rbp, rsi
000091b0  4c8d6c240a         lea     r13, [rsp+0xa {var_4e}]
000091b5  e8a0f8ffff         call    curve_for_dp
{ Does not return }

000091ba                                                                                4c 8d 05 f6 b3 02                            L.....
000091c0  00 b9 1e 00 00 00 4c 89 ef 4c 8b 48 18 ba 01 00 00 00 be 1e 00 00 00 49 89 c4 31 c0 e8 6f be ff  ......L..L.H...........I..1..o..
000091e0  ff 4c 89 ef e8 07 c0 ff ff 4c 89 ee 48 89 df 89 c2 e8 ab d9 ff ff 4d 8b 64 24 18 4c 89 e7 e8 ed  .L.......L..H.........M.d$.L....
00009200  bf ff ff 4c 89 e6 48 89 df 89 c2 e8 91 d9 ff ff 48 89 ee 48 89 df e8 b0 f8 ff ff 48 8b 44 24 28  ...L..H.........H..H.......H.D$(
00009220  64 48 2b 04 25 28 00 00 00 74 05 e8 e0 bf ff ff 48 83 c4 38 5b 5d 41 5c 41 5d e9 ca d4 ff ff     dH+.%(...t......H..8[]A\A].....

0000923f    void buf_put_ecdsa_priv_key(int64_t arg1, void* arg2) __noreturn

0000923f  55                 push    rbp {var_8}
00009240  4889f5             mov     rbp, rsi
00009243  4883ec10           sub     rsp, 0x10
00009247  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
0000924c  e83dffffff         call    buf_put_ecdsa_pub_key
{ Does not return }

00009251                                                     48 8b 75 28 48 8b 7c 24 08 48 83 c4 10 5d e9                   H.u(H.|$.H...].
00009260  73 d9 ff ff                                                                                      s...

00009264    void buf_put_ecdsa_sign(int64_t arg1, void* arg2) __noreturn

00009264  4156               push    r14 {var_8}
00009266  31c0               xor     eax, eax  {0x0}
00009268  4155               push    r13 {var_10}
0000926a  4989fd             mov     r13, rdi
0000926d  4154               push    r12 {var_18}
0000926f  55                 push    rbp {var_20}
00009270  4889f5             mov     rbp, rsi
00009273  53                 push    rbx {var_28}
00009274  4881ec90010000     sub     rsp, 0x190
0000927b  488b7e08           mov     rdi, qword [rsi+0x8]
0000927f  644c8b2425280000…  mov     r12, qword [fs:0x28]
00009288  4c89a42488010000   mov     qword [rsp+0x188 {var_30}], r12
00009290  4989d4             mov     r12, rdx
00009293  4889442408         mov     qword [rsp+0x8], rax  {0x0}
00009298  4889442410         mov     qword [rsp+0x10 {var_1a8}], rax  {0x0}
0000929d  4889442418         mov     qword [rsp+0x18 {var_1a0}], rax  {0x0}
000092a2  e8b3f7ffff         call    curve_for_dp
{ Does not return }

000092a7                       45 31 c0 48 8d 4c 24 08 48 8d 54 24 10 48 89 c3 48 8d 74 24 18 48 8d 7c 24         E1.H.L$.H.T$.H..H.t$.H.|$
000092c0  20 31 c0 e8 4a 93 01 00 85 c0 0f 85 50 02 00 00 48 8b 43 10 4c 8d 74 24 58 4c 89 f7 48 8b 80 a8   1..J.......P...H.C.L.t$XL..H...
000092e0  00 00 00 e8 44 d4 ff ff 48 8b 43 10 41 8b 54 24 08 4c 89 f7 49 8b 34 24 4c 8d a4 24 48 01 00 00  ....D...H.C.A.T$.L..I.4$L..$H...
00009300  48 8b 80 b0 00 00 00 e8 20 d4 ff ff 48 8b 43 10 4c 89 e6 4c 89 f7 48 8b 80 b8 00 00 00 e8 0a d4  H....... ...H.C.L..L..H.........
00009320  ff ff 48 8b 43 10 48 8b 7c 24 08 4c 89 e6 48 8b 50 10 48 8b 05 27 dd 03 00 e8 ee d3 ff ff 85 c0  ..H.C.H.|$.L..H.P.H..'..........
00009340  0f 85 da 01 00 00 48 8b 45 08 48 8b 7c 24 10 ba 10 00 00 00 48 8b 70 20 48 8b 05 e1 dc 03 00 e8  ......H.E.H.|$......H.p H.......
00009360  c8 d3 ff ff 85 c0 0f 85 b4 01 00 00 4c 8d 74 24 28 48 8b 4d 08 8b 35 25 cd 03 00 4c 89 f2 31 ff  ............L.t$(H.M..5%...L..1.
00009380  e8 5b a1 01 00 48 8b 4c 24 20 85 c0 0f 85 8e 01 00 00 48 8b 7c 24 38 48 8b 74 24 10 31 d2 48 8b  .[...H.L$ ........H.|$8H.t$.1.H.
000093a0  05 fb dc 03 00 e8 82 d3 ff ff 48 8b 7c 24 20 85 c0 0f 85 69 01 00 00 31 f6 48 8b 05 60 dc 03 00  ..........H.|$ ....i...1.H..`...
000093c0  e8 67 d3 ff ff 85 c0 75 0a 4c 89 f7 e8 d7 a0 01 00 eb 9e 48 8b 7c 24 50 48 8b 74 24 10 48 8b 05  .g.....u.L.........H.|$PH.t$.H..
000093e0  f4 dc 03 00 48 89 fa e8 40 d3 ff ff 48 8b 74 24 20 85 c0 0f 85 27 01 00 00 48 8b 7d 28 48 8b 4c  ....H...@...H.t$ ....'...H.}(H.L
00009400  24 18 48 8b 54 24 10 48 8b 05 ba dc 03 00 e8 19 d3 ff ff 85 c0 0f 85 05 01 00 00 48 8b 74 24 18  $.H.T$.H...................H.t$.
00009420  48 8b 7c 24 08 48 8b 05 3c dc 03 00 48 89 f2 e8 f8 d2 ff ff 85 c0 0f 85 e4 00 00 00 48 8b 7c 24  H.|$.H..<...H...............H.|$
00009440  18 31 d2 48 8b 74 24 10 48 8b 05 51 dc 03 00 48 89 f9 e8 d5 d2 ff ff 85 c0 0f 85 c1 00 00 00 48  .1.H.t$.H..Q...H...............H
00009460  8b 7c 24 18 48 8b 54 24 10 48 8b 74 24 50 48 8b 05 53 dc 03 00 48 89 f9 e8 af d2 ff ff 41 89 c4  .|$.H.T$.H.t$PH..S...H.......A..
00009480  85 c0 0f 85 98 00 00 00 4c 89 f7 e8 18 a0 01 00 31 f6 48 8b 7c 24 18 48 8b 05 82 db 03 00 e8 89  ........L.......1.H.|$.H........
000094a0  d2 ff ff 85 c0 0f 84 c6 fe ff ff 4c 8b 4b 18 b9 1e 00 00 00 ba 01 00 00 00 31 c0 48 8d ac 24 2a  ...........L.K...........1.H..$*
000094c0  01 00 00 4c 8d 05 ed b0 02 00 be 1e 00 00 00 48 89 ef e8 79 bb ff ff 48 89 ef e8 11 bd ff ff 48  ...L...........H...y...H.......H
000094e0  89 ee 4c 89 ef 89 c2 e8 b5 d6 ff ff bf c8 00 00 00 e8 47 d2 ff ff 48 8b 74 24 20 48 89 c7 48 89  ..L...............G...H.t$ H..H.
00009500  c3 e8 d1 d6 ff ff 48 8b 74 24 18 48 89 df e8 c4 d6 ff ff 48 89 de 4c 89 ef e8 b1 d6 ff ff eb 06  ......H.t$.H.......H..L.........
00009520  31 db 41 83 cc ff 48 8b 7c 24 20 48 85 ff 74 28 48 8b 74 24 18 48 85 f6 74 1e 48 8b 54 24 10 48  1.A...H.|$ H..t(H.t$.H..t.H.T$.H
00009540  85 d2 74 14 48 8b 4c 24 08 48 85 c9 74 0a 45 31 c0 31 c0 e8 e1 91 01 00 48 85 db 74 08 48 89 df  ..t.H.L$.H..t.E1.1......H..t.H..
00009560  e8 0c d2 ff ff 41 ff c4 75 0e 48 8d 3d e3 af 02 00 31 c0 e8 59 c6 ff ff 48 8b 84 24 88 01 00 00  .....A..u.H.=....1..Y...H..$....
00009580  64 48 2b 04 25 28 00 00 00 74 05 e8 80 bc ff ff 48 81 c4 90 01 00 00 5b 5d 41 5c 41 5d 41 5e e9  dH+.%(...t......H......[]A\A]A^.
000095a0  65 d1 ff ff                                                                                      e...

000095a4    void buf_ecdsa_verify(int64_t arg1, void* arg2) __noreturn

000095a4  4157               push    r15 {var_8}
000095a6  31c0               xor     eax, eax  {0x0}
000095a8  4156               push    r14 {var_10}
000095aa  4155               push    r13 {var_18}
000095ac  4989fd             mov     r13, rdi
000095af  4154               push    r12 {var_20}
000095b1  4989f4             mov     r12, rsi
000095b4  55                 push    rbp {var_28}
000095b5  53                 push    rbx {var_30}
000095b6  4881ec98010000     sub     rsp, 0x198
000095bd  488b7e08           mov     rdi, qword [rsi+0x8]
000095c1  644c8b3c25280000…  mov     r15, qword [fs:0x28]
000095ca  4c89bc2488010000   mov     qword [rsp+0x188 {var_40}], r15
000095d2  4989d7             mov     r15, rdx
000095d5  4889442428         mov     qword [rsp+0x28], rax  {0x0}
000095da  4889442430         mov     qword [rsp+0x30 {var_198}], rax  {0x0}
000095df  4889442438         mov     qword [rsp+0x38 {var_190}], rax  {0x0}
000095e4  4889442440         mov     qword [rsp+0x40 {var_188}], rax  {0x0}
000095e9  4889442448         mov     qword [rsp+0x48 {var_180}], rax  {0x0}
000095ee  4889442450         mov     qword [rsp+0x50 {var_178}], rax  {0x0}
000095f3  4889442458         mov     qword [rsp+0x58 {var_170}], rax  {0x0}
000095f8  4889442460         mov     qword [rsp+0x60 {var_168}], rax  {0x0}
000095fd  4889442468         mov     qword [rsp+0x68 {var_160}], rax  {0x0}
00009602  4889442470         mov     qword [rsp+0x70 {var_158}], rax  {0x0}
00009607  e84ef4ffff         call    curve_for_dp
{ Does not return }

0000960c                                      49 89 c6 e8 d0 af 01 00 48 89 c3 e8 c8 af 01 00 48 8d 4c 24              I.......H.......H.L$
00009620  40 48 8d 54 24 38 48 8d 74 24 30 48 8d 7c 24 28 6a 00 48 89 c5 48 8d 44 24 70 50 48 8d 44 24 68  @H.T$8H.t$0H.|$(j.H..H.D$pPH.D$h
00009640  50 48 8d 44 24 78 50 31 c0 4c 8d 4c 24 70 4c 8d 44 24 68 e8 ba 8f 01 00                          PH.D$xP1.L.L$pL.D$h.....

00009658    void sub_9658(int32_t arg1 @ rax, int64_t arg2 @ rbx, int64_t arg3 @ rbp, void* arg4 @ r13, int64_t arg5, int64_t arg6) __noreturn

00009658  4883c420           add     rsp, 0x20
0000965c  85c0               test    eax, eax
0000965e  750a               jne     0x966a

00009660  4885db             test    rbx, rbx
00009663  7405               je      0x966a

00009665  4885ed             test    rbp, rbp
00009668  750e               jne     0x9678

0000966a  488d3de3ae0200     lea     rdi, [rel data_34554]  {"ECC error"}
00009671  31c0               xor     eax, eax  {0x0}
00009673  e859c5ffff         call    dropbear_exit
{ Does not return }

00009678  488b742428         mov     rsi, qword [rsp+0x28 {arg5}]
0000967d  488b442430         mov     rax, qword [rsp+0x30 {arg6}]
00009682  4c89ef             mov     rdi, r13
00009685  4889742418         mov     qword [rsp+0x18 {arg_38}], rsi
0000968a  4889442408         mov     qword [rsp+0x8 {arg_28}], rax
0000968f  e802d3ffff         call    buf_getint
{ Does not return }

00009694                                                              48 8b 74 24 18 4c 89 ef 89 44 24 10                      H.t$.L...D$.
000096a0  41 8b 45 0c 89 44 24 14 e8 15 d6 ff ff 85 c0 74 09 41 83 cc ff e9 a4 03 00 00 48 8b 74 24 08 4c  A.E..D$........t.A........H.t$.L
000096c0  89 ef e8 fb d5 ff ff 85 c0 75 e6 41 8b 45 0c 8b 4c 24 14 29 c8 39 44 24 10 75 d6 49 8b 46 10 4c  .........u.A.E..L$.).9D$.u.I.F.L
000096e0  8d 6c 24 78 4c 89 ef 48 8b 80 a8 00 00 00 e8 39 d0 ff ff 49 8b 46 10 41 8b 57 08 4c 89 ef 49 8b  .l$xL..H.......9...I.F.A.W.L..I.
00009700  37 4c 8d bc 24 48 01 00 00 48 8b 80 b0 00 00 00 e8 17 d0 ff ff 49 8b 46 10 4c 89 fe 4c 89 ef 48  7L..$H...H...........I.F.L..L..H
00009720  8b 80 b8 00 00 00 e8 01 d0 ff ff 49 8b 46 10 48 8b 7c 24 58 4c 89 fe 48 8b 50 10 48 8b 05 1e d9  ...........I.F.H.|$XL..H.P.H....
00009740  03 00 e8 e5 cf ff ff 85 c0 0f 85 62 ff ff ff 49 8b 44 24 08 48 8b 7c 24 60 ba 10 00 00 00 48 8b  ...........b...I.D$.H.|$`.....H.
00009760  70 20 48 8b 05 d7 d8 03 00 e8 be cf ff ff 85 c0 0f 85 3b ff ff ff 49 8b 44 24 08 48 8b 7c 24 68  p H...............;...I.D$.H.|$h
00009780  ba 10 00 00 00 48 8b 70 10 48 8b 05 b0 d8 03 00 e8 97 cf ff ff 85 c0 0f 85 14 ff ff ff 31 f6 48  .....H.p.H...................1.H
000097a0  8b 7c 24 28 48 8b 05 75 d8 03 00 e8 7c cf ff ff 85 c0 0f 84 f9 fe ff ff 31 f6 48 8b 7c 24 30 48  .|$(H..u....|...........1.H.|$0H
000097c0  8b 05 5a d8 03 00 e8 61 cf ff ff 85 c0 0f 84 de fe ff ff 48 8b 74 24 60 48 8b 7c 24 28 48 8b 05  ..Z....a...........H.t$`H.|$(H..
000097e0  34 d8 03 00 e8 43 cf ff ff ff c0 0f 85 c0 fe ff ff 48 8b 74 24 60 48 8b 7c 24 30 48 8b 05 16 d8  4....C...........H.t$`H.|$0H....
00009800  03 00 e8 25 cf ff ff ff c0 0f 85 a2 fe ff ff 48 8b 54 24 40 48 8b 74 24 60 48 8b 7c 24 30 48 8b  ...%...........H.T$@H.t$`H.|$0H.
00009820  05 b3 d8 03 00 e8 02 cf ff ff 85 c0 0f 85 7f fe ff ff 48 8b 4c 24 48 48 8b 54 24 60 48 8b 74 24  ..................H.L$HH.T$`H.t$
00009840  40 48 8b 7c 24 58 48 8b 05 7b d8 03 00 e8 da ce ff ff 85 c0 0f 85 57 fe ff ff 48 8b 4c 24 50 48  @H.|$XH..{............W...H.L$PH
00009860  8b 54 24 60 48 8b 74 24 40 48 8b 7c 24 28 48 8b 05 53 d8 03 00 e8 b2 ce ff ff 85 c0 0f 85 2f fe  .T$`H.t$@H.|$(H..S............/.
00009880  ff ff 49 8b 44 24 08 48 8b 3b ba 10 00 00 00 48 8b 70 28 48 8b 05 a6 d7 03 00 e8 8d ce ff ff 85  ..I.D$.H.;.....H.p(H............
000098a0  c0 0f 85 0a fe ff ff 49 8b 44 24 08 48 8b 7b 08 ba 10 00 00 00 48 8b 70 30 48 8b 05 80 d7 03 00  .......I.D$.H.{......H.p0H......
000098c0  e8 67 ce ff ff 85 c0 0f 85 e4 fd ff ff 48 8b 7b 10 48 8b 05 20 d7 03 00 be 01 00 00 00 e8 4a ce  .g...........H.{.H.. .........J.
000098e0  ff ff 85 c0 0f 85 c7 fd ff ff 49 8b 7c 24 10 48 8b 75 00 48 8b 05 f6 d6 03 00 e8 2d ce ff ff 85  ..........I.|$.H.u.H.......-....
00009900  c0 0f 85 aa fd ff ff 48 8b 75 08 49 8b 7c 24 18 48 8b 05 d9 d6 03 00 e8 10 ce ff ff 85 c0 0f 85  .......H.u.I.|$.H...............
00009920  8d fd ff ff 48 8b 75 10 49 8b 7c 24 20 48 8b 05 bc d6 03 00 e8 f3 cd ff ff 85 c0 0f 85 70 fd ff  ....H.u.I.|$ H...............p..
00009940  ff 48 8b 05 e8 d7 03 00 4c 8b 4c 24 68 48 8b 7c 24 48 48 85 c0 0f 85 a7 00 00 00 45 31 c0 48 8b  .H......L.L$hH.|$HH........E1.H.
00009960  05 ab d7 03 00 4c 89 c9 48 89 da 48 89 de e8 b9 cd ff ff 85 c0 0f 85 36 fd ff ff 45 31 c0 48 8b  .....L..H..H...........6...E1.H.
00009980  4c 24 68 48 8b 7c 24 50 48 89 ea 48 8b 05 7e d7 03 00 48 89 ee e8 92 cd ff ff 85 c0 0f 85 0f fd  L$hH.|$PH..H..~...H.............
000099a0  ff ff 48 8b 7c 24 68 48 8b 05 32 d7 03 00 48 8d 74 24 70 e8 74 cd ff ff 85 c0 0f 85 f1 fc ff ff  ..H.|$hH..2...H.t$p.t...........
000099c0  4c 8b 44 24 70 48 8b 4c 24 68 48 89 da 48 89 de 48 8b 05 41 d7 03 00 48 89 ef e8 4d cd ff ff 85  L.D$pH.L$hH..H..H..A...H...M....
000099e0  c0 0f 85 ca fc ff ff 48 8b 54 24 70 48 8b 74 24 68 48 89 df 48 8b 05 2d d7 03 00 e8 2c cd ff ff  .......H.T$pH.t$hH..H..-....,...
00009a00  eb 16 48 89 fe 48 8b 4c 24 50 49 89 d8 48 89 ea 48 89 df e8 14 cd ff ff 85 c0 0f 85 91 fc ff ff  ..H..H.L$PI..H..H...............
00009a20  31 d2 48 8b 4c 24 38 48 8b 74 24 60 48 8b 3b 48 8b 05 6a d6 03 00 e8 f1 cc ff ff 85 c0 0f 85 6e  1.H.L$8H.t$`H.;H..j............n
00009a40  fc ff ff 48 8b 74 24 28 48 8b 7c 24 38 48 8b 05 c4 d5 03 00 e8 d3 cc ff ff f7 d8 45 19 e4 48 89  ...H.t$(H.|$8H.............E..H.
00009a60  df e8 c1 ab 01 00 48 89 ef e8 b9 ab 01 00                                                        ......H.......

00009a6e    void sub_9a6e(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9) __noreturn

00009a6e  6a00               push    0x0 {var_8}
00009a70  31c0               xor     eax, eax  {0x0}
00009a72  ff742470           push    qword [rsp+0x70 {arg9}] {var_10}
00009a76  ff742468           push    qword [rsp+0x68 {arg7}] {var_18}
00009a7a  ff742478           push    qword [rsp+0x78 {arg8}] {var_20}
00009a7e  488b7c2448         mov     rdi, qword [rsp+0x48 {arg1}]
00009a83  4c8b4c2470         mov     r9, qword [rsp+0x70 {arg6}]
00009a88  4c8b442468         mov     r8, qword [rsp+0x68 {arg5}]
00009a8d  488b4c2460         mov     rcx, qword [rsp+0x60 {arg4}]
00009a92  488b542458         mov     rdx, qword [rsp+0x58 {arg3}]
00009a97  488b742450         mov     rsi, qword [rsp+0x50 {arg2}]
00009a9c  e8988c0100         call    ltc_deinit_multi
{ Does not return }

00009aa1     48 8b bc 24 90 00 00 00 48 83 c4 20 48 85 ff 74 0c 48 8b 05 3f d6 03 00 e8 6e cc ff ff 48 8b   H..$....H.. H..t.H..?....n...H.
00009ac0  84 24 88 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 3a b7 ff ff 48 81 c4 98 01 00 00 44 89 e0  .$....dH+.%(...t..:...H......D..
00009ae0  5b 5d 41 5c 41 5d 41 5e 41 5f e9 1a cc ff ff                                                     []A\A]A^A_.....

00009aef    void buf_sk_ecdsa_verify(void* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int32_t arg5, int32_t arg6) __noreturn

00009aef  4157               push    r15 {var_8}
00009af1  4156               push    r14 {var_10}
00009af3  4989d6             mov     r14, rdx
00009af6  4155               push    r13 {var_18}
00009af8  4589c5             mov     r13d, r8d
00009afb  4154               push    r12 {var_20}
00009afd  55                 push    rbp {var_28}
00009afe  4889fd             mov     rbp, rdi
00009b01  53                 push    rbx {var_30}
00009b02  4881ec28010000     sub     rsp, 0x128
00009b09  48894c2418         mov     qword [rsp+0x18 {var_140}], rcx
00009b0e  4889742410         mov     qword [rsp+0x10 {var_148}], rsi
00009b13  644c8b2425280000…  mov     r12, qword [fs:0x28]
00009b1c  4c89a42418010000   mov     qword [rsp+0x118 {var_40}], r12
00009b24  4589cc             mov     r12d, r9d
00009b27  e805d0ffff         call    buf_getbuf
{ Does not return }

00009b2c                                      48 89 ef 48 89 44 24 08 e8 a3 cd ff ff 48 89 ef 48 8d 6c 24              H..H.D$......H..H.l$
00009b40  28 0f b6 d8 e8 4d ce ff ff bf 45 00 00 00 41 89 c7 45 0f b6 e4 e8 e3 cb ff ff 48 89 ef 48 89 04  (....M....E...A..E........H..H..
00009b60  24 e8 c2 68 01 00 48 8b 74 24 18 44 89 ea 48 89 ef 4c 8d ac 24 f8 00 00 00 e8 b4 6b 01 00 48 89  $..h..H.t$.D..H..L..$......k..H.
00009b80  ef 4c 89 ee e8 c6 6a 01 00 48 8b 3c 24 ba 20 00 00 00 4c 89 ee e8 a1 cf ff ff 48 8b 3c 24 89 de  .L....j..H.<$. ...L.......H.<$..
00009ba0  f7 d3 44 21 e3 e8 6b cd ff ff 48 8b 3c 24 44 89 fe e8 b4 ce ff ff 48 89 ef e8 6a 68 01 00 41 8b  ..D!..k...H.<$D.......H...jh..A.
00009bc0  56 08 49 8b 36 48 89 ef e8 65 6b 01 00 48 89 ef 4c 89 ee e8 77 6a 01 00 48 8b 3c 24 ba 20 00 00  V.I.6H...ek..H..L...wj..H.<$. ..
00009be0  00 4c 89 ee e8 52 cf ff ff 48 8b 14 24 48 8b 74 24 10 48 8b 7c 24 08 e8 a8 f9 ff ff 48 8b 3c 24  .L...R...H..$H.t$.H.|$......H.<$
00009c00  89 c5 e8 6a cb ff ff 48 8b 7c 24 08 e8 60 cb ff ff f6 c3 01 74 1e 85 ed 74 05 83 cd ff eb 15 48  ...j...H.|$..`......t...t......H
00009c20  8d 35 9f a9 02 00 bf 04 00 00 00 31 c0 e8 59 c0 ff ff eb e6 80 e3 04 74 1e 85 ed 74 05 83 cd ff  .5.........1..Y........t...t....
00009c40  eb 15 48 8d 35 9d a9 02 00 bf 04 00 00 00 31 c0 e8 36 c0 ff ff eb e6 48 8b 84 24 18 01 00 00 64  ..H.5.........1..6.....H..$....d
00009c60  48 2b 04 25 28 00 00 00 74 05 e8 a1 b5 ff ff 48 81 c4 28 01 00 00 89 e8 5b 5d 41 5c 41 5d 41 5e  H+.%(...t......H..(.....[]A\A]A^
00009c80  41 5f e9 82 ca ff ff                                                                             A_.....

00009c87    void dropbear_rand_source(int64_t arg1, int32_t arg2) __noreturn

00009c87  50                 push    rax {var_8}
00009c88  e85de7ffff         call    genrandom
{ Does not return }

00009c8d                                         31 c0 5a e9 74 ca ff ff                                                1.Z.t...

00009c95    void crypto_init() __noreturn

00009c95  53                 push    rbx {var_8}
00009c96  488d3da3b20300     lea     rdi, [rel aes_desc]
00009c9d  4883ec30           sub     rsp, 0x30
00009ca1  64488b0425280000…  mov     rax, qword [fs:0x28]
00009caa  4889442428         mov     qword [rsp+0x28 {var_10}], rax
00009caf  488d054ab30300     lea     rax, [rel sha256_desc]
00009cb6  488d5c2408         lea     rbx, [rsp+0x8]
00009cbb  4889442408         mov     qword [rsp+0x8 {var_30}], rax  {sha256_desc}
00009cc0  488d0519ba0300     lea     rax, [rel sha384_desc]
00009cc7  4889442410         mov     qword [rsp+0x10 {var_28}], rax  {sha384_desc}
00009ccc  488d050db40300     lea     rax, [rel sha512_desc]
00009cd3  4889442418         mov     qword [rsp+0x18 {var_20}], rax  {sha512_desc}
00009cd8  31c0               xor     eax, eax  {0x0}
00009cda  4889442420         mov     qword [rsp+0x20 {var_18}], rax  {0x0}
00009cdf  e8ad8f0100         call    register_cipher
{ Does not return }

00009ce4              ff c0 75 1b 48 8d 3d 1c a9 02 00 31 c0 e8 db be ff ff e8 1e 90 01 00 48 83 c3 08 ff      ..u.H.=....1...........H....
00009d00  c0 74 e5 48 8b 3b 48 85 ff 75 eb 48 8d 3d 0e af 03 00 e8 99 90 01 00 89 05 83 c3 03 00 ff c0 74  .t.H.;H..u.H.=.................t
00009d20  c7 48 8d 3d 5f ff ff ff e8 93 11 02 00 48 8d 3d 8c d2 03 00 b9 68 00 00 00 48 8d 35 80 ba 03 00  .H.=_........H.=.....h...H.5....
00009d40  f3 a5 48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 b9 b4 ff ff 48 83 c4 30 5b e9 a8 ec ff  ..H.D$(dH+.%(...t......H..0[....
00009d60  ff                                                                                               .

00009d61    void set25519(int64_t* arg1, int64_t* arg2) __noreturn

00009d61  31c0               xor     eax, eax  {0x0}

00009d63  488b1406           mov     rdx, qword [rsi+rax]
00009d67  48891407           mov     qword [rdi+rax], rdx
00009d6b  4883c008           add     rax, 0x8
00009d6f  483d80000000       cmp     rax, 0x80
00009d75  75ec               jne     0x9d63

00009d77  e98dc9ffff         jmp     __x86_return_thunk
{ Does not return }


00009d7c    void car25519(int64_t arg1) __noreturn

00009d7c  31c0               xor     eax, eax  {0x0}
00009d7e  4531d2             xor     r10d, r10d
00009d81  4531c9             xor     r9d, r9d

00009d84  488b0cc7           mov     rcx, qword [rdi+rax*8]
00009d88  4883f80f           cmp     rax, 0xf
00009d8c  be25000000         mov     esi, 0x25
00009d91  490f45f1           cmovne  rsi, r9  {0x0}
00009d95  488d9100000100     lea     rdx, [rcx+0x10000]
00009d9c  8d4801             lea     ecx, [rax+0x1]
00009d9f  410f44ca           cmove   ecx, r10d  {0x0}
00009da3  4989d0             mov     r8, rdx
00009da6  48ffc6             inc     rsi
00009da9  488914c7           mov     qword [rdi+rax*8], rdx
00009dad  49c1f810           sar     r8, 0x10
00009db1  6631d2             xor     dx, dx  {0x0}
00009db4  4863c9             movsxd  rcx, ecx
00009db7  49ffc8             dec     r8
00009dba  490faff0           imul    rsi, r8
00009dbe  480134cf           add     qword [rdi+rcx*8], rsi
00009dc2  482914c7           sub     qword [rdi+rax*8], rdx
00009dc6  48ffc0             inc     rax
00009dc9  4883f810           cmp     rax, 0x10
00009dcd  75b5               jne     0x9d84

00009dcf  e935c9ffff         jmp     __x86_return_thunk
{ Does not return }


00009dd4    void sel25519(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00009dd4  f7da               neg     edx
00009dd6  31c0               xor     eax, eax  {0x0}
00009dd8  4863d2             movsxd  rdx, edx

00009ddb  4c8b04c7           mov     r8, qword [rdi+rax*8]
00009ddf  488b0cc6           mov     rcx, qword [rsi+rax*8]
00009de3  4c31c1             xor     rcx, r8
00009de6  4821d1             and     rcx, rdx
00009de9  4931c8             xor     r8, rcx
00009dec  4c8904c7           mov     qword [rdi+rax*8], r8
00009df0  48310cc6           xor     qword [rsi+rax*8], rcx
00009df4  48ffc0             inc     rax
00009df7  4883f810           cmp     rax, 0x10
00009dfb  75de               jne     0x9ddb

00009dfd  e907c9ffff         jmp     __x86_return_thunk
{ Does not return }


00009e02    void pack25519() __noreturn

00009e02  4881ec18010000     sub     rsp, 0x118
00009e09  b920000000         mov     ecx, 0x20
00009e0e  644c8b1c25280000…  mov     r11, qword [fs:0x28]
00009e17  4c899c2408010000   mov     qword [rsp+0x108 {var_10}], r11
00009e1f  4989fb             mov     r11, rdi
00009e22  488dbc2488000000   lea     rdi, [rsp+0x88 {var_90}]
00009e2a  f3a5               rep movsd dword [rdi], [rsi] {var_110} {var_90}  {0x0}
00009e2c  488dbc2488000000   lea     rdi, [rsp+0x88 {var_90}]
00009e34  e843ffffff         call    car25519
{ Does not return }

00009e39                                                                             e8 3e ff ff ff e8 39                           .>....9
00009e40  ff ff ff 41 b9 02 00 00 00 48 8b 84 24 88 00 00 00 b9 01 00 00 00 48 2d ed ff 00 00 48 89 44 24  ...A.....H..$.........H-....H.D$
00009e60  08 48 8d 44 24 08 48 89 c6 4c 8b 00 48 8b 14 cf 48 ff c1 48 83 c0 08 4d 89 c2 48 81 ea ff ff 00  .H.D$.H..L..H...H..H...M..H.....
00009e80  00 41 81 e0 ff ff 00 00 49 c1 fa 10 4c 89 40 f8 41 83 e2 01 4c 29 d2 48 89 10 48 83 f9 0f 75 c9  .A......I...L.@.A...L).H..H...u.
00009ea0  48 8b 44 24 78 48 8b 8c 24 00 01 00 00 48 8d 91 01 80 ff ff 48 89 c1 25 ff ff 00 00 48 c1 f9 10  H.D$xH..$....H......H..%....H...
00009ec0  48 89 44 24 78 83 e1 01 48 29 ca 48 89 94 24 80 00 00 00 48 c1 fa 10 f7 d2 83 e2 01 e8 f3 fe ff  H.D$x...H).H..$....H............
00009ee0  ff 41 ff c9 74 0b 41 b9 01 00 00 00 e9 58 ff ff ff 31 c0 48 8b 14 87 4c 89 de 41 88 14 03 88 74  .A..t.A......X...1.H...L..A....t
00009f00  06 01 48 83 c0 02 48 83 f8 20 75 e7 48 8b 84 24 08 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8  ..H...H.. u.H..$....dH+.%(...t..
00009f20  ec b2 ff ff 48 81 c4 18 01 00 00 e9 d9 c7 ff ff                                                  ....H...........

00009f30    void unpack25519(void* arg1, void* arg2) __noreturn

00009f30  31c0               xor     eax, eax  {0x0}

00009f32  0fb6540601         movzx   edx, byte [rsi+rax+0x1]
00009f37  0fb60c06           movzx   ecx, byte [rsi+rax]
00009f3b  48c1e208           shl     rdx, 0x8
00009f3f  4801ca             add     rdx, rcx
00009f42  48891487           mov     qword [rdi+rax*4], rdx
00009f46  4883c002           add     rax, 0x2
00009f4a  4883f820           cmp     rax, 0x20
00009f4e  75e2               jne     0x9f32

00009f50  48816778ff7f0000   and     qword [rdi+0x78], 0x7fff
00009f58  e9acc7ffff         jmp     __x86_return_thunk
{ Does not return }


00009f5d    void A(int64_t* arg1, int64_t arg2, int64_t* arg3) __noreturn

00009f5d  31c0               xor     eax, eax  {0x0}

00009f5f  488b0c02           mov     rcx, qword [rdx+rax]
00009f63  48030c06           add     rcx, qword [rsi+rax]
00009f67  48890c07           mov     qword [rdi+rax], rcx
00009f6b  4883c008           add     rax, 0x8
00009f6f  483d80000000       cmp     rax, 0x80
00009f75  75e8               jne     0x9f5f

00009f77  e98dc7ffff         jmp     __x86_return_thunk
{ Does not return }


00009f7c    void Z(int64_t* arg1, int64_t* arg2, void* arg3) __noreturn

00009f7c  31c0               xor     eax, eax  {0x0}

00009f7e  488b0c06           mov     rcx, qword [rsi+rax]
00009f82  482b0c02           sub     rcx, qword [rdx+rax]
00009f86  48890c07           mov     qword [rdi+rax], rcx
00009f8a  4883c008           add     rax, 0x8
00009f8e  483d80000000       cmp     rax, 0x80
00009f94  75e8               jne     0x9f7e

00009f96  e96ec7ffff         jmp     __x86_return_thunk
{ Does not return }


00009f9b    void M(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00009f9b  55                 push    rbp {var_8}
00009f9c  4989fb             mov     r11, rdi
00009f9f  b93e000000         mov     ecx, 0x3e
00009fa4  4989f1             mov     r9, rsi
00009fa7  53                 push    rbx {var_10}
00009fa8  4989d2             mov     r10, rdx
00009fab  4881ec08010000     sub     rsp, 0x108
00009fb2  64488b0425280000…  mov     rax, qword [fs:0x28]
00009fbb  48898424f8000000   mov     qword [rsp+0xf8 {var_20}], rax
00009fc3  31c0               xor     eax, eax  {0x0}
00009fc5  4889e7             mov     rdi, rsp {s}
00009fc8  4889e6             mov     rsi, rsp {s}
00009fcb  4989e0             mov     r8, rsp {s}
00009fce  f3ab               rep stosd dword [rdi] {var_210} {s}  {0x0}
00009fd0  4889e0             mov     rax, rsp {s}
00009fd3  31ff               xor     edi, edi  {0x0}

00009fd5  498b1cf9           mov     rbx, qword [r9+rdi*8]
00009fd9  4c89c1             mov     rcx, r8
00009fdc  31d2               xor     edx, edx  {0x0}

00009fde  498b2cd2           mov     rbp, qword [r10+rdx*8]
00009fe2  48ffc2             inc     rdx
00009fe5  480fafeb           imul    rbp, rbx
00009fe9  480129             add     qword [rcx], rbp
00009fec  4883c108           add     rcx, 0x8
00009ff0  4883fa10           cmp     rdx, 0x10
00009ff4  75e8               jne     0x9fde

00009ff6  48ffc7             inc     rdi
00009ff9  4983c008           add     r8, 0x8
00009ffd  4883ff10           cmp     rdi, 0x10
0000a001  75d2               jne     0x9fd5

0000a003  488d5678           lea     rdx, [rsi+0x78 {var_a0}]

0000a007  486b888000000026   imul    rcx, qword [rax+0x80], 0x26
0000a00f  480108             add     qword [rax], rcx
0000a012  4883c008           add     rax, 0x8
0000a016  4839c2             cmp     rdx {var_a0}, rax
0000a019  75ec               jne     0xa007

0000a01b  b920000000         mov     ecx, 0x20
0000a020  4c89df             mov     rdi, r11
0000a023  f3a5               rep movsd dword [rdi], [rsi] {var_198} {s}  {0x0}
0000a025  4c89df             mov     rdi, r11
0000a028  e84ffdffff         call    car25519
{ Does not return }

0000a02d                                         48 8b 84 24 f8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05               H..$....dH+.%(...t.
0000a040  e8 cb b1 ff ff 48 81 c4 08 01 00 00 5b 5d e9 29 fd ff ff                                         .....H......[].)...

0000a053    void S(int64_t arg1, int64_t arg2) __noreturn

0000a053  4889f2             mov     rdx, rsi
0000a056  e940ffffff         jmp     M
{ Does not return }


0000a05b    void inv25519(int64_t arg1, int64_t arg2) __noreturn

0000a05b  4155               push    r13 {var_8}
0000a05d  b920000000         mov     ecx, 0x20
0000a062  4989fd             mov     r13, rdi
0000a065  4154               push    r12 {var_10}
0000a067  55                 push    rbp {var_18}
0000a068  53                 push    rbx {var_20}
0000a069  bbfb000000         mov     ebx, 0xfb
0000a06e  4881ec98000000     sub     rsp, 0x98
0000a075  644c8b2425280000…  mov     r12, qword [fs:0x28]
0000a07e  4c89a42488000000   mov     qword [rsp+0x88 {var_30}], r12
0000a086  4989f4             mov     r12, rsi
0000a089  488d7c2408         lea     rdi, [rsp+0x8 {var_b0}]
0000a08e  488d6c2408         lea     rbp, [rsp+0x8 {var_b0}]
0000a093  4c89e6             mov     rsi, r12
0000a096  f3a5               rep movsd dword [rdi], [rsi] {var_130} {var_b0}  {0x0}
0000a098  4889ee             mov     rsi, rbp {var_b0}
0000a09b  4889ef             mov     rdi, rbp {var_b0}
0000a09e  e8b0ffffff         call    S
{ Does not return }

0000a0a3           f7 c3 fd ff ff ff 8d 5b ff 74 ea 4c 89 e2 48 89 ee 48 89 ef e8 df fe ff ff 83 fb fd 75     .......[.t.L..H..H..........u
0000a0c0  d7 b9 20 00 00 00 4c 89 ef 48 89 ee f3 a5 48 8b 84 24 88 00 00 00 64 48 2b 04 25 28 00 00 00 74  .. ...L..H....H..$....dH+.%(...t
0000a0e0  05 e8 2a b1 ff ff 48 81 c4 98 00 00 00 5b 5d 41 5c 41 5d e9 11 c6 ff ff                          ..*...H......[]A\A].....

0000a0f8    void add(void* arg1) __noreturn

0000a0f8  4157               push    r15 {var_8}
0000a0fa  488d8780000000     lea     rax, [rdi+0x80]
0000a101  4889fa             mov     rdx, rdi
0000a104  4156               push    r14 {var_10}
0000a106  4155               push    r13 {var_18}
0000a108  4154               push    r12 {var_20}
0000a10a  55                 push    rbp {var_28}
0000a10b  4889fd             mov     rbp, rdi
0000a10e  53                 push    rbx {var_30}
0000a10f  4881ecc8040000     sub     rsp, 0x4c8
0000a116  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0000a11f  48899c24b8040000   mov     qword [rsp+0x4b8 {var_40}], rbx
0000a127  4889f3             mov     rbx, rsi
0000a12a  4c8d6c2438         lea     r13, [rsp+0x38 {var_4c0}]
0000a12f  4889c6             mov     rsi, rax
0000a132  4c8db42438020000   lea     r14, [rsp+0x238 {var_2c0}]
0000a13a  4c89ef             mov     rdi, r13 {var_4c0}
0000a13d  4889442408         mov     qword [rsp+0x8 {var_4f0}], rax
0000a142  4c8da424b8000000   lea     r12, [rsp+0xb8 {var_440}]
0000a14a  e82dfeffff         call    Z
{ Does not return }

0000a14f                                               4c 89 f7 4c 8d bb 80 00 00 00 48 89 da 4c 89 fe e8                 L..L......H..L...
0000a160  18 fe ff ff 4c 89 f2 4c 89 ee 4c 89 ef e8 29 fe ff ff 48 8b 54 24 08 48 89 ee 4c 89 e7 e8 db fd  ....L..L..L...)...H.T$.H..L.....
0000a180  ff ff 4c 89 fa 48 89 de 4c 89 f7 e8 cd fd ff ff 4c 89 f2 4c 89 e6 4c 89 e7 e8 fd fd ff ff 4c 8d  ..L..H..L.......L..L..L.......L.
0000a1a0  b4 24 38 01 00 00 48 8d 85 80 01 00 00 48 89 c6 48 8d 93 80 01 00 00 4c 89 f7 48 89 44 24 20 e8  .$8...H......H..H......L..H.D$ .
0000a1c0  d7 fd ff ff 4c 89 f6 4c 89 f7 48 8d 15 ef d8 02 00 e8 c5 fd ff ff 4c 8d bc 24 b8 01 00 00 48 8d  ....L..L..H...........L..$....H.
0000a1e0  85 00 01 00 00 48 89 c6 48 8d 93 00 01 00 00 4c 89 ff 48 89 44 24 28 e8 9f fd ff ff 4c 89 fa 4c  .....H..H......L..H.D$(.....L..L
0000a200  89 fe 4c 89 ff e8 53 fd ff ff 48 8d 84 24 b8 02 00 00 4c 89 ea 4c 89 e6 48 89 c7 48 8d 9c 24 38  ..L...S...H..$....L..L..H..H..$8
0000a220  03 00 00 48 89 44 24 10 e8 4f fd ff ff 4c 89 f2 4c 89 fe 48 89 df e8 41 fd ff ff 48 8d 84 24 b8  ...H.D$..O...L..L..H...A...H..$.
0000a240  03 00 00 4c 8d b4 24 38 04 00 00 48 89 c7 48 89 44 24 18 e8 05 fd ff ff 4c 89 ea 4c 89 e6 4c 89  ...L..$8...H..H.D$......L..L..L.
0000a260  f7 e8 f7 fc ff ff 48 8b 74 24 10 48 89 da 48 89 ef e8 25 fd ff ff 48 8b 54 24 18 48 8b 7c 24 08  ......H.t$.H..H...%...H.T$.H.|$.
0000a280  4c 89 f6 e8 13 fd ff ff 48 8b 74 24 18 48 8b 7c 24 28 48 89 da e8 01 fd ff ff 48 8b 74 24 10 48  L.......H.t$.H.|$(H.......H.t$.H
0000a2a0  8b 7c 24 20 4c 89 f2 e8 ef fc ff ff 48 8b 84 24 b8 04 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8  .|$ L.......H..$....dH+.%(...t..
0000a2c0  4c af ff ff 48 81 c4 c8 04 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 2f c4 ff ff                    L...H......[]A\A]A^A_./...

0000a2da    void modL(char* arg1, void* arg2) __noreturn

0000a2da  4156               push    r14 {__saved_r14}
0000a2dc  4889f0             mov     rax, rsi
0000a2df  488d96f8010000     lea     rdx, [rsi+0x1f8]
0000a2e6  be1f000000         mov     esi, 0x1f
0000a2eb  4155               push    r13 {__saved_r13}
0000a2ed  4154               push    r12 {__saved_r12}
0000a2ef  4c8d25c2d40200     lea     r12, [rel data_377b8]
0000a2f6  55                 push    rbp {__saved_rbp}
0000a2f7  bd15000000         mov     ebp, 0x15
0000a2fc  53                 push    rbx {var_28}

0000a2fd  488d4e14           lea     rcx, [rsi+0x14]
0000a301  41bd01000000       mov     r13d, 0x1
0000a307  4989d3             mov     r11, rdx
0000a30a  4839f1             cmp     rcx, rsi
0000a30d  4c0f4ded           cmovge  r13, rbp  {0x15}
0000a311  0f9cc3             setl    bl
0000a314  4531d2             xor     r10d, r10d  {0x0}
0000a317  4531c0             xor     r8d, r8d  {0x0}

0000a31a  49ffc2             inc     r10
0000a31d  4d8bb300ffffff     mov     r14, qword [r11-0x100]
0000a324  4983c308           add     r11, 0x8
0000a328  4d39ea             cmp     r10, r13
0000a32b  7432               je      0xa35f

0000a32d  4c8b0a             mov     r9, qword [rdx]
0000a330  4f0faf0cd4         imul    r9, qword [r12+r10*8]
0000a335  4c89c1             mov     rcx, r8
0000a338  49c1e104           shl     r9, 0x4
0000a33c  4c29c9             sub     rcx, r9
0000a33f  4c01f1             add     rcx, r14
0000a342  4c8d8980000000     lea     r9, [rcx+0x80]
0000a349  4d89c8             mov     r8, r9
0000a34c  4530c9             xor     r9b, r9b  {0x0}
0000a34f  4c29c9             sub     rcx, r9
0000a352  49c1f808           sar     r8, 0x8
0000a356  49898bf8feffff     mov     qword [r11-0x108], rcx
0000a35d  ebbb               jmp     0xa31a

0000a35f  80fb01             cmp     bl, 0x1
0000a362  4819c9             sbb     rcx, rcx
0000a365  4d01f0             add     r8, r14
0000a368  48ffce             dec     rsi
0000a36b  4883ea08           sub     rdx, 0x8
0000a36f  81e1a0000000       and     ecx, 0xa0
0000a375  4c89840a08ffffff   mov     qword [rdx+rcx-0xf8], r8
0000a37d  31c9               xor     ecx, ecx  {0x0}
0000a37f  48894a08           mov     qword [rdx+0x8], rcx  {0x0}
0000a383  4883feff           cmp     rsi, 0xffffffffffffffff
0000a387  0f8570ffffff       jne     0xa2fd

0000a38d  31d2               xor     edx, edx  {0x0}
0000a38f  31c9               xor     ecx, ecx  {0x0}
0000a391  4c8d0d28d40200     lea     r9, [rel L]

0000a398  488bb0f8000000     mov     rsi, qword [rax+0xf8]
0000a39f  48030cd0           add     rcx, qword [rax+rdx*8]
0000a3a3  48c1fe04           sar     rsi, 0x4
0000a3a7  490faf34d1         imul    rsi, qword [r9+rdx*8]
0000a3ac  4829f1             sub     rcx, rsi
0000a3af  4989c8             mov     r8, rcx
0000a3b2  48c1f908           sar     rcx, 0x8
0000a3b6  4181e0ff000000     and     r8d, 0xff
0000a3bd  4c8904d0           mov     qword [rax+rdx*8], r8
0000a3c1  48ffc2             inc     rdx
0000a3c4  4883fa20           cmp     rdx, 0x20
0000a3c8  75ce               jne     0xa398

0000a3ca  31d2               xor     edx, edx  {0x0}

0000a3cc  498b34d1           mov     rsi, qword [r9+rdx*8]
0000a3d0  480faff1           imul    rsi, rcx
0000a3d4  482934d0           sub     qword [rax+rdx*8], rsi
0000a3d8  48ffc2             inc     rdx
0000a3db  4883fa20           cmp     rdx, 0x20
0000a3df  75eb               jne     0xa3cc

0000a3e1  31d2               xor     edx, edx  {0x0}

0000a3e3  488b0cd0           mov     rcx, qword [rax+rdx*8]
0000a3e7  4889ce             mov     rsi, rcx
0000a3ea  48c1fe08           sar     rsi, 0x8
0000a3ee  480174d008         add     qword [rax+rdx*8+0x8], rsi
0000a3f3  880c17             mov     byte [rdi+rdx], cl
0000a3f6  48ffc2             inc     rdx
0000a3f9  4883fa20           cmp     rdx, 0x20
0000a3fd  75e4               jne     0xa3e3

0000a3ff  5b                 pop     rbx {var_28}
0000a400  5d                 pop     rbp {__saved_rbp}
0000a401  415c               pop     r12 {__saved_r12}
0000a403  415d               pop     r13 {__saved_r13}
0000a405  415e               pop     r14 {__saved_r14}
0000a407  e9fdc2ffff         jmp     __x86_return_thunk
{ Does not return }


0000a40c    void reduce(char* arg1) __noreturn

0000a40c  4881ec18020000     sub     rsp, 0x218
0000a413  4889fa             mov     rdx, rdi
0000a416  64488b0425280000…  mov     rax, qword [fs:0x28]
0000a41f  4889842408020000   mov     qword [rsp+0x208 {var_10}], rax
0000a427  31c0               xor     eax, eax  {0x0}

0000a429  0fb60c02           movzx   ecx, byte [rdx+rax]
0000a42d  488d742408         lea     rsi, [rsp+0x8 {var_210}]
0000a432  48890cc6           mov     qword [rsi+rax*8], rcx {var_210}
0000a436  48ffc0             inc     rax
0000a439  4883f840           cmp     rax, 0x40
0000a43d  75ea               jne     0xa429

0000a43f  31c0               xor     eax, eax  {0x0}
0000a441  b910000000         mov     ecx, 0x10
0000a446  4889d7             mov     rdi, rdx
0000a449  f3ab               rep stosd dword [rdi]  {0x0}
0000a44b  4889d7             mov     rdi, rdx
0000a44e  e887feffff         call    modL
{ Does not return }

0000a453                                                           48 8b 84 24 08 02 00 00 64 48 2b 04 25                     H..$....dH+.%
0000a460  28 00 00 00 74 05 e8 a5 ad ff ff 48 81 c4 18 02 00 00 e9 92 c2 ff ff                             (...t......H...........

0000a477    void pack(int64_t arg1, int64_t arg2) __noreturn

0000a477  4155               push    r13 {var_8}
0000a479  4154               push    r12 {var_10}
0000a47b  55                 push    rbp {var_18}
0000a47c  4889fd             mov     rbp, rdi
0000a47f  53                 push    rbx {var_20}
0000a480  4881ecb8010000     sub     rsp, 0x1b8
0000a487  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0000a490  48899c24a8010000   mov     qword [rsp+0x1a8 {var_30}], rbx
0000a498  4889f3             mov     rbx, rsi
0000a49b  4c8da42408010000   lea     r12, [rsp+0x108 {var_d0}]
0000a4a3  4881c600010000     add     rsi, 0x100
0000a4aa  4c8d6c2408         lea     r13, [rsp+0x8 {var_1d0}]
0000a4af  4c89e7             mov     rdi, r12 {var_d0}
0000a4b2  e8a4fbffff         call    inv25519
{ Does not return }

0000a4b7                                                                       4c 89 e2 4c 89 ef 48 89 de                         L..L..H..
0000a4c0  e8 d6 fa ff ff 48 8d b3 80 00 00 00 4c 89 e2 48 8d 9c 24 88 00 00 00 48 89 df e8 bc fa ff ff 48  .....H......L..H..$....H.......H
0000a4e0  89 de 48 89 ef e8 18 f9 ff ff 48 8d bc 24 88 01 00 00 4c 89 ee e8 08 f9 ff ff 8a 84 24 88 01 00  ..H.......H..$....L.........$...
0000a500  00 c1 e0 07 30 45 1f 48 8b 84 24 a8 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 f1 ac ff ff 48  ....0E.H..$....dH+.%(...t......H
0000a520  81 c4 b8 01 00 00 5b 5d 41 5c 41 5d e9 d8 c1 ff ff                                               ......[]A\A].....

0000a531    void neq25519() __noreturn

0000a531  4154               push    r12 {var_8}
0000a533  55                 push    rbp {var_10}
0000a534  53                 push    rbx {var_18}
0000a535  4883ec50           sub     rsp, 0x50
0000a539  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0000a542  48895c2448         mov     qword [rsp+0x48 {var_20}], rbx
0000a547  4889f3             mov     rbx, rsi
0000a54a  4c8d642408         lea     r12, [rsp+0x8 {var_60}]
0000a54f  4889fe             mov     rsi, rdi
0000a552  488d6c2428         lea     rbp, [rsp+0x28 {var_40}]
0000a557  4c89e7             mov     rdi, r12 {var_60}
0000a55a  e8a3f8ffff         call    pack25519
{ Does not return }

0000a55f                                                                                               48                                 H
0000a560  89 ef 48 89 de e8 98 f8 ff ff                                                                    ..H.......

0000a56a    void sub_a56a(char* arg1 @ rbp, char* arg2 @ r12, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) __noreturn

0000a56a  31c0               xor     eax, eax  {0x0}
0000a56c  31d2               xor     edx, edx  {0x0}

0000a56e  418a0c14           mov     cl, byte [r12+rdx]
0000a572  324c1500           xor     cl, byte [rbp+rdx]
0000a576  48ffc2             inc     rdx
0000a579  0fb6c9             movzx   ecx, cl
0000a57c  4809c8             or      rax, rcx
0000a57f  4883fa20           cmp     rdx, 0x20
0000a583  75e9               jne     0xa56e

0000a585  48ffc8             dec     rax
0000a588  48c1e808           shr     rax, 0x8
0000a58c  83e001             and     eax, 0x1
0000a58f  ffc8               dec     eax
0000a591  488b542448         mov     rdx, qword [rsp+0x48 {arg3}]
0000a596  64482b1425280000…  sub     rdx, qword [fs:0x28]
0000a59f  7405               je      0xa5a6

0000a5a1  e86aacffff         call    __stack_chk_fail
{ Does not return }

0000a5a6  4883c450           add     rsp, 0x50
0000a5aa  5b                 pop     rbx {arg4}
0000a5ab  5d                 pop     rbp {arg5}
0000a5ac  415c               pop     r12 {arg6}
0000a5ae  e956c1ffff         jmp     __x86_return_thunk
{ Does not return }


0000a5b3    void scalarmult(int64_t* arg1) __noreturn

0000a5b3  4156               push    r14 {var_8}
0000a5b5  488d0d04d60200     lea     rcx, [rel gf0]
0000a5bc  4989d6             mov     r14, rdx
0000a5bf  4155               push    r13 {var_10}
0000a5c1  4154               push    r12 {var_18}
0000a5c3  4989f4             mov     r12, rsi
0000a5c6  4889ce             mov     rsi, rcx  {gf0}
0000a5c9  55                 push    rbp {var_20}
0000a5ca  bdff000000         mov     ebp, 0xff
0000a5cf  53                 push    rbx {var_28}
0000a5d0  4889fb             mov     rbx, rdi
0000a5d3  e889f7ffff         call    set25519
{ Does not return }

0000a5d8                                                                          48 8d 35 61 d5 02 00 48                          H.5a...H
0000a5e0  8d bf 80 00 00 00 e8 76 f7 ff ff 48 8d bb 00 01 00 00 e8 6a f7 ff ff 48 8d bb 80 01 00 00 48 89  .......v...H.......j...H......H.
0000a600  ce e8 5b f7 ff ff 89 e8 c1 f8 03 48 98 41 0f b6 14 06 89 e8 83 e0 07 0f a3 c2 41 0f 92 c5 45 31  ..[........H.A............A...E1
0000a620  c9 45 0f b6 ed 4b 8d 34 21 4a 8d 3c 0b 44 89 ea 49 83 e9 80 e8 9b f7 ff ff 49 81 f9 00 02 00 00  .E...K.4!J.<.D..I........I......
0000a640  75 e3 48 89 de 4c 89 e7 e8 ab fa ff ff 48 89 de 48 89 df e8 a0 fa ff ff 45 31 c9 4b 8d 34 0c 4a  u.H..L.......H..H.......E1.K.4.J
0000a660  8d 3c 0b 44 89 ea 49 83 e9 80 e8 65 f7 ff ff 49 81 f9 00 02 00 00 75 e3 83 ed 01 73 89 5b 5d 41  .<.D..I....e...I......u....s.[]A
0000a680  5c 41 5d 41 5e e9 7f c0 ff ff                                                                    \A]A^.....

0000a68a    void scalarbase() __noreturn

0000a68a  4154               push    r12 {var_8}
0000a68c  488d0dadd30200     lea     rcx, [rel X]
0000a693  4c8d0526d30200     lea     r8, [rel Y]
0000a69a  55                 push    rbp {var_10}
0000a69b  53                 push    rbx {var_18}
0000a69c  4889fb             mov     rbx, rdi
0000a69f  4881ec10020000     sub     rsp, 0x210
0000a6a6  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0000a6af  4889ac2408020000   mov     qword [rsp+0x208 {var_20}], rbp
0000a6b7  4889f5             mov     rbp, rsi
0000a6ba  4c8d642408         lea     r12, [rsp+0x8 {var_220}]
0000a6bf  4889ce             mov     rsi, rcx  {X}
0000a6c2  4c89e7             mov     rdi, r12 {var_220}
0000a6c5  e897f6ffff         call    set25519
{ Does not return }

0000a6ca                                4c 89 c6 48 8d bc 24 88 00 00 00 e8 87 f6 ff ff 48 8d bc 24 08 01            L..H..$.........H..$..
0000a6e0  00 00 48 8d 35 57 d4 02 00 e8 73 f6 ff ff 48 8d bc 24 88 01 00 00 4c 89 c2 48 89 ce e8 9a f8 ff  ..H.5W....s...H..$....L..H......
0000a700  ff 4c 89 e6 48 89 df 48 89 ea e8 a4 fe ff ff 48 8b 84 24 08 02 00 00 64 48 2b 04 25 28 00 00 00  .L..H..H.......H..$....dH+.%(...
0000a720  74 05 e8 e9 aa ff ff 48 81 c4 10 02 00 00 5b 5d 41 5c e9 d2 bf ff ff                             t......H......[]A\.....

0000a737    void dropbear_curve25519_scalarmult(int64_t arg1, int128_t* arg2, void* arg3) __noreturn

0000a737  4157               push    r15 {var_8}
0000a739  4889f0             mov     rax, rsi
0000a73c  4c8d3dfdd40200     lea     r15, [rel _121665]
0000a743  4156               push    r14 {var_10}
0000a745  4155               push    r13 {var_18}
0000a747  4154               push    r12 {var_20}
0000a749  55                 push    rbp {var_28}
0000a74a  53                 push    rbx {var_30}
0000a74b  bbfe000000         mov     ebx, 0xfe
0000a750  4881ece8050000     sub     rsp, 0x5e8
0000a757  0f1000             movups  xmm0, xmmword [rax]
0000a75a  48897c2428         mov     qword [rsp+0x28 {var_5f0}], rdi
0000a75f  4c8dac2438030000   lea     r13, [rsp+0x338 {var_2e0}]
0000a767  488dac2438010000   lea     rbp, [rsp+0x138 {var_4e0}]
0000a76f  4c89ef             mov     rdi, r13 {var_2e0}
0000a772  64488b3425280000…  mov     rsi, qword [fs:0x28]
0000a77b  4889b424d8050000   mov     qword [rsp+0x5d8 {var_40}], rsi
0000a783  4889d6             mov     rsi, rdx
0000a786  0f118424b8050000   movups  xmmword [rsp+0x5b8 {var_60}], xmm0
0000a78e  0f10400f           movups  xmm0, xmmword [rax+0xf]
0000a792  8a401f             mov     al, byte [rax+0x1f]
0000a795  80a424b8050000f8   and     byte [rsp+0x5b8 {var_60}], 0xf8
0000a79d  83e03f             and     eax, 0x3f
0000a7a0  0f118424c7050000   movups  xmmword [rsp+0x5c7 {var_60+0xf}], xmm0
0000a7a8  83c840             or      eax, 0x40
0000a7ab  888424d7050000     mov     byte [rsp+0x5d7 {var_41}], al
0000a7b2  e879f7ffff         call    unpack25519
{ Does not return }


0000a7b7    void sub_a7b7(int64_t arg1 @ rbx, int64_t arg2 @ rbp, int64_t arg3 @ r13) __noreturn

0000a7b7  31c0               xor     eax, eax  {0x0}
0000a7b9  488d542440         lea     rdx, [rsp+0x40 {s}]
0000a7be  4c89ee             mov     rsi, r13
0000a7c1  488dbc24b8000000   lea     rdi, [rsp+0xb8 {arg_b8}]
0000a7c9  b920000000         mov     ecx, 0x20
0000a7ce  48c78424b8010000…  mov     qword [rsp+0x1b8 {arg_1b8}], 0x1
0000a7da  f3a5               rep movsd dword [rdi], [rsi] {arg_38} {arg_b8}  {0x0}
0000a7dc  b920000000         mov     ecx, 0x20
0000a7e1  4889ef             mov     rdi, rbp
0000a7e4  48c7442438010000…  mov     qword [rsp+0x38 {arg_38}], 0x1
0000a7ed  f3ab               rep stosd dword [rdi]  {0x0}
0000a7ef  4889d7             mov     rdi, rdx {s}
0000a7f2  b91e000000         mov     ecx, 0x1e
0000a7f7  488d9424c0010000   lea     rdx, [rsp+0x1c0 {s_1}]
0000a7ff  f3ab               rep stosd dword [rdi] {var_38} {s}  {0x0}
0000a801  b91e000000         mov     ecx, 0x1e
0000a806  4889d7             mov     rdi, rdx {s_1}
0000a809  f3ab               rep stosd dword [rdi] {arg_148} {s_1}  {0x0}
0000a80b  488d8424b8000000   lea     rax, [rsp+0xb8 {arg_b8}]
0000a813  4889442418         mov     qword [rsp+0x18 {arg_18}], rax {arg_b8}
0000a818  4889da             mov     rdx, rbx
0000a81b  89d9               mov     ecx, ebx
0000a81d  488d442438         lea     rax, [rsp+0x38 {arg_38}]
0000a822  488b742418         mov     rsi, qword [rsp+0x18 {arg_18}]
0000a827  48c1fa03           sar     rdx, 0x3
0000a82b  83e107             and     ecx, 0x7
0000a82e  4889c7             mov     rdi, rax {arg_38}
0000a831  4889442408         mov     qword [rsp+0x8 {arg_8}], rax {arg_38}
0000a836  0fb69414b8050000   movzx   edx, byte [rsp+rdx+0x5b8 {arg_5b8}]
0000a83e  4c8da42438020000   lea     r12, [rsp+0x238 {arg_238}]
0000a846  4c8db424b8020000   lea     r14, [rsp+0x2b8 {arg_2b8}]
0000a84e  d3fa               sar     edx, cl
0000a850  83e201             and     edx, 0x1
0000a853  89542424           mov     dword [rsp+0x24 {arg_24}], edx
0000a857  e878f5ffff         call    sel25519
{ Does not return }

0000a85c                                                                                      48 8d 84 24                              H..$
0000a860  b8 01 00 00 8b 54 24 24 48 89 ef 48 89 c6 48 89 44 24 10 e8 5c f5 ff ff 48 8b 74 24 08 48 89 ea  .....T$$H..H..H.D$..\...H.t$.H..
0000a880  4c 89 e7 e8 d5 f6 ff ff 48 8b 74 24 08 48 89 f7 e8 e7 f6 ff ff 48 8b 54 24 10 48 8b 74 24 18 48  L.......H.t$.H.......H.T$.H.t$.H
0000a8a0  89 ef e8 b6 f6 ff ff 48 8b 74 24 18 48 8b 54 24 10 48 89 f7 e8 c3 f6 ff ff 48 8b 7c 24 10 4c 89  .......H.t$.H.T$.H.......H.|$.L.
0000a8c0  e6 e8 8d f7 ff ff 48 8b 74 24 08 4c 89 f7 e8 80 f7 ff ff 48 8b 54 24 08 48 89 ee 48 89 d7 e8 b8  ......H.t$.L.......H.T$.H..H....
0000a8e0  f6 ff ff 48 8b 74 24 18 4c 89 e2 48 89 ef e8 a8 f6 ff ff 48 8b 74 24 08 48 89 ea 4c 89 e7 e8 5a  ...H.t$.L..H.......H.t$.H..L...Z
0000a900  f6 ff ff 48 8b 74 24 08 48 89 f7 e8 6c f6 ff ff 48 8b 74 24 08 48 8b 7c 24 18 e8 34 f7 ff ff 48  ...H.t$.H...l...H.t$.H.|$..4...H
0000a920  8b 74 24 10 4c 89 f2 48 89 ef e8 4d f6 ff ff 48 8b 7c 24 08 4c 89 fa 48 89 ee e8 5c f6 ff ff 48  .t$.L..H...M...H.|$.L..H...\...H
0000a940  8b 74 24 08 48 8b 54 24 10 48 89 f7 e8 0c f6 ff ff 48 8b 54 24 08 48 89 ee 48 89 ef e8 3a f6 ff  .t$.H.T$.H.......H.T$.H..H...:..
0000a960  ff 48 8b 74 24 10 48 8b 7c 24 08 4c 89 f2 e8 28 f6 ff ff 48 8b 74 24 18 48 8b 7c 24 10 4c 89 ea  .H.t$.H.|$.L...(...H.t$.H.|$.L..
0000a980  e8 16 f6 ff ff 48 8b 7c 24 18 4c 89 e6 e8 c1 f6 ff ff 8b 54 24 24 48 8b 74 24 18 48 8b 7c 24 08  .....H.|$.L........T$$H.t$.H.|$.
0000a9a0  e8 2f f4 ff ff 8b 54 24 24 48 8b 74 24 10 48 89 ef e8 1e f4 ff ff 48 83 eb 01 0f 83 58 fe ff ff  ./....T$$H.t$.H.......H.....X...
0000a9c0  48 8b 74 24 08 48 8d bc 24 b8 03 00 00 b9 20 00 00 00 48 8d 9c 24 b8 03 00 00 f3 a5 48 89 ee 48  H.t$.H..$..... ...H..$......H..H
0000a9e0  8d ac 24 38 04 00 00 48 8d bc 24 38 04 00 00 b9 20 00 00 00 f3 a5 48 8b 74 24 18 48 8d bc 24 b8  ..$8...H..$8.... .....H.t$.H..$.
0000aa00  04 00 00 b9 20 00 00 00 f3 a5 48 8b 74 24 10 48 8d bc 24 38 05 00 00 b9 20 00 00 00 f3 a5 48 89  .... .....H.t$.H..$8.... .....H.
0000aa20  ee 48 89 ef e8 32 f6 ff ff 48 89 de 48 89 df 48 89 ea e8 64 f5 ff ff 48 8b 7c 24 28 48 89 de e8  .H...2...H..H..H...d...H.|$(H...
0000aa40  be f3 ff ff 48 8b 84 24 d8 05 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 b4 a7 ff ff 48 81 c4 e8  ....H..$....dH+.%(...t......H...
0000aa60  05 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 97 bc ff ff                                            ...[]A\A]A^A_.....

0000aa72    void dropbear_ed25519_make_key(int64_t arg1, int64_t arg2) __noreturn

0000aa72  4154               push    r12 {var_8}
0000aa74  4989fc             mov     r12, rdi
0000aa77  55                 push    rbp {var_10}
0000aa78  53                 push    rbx {var_18}
0000aa79  4881ec50020000     sub     rsp, 0x250
0000aa80  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0000aa89  4889ac2448020000   mov     qword [rsp+0x248 {var_20}], rbp
0000aa91  4889f5             mov     rbp, rsi
0000aa94  488d5c2408         lea     rbx, [rsp+0x8 {var_260}]
0000aa99  be20000000         mov     esi, 0x20
0000aa9e  4889ef             mov     rdi, rbp
0000aaa1  e844d9ffff         call    genrandom
{ Does not return }

0000aaa6                    48 89 df e8 c0 5e 01 00 ba 20 00 00 00 48 89 ee 48 89 df e8 1b 62 01 00 48 8d        H....^... ...H..H....b..H.
0000aac0  ac 24 08 02 00 00 48 89 df 48 89 ee e8 27 61 01 00 8a 84 24 27 02 00 00 48 89 ee 48 89 df 80 a4  .$....H..H...'a....$'...H..H....
0000aae0  24 08 02 00 00 f8 83 e0 7f 83 c8 40 88 84 24 27 02 00 00 e8 92 fb ff ff 48 89 de 4c 89 e7 e8 74  $..........@..$'........H..L...t
0000ab00  f9 ff ff 48 8b 84 24 48 02 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 f5 a6 ff ff 48 81 c4 50 02  ...H..$H...dH+.%(...t......H..P.
0000ab20  00 00 5b 5d 41 5c e9 de bb ff ff                                                                 ..[]A\.....

0000ab2b    void dropbear_ed25519_sign() __noreturn

0000ab2b  4157               push    r15 {var_8}
0000ab2d  4156               push    r14 {var_10}
0000ab2f  4989f6             mov     r14, rsi
0000ab32  4155               push    r13 {var_18}
0000ab34  4d89c5             mov     r13, r8
0000ab37  4154               push    r12 {var_20}
0000ab39  4989cc             mov     r12, rcx
0000ab3c  55                 push    rbp {var_28}
0000ab3d  53                 push    rbx {var_30}
0000ab3e  4889d3             mov     rbx, rdx
0000ab41  4881ecb8050000     sub     rsp, 0x5b8
0000ab48  48897c2408         mov     qword [rsp+0x8 {var_5e0}], rdi
0000ab4d  488dac24e8020000   lea     rbp, [rsp+0x2e8 {var_300}]
0000ab55  4889ef             mov     rdi, rbp {var_300}
0000ab58  644c8b3c25280000…  mov     r15, qword [fs:0x28]
0000ab61  4c89bc24a8050000   mov     qword [rsp+0x5a8 {var_40}], r15
0000ab69  4d89cf             mov     r15, r9
0000ab6c  e8fd5d0100         call    sha512_init
{ Does not return }

0000ab71                                                     ba 20 00 00 00 4c 89 ee 48 89 ef e8 58 61 01                   . ...L..H...Xa.
0000ab80  00 4c 8d ac 24 e8 04 00 00 48 89 ef 4c 89 ee e8 64 60 01 00 8a 84 24 07 05 00 00 49 c7 04 24 40  .L..$....H..L...d`....$....I..$@
0000aba0  00 00 00 4c 8d a4 24 68 05 00 00 80 a4 24 e8 04 00 00 f8 83 e0 7f 83 c8 40 88 84 24 07 05 00 00  ...L..$h.....$..........@..$....
0000abc0  48 8d 44 24 18 48 89 c7 48 89 04 24 e8 9d 5d 01 00 48 8b 3c 24 ba 20 00 00 00 48 8d b4 24 08 05  H.D$.H..H..$..]..H.<$. ...H..$..
0000abe0  00 00 e8 f2 60 01 00 48 8b 74 24 08 48 8b 3c 24 4c 89 f2 e8 e1 60 01 00 48 8b 3c 24 4c 89 e6 e8  ....`..H.t$.H.<$L....`..H.<$L...
0000ac00  f4 5f 01 00 4c 89 e7 e8 00 f8 ff ff 48 89 ef 4c 89 e6 e8 73 fa ff ff 48 89 ee 48 89 df 48 8d ac  ._..L.......H..L...s...H..H..H..
0000ac20  24 28 05 00 00 e8 4d f8 ff ff 48 8b 3c 24 e8 3b 5d 01 00 48 8b 3c 24 ba 20 00 00 00 48 89 de e8  $(....M...H.<$.;]..H.<$. ...H...
0000ac40  95 60 01 00 48 8b 3c 24 ba 20 00 00 00 4c 89 fe e8 84 60 01 00 48 8b 74 24 08 48 8b 3c 24 4c 89  .`..H.<$. ...L....`..H.t$.H.<$L.
0000ac60  f2 e8 73 60 01 00 48 8b 3c 24 48 89 ee e8 86 5f 01 00 48 89 ef e8 92 f7 ff ff 48 8d b4 24 e8 00  ..s`..H.<$H...._..H.......H..$..
0000ac80  00 00 31 c0 b9 80 00 00 00 48 89 f7 f3 ab 31 c0 41 0f b6 14 04 48 89 14 c6 48 ff c0 48 83 f8 20  ..1......H....1.A....H...H..H.. 
0000aca0  75 ee 48 89 f7 31 c9 44 0f b6 54 0d 00 48 89 fa 31 c0 45 0f b6 4c 05 00 48 ff c0 4d 0f af ca 4c  u.H..1.D..T..H..1.E..L..H..M...L
0000acc0  01 0a 48 83 c2 08 48 83 f8 20 75 e6 48 ff c1 48 83 c7 08 48 83 f9 20 75 ce 48 8d 7b 20 e8 f8 f5  ..H...H.. u.H..H...H.. u.H.{ ...
0000ace0  ff ff 48 8b 84 24 a8 05 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 16 a5 ff ff 48 81 c4 b8 05 00  ..H..$....dH+.%(...t......H.....
0000ad00  00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 f9 b9 ff ff                                                  .[]A\A]A^A_.....

0000ad10    void dropbear_ed25519_verify(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

0000ad10  4157               push    r15 {__saved_r15}
0000ad12  4156               push    r14 {__saved_r14}
0000ad14  4155               push    r13 {__saved_r13}
0000ad16  4154               push    r12 {__saved_r12}
0000ad18  55                 push    rbp {__saved_rbp}
0000ad19  53                 push    rbx {__saved_rbx}
0000ad1a  4881ecf8070000     sub     rsp, 0x7f8
0000ad21  48897c2420         mov     qword [rsp+0x20 {var_808}], rdi
0000ad26  4889742428         mov     qword [rsp+0x28 {var_800}], rsi
0000ad2b  64488b0425280000…  mov     rax, qword [fs:0x28]
0000ad34  48898424e8070000   mov     qword [rsp+0x7e8 {var_40}], rax
0000ad3c  31c0               xor     eax, eax
0000ad3e  4883f93f           cmp     rcx, 0x3f
0000ad42  0f86fa010000       jbe     0xaf42

0000ad48  488d9c2488060000   lea     rbx, [rsp+0x688 {var_1a0}]
0000ad50  4989d6             mov     r14, rdx
0000ad53  488d35e6cd0200     lea     rsi, [rel gf1]
0000ad5a  4d89c7             mov     r15, r8
0000ad5d  4889df             mov     rdi, rbx {var_1a0}
0000ad60  4c8dac24b8000000   lea     r13, [rsp+0xb8 {var_770}]
0000ad68  488dac2438010000   lea     rbp, [rsp+0x138 {var_6f0}]
0000ad70  e8ecefffff         call    set25519
{ Does not return }

0000ad75                                                                 48 8d 84 24 08 06 00 00 4c 89 c6                       H..$....L..
0000ad80  4c 8d a4 24 38 02 00 00 48 89 c7 48 89 44 24 18 e8 9b f1 ff ff 48 8b 74 24 18 4c 89 ef e8 b1 f2  L..$8...H..H.D$......H.t$.L.....
0000ada0  ff ff 48 8d 15 97 cb 02 00 4c 89 ee 48 89 ef e8 e7 f1 ff ff 48 89 da 4c 89 ee 4c 89 ef e8 ba f1  ..H......L..H.......H..L..L.....
0000adc0  ff ff 48 89 ea 48 89 de 48 89 ef e8 8d f1 ff ff 48 8d 9c 24 b8 01 00 00 48 89 ee 48 89 df e8 70  ..H..H..H.......H..$....H..H...p
0000ade0  f2 ff ff 48 89 de 4c 89 e7 e8 65 f2 ff ff 48 8d 84 24 b8 02 00 00 48 89 da 4c 89 e6 48 89 c7 48  ...H..L...e...H..$....H..L..H..H
0000ae00  89 44 24 10 bb fa 00 00 00 4c 8d a4 24 88 03 00 00 e8 85 f1 ff ff 48 8d 44 24 38 48 8b 74 24 10  .D$......L..$.........H.D$8H.t$.
0000ae20  4c 89 ea 48 89 c7 48 89 04 24 e8 6c f1 ff ff 48 8b 34 24 48 89 ea 48 89 f7 e8 5d f1 ff ff 48 8b  L..H..H..$.l...H.4$H..H...]...H.
0000ae40  34 24 b9 20 00 00 00 48 8d bc 24 88 03 00 00 f3 a5 4c 89 e6 4c 89 e7 e8 f7 f1 ff ff 83 fb 01 74  4$. ...H..$......L..L..........t
0000ae60  16 48 8b 14 24 4c 89 e6 4c 89 e7 e8 2b f1 ff ff 83 eb 01 73 dc eb 04 31 db eb d6 48 8b 3c 24 b9  .H..$L..L...+......s...1...H.<$.
0000ae80  20 00 00 00 4c 89 e6 4c 89 ea f3 a5 48 8b 34 24 48 89 f7 e8 03 f1 ff ff 48 8b 34 24 48 89 ea 48   ...L..L....H.4$H.......H.4$H..H
0000aea0  89 f7 e8 f4 f0 ff ff 48 8b 34 24 48 89 ea 48 89 f7 e8 e5 f0 ff ff 48 8d 84 24 88 05 00 00 48 8b  .......H.4$H..H.......H..$....H.
0000aec0  34 24 48 89 ea 48 89 c7 48 89 44 24 08 e8 c9 f0 ff ff 48 8b 74 24 08 4c 89 e7 e8 74 f1 ff ff 4c  4$H..H..H.D$......H.t$.L...t...L
0000aee0  89 e6 4c 89 e7 48 89 ea e8 ae f0 ff ff 4c 89 ee 4c 89 e7 e8 39 f6 ff ff 85 c0 74 14 48 8b 74 24  ..L..H.......L..L...9.....t.H.t$
0000af00  08 48 8d 15 b8 c9 02 00 48 89 f7 e8 8b f0 ff ff 4c 8d a4 24 88 03 00 00 48 8b 74 24 08 4c 89 e7  .H......H.......L..$....H.t$.L..
0000af20  e8 2e f1 ff ff 4c 89 e6 4c 89 e7 48 89 ea e8 68 f0 ff ff 4c 89 ee 4c 89 e7 e8 f3 f5 ff ff 85 c0  .....L..L..H...h...L..L.........
0000af40  74 08                                                                                            t.

0000af42  83c8ff             or      eax, 0xffffffff  {0xffffffff}
0000af45  e910010000         jmp     0xb05a

0000af4a                                48 8b 74 24 08 48 8d 9c 24 a8 07 00 00 48 89 df e8 a3 ee ff ff               H.t$.H..$....H.......

0000af5f    void sub_af5f(void* arg1 @ r15, int64_t* arg2, int64_t arg3, char arg4) __noreturn

0000af5f  8a8424a8070000     mov     al, byte [rsp+0x7a8 {arg4}]
0000af66  418a571f           mov     dl, byte [r15+0x1f]
0000af6a  83e001             and     eax, 0x1
0000af6d  c0ea07             shr     dl, 0x7
0000af70  38c2               cmp     dl, al
0000af72  7514               jne     0xaf88

0000af74  488b542408         mov     rdx, qword [rsp+0x8 {arg2}]
0000af79  488d3540cc0200     lea     rsi, [rel gf0]
0000af80  4889d7             mov     rdi, rdx
0000af83  e8f4efffff         call    Z
{ Does not return }

0000af88  488b542418         mov     rdx, qword [rsp+0x18 {arg3}]
0000af8d  488b742408         mov     rsi, qword [rsp+0x8 {arg2}]
0000af92  488dbc2408070000   lea     rdi, [rsp+0x708 {arg_708}]
0000af9a  e8fcefffff         call    M
{ Does not return }

0000af9f                                                                                               48                                 H
0000afa0  8b 7c 24 10 e8 c5 59 01 00 48 8b 7c 24 10 ba 20 00 00 00 4c 89 f6 e8 1e 5d 01 00 48 8b 7c 24 10  .|$...Y..H.|$.. ...L....]..H.|$.
0000afc0  ba 20 00 00 00 4c 89 fe e8 0c 5d 01 00 48 8b 54 24 28 48 8b 74 24 20 48 8b 7c 24 10 e8 f8 5c 01  . ...L....]..H.T$(H.t$ H.|$...\.
0000afe0  00 48 8b 7c 24 10 48 89 de e8 0a 5c 01 00 48 89 df e8 16 f4 ff ff 48 8b 74 24 08 48 89 da 4c 89  .H.|$.H....\..H.......H.t$.H..L.
0000b000  e7 48 8d 9c 24 88 07 00 00 e8 a5 f5 ff ff 48 8b 7c 24 08 49 8d 76 20 e8 6e f6 ff ff 48 8b 74 24  .H..$.........H.|$.I.v .n...H.t$
0000b020  08 4c 89 e7 e8 cf f0 ff ff 4c 89 e6 48 89 df e8 43 f4 ff ff                                      .L.......L..H...C...

0000b034    void sub_b034(char* arg1 @ rbx, char* arg2 @ r14, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9) __noreturn

0000b034  31c0               xor     eax, eax  {0x0}
0000b036  31d2               xor     edx, edx  {0x0}

0000b038  418a0c16           mov     cl, byte [r14+rdx]
0000b03c  320c13             xor     cl, byte [rbx+rdx]
0000b03f  48ffc2             inc     rdx
0000b042  0fb6c9             movzx   ecx, cl
0000b045  4809c8             or      rax, rcx
0000b048  4883fa20           cmp     rdx, 0x20
0000b04c  75ea               jne     0xb038

0000b04e  48ffc8             dec     rax
0000b051  48c1e808           shr     rax, 0x8
0000b055  83e001             and     eax, 0x1
0000b058  ffc8               dec     eax
0000b05a  488b9424e8070000   mov     rdx, qword [rsp+0x7e8 {arg3}]
0000b062  64482b1425280000…  sub     rdx, qword [fs:0x28]
0000b06b  7405               je      0xb072


{ Continuation of function dropbear_ed25519_verify }

0000b05a  488b9424e8070000   mov     rdx, qword [rsp+0x7e8 {var_40}]
0000b062  64482b1425280000…  sub     rdx, qword [fs:0x28]
0000b06b  7405               je      0xb072

0000b06d  e89ea1ffff         call    __stack_chk_fail
{ Does not return }


{ Continuation of function sub_b034 }

0000b06d  e89ea1ffff         call    __stack_chk_fail
{ Does not return }


{ Continuation of function dropbear_ed25519_verify }

0000b072  4881c4f8070000     add     rsp, 0x7f8
0000b079  5b                 pop     rbx {__saved_rbx}
0000b07a  5d                 pop     rbp {__saved_rbp}
0000b07b  415c               pop     r12 {__saved_r12}
0000b07d  415d               pop     r13 {__saved_r13}
0000b07f  415e               pop     r14 {__saved_r14}
0000b081  415f               pop     r15 {__saved_r15}
0000b083  e981b6ffff         jmp     __x86_return_thunk
{ Does not return }


{ Continuation of function sub_b034 }

0000b072  4881c4f8070000     add     rsp, 0x7f8
0000b079  5b                 pop     rbx {arg4}
0000b07a  5d                 pop     rbp {arg5}
0000b07b  415c               pop     r12 {arg6}
0000b07d  415d               pop     r13 {arg7}
0000b07f  415e               pop     r14 {arg8}
0000b081  415f               pop     r15 {arg9}
0000b083  e981b6ffff         jmp     __x86_return_thunk
{ Does not return }


0000b088    void buf_get_ed25519_pub_key(void* arg1, int64_t arg2, int32_t arg3) __noreturn

0000b088  4156               push    r14 {var_8}
0000b08a  4155               push    r13 {var_10}
0000b08c  4154               push    r12 {var_18}
0000b08e  55                 push    rbp {var_20}
0000b08f  53                 push    rbx {var_28}
0000b090  4883ec10           sub     rsp, 0x10
0000b094  64488b0425280000…  mov     rax, qword [fs:0x28]
0000b09d  4889442408         mov     qword [rsp+0x8 {var_30}], rax
0000b0a2  31c0               xor     eax, eax  {0x0}
0000b0a4  4885f6             test    rsi, rsi
0000b0a7  7518               jne     0xb0c1

0000b0a9  ba32000000         mov     edx, 0x32
0000b0ae  488d356f950200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b0b5  488d3d8cba0200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b0bc  e8b8abffff         call    fail_assert
{ Does not return }

0000b0c1  4889f5             mov     rbp, rsi
0000b0c4  488d742404         lea     rsi, [rsp+0x4 {var_34}]
0000b0c9  4189d5             mov     r13d, edx
0000b0cc  4889fb             mov     rbx, rdi
0000b0cf  e8f5b8ffff         call    buf_getstring
{ Does not return }

0000b0d4                                                              8b 74 24 04 48 89 c7 49 89 c4 e8 28                      .t$.H..I...(
0000b0e0  c0 ff ff 4c 89 e7 41 89 c6 e8 72 9f ff ff 45 39 ee 74 05 83 c8 ff eb 50 48 89 df e8 96 b8 ff ff  ...L..A...r...E9.t.....PH.......
0000b100  83 f8 20 75 ee 8b 43 08 2b 43 0c 83 f8 1f 76 e3 be 20 00 00 00 48 89 ef e8 12 bc ff ff be 20 00  .. u..C.+C....v.. ...H........ .
0000b120  00 00 48 89 df e8 1a b8 ff ff be 20 00 00 00 48 89 df 0f 10 00 0f 11 45 20 0f 10 40 10 0f 11 45  ..H........ ...H.......E ..@...E
0000b140  30 e8 4f b7 ff ff                                                                                0.O...

0000b146    void sub_b146(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) __noreturn

0000b146  31c0               xor     eax, eax  {0x0}
0000b148  488b542408         mov     rdx, qword [rsp+0x8 {arg1}]
0000b14d  64482b1425280000…  sub     rdx, qword [fs:0x28]
0000b156  7405               je      0xb15d

0000b158  e8b3a0ffff         call    __stack_chk_fail
{ Does not return }

0000b15d  4883c410           add     rsp, 0x10
0000b161  5b                 pop     rbx {arg2}
0000b162  5d                 pop     rbp {arg3}
0000b163  415c               pop     r12 {arg4}
0000b165  415d               pop     r13 {arg5}
0000b167  415e               pop     r14 {arg6}
0000b169  e99bb5ffff         jmp     __x86_return_thunk
{ Does not return }


0000b16e    void buf_get_ed25519_priv_key(void* arg1, int64_t arg2) __noreturn

0000b16e  55                 push    rbp {var_8}
0000b16f  53                 push    rbx {var_10}
0000b170  51                 push    rcx {var_18}
0000b171  4885f6             test    rsi, rsi
0000b174  7518               jne     0xb18e

0000b176  ba53000000         mov     edx, 0x53
0000b17b  488d35a2940200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b182  488d3dbfb90200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b189  e8ebaaffff         call    fail_assert
{ Does not return }

0000b18e  4889fb             mov     rbx, rdi
0000b191  4889f5             mov     rbp, rsi
0000b194  be0f000000         mov     esi, 0xf
0000b199  e8f7b6ffff         call    buf_incrpos
{ Does not return }

0000b19e                                                                                            48 89                                H.
0000b1a0  df e8 f0 b7 ff ff 89 c2 83 c8 ff 83 fa 40 75 5f 8b 53 08 2b 53 0c 83 fa 3f 76 54 be 20 00 00 00  .............@u_.S.+S...?vT. ...
0000b1c0  48 89 df e8 7c b7 ff ff be 20 00 00 00 48 89 df 0f 10 00 0f 11 45 00 0f 10 40 10 0f 11 45 10 e8  H...|.... ...H.......E...@...E..
0000b1e0  b1 b6 ff ff be 20 00 00 00 48 89 df e8 53 b7 ff ff be 20 00 00 00 48 89 df 0f 10 00 0f 11 45 20  ..... ...H...S.... ...H.......E 
0000b200  0f 10 40 10 0f 11 45 30 e8 88 b6 ff ff 31 c0 5a 5b 5d e9 f2 b4 ff ff                             ..@...E0.....1.Z[].....

0000b217    int64_t ed25519_key_free(int64_t arg1)

0000b217  4885ff             test    rdi, rdi
0000b21a  7421               je      0xb23d

0000b21c  4883ec18           sub     rsp, 0x18
0000b220  be20000000         mov     esi, 0x20
0000b225  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
0000b22a  e800bbffff         call    m_burn
0000b22f  488b7c2408         mov     rdi, qword [rsp+0x8 {var_10}]
0000b234  4883c418           add     rsp, 0x18
0000b238  e9239effff         jmp     free

0000b23d  e9c7b4ffff         jmp     __x86_return_thunk
{ Does not return }


0000b242    void buf_put_ed25519_pub_key(void* arg1, int64_t arg2) __noreturn

0000b242  53                 push    rbx {var_8}
0000b243  4883ec10           sub     rsp, 0x10
0000b247  4885f6             test    rsi, rsi
0000b24a  7518               jne     0xb264

0000b24c  ba79000000         mov     edx, 0x79
0000b251  488d35cc930200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b258  488d3de9b80200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b25f  e815aaffff         call    fail_assert
{ Does not return }

0000b264  4889f3             mov     rbx, rsi
0000b267  ba0b000000         mov     edx, 0xb
0000b26c  488d35d8900200     lea     rsi, [rel data_3434b]  {"ssh-ed25519"}
0000b273  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
0000b278  e824b9ffff         call    buf_putstring
{ Does not return }

0000b27d                                                                                         48 8b 7c                               H.|
0000b280  24 08 48 83 c4 10 48 8d 73 20 ba 20 00 00 00 5b e9 0c b9 ff ff                                   $.H...H.s . ...[.....

0000b295    void buf_put_ed25519_priv_key(void* arg1, int64_t arg2) __noreturn

0000b295  55                 push    rbp {var_8}
0000b296  53                 push    rbx {var_10}
0000b297  52                 push    rdx {var_18}
0000b298  4885f6             test    rsi, rsi
0000b29b  7518               jne     0xb2b5

0000b29d  ba85000000         mov     edx, 0x85
0000b2a2  488d357b930200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b2a9  488d3d98b80200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b2b0  e8c4a9ffff         call    fail_assert
{ Does not return }

0000b2b5  4889fd             mov     rbp, rdi
0000b2b8  4889f3             mov     rbx, rsi
0000b2bb  ba0b000000         mov     edx, 0xb
0000b2c0  488d3584900200     lea     rsi, [rel data_3434b]  {"ssh-ed25519"}
0000b2c7  e8d5b8ffff         call    buf_putstring
{ Does not return }

0000b2cc                                      48 89 ef be 40 00 00 00 e8 91 b7 ff ff 48 89 de 48 89 ef ba              H...@........H..H...
0000b2e0  20 00 00 00 e8 52 b8 ff ff 58 48 8d 73 20 48 89 ef 5b ba 20 00 00 00 5d e9 3e b8 ff ff            ....R...XH.s H..[. ...].>...

0000b2fd    void buf_put_ed25519_sign(int64_t arg1, int64_t arg2, int64_t* arg3) __noreturn

0000b2fd  55                 push    rbp {var_8}
0000b2fe  53                 push    rbx {var_10}
0000b2ff  4883ec58           sub     rsp, 0x58
0000b303  64488b0425280000…  mov     rax, qword [fs:0x28]
0000b30c  4889442448         mov     qword [rsp+0x48 {var_20}], rax
0000b311  4889d0             mov     rax, rdx
0000b314  48c7042440000000   mov     qword [rsp {var_68}], 0x40
0000b31c  4885f6             test    rsi, rsi
0000b31f  7518               jne     0xb339

0000b321  ba97000000         mov     edx, 0x97
0000b326  488d35f7920200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b32d  488d3d14b80200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b334  e840a9ffff         call    fail_assert
{ Does not return }

0000b339  4989f0             mov     r8, rsi
0000b33c  4889fb             mov     rbx, rdi
0000b33f  8b7008             mov     esi, dword [rax+0x8]
0000b342  488b38             mov     rdi, qword [rax]
0000b345  488d6c2408         lea     rbp, [rsp+0x8 {var_60}]
0000b34a  4889e1             mov     rcx, rsp
0000b34d  4d8d4820           lea     r9, [r8+0x20]
0000b351  4889ea             mov     rdx, rbp {var_60}
0000b354  e8d2f7ffff         call    dropbear_ed25519_sign
{ Does not return }

0000b359                                                                             ba 0b 00 00 00 48 8d                           .....H.
0000b360  35 e6 8f 02 00 48 89 df e8 34 b8 ff ff 8b 14 24 48 89 ee 48 89 df e8 26 b8 ff ff 48 8b 44 24 48  5....H...4.....$H..H...&...H.D$H
0000b380  64 48 2b 04 25 28 00 00 00 74 05 e8 80 9e ff ff 48 83 c4 58 5b 5d e9 6e b3 ff ff                 dH+.%(...t......H..X[].n...

0000b39b    void buf_ed25519_verify(void* arg1, int64_t arg2) __noreturn

0000b39b  4154               push    r12 {var_8}
0000b39d  55                 push    rbp {var_10}
0000b39e  4883ec18           sub     rsp, 0x18
0000b3a2  4885f6             test    rsi, rsi
0000b3a5  7518               jne     0xb3bf

0000b3a7  baaa000000         mov     edx, 0xaa
0000b3ac  488d3571920200     lea     rsi, [rel data_34624]  {"src/ed25519.c"}
0000b3b3  488d3d8eb70200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b3ba  e8baa8ffff         call    fail_assert
{ Does not return }

0000b3bf  4889d5             mov     rbp, rdx
0000b3c2  48897c2408         mov     qword [rsp+0x8 {var_20}], rdi
0000b3c7  4989f4             mov     r12, rsi
0000b3ca  e8c7b5ffff         call    buf_getint
{ Does not return }

0000b3cf                                               89 c2 83 c8 ff 83 fa 40 75 37 48 8b 7c 24 08 8b 57                 .......@u7H.|$..W
0000b3e0  08 2b 57 0c 83 fa 3f 76 27 be 40 00 00 00 e8 51 b5 ff ff 8b 75 08 48 8b 7d 00 4d 8d 44 24 20 48  .+W...?v'.@....Q....u.H.}.M.D$ H
0000b400  89 c2 b9 40 00 00 00 e8 04 f9 ff ff f7 d8 19 c0 48 83 c4 18 5d 41 5c e9 ed b2 ff ff              ...@............H...]A\.....

0000b41c    void buf_sk_ed25519_verify(void* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int32_t arg5, int32_t arg6) __noreturn

0000b41c  4157               push    r15 {var_8}
0000b41e  4156               push    r14 {var_10}
0000b420  4155               push    r13 {var_18}
0000b422  4154               push    r12 {var_20}
0000b424  55                 push    rbp {var_28}
0000b425  53                 push    rbx {var_30}
0000b426  4881ec28010000     sub     rsp, 0x128
0000b42d  48894c2418         mov     qword [rsp+0x18 {var_140}], rcx
0000b432  64488b0425280000…  mov     rax, qword [fs:0x28]
0000b43b  4889842418010000   mov     qword [rsp+0x118 {var_40}], rax
0000b443  31c0               xor     eax, eax  {0x0}
0000b445  4885f6             test    rsi, rsi
0000b448  7518               jne     0xb462

0000b44a  ba19000000         mov     edx, 0x19
0000b44f  488d35dc910200     lea     rsi, [rel data_34632]  {"src/sk-ed25519.c"}
0000b456  488d3debb60200     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0000b45d  e817a8ffff         call    fail_assert
{ Does not return }

0000b462  4889fb             mov     rbx, rdi
0000b465  4989f6             mov     r14, rsi
0000b468  4989d7             mov     r15, rdx
0000b46b  4589c5             mov     r13d, r8d
0000b46e  4589cc             mov     r12d, r9d
0000b471  e820b5ffff         call    buf_getint
{ Does not return }

0000b476                                                                    83 f8 40 0f 85 52 01 00 00 8b                        ..@..R....
0000b480  43 08 2b 43 0c 83 f8 3f 0f 86 43 01 00 00 48 89 df be 40 00 00 00 45 0f b6 e4 e8 a5 b4 ff ff be  C.+C...?..C...H...@...E.........
0000b4a0  40 00 00 00 48 89 df 48 89 44 24 08 e8 e4 b3 ff ff 48 89 df e8 23 b4 ff ff 48 89 df 0f b6 e8 e8  @...H..H.D$......H...#...H......
0000b4c0  d2 b4 ff ff bf 45 00 00 00 89 44 24 14 e8 6b b2 ff ff 48 89 c3 48 8d 44 24 28 48 89 c7 48 89 04  .....E....D$..k...H..H.D$(H..H..
0000b4e0  24 e8 42 4f 01 00 48 8b 74 24 18 48 8b 3c 24 44 89 ea 4c 8d ac 24 f8 00 00 00 e8 33 52 01 00 48  $.BO..H.t$.H.<$D..L..$.....3R..H
0000b500  8b 3c 24 4c 89 ee e8 44 51 01 00 ba 20 00 00 00 4c 89 ee 48 89 df e8 20 b6 ff ff 89 ee 48 89 df  .<$L...DQ... ...L..H... .....H..
0000b520  f7 d5 e8 ee b3 ff ff 8b 74 24 14 48 89 df 44 21 e5 e8 34 b5 ff ff 48 8b 3c 24 e8 e9 4e 01 00 41  ........t$.H..D!..4...H.<$..N..A
0000b540  8b 57 08 49 8b 37 48 8b 3c 24 e8 e3 51 01 00 48 8b 3c 24 4c 89 ee e8 f4 50 01 00 ba 20 00 00 00  .W.I.7H.<$..Q..H.<$L....P... ...
0000b560  4c 89 ee 48 89 df e8 d0 b5 ff ff 8b 73 08 48 8b 3b 4d 8d 46 20 48 8b 54 24 08 b9 40 00 00 00 e8  L..H........s.H.;M.F H.T$..@....
0000b580  8c f7 ff ff f7 c5 01 00 00 00 75 07 f7 d8 45 19 e4 eb 1f 85 c0 74 06 41 83 cc ff eb 15 48 8d 35  ..........u...E......t.A.....H.5
0000b5a0  21 90 02 00 bf 04 00 00 00 31 c0 e8 db a6 ff ff eb e5 83 e5 04 74 20 45 85 e4 75 17 48 8d 35 23  !........1...........t E..u.H.5#
0000b5c0  90 02 00 bf 04 00 00 00 31 c0 e8 bc a6 ff ff eb 02 31 db 41 83 cc ff 48 89 df e8 92 b1 ff ff 48  ........1........1.A...H.......H
0000b5e0  8b 84 24 18 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 19 9c ff ff 48 81 c4 28 01 00 00 44 89  ..$....dH+.%(...t......H..(...D.
0000b600  e0 5b 5d 41 5c 41 5d 41 5e 41 5f e9 f9 b0 ff ff                                                  .[]A\A]A^A_.....

0000b610    void m_malloc(size_t arg1) __noreturn

0000b610  51                 push    rcx {var_8}
0000b611  4885ff             test    rdi, rdi
0000b614  750e               jne     0xb624

0000b616  488d3d26900200     lea     rdi, [rel data_34643]  {"m_malloc failed"}
0000b61d  31c0               xor     eax, eax  {0x0}
0000b61f  e8ada5ffff         call    dropbear_exit
{ Does not return }

0000b624  4889fe             mov     rsi, rdi
0000b627  bf01000000         mov     edi, 0x1
0000b62c  e8bf9dffff         call    calloc
0000b631  4885c0             test    rax, rax
0000b634  74e0               je      0xb616

0000b636  5a                 pop     rdx {var_8}
0000b637  e9cdb0ffff         jmp     __x86_return_thunk
{ Does not return }


0000b63c    void m_calloc(int64_t arg1, int64_t arg2) __noreturn

0000b63c  4889f0             mov     rax, rsi
0000b63f  48f7e7             mul     rdi
0000b642  7005               jo      0xb649

0000b644  4889c7             mov     rdi, rax
0000b647  ebc7               jmp     m_malloc
{ Does not return }

0000b649  50                 push    rax {var_8}
0000b64a  488d3d02900200     lea     rdi, [rel data_34653]  {"m_calloc failed"}
0000b651  31c0               xor     eax, eax  {0x0}
0000b653  e879a5ffff         call    dropbear_exit
{ Does not return }


0000b658    void m_strdup(char* arg1) __noreturn

0000b658  55                 push    rbp {var_8}
0000b659  53                 push    rbx {var_10}
0000b65a  4889fb             mov     rbx, rdi
0000b65d  50                 push    rax {var_18}
0000b65e  e88d9bffff         call    strlen
0000b663  8d6801             lea     ebp, [rax+0x1]
0000b666  4889ef             mov     rdi, rbp
0000b669  e8a2ffffff         call    m_malloc
{ Does not return }

0000b66e                                            48 89 de 48 89 e9 48 89 c7 f3 a4 5a 5b 5d e9 88 b0 ff                H..H..H....Z[]....
0000b680  ff                                                                                               .

0000b681    void m_realloc(int64_t arg1, size_t arg2) __noreturn

0000b681  51                 push    rcx {var_8}
0000b682  4885f6             test    rsi, rsi
0000b685  750e               jne     0xb695

0000b687  488d3dd58f0200     lea     rdi, [rel data_34663]  {"m_realloc failed"}
0000b68e  31c0               xor     eax, eax  {0x0}
0000b690  e83ca5ffff         call    dropbear_exit
{ Does not return }

0000b695  e8469fffff         call    realloc
0000b69a  4885c0             test    rax, rax
0000b69d  74e8               je      0xb687

0000b69f  5a                 pop     rdx {var_8}
0000b6a0  e964b0ffff         jmp     __x86_return_thunk
{ Does not return }


0000b6a5    void m_realloc_ltm(int64_t arg1, int64_t arg2, size_t arg3) __noreturn

0000b6a5  4889d6             mov     rsi, rdx
0000b6a8  ebd7               jmp     m_realloc
{ Does not return }


0000b6aa    void m_free_ltm(void* ptr)

0000b6aa  e9b199ffff         jmp     free


0000b6af    void buf_writefile(void* arg1, char* arg2, int32_t arg3) __noreturn

0000b6af  4155               push    r13 {__saved_r13}
0000b6b1  4989fd             mov     r13, rdi
0000b6b4  31c0               xor     eax, eax  {0x0}
0000b6b6  4154               push    r12 {__saved_r12}
0000b6b8  4989f4             mov     r12, rsi
0000b6bb  bec2000000         mov     esi, 0xc2
0000b6c0  55                 push    rbp {__saved_rbp}
0000b6c1  4c89e7             mov     rdi, r12
0000b6c4  53                 push    rbx {__saved_rbx}
0000b6c5  89d3               mov     ebx, edx
0000b6c7  ba80010000         mov     edx, 0x180
0000b6cc  51                 push    rcx {var_28}
0000b6cd  e80ea0ffff         call    open
0000b6d2  89c5               mov     ebp, eax
0000b6d4  85c0               test    eax, eax
0000b6d6  7965               jns     0xb73d

0000b6d8  e8b399ffff         call    __errno_location
0000b6dd  8b38               mov     edi, dword [rax]
0000b6df  85db               test    ebx, ebx
0000b6e1  740b               je      0xb6ee

0000b6e3  31db               xor     ebx, ebx
0000b6e5  83ff11             cmp     edi, 0x11
0000b6e8  0f84ce000000       je      0xb7bc

0000b6ee  e8dda0ffff         call    strerror
0000b6f3  4c89e2             mov     rdx, r12
0000b6f6  bf03000000         mov     edi, 0x3
0000b6fb  83cbff             or      ebx, 0xffffffff  {0xffffffff}
0000b6fe  4889c1             mov     rcx, rax
0000b701  488d356c8f0200     lea     rsi, [rel data_34674]  {"Couldn't create new file %s: %s"}
0000b708  31c0               xor     eax, eax  {0x0}
0000b70a  e87ca5ffff         call    dropbear_log
{ Does not return }

0000b70f                                               e9 a8 00 00 00                                                     .....

0000b714  29c3               sub     ebx, eax
0000b716  4c89ef             mov     rdi, r13
0000b719  89de               mov     esi, ebx
0000b71b  e824b2ffff         call    buf_getptr
{ Does not return }

0000b720  89 da 89 ef 48 89 c6 e8 54 a1 ff ff 89 c6 83 f8 ff 75 18 e8 58 99 ff ff 83 38 04 75 12           ....H...T........u..X....8.u.

0000b73d  418b450c           mov     eax, dword [r13+0xc]
0000b741  418b5d08           mov     ebx, dword [r13+0x8]
0000b745  39d8               cmp     eax, ebx
0000b747  75cb               jne     0xb714

0000b749  eb38               jmp     0xb783

0000b74b                                   85 c0 7f 2a e8 3c 99 ff ff 83 cb ff 8b 38 e8 72 a0 ff ff 4c 89             ...*.<.......8.r...L.
0000b760  e2 bf 03 00 00 00 48 8d 35 27 8f 02 00 48 89 c1 31 c0 e8 14 a5 ff ff eb 0c 4c 89 ef e8 14 b1 ff  ......H.5'...H..1........L......
0000b780  ff eb ba                                                                                         ...

0000b783  31db               xor     ebx, ebx  {0x0}
0000b785  89ef               mov     edi, ebp
0000b787  e8c49effff         call    fsync
0000b78c  85c0               test    eax, eax
0000b78e  7425               je      0xb7b5

0000b790  e8fb98ffff         call    __errno_location
0000b795  8b38               mov     edi, dword [rax]
0000b797  e834a0ffff         call    strerror
0000b79c  4c89e2             mov     rdx, r12
0000b79f  bf03000000         mov     edi, 0x3
0000b7a4  488d35048f0200     lea     rsi, [rel data_346af]  {"fsync of %s failed: %s"}
0000b7ab  4889c1             mov     rcx, rax
0000b7ae  31c0               xor     eax, eax  {0x0}
0000b7b0  e8d6a4ffff         call    dropbear_log
{ Does not return }

0000b7b5  89ef               mov     edi, ebp
0000b7b7  e865a6ffff         call    m_close
{ Does not return }

0000b7bc  5a                 pop     rdx {var_28}
0000b7bd  89d8               mov     eax, ebx  {0x0}
0000b7bf  5b                 pop     rbx {__saved_rbx}
0000b7c0  5d                 pop     rbp {__saved_rbp}
0000b7c1  415c               pop     r12 {__saved_r12}
0000b7c3  415d               pop     r13 {__saved_r13}
0000b7c5  e93fafffff         jmp     __x86_return_thunk
{ Does not return }


0000b7ca    void signkey_generate_get_bits(int32_t arg1, int32_t arg2) __noreturn

0000b7ca  89f0               mov     eax, esi
0000b7cc  85f6               test    esi, esi
0000b7ce  753e               jne     0xb80e

0000b7d0  b880010000         mov     eax, 0x180
0000b7d5  83ff02             cmp     edi, 0x2
0000b7d8  7434               je      0xb80e

0000b7da  7713               ja      0xb7ef

0000b7dc  b800010000         mov     eax, 0x100
0000b7e1  85ff               test    edi, edi
0000b7e3  7529               jne     0xb80e

0000b7e5  b800080000         mov     eax, 0x800
0000b7ea  e91aafffff         jmp     __x86_return_thunk
{ Does not return }

0000b7ef  b809020000         mov     eax, 0x209
0000b7f4  83ff03             cmp     edi, 0x3
0000b7f7  7415               je      0xb80e

0000b7f9  b800010000         mov     eax, 0x100
0000b7fe  83ff05             cmp     edi, 0x5
0000b801  740b               je      0xb80e

0000b803  31c0               xor     eax, eax  {0x0}
0000b805  83ff46             cmp     edi, 0x46
0000b808  0f94c0             sete    al
0000b80b  c1e008             shl     eax, 0x8

0000b80e  e9f6aeffff         jmp     __x86_return_thunk
{ Does not return }


0000b813    void signkey_generate(int32_t arg1, int32_t arg2, int64_t arg3, int32_t arg4) __noreturn

0000b813  4156               push    r14 {var_8}
0000b815  4189ce             mov     r14d, ecx
0000b818  4155               push    r13 {var_10}
0000b81a  4154               push    r12 {var_18}
0000b81c  4989d4             mov     r12, rdx
0000b81f  55                 push    rbp {var_20}
0000b820  53                 push    rbx {var_28}
0000b821  89fb               mov     ebx, edi
0000b823  4883ec10           sub     rsp, 0x10
0000b827  e89effffff         call    signkey_generate_get_bits
{ Does not return }

0000b82c                                      89 44 24 0c e8 76 b8 ff ff 49 89 c5 e8 a6 cc ff ff 83 fb 05              .D$..v...I..........
0000b840  8b 7c 24 0c 74 40 77 0b 85 db 74 0e 83 fb 04 75 14 eb 3e 83 fb 46 74 0d eb 37 e8 ac 02 00 00 49  .|$.t@w...t....u..>..Ft..7.....I
0000b860  89 45 10 eb 3a e8 3c d7 ff ff 48 89 c7 48 89 c5 e8 f9 d6 ff ff 4c 89 ef 89 c6 89 c3 e8 cb b9 ff  .E..:.<...H..H.......L..........
0000b880  ff 48 89 28 eb 19 e8 09 04 00 00 49 89 45 30 eb 0e 48 8d 3d 2e 8e 02 00 31 c0 e8 32 a3 ff ff e8  .H.(.......I.E0..H.=....1..2....
0000b8a0  3f cc ff ff bf a4 06 00 00 e8 8f ae ff ff 89 da 4c 89 ee 48 89 c7 48 89 c5 e8 60 bd ff ff 4c 89  ?...............L..H..H...`...L.
0000b8c0  ef e8 c7 bd ff ff 31 f6 48 89 ef e8 7a af ff ff 4c 89 e7 e8 18 99 ff ff 48 8d 78 1e e8 2f fd ff  ......1.H...z...L.......H.x../..
0000b8e0  ff 49 89 c5 e8 87 98 ff ff 4c 89 e7 89 c3 e8 fd 98 ff ff 4d 89 e1 48 83 c9 ff 4c 8d 05 d4 8d 02  .I.......L.........M..H...L.....
0000b900  00 57 48 8d 70 1e ba 01 00 00 00 4c 89 ef 53 31 c0 e8 3a 97 ff ff 31 d2 4c 89 ee 48 89 ef e8 8c  .WH.p......L..S1..:...1.L..H....
0000b920  fd ff ff 41 58 41 59 89 c3 83 f8 ff 0f 84 80 00 00 00 4c 89 e6 4c 89 ef e8 03 9e ff ff 85 c0 79  ...AXAY...........L..L.........y
0000b940  65 e8 4a 97 ff ff 8b 38 45 85 f6 74 05 83 ff 11 74 54 83 ff 26 77 2c 48 b8 02 20 00 00 40 00 00  e.J....8E..t....tT..&w,H.. ..@..
0000b960  00 48 0f a3 f8 73 1c 31 f6 48 89 ef e8 d9 ae ff ff 44 89 f2 4c 89 e6 48 89 ef e8 30 fd ff ff 89  .H...s.1.H.......D..L..H...0....
0000b980  c3 eb 53 e8 48 9e ff ff 4c 89 e2 bf 03 00 00 00 83 cb ff 48 89 c1 48 8d 35 41 8d 02 00 31 c0 e8  ..S.H...L..........H..H.5A...1..
0000b9a0  e7 a2 ff ff eb 30 4c 89 e7 31 db e8 89 ab ff ff eb 24 48 85 ed 74 08 48 89 ef e8 b7 ad ff ff 4d  .....0L..1.......$H..t.H.......M
0000b9c0  85 ed 74 19 4c 89 ef e8 d4 96 ff ff 4c 89 ef e8 8c 96 ff ff eb 07 48 85 ed 75 dc eb e7 48 83 c4  ..t.L.......L.........H..u...H..
0000b9e0  10 89 d8 5b 5d 41 5c 41 5d 41 5e e9 19 ad ff ff                                                  ...[]A\A]A^.....

0000b9f0    void getrsaprime(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4) __noreturn

0000b9f0  4157               push    r15 {var_8}
0000b9f2  4989d7             mov     r15, rdx
0000b9f5  4156               push    r14 {var_10}
0000b9f7  4989f6             mov     r14, rsi
0000b9fa  4155               push    r13 {var_18}
0000b9fc  4154               push    r12 {var_20}
0000b9fe  4989fc             mov     r12, rdi
0000ba01  55                 push    rbp {var_28}
0000ba02  89cd               mov     ebp, ecx
0000ba04  b906000000         mov     ecx, 0x6
0000ba09  53                 push    rbx {var_30}
0000ba0a  4883ec28           sub     rsp, 0x28
0000ba0e  64488b0425280000…  mov     rax, qword [fs:0x28]
0000ba17  4889442418         mov     qword [rsp+0x18 {var_40}], rax
0000ba1c  31c0               xor     eax, eax  {0x0}
0000ba1e  4889e7             mov     rdi, rsp {s}
0000ba21  4989e5             mov     r13, rsp {s}
0000ba24  f3ab               rep stosd dword [rdi] {var_70} {s}  {0x0}
0000ba26  89ef               mov     edi, ebp
0000ba28  e8e3fbffff         call    m_malloc
{ Does not return }

0000ba2d                                         48 89 e7 48 89 c3 e8 02 b3 ff ff 89 ee 48 89 df e8 a8 c9               H..H.........H.....
0000ba40  ff ff 80 0b 80 89 ea 48 89 de 4c 89 e7 e8 27 b5 ff ff 4c 89 e7 e8 86 b5 01 00 89 c7 e8 6f f3 01  .......H..L...'...L..........o..
0000ba60  00 31 d2 4c 89 e7 89 c6 e8 93 eb 01 00 85 c0 75 26 4c 89 f2 be 01 00 00 00 4c 89 e7 e8 ef 01 02  .1.L...........u&L.......L......
0000ba80  00 85 c0 75 12 4c 89 ea 4c 89 fe 4c 89 f7 e8 ad c7 01 00 85 c0 74 1d 48 8b 35 82 ac 03 00 48 8d  ...u.L..L..L.........t.H.5....H.
0000baa0  3d 5a 8c 02 00 e8 26 98 ff ff bf 01 00 00 00 e8 9c 9c ff ff be 01 00 00 00 4c 89 ef e8 cf ad 01  =Z....&..................L......
0000bac0  00 85 c0 0f 85 6f ff ff ff 4c 89 ef e8 4f ac 01 00 48 89 df 89 ee e8 54 b2 ff ff 48 89 df e8 7d  .....o...L...O...H.....T...H...}
0000bae0  95 ff ff 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 18 97 ff ff 48 83 c4 28 5b 5d 41 5c  ...H.D$.dH+.%(...t......H..([]A\
0000bb00  41 5d 41 5e 41 5f e9 fe ab ff ff                                                                 A]A^A_.....

0000bb0b    void gen_rsa_priv_key(int32_t arg1) __noreturn

0000bb0b  4157               push    r15 {var_8}
0000bb0d  b906000000         mov     ecx, 0x6
0000bb12  4156               push    r14 {var_10}
0000bb14  4155               push    r13 {var_18}
0000bb16  4154               push    r12 {var_20}
0000bb18  55                 push    rbp {var_28}
0000bb19  89fd               mov     ebp, edi
0000bb1b  53                 push    rbx {var_30}
0000bb1c  4883ec58           sub     rsp, 0x58
0000bb20  64488b0425280000…  mov     rax, qword [fs:0x28]
0000bb29  4889442448         mov     qword [rsp+0x48 {var_40}], rax
0000bb2e  31c0               xor     eax, eax  {0x0}
0000bb30  4889e7             mov     rdi, rsp {s}
0000bb33  f3ab               rep stosd dword [rdi] {var_a0} {s}  {0x0}
0000bb35  488d7c2418         lea     rdi, [rsp+0x18 {s_1}]
0000bb3a  b906000000         mov     ecx, 0x6
0000bb3f  f3ab               rep stosd dword [rdi] {s} {s_1}  {0x0}
0000bb41  488d7c2430         lea     rdi, [rsp+0x30 {s_2}]
0000bb46  b906000000         mov     ecx, 0x6
0000bb4b  f3ab               rep stosd dword [rdi] {s_1} {s_2}  {0x0}
0000bb4d  8d8500feffff       lea     eax, [rbp-0x200]
0000bb53  3d000e0000         cmp     eax, 0xe00
0000bb58  7708               ja      0xbb62

0000bb5a  f7c507000000       test    ebp, 0x7
0000bb60  740e               je      0xbb70

0000bb62  488d3dad8b0200     lea     rdi, [rel data_34716]  {"Bits must satisfy 512 <= bits <=…"}
0000bb69  31c0               xor     eax, eax  {0x0}
0000bb6b  e861a0ffff         call    dropbear_exit
{ Does not return }

0000bb70  bf28000000         mov     edi, 0x28
0000bb75  4c8d6c2418         lea     r13, [rsp+0x18 {s_1}]
0000bb7a  4189ef             mov     r15d, ebp
0000bb7d  4989e4             mov     r12, rsp {s}
0000bb80  e88bfaffff         call    m_malloc
{ Does not return }

0000bb85                 4c 8d 74 24 30 45 31 c9 41 c1 ef 04 4c 8d 40 20 48 8d 48 18 48 89 c6 48 89 c3 48       L.t$0E1.A...L.@ H.H.H..H..H
0000bba0  8d 50 10 48 8d 78 08 31 c0 e8 56 b2 ff ff 31 c9 4c 89 ea 4c 89 f6 48 89 e7 31 c0 e8 98 b1 ff ff  .P.H.x.1..V...1.L..L..H..1......
0000bbc0  48 8b 7b 08 be 01 00 01 00 e8 d2 fe 01 00 48 8b 53 08 48 8b 7b 18 44 89 f9 4c 89 e6 e8 0f fe ff  H.{...........H.S.H.{.D..L......
0000bbe0  ff 48 8b 53 08 48 8b 7b 20 4c 89 ee 44 89 f9 e8 fc fd ff ff 48 8b 73 20 48 8b 7b 18 48 8b 13 e8  .H.S.H.{ L..D.......H.s H.{.H...
0000bc00  0c da 01 00 85 c0 75 32 48 8b 3b e8 d0 b3 01 00 39 e8 75 ba 4c 89 f2 4c 89 ee 4c 89 e7 e8 1e ce  ......u2H.;.....9.u.L..L..L.....
0000bc20  01 00 85 c0 75 14 48 8b 53 10 48 8b 7b 08 4c 89 f6 e8 8a cd 01 00 85 c0 74 1d 48 8b 35 df aa 03  ....u.H.S.H.{.L.........t.H.5...
0000bc40  00 48 8d 3d b7 8a 02 00 e8 83 96 ff ff bf 01 00 00 00 e8 f9 9a ff ff 31 c9 31 c0 4c 89 f2 4c 89  .H.=...................1.1.L..L.
0000bc60  ee 4c 89 e7 e8 17 ab 01 00 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8 92 95 ff ff 48 83  .L.......H.D$HdH+.%(...t......H.
0000bc80  c4 58 48 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 75 aa ff ff                                      .XH..[]A\A]A^A_.u...

0000bc94    void gen_ed25519_priv_key(int32_t arg1) __noreturn

0000bc94  4883ec18           sub     rsp, 0x18
0000bc98  81ff00010000       cmp     edi, 0x100
0000bc9e  740e               je      0xbcae

0000bca0  488d3dad8a0200     lea     rdi, [rel data_34754]  {"Ed25519 keys have a fixed size o…"}
0000bca7  31c0               xor     eax, eax  {0x0}
0000bca9  e8239fffff         call    dropbear_exit
{ Does not return }

0000bcae  bf40000000         mov     edi, 0x40
0000bcb3  e858f9ffff         call    m_malloc
{ Does not return }

0000bcb8                                                                          48 8d 78 20 48 89 c6 48                          H.x H..H
0000bcc0  89 44 24 08 e8 a9 ed ff ff 48 8b 44 24 08 48 83 c4 18 e9 32 aa ff ff                             .D$......H.D$.H....2...

0000bcd7    void send_msg_keepalive() __noreturn

0000bcd7  55                 push    rbp {var_8}
0000bcd8  53                 push    rbx {var_10}
0000bcd9  488d1d9f8a0200     lea     rbx, [rel data_3477f]  {"keepalive@openssh.com"}
0000bce0  52                 push    rdx {var_18}
0000bce1  488b2d68ab0300     mov     rbp, qword [rel data_46850]
0000bce8  e88f430000         call    get_any_ready_channel
{ Does not return }

0000bced                                         48 85 c0 74 0d 48 89 c7 48 89 de e8 c0 43 00 00 eb 25 48               H..t.H..H....C...%H
0000bd00  8b 3d c2 aa 03 00 be 50 00 00 00 e8 05 ac ff ff 48 8b 3d b1 aa 03 00 ba 15 00 00 00 48 89 de e8  .=.....P........H.=.........H...
0000bd20  7d ae ff ff 48 8b 3d 9d aa 03 00 be 01 00 00 00 e8 e0 ab ff ff e8 20 14 00 00 e8 bb a7 ff ff 48  }...H.=............... ........H
0000bd40  89 2d 0a ab 03 00 48 89 05 eb aa 03 00 58 5b 5d e9 b4 a9 ff ff                                   .-....H......X[].....

0000bd55    void checktimeouts() __noreturn

0000bd55  53                 push    rbx {var_8}
0000bd56  e89fa7ffff         call    monotonic_now
{ Does not return }

0000bd5b                                                                                   80 3d 3e aa 03                             .=>..
0000bd60  00 01 48 89 c3 75 29 48 8b 05 3a aa 03 00 48 85 c0 74 1d 48 89 da 48 29 c2 48 81 fa 2b 01 00 00  ..H..u)H..:...H..t.H..H).H..+...
0000bd80  7e 0e 48 8d 3d 0c 8a 02 00 31 c0 e8 9c 9d ff ff 48 83 3d 20 aa 03 00 00 0f 84 d6 00 00 00 f6 05  ~.H.=....1......H.= ............
0000bda0  b3 aa 03 00 01 75 2a 48 89 d8 48 2b 05 bf aa 03 00 48 3d 7f 70 00 00 7f 13 8b 05 b9 aa 03 00 03  .....u*H..H+.....H=.p...........
0000bdc0  05 b7 aa 03 00 3d ff ff ff 3f 76 05 e8 9b 2a 00 00 48 8b 05 f8 ab 03 00 48 85 c0 7e 70 83 3d 2c  .....=...?v...*..H......H..~p.=,
0000bde0  ab 03 00 00 74 67 48 89 da 48 2b 15 58 aa 03 00 48 39 d0 7f 07 31 c0 e8 db fe ff ff 48 8b 05 cd  ....tgH..H+.X...H9...1......H...
0000be00  ab 03 00 48 89 da 48 2b 15 33 aa 03 00 48 39 d0 7f 16 48 89 da 48 2b 15 1c aa 03 00 48 39 d0 7f  ...H..H+.3...H9...H..H+.....H9..
0000be20  07 31 c0 e8 af fe ff ff 48 6b 15 a0 ab 03 00 03 48 89 d8 48 2b 05 06 aa 03 00 48 39 c2 7f 0e 48  .1......Hk......H..H+.....H9...H
0000be40  8d 3d 63 89 02 00 31 c0 e8 84 9d ff ff 48 8b 05 84 ab 03 00 48 85 c0 7e 1b 48 2b 1d f0 a9 03 00  .=c...1......H......H..~.H+.....
0000be60  48 39 d8 7f 0f 48 8d 3d 4f 89 02 00 31 c0 5b e9 b8 9c ff ff 5b e9 8f a8 ff ff                    H9...H.=O...1.[.....[.....

0000be7a    void cleanup_buf(int64_t* arg1) __noreturn

0000be7a  53                 push    rbx {__saved_rbx}
0000be7b  4889fb             mov     rbx, rdi
0000be7e  488b3f             mov     rdi, qword [rdi]
0000be81  4885ff             test    rdi, rdi
0000be84  740a               je      0xbe90

0000be86  e8eba8ffff         call    buf_burn_free
0000be8b  31c0               xor     eax, eax  {0x0}
0000be8d  488903             mov     qword [rbx], rax  {0x0}

0000be90  5b                 pop     rbx {__saved_rbx}
0000be91  e973a8ffff         jmp     __x86_return_thunk
{ Does not return }


0000be96    void session_loop() __noreturn

0000be96  4157               push    r15 {var_8}
0000be98  4156               push    r14 {var_10}
0000be9a  4155               push    r13 {var_18}
0000be9c  4154               push    r12 {var_20}
0000be9e  55                 push    rbp {var_28}
0000be9f  53                 push    rbx {var_30}
0000bea0  4881ecd8020000     sub     rsp, 0x2d8
0000bea7  644c8b3425280000…  mov     r14, qword [fs:0x28]
0000beb0  4c89b424c8020000   mov     qword [rsp+0x2c8 {var_40}], r14
0000beb8  4989fe             mov     r14, rdi
0000bebb  8b1d27a90300       mov     ebx, dword [rel data_467e8]
0000bec1  31ed               xor     ebp, ebp  {0x0}
0000bec3  81fb00800000       cmp     ebx, 0x8000
0000bec9  400f96c5           setbe   bpl
0000becd  e828a6ffff         call    monotonic_now
{ Does not return }

0000bed2                                                        48 89 c1 b8 80 70 00 00 f6 05 77 a9 03 00                    H....p....w...
0000bee0  01 75 1e 48 8b 15 86 a9 03 00 48 85 d2 7e 12 48 29 d0 ba 80 70 00 00 48 01 c8 48 39 d0 48 0f 4f  .u.H......H..~.H)...p..H..H9.H.O
0000bf00  c2 8b 15 09 aa 03 00 83 fa 01 74 2d 80 3d 8d a8 03 00 01 75 20 48 8b 35 8c a8 03 00 48 85 f6 7e  ..........t-.=.....u H.5....H..~
0000bf20  14 48 89 cf 48 29 f7 48 8d b7 2c 01 00 00 48 39 f0 48 0f 4f c6 85 d2 74 33 48 8b 15 00 a9 03 00  .H..H).H..,...H9.H.O...t3H......
0000bf40  48 8b 35 f1 a8 03 00 48 39 d6 48 0f 4c f2 48 8b 15 7b aa 03 00 48 85 f6 7e 12 48 85 d2 7e 0d 48  H.5....H9.H.L.H..{...H..~.H..~.H
0000bf60  29 f2 48 01 ca 48 39 d0 48 0f 4f c2 48 8b 35 dd a8 03 00 48 8b 15 5e aa 03 00 48 85 f6 7e 12 48  ).H..H9.H.O.H.5....H..^...H..~.H
0000bf80  85 d2 7e 0d 48 29 f2 48 01 ca 48 39 d0 48 0f 4f c2 31 d2 48 85 c0 48 0f 48 c2 31 c9 48 89 4c 24  ..~.H).H..H9.H.O.1.H..H.H.1.H.L$
0000bfa0  30 b9 20 00 00 00 48 89 44 24 28 48 8d 84 24 c8 00 00 00 48 89 04 24 48 8b 3c 24 31 c0 48 83 3d  0. ...H.D$(H..$....H..$H.<$1.H.=
0000bfc0  33 a8 03 00 00 f3 ab 48 8d 4c 24 48 48 89 4c 24 08 48 8b 7c 24 08 b9 20 00 00 00 f3 ab 74 18 ba  3......H.L$HH.L$.H.|$.. .....t..
0000bfe0  af 00 00 00 48 8d 35 dd 87 02 00 48 8d 3d eb 87 02 00 e8 82 9c ff ff 48 63 3d 1e a8 03 00 e8 4d  ....H.5....H.=.........Hc=.....M
0000c000  92 ff ff 8b 0d 13 a8 03 00 48 8b 34 24 48 89 c2 48 8b 7c 24 08 b8 01 00 00 00 48 d3 e0 48 09 44  .........H.4$H..H.|$......H..H.D
0000c020  d4 48 89 ea e8 d8 39 00 00 48 8b 3c 24 e8 fe 5a 00 00 83 3d 77 a7 03 00 ff 74 46 48 83 3d 75 a7  .H....9..H.<$..Z...=w....tFH.=u.
0000c040  03 00 00 74 2c 81 fb 00 80 00 00 77 34 48 63 3d 5c a7 03 00 e8 f7 91 ff ff 8b 0d 51 a7 03 00 48  ...t,......w4Hc=\..........Q...H
0000c060  89 c2 b8 01 00 00 00 48 d3 e0 48 09 44 d4 48 eb 10 48 8d 3d 58 a7 03 00 e8 be c7 ff ff 85 c0 75  .......H..H.D.H..H.=X..........u
0000c080  c4 83 3d 2c a7 03 00 ff 74 35 48 8d 3d 3f a7 03 00 e8 a5 c7 ff ff 85 c0 75 25 48 63 3d 13 a7 03  ..=,....t5H.=?..........u%Hc=...
0000c0a0  00 e8 aa 91 ff ff 8b 0d 08 a7 03 00 48 89 c2 b8 01 00 00 00 48 d3 e0 48 09 84 d4 c8 00 00 00 48  ............H.......H..H.......H
0000c0c0  8b 14 24 48 8b 74 24 08 4c 8d 44 24 28 31 c9 8b 05 eb a6 03 00 8d 78 01 e8 43 94 ff ff 8b 15 b5  ..$H.t$.L.D$(1........x..C......
0000c0e0  a8 03 00 85 d2 74 09 48 8d 3d 03 87 02 00 eb 15 85 c0 79 18 e8 97 8f ff ff 83 38 04 74 43 48 8d  .....t.H.=........y.......8.tCH.
0000c100  3d 01 87 02 00 31 c0 e8 c5 9a ff ff 74 33 48 63 3d 07 a7 03 00 31 d2 48 8d 5c 24 38 89 15 02 a7  =....1......t3Hc=....1.H.\$8....
0000c120  03 00 e8 29 91 ff ff 8b 0d ef a6 03 00 48 89 c2 b8 01 00 00 00 48 d3 e0 48 23 44 d4 48 74 3f eb  ...).........H.......H..H#D.Ht?.
0000c140  1b 48 8b 3c 24 31 c0 b9 20 00 00 00 f3 ab 48 8b 7c 24 08 b9 20 00 00 00 f3 ab eb b2 8b 3d ba a6  .H.<$1.. .....H.|$.. ........=..
0000c160  03 00 ba 01 00 00 00 48 89 de e8 41 92 ff ff 48 85 c0 7f e8 c7 05 a6 a6 03 00 01 00 00 00 e8 d2  .......H...A...H................
0000c180  fb ff ff 48 63 3d 26 a6 03 00 83 ff ff 0f 84 7d 01 00 00 e8 b8 90 ff ff 8b 0d 12 a6 03 00 48 89  ...Hc=&........}..............H.
0000c1a0  c2 b8 01 00 00 00 48 d3 e0 48 23 44 d4 48 0f 84 4d 01 00 00 48 83 3d fc a5 03 00 00 0f 85 3a 01  ......H..H#D.H..M...H.=.......:.
0000c1c0  00 00 80 3d d7 a5 03 00 00 bd 01 00 00 00 75 05 bd 32 00 00 00 48 8d 84 24 48 01 00 00 b9 20 00  ...=..........u..2...H..$H.... .
0000c1e0  00 00 44 8b 25 c7 a5 03 00 31 db 48 89 44 24 10 48 8b 7c 24 10 31 c0 41 bf 01 00 00 00 f3 ab 49  ..D.%....1.H.D$.H.|$.1.A.......I
0000c200  63 c4 4d 89 fd 48 89 c7 48 89 44 24 18 e8 3e 90 ff ff 44 89 e1 48 8b 74 24 10 31 d2 49 d3 e5 41  c.M..H..H.D$..>...D..H.t$.1.I..A
0000c220  8d 7c 24 01 31 c9 4c 09 ac c4 48 01 00 00 4c 8d 44 24 38 31 c0 4c 89 7c 24 38 48 89 44 24 40 e8  .|$.1.L...H...L.D$81.L.|$8H.D$@.
0000c240  dc 92 ff ff 85 c0 78 2d e8 08 fb ff ff 49 63 fc e8 fb 8f ff ff 4c 23 ac c4 48 01 00 00 74 a0 48  ......x-.....Ic......L#..H...t.H
0000c260  8d 74 24 27 ba 01 00 00 00 44 89 e7 e8 3f 91 ff ff 85 c0 79 0c e8 16 8e ff ff 83 38 04 74 80 eb  .t$'.....D...?.....y.......8.t..
0000c280  39 74 37 8a 44 24 27 3c 0a 74 20 3c 0d 0f 84 6c ff ff ff 48 63 d3 ff c3 88 84 14 c8 01 00 00 81  9t7.D$'<.t <...l...Hc...........
0000c2a0  fb ff 00 00 00 0f 85 54 ff ff ff 48 63 c3 c6 84 04 c8 01 00 00 00 ff c3 79 0f e8 d1 8d ff ff 83  .......T...Hc...........y.......
0000c2c0  38 04 74 2e e9 93 00 00 00 83 fb 03 7e 24 4c 8d a4 24 c8 01 00 00 ba 04 00 00 00 48 8d 35 34 85  8.t.........~$L..$.........H.54.
0000c2e0  02 00 4c 89 e7 e8 d6 90 ff ff 85 c0 0f 84 c6 00 00 00 ff cd 0f 85 db fe ff ff eb 60 e8 a3 0b 00  ..L........................`....
0000c300  00 48 83 3d ef a4 03 00 00 74 05 e8 f2 4a 00 00 e8 41 13 00 00 48 8b 3c 24 e8 c1 54 00 00 e8 65  .H.=.....t...J...A...H.<$..T...e
0000c320  06 00 00 48 8b 34 24 48 8b 7c 24 08 e8 41 35 00 00 83 3d 7c a4 03 00 ff 0f 84 7d fb ff ff 48 8d  ...H.4$H.|$..A5...=|......}...H.
0000c340  3d 8b a4 03 00 e8 f1 c4 ff ff 85 c0 0f 85 69 fb ff ff e8 37 07 00 00 e9 5f fb ff ff 48 8b 05 85  =.............i....7...._...H...
0000c360  a5 03 00 e8 c4 a3 ff ff 48 8b 1d 49 a4 03 00 ba 06 00 00 00 48 8d 35 a0 84 02 00 48 89 df e8 3d  ........H..I........H.5....H...=
0000c380  8d ff ff 85 c0 0f 84 76 ff ff ff ba 09 00 00 00 48 8d 35 8b 84 02 00 48 89 df e8 21 8d ff ff 85  .......v........H.5....H...!....
0000c3a0  c0 0f 84 5a ff ff ff 48 89 de 48 8d 3d 7b 84 02 00 31 c0 e8 19 98 ff ff 48 63 fb e8 50 f2 ff ff  ...Z...H..H.={...1......Hc..P...
0000c3c0  89 d9 4c 89 e6 48 89 05 ec a3 03 00 48 89 c7 f3 a4 eb 95                                         ..L..H......H......

0000c3d3    void session_cleanup() __noreturn

0000c3d3  833dc2a5030000     cmp     dword [rel data_4699c], 0x0
0000c3da  0f8412020000       je      0xc5f2  {data_4699c}

0000c3e0  53                 push    rbx {var_8}
0000c3e1  e84b340000         call    chancleanup
{ Does not return }

0000c3e6                    48 8b 05 03 a5 03 00 48 85 c0 74 05 e8 35 a3 ff ff e8 9f 49 00 00 48 8d 1d cd        H......H..t..5.....I..H...
0000c400  a3 03 00 e8 a8 53 00 00 48 89 df e8 2b c4 ff ff 85 c0 75 12 48 89 df e8 2d c4 ff ff 48 89 c7 e8  .....S..H...+.....u.H...-...H...
0000c420  4d a3 ff ff eb e2 48 8b 3d 5b a4 03 00 e8 2e 8c ff ff 31 c0 48 89 05 4d a4 03 00 48 8b 05 3e a4  M.....H.=[........1.H..M...H..>.
0000c440  03 00 48 8b 78 20 48 85 ff 74 35 e8 70 90 ff ff 83 f8 fe 75 0e 48 8d 3d f1 83 02 00 31 c0 e8 6e  ..H.x H..t5.p......u.H.=....1..n
0000c460  97 ff ff 48 8b 05 16 a4 03 00 31 db 48 8b 78 20 e8 eb 8b ff ff 48 8b 05 04 a4 03 00 48 89 58 20  ...H......1.H.x .....H......H.X 
0000c480  48 8b b8 70 03 00 00 48 85 ff 74 2e e8 ff 90 ff ff 83 f8 fe 74 bf 48 8b 05 e3 a3 03 00 48 8b b8  H..p...H..t.........t.H......H..
0000c4a0  70 03 00 00 e8 b7 8b ff ff 48 8b 05 d0 a3 03 00 45 31 db 4c 89 98 70 03 00 00 48 8b 3d f7 a2 03  p........H......E1.L..p...H.=...
0000c4c0  00 e8 9a 8b ff ff 48 8b 3d 6b a4 03 00 31 c9 48 89 0d e2 a2 03 00 e8 85 8b ff ff 48 8b 3d 66 a4  ......H.=k...1.H...........H.=f.
0000c4e0  03 00 31 f6 48 89 35 4d a4 03 00 e8 70 8b ff ff 31 ff 48 89 3d 4f a4 03 00 48 8b 3d 40 a4 03 00  ..1.H.5M....p...1.H.=O...H.=@...
0000c500  e8 5b 8b ff ff 48 8b 3d 44 a4 03 00 45 31 c0 4c 89 05 2a a4 03 00 e8 45 8b ff ff 48 8b 3d de a3  .[...H.=D...E1.L..*....E...H.=..
0000c520  03 00 45 31 c9 4c 89 0d 24 a4 03 00 e8 2f 8b ff ff 45 31 d2 48 8d 3d 55 a3 03 00 4c 89 15 be a3  ..E1.L..$..../...E1.H.=U...L....
0000c540  03 00 e8 33 f9 ff ff 48 8d 3d 5a a3 03 00 e8 27 f9 ff ff 48 8d 3d 9e a2 03 00 e8 1b f9 ff ff 48  ...3...H.=Z....'...H.=.........H
0000c560  8d 3d 8a a2 03 00 e8 0f f9 ff ff 48 8d 3d 56 a2 03 00 e8 03 f9 ff ff 48 8d 3d 32 a3 03 00 e8 f7  .=.........H.=V........H.=2.....
0000c580  f8 ff ff 48 8d 3d 2e a3 03 00 e8 eb f8 ff ff 48 8b 3d 02 a3 03 00 48 85 ff 74 05 e8 80 a1 01 00  ...H.=.........H.=....H..t......
0000c5a0  48 8b 3d f1 a2 03 00 e8 b4 8a ff ff 48 8b 3d ed a2 03 00 31 d2 48 89 15 dc a2 03 00 48 85 ff 74  H.=.........H.=....1.H......H..t
0000c5c0  05 e8 b0 a1 ff ff 48 8b 3d b3 a2 03 00 be b8 06 00 00 e8 58 a7 ff ff 48 8b 3d a2 a2 03 00 e8 7d  ......H.=..........X...H.=.....}
0000c5e0  8a ff ff 31 c0 5b 48 89 05 93 a2 03 00 e9 17 a1 ff ff                                            ...1.[H...........

0000c5f2  e912a1ffff         jmp     __x86_return_thunk
{ Does not return }


0000c5f7    void send_session_identification() __noreturn

0000c5f7  53                 push    rbx {var_8}
0000c5f8  bf1b000000         mov     edi, 0x1b
0000c5fd  e83ba1ffff         call    buf_new
{ Does not return }

0000c602        ba 1a 00 00 00 48 8d 35 4c 82 02 00 48 89 c3 48 89 c7 e8 22 a5 ff ff 48 89 df 5b e9 0f 0b    .....H.5L...H..H..."...H..[...
0000c620  00 00                                                                                            ..

0000c622    void ignore_recv_response() __noreturn

0000c622  e9e2a0ffff         jmp     __x86_return_thunk
{ Does not return }


0000c627    void get_user_shell() __noreturn

0000c627  488b0512a30300     mov     rax, qword [rel data_46940]
0000c62e  803800             cmp     byte [rax], 0x0
0000c631  7507               jne     0xc63a

0000c633  488d053b820200     lea     rax, [rel data_34875]  {"/bin/sh"}

0000c63a  e9caa0ffff         jmp     __x86_return_thunk
{ Does not return }


0000c63f    void fill_passwd(char* arg1) __noreturn

0000c63f  53                 push    rbx {__saved_rbx}
0000c640  4889fb             mov     rbx, rdi
0000c643  488b3dfea20300     mov     rdi, qword [rel data_46948]
0000c64a  4885ff             test    rdi, rdi
0000c64d  740e               je      0xc65d

0000c64f  e80c8affff         call    free
0000c654  31f6               xor     esi, esi  {0x0}
0000c656  488935eba20300     mov     qword [rel data_46948], rsi  {0x0}

0000c65d  488b3dd4a20300     mov     rdi, qword [rel data_46938]
0000c664  4885ff             test    rdi, rdi
0000c667  740e               je      0xc677

0000c669  e8f289ffff         call    free
0000c66e  31c9               xor     ecx, ecx  {0x0}
0000c670  48890dc1a20300     mov     qword [rel data_46938], rcx  {0x0}

0000c677  488b3dc2a20300     mov     rdi, qword [rel data_46940]
0000c67e  4885ff             test    rdi, rdi
0000c681  740e               je      0xc691

0000c683  e8d889ffff         call    free
0000c688  31d2               xor     edx, edx  {0x0}
0000c68a  488915afa20300     mov     qword [rel data_46940], rdx  {0x0}

0000c691  488b3db8a20300     mov     rdi, qword [rel data_46950]
0000c698  4885ff             test    rdi, rdi
0000c69b  740e               je      0xc6ab

0000c69d  e8be89ffff         call    free
0000c6a2  31c0               xor     eax, eax  {0x0}
0000c6a4  488905a5a20300     mov     qword [rel data_46950], rax  {0x0}

0000c6ab  4889df             mov     rdi, rbx
0000c6ae  e87d8dffff         call    getpwnam
0000c6b3  4889c3             mov     rbx, rax
0000c6b6  4885c0             test    rax, rax
0000c6b9  0f848f000000       je      0xc74e

0000c6bf  8b4010             mov     eax, dword [rax+0x10 {passwd::pw_uid}]
0000c6c2  488b3b             mov     rdi, qword [rbx {passwd::pw_name}]
0000c6c5  890565a20300       mov     dword [rel data_46930], eax
0000c6cb  8b4314             mov     eax, dword [rbx+0x14 {passwd::pw_gid}]
0000c6ce  890560a20300       mov     dword [rel data_46934], eax
0000c6d4  e87fefffff         call    m_strdup
{ Does not return }

0000c6d9                                                                             48 8b 7b 20 48 89 05                           H.{ H..
0000c6e0  64 a2 03 00 e8 6f ef ff ff 48 8b 7b 28 48 89 05 44 a2 03 00 e8 5f ef ff ff 48 8b 5b 08 48 89 05  d....o...H.{(H..D...._...H.[.H..
0000c700  3c a2 03 00 48 85 db 75 09 48 8d 1d 6d 81 02 00 eb 2d 48 8d 35 3f a2 02 00 48 89 df e8 ef 8c ff  <...H..u.H..m....-H.5?...H......
0000c720  ff 85 c0 75 1a 48 8b 3d 1c a2 03 00 e8 9f 8f ff ff 48 85 c0 74 d3 48 8b 58 08 48 85 db 74 ca 48  ...u.H.=.........H..t.H.X.H..t.H
0000c740  89 df e8 11 ef ff ff 48 89 05 02 a2 03 00                                                        .......H......

0000c74e  5b                 pop     rbx {__saved_rbx}
0000c74f  e9b59fffff         jmp     __x86_return_thunk
{ Does not return }


0000c754    void update_channel_prio() __noreturn

0000c754  8b3d5aa00300       mov     edi, dword [rel data_467b4]
0000c75a  85ff               test    edi, edi
0000c75c  7856               js      0xc7b4

0000c75e  8b0d0ca20300       mov     ecx, dword [rel data_46970]
0000c764  488b35fda10300     mov     rsi, qword [rel data_46968]
0000c76b  53                 push    rbx {__saved_rbx}
0000c76c  31c0               xor     eax, eax  {0x0}
0000c76e  31db               xor     ebx, ebx  {0x0}

0000c770  39c8               cmp     eax, ecx
0000c772  731e               jae     0xc792

0000c774  488b14c6           mov     rdx, qword [rsi+rax*8]
0000c778  4885d2             test    rdx, rdx
0000c77b  7410               je      0xc78d

0000c77d  8b9280000000       mov     edx, dword [rdx+0x80]
0000c783  bb01000000         mov     ebx, 0x1
0000c788  83fa01             cmp     edx, 0x1
0000c78b  7407               je      0xc794

0000c78d  48ffc0             inc     rax
0000c790  ebde               jmp     0xc770

0000c792  31d2               xor     edx, edx  {0x0}

0000c794  83f301             xor     ebx, 0x1
0000c797  09d3               or      ebx, edx
0000c799  391de1a10300       cmp     dword [rel data_46980], ebx
0000c79f  740d               je      0xc7ae  {data_46980}

0000c7a1  89de               mov     esi, ebx
0000c7a3  e8d5520000         call    set_sock_priority
{ Does not return }

0000c7a8                          89 1d d2 a1 03 00                                                                ......

0000c7ae  5b                 pop     rbx {__saved_rbx}
0000c7af  e9559fffff         jmp     __x86_return_thunk
{ Does not return }

0000c7b4  e9509fffff         jmp     __x86_return_thunk
{ Does not return }


0000c7b9    void common_session_init(int32_t arg1, int32_t arg2) __noreturn

0000c7b9  39f7               cmp     edi, esi
0000c7bb  89f0               mov     eax, esi
0000c7bd  53                 push    rbx {var_8}
0000c7be  89f3               mov     ebx, esi
0000c7c0  0f4dc7             cmovge  eax, edi
0000c7c3  893de79f0300       mov     dword [rel data_467b0], edi
0000c7c9  8935e59f0300       mov     dword [rel data_467b4], esi
0000c7cf  8905eb9f0300       mov     dword [rel data_467c0], eax
0000c7d5  85ff               test    edi, edi
0000c7d7  7805               js      0xc7de

0000c7d9  e8ab98ffff         call    setnonblocking
{ Does not return }

0000c7de  85db               test    ebx, ebx
0000c7e0  7807               js      0xc7e9

0000c7e2  89df               mov     edi, ebx
0000c7e4  e8a098ffff         call    setnonblocking
{ Does not return }

0000c7e9  4531d2             xor     r10d, r10d  {0x0}
0000c7ec  4489158da10300     mov     dword [rel data_46980], r10d  {0x0}
0000c7f3  e85cffffff         call    update_channel_prio
{ Does not return }

0000c7f8                                                                          e8 fd 9c ff ff 45 31 db                          .....E1.
0000c800  48 8d 3d 15 a0 03 00 48 89 05 9a 9f 03 00 48 89 05 2b a0 03 00 48 89 05 34 a0 03 00 4c 89 1d 25  H.=....H......H..+...H..4...L..%
0000c820  a0 03 00 4c 89 1d 0e a0 03 00 e8 21 8b ff ff 85 c0 79 0e 48 8d 3d 46 80 02 00 31 c0 e8 90 93 ff  ...L.......!.....y.H.=F...1.....
0000c840  ff 8b 3d d5 9f 03 00 e8 3d 98 ff ff 8b 3d ce 9f 03 00 e8 32 98 ff ff 8b 15 63 9f 03 00 8b 05 b9  ..=.....=....=.....2.....c......
0000c860  9f 03 00 bf 00 40 00 00 39 d0 0f 4c c2 8b 15 ad 9f 03 00 39 d0 0f 4c c2 89 05 42 9f 03 00 e8 ba  .....@..9..L.......9..L...B.....
0000c880  9e ff ff 48 8d 3d 46 9f 03 00 48 89 05 37 9f 03 00 31 c0 48 89 05 56 9f 03 00 48 89 05 57 9f 03  ...H.=F...H..7...1.H..V...H..W..
0000c8a0  00 48 89 05 5c 9f 03 00 e8 7b bf ff ff 8b 05 65 9f 03 00 31 d2 bf b8 06 00 00 48 89 15 17 a0 03  .H..\....{.....e...1......H.....
0000c8c0  00 25 fe 00 00 00 48 89 15 13 a0 03 00 0d 01 14 00 00 89 05 40 9f 03 00 e8 33 ed ff ff 48 8d 15  .%....H.............@....3...H..
0000c8e0  fc b3 02 00 31 c9 31 ff 48 89 05 91 9f 03 00 45 31 c0 31 f6 45 31 c9 48 89 0d 8a 9f 03 00 48 89  ....1.1.H......E1.1.E1.H......H.
0000c900  90 50 03 00 00 48 89 10 48 8d 15 71 83 03 00 48 89 50 08 48 89 90 58 03 00 00 48 8d 15 9f b3 02  .P...H..H..q...H.P.H..X...H.....
0000c920  00 48 89 50 10 89 78 1c 4c 89 40 20 48 89 90 60 03 00 00 48 89 b0 a0 06 00 00 c7 80 a8 06 00 00  .H.P..x.L.@ H..`...H............
0000c940  ff ff ff ff 89 b8 6c 03 00 00 4c 89 80 70 03 00 00 5b 4c 89 05 37 9f 03 00 4c 89 05 50 9f 03 00  ......l...L..p...[L..7...L..P...
0000c960  4c 89 05 51 9f 03 00 4c 89 05 2a 9f 03 00 4c 89 05 43 9e 03 00 4c 89 05 fc 9f 03 00 44 89 0d 11  L..Q...L..*...L..C...L......D...
0000c980  a0 03 00 e9 81 9d ff ff                                                                          ........

0000c988    void __x86_indirect_thunk_r14() __noreturn

0000c988  e807000000         call    sub_c994

0000c98d  f390               pause   
0000c98f  0faee8             lfence  
0000c992  ebf9               jmp     0xc98d


0000c994    int64_t sub_c994() __pure

0000c994  4c893424           mov     qword [rsp {__return_addr}], r14
0000c998  c3                 retn     {__return_addr}


0000c999    void make_mac(int32_t arg1, void* arg2, int64_t arg3, int32_t arg4) __noreturn

0000c999  4156               push    r14 {__saved_r14}
0000c99b  4155               push    r13 {__saved_r13}
0000c99d  4154               push    r12 {__saved_r12}
0000c99f  55                 push    rbp {__saved_rbp}
0000c9a0  53                 push    rbx {__saved_rbx}
0000c9a1  4881ecd0010000     sub     rsp, 0x1d0
0000c9a8  64488b0425280000…  mov     rax, qword [fs:0x28]
0000c9b1  48898424c8010000   mov     qword [rsp+0x1c8 {var_30}], rax
0000c9b9  488b4610           mov     rax, qword [rsi+0x10]
0000c9bd  80781000           cmp     byte [rax+0x10], 0x0
0000c9c1  0f849b000000       je      0xca62

0000c9c7  4989d6             mov     r14, rdx
0000c9ca  89cb               mov     ebx, ecx
0000c9cc  488d9628030000     lea     rdx, [rsi+0x328]
0000c9d3  488b4808           mov     rcx, qword [rax+0x8]
0000c9d7  4c8d642410         lea     r12, [rsp+0x10 {var_1e8}]
0000c9dc  8b7618             mov     esi, dword [rsi+0x18]
0000c9df  89fd               mov     ebp, edi
0000c9e1  4d89c5             mov     r13, r8
0000c9e4  4c89e7             mov     rdi, r12 {var_1e8}
0000c9e7  e8a6450100         call    hmac_init
{ Does not return }

0000c9ec                                      85 c0 74 0e 48 8d 3d 9c 7e 02 00 31 c0 e8 d3 91 ff ff 48 8d              ..t.H.=.~..1......H.
0000ca00  b4 24 c4 01 00 00 ba 04 00 00 00 4c 89 e7 0f cd 89 ac 24 c4 01 00 00 e8 46 47 01 00 85 c0 75 d0  .$.........L......$.....FG....u.
0000ca20  31 f6 4c 89 f7 e8 20 9e ff ff 89 de 4c 89 f7 e8 10 9f ff ff 89 da 4c 89 e7 48 89 c6 e8 21 47 01  1.L... .....L.........L..H...!G.
0000ca40  00 85 c0 75 ab 48 8d 54 24 08 4c 89 ee 4c 89 e7 48 c7 44 24 08 20 00 00 00 e8 85 43 01 00 85 c0  ...u.H.T$.L..L..H.D$. .....C....
0000ca60  75 8e                                                                                            u.

0000ca62  488b8424c8010000   mov     rax, qword [rsp+0x1c8 {var_30}]
0000ca6a  64482b0425280000…  sub     rax, qword [fs:0x28]
0000ca73  7405               je      0xca7a

0000ca75  e89687ffff         call    __stack_chk_fail
{ Does not return }

0000ca7a  4881c4d0010000     add     rsp, 0x1d0
0000ca81  5b                 pop     rbx {__saved_rbx}
0000ca82  5d                 pop     rbp {__saved_rbp}
0000ca83  415c               pop     r12 {__saved_r12}
0000ca85  415d               pop     r13 {__saved_r13}
0000ca87  415e               pop     r14 {__saved_r14}
0000ca89  e97b9cffff         jmp     __x86_return_thunk
{ Does not return }


0000ca8e    void write_packet() __noreturn

0000ca8e  55                 push    rbp {var_8}
0000ca8f  488d2d3a9d0300     lea     rbp, [rel data_467d0]
0000ca96  53                 push    rbx {var_10}
0000ca97  4889ef             mov     rdi, rbp  {data_467d0}
0000ca9a  4881ec48030000     sub     rsp, 0x348
0000caa1  64488b0425280000…  mov     rax, qword [fs:0x28]
0000caaa  4889842438030000   mov     qword [rsp+0x338 {var_20}], rax
0000cab2  31c0               xor     eax, eax  {0x0}
0000cab4  c744240c32000000   mov     dword [rsp+0xc {var_34c}], 0x32
0000cabc  e87abdffff         call    isempty
{ Does not return }

0000cac1     85 c0 74 18 ba 47 00 00 00 48 8d 35 cd 7d 02 00 48 8d 3d d3 7d 02 00 e8 9c 91 ff ff 48 8d 5c   ..t..G...H.5.}..H.=.}.......H.\
0000cae0  24 10 48 8d 54 24 0c 48 89 ef 48 89 de e8 ff 4d 00 00 8b 54 24 0c 8b 3d b8 9c 03 00 48 89 de e8  $.H.T$.H..H....M...T$..=....H...
0000cb00  0c 86 ff ff 48 89 c3 48 85 c0 79 27 e8 7f 85 ff ff 8b 38 83 ff 04 74 3d 83 ff 0b 74 38 e8 ae 8c  ....H..H..y'......8...t=...t8...
0000cb20  ff ff 48 8d 3d 9c 7d 02 00 48 89 c6 31 c0 e8 9e 90 ff ff 48 89 c6 48 89 ef e8 44 4e 00 00 29 1d  ..H.=.}..H..1......H..H...DN..).
0000cb40  a4 9c 03 00 48 85 db 75 0c 48 8b 05 98 9d 03 00 e8 d7 9b ff ff 48 8b 84 24 38 03 00 00 64 48 2b  ....H..u.H...........H..$8...dH+
0000cb60  04 25 28 00 00 00 74 05 e8 a3 86 ff ff 48 81 c4 48 03 00 00 5b 5d e9 8e 9b ff ff                 .%(...t......H..H...[].....

0000cb7b    void decrypt_packet() __noreturn

0000cb7b  4157               push    r15 {var_8}
0000cb7d  4156               push    r14 {var_10}
0000cb7f  4155               push    r13 {var_18}
0000cb81  4154               push    r12 {var_20}
0000cb83  55                 push    rbp {var_28}
0000cb84  53                 push    rbx {var_30}
0000cb85  4883ec48           sub     rsp, 0x48
0000cb89  488b3d609c0300     mov     rdi, qword [rel data_467f0]
0000cb90  64488b0425280000…  mov     rax, qword [fs:0x28]
0000cb99  4889442438         mov     qword [rsp+0x38 {var_40}], rax
0000cb9e  488b05db9c0300     mov     rax, qword [rel data_46880]
0000cba5  488b10             mov     rdx, qword [rax]
0000cba8  0fb67210           movzx   esi, byte [rdx+0x10]
0000cbac  488b5010           mov     rdx, qword [rax+0x10]
0000cbb0  488b4008           mov     rax, qword [rax+0x8]
0000cbb4  440fb66210         movzx   r12d, byte [rdx+0x10]
0000cbb9  8b5708             mov     edx, dword [rdi+0x8]
0000cbbc  0115ba9c0300       add     dword [rel data_46878+4], edx
0000cbc2  4883781800         cmp     qword [rax+0x18], 0x0
0000cbc7  0f848f000000       je      0xcc5c

0000cbcd  31f6               xor     esi, esi  {0x0}
0000cbcf  e8769cffff         call    buf_setpos
{ Does not return }

0000cbd4                                                              48 8b 3d 15 9c 03 00 48 8b 2d 9e 9c                      H.=....H.-..
0000cbe0  03 00 8b 5f 08 2b 5f 0c 89 d8 44 29 e0 89 44 24 0c 48 8b 45 08 8b 74 24 0c 4c 8b 70 18 e8 6b 9d  ..._.+_...D)..D$.H.E..t$.L.p..k.
0000cc00  ff ff 48 8b 3d e7 9b 03 00 89 de 49 89 c5 e8 31 9d ff ff 8b 4c 24 0c 4c 8d 4d 28 4c 89 ea 45 0f  ..H.=......I...1....L$.L.M(L..E.
0000cc20  b6 c4 48 89 c6 57 8b 3d dc 9b 03 00 6a 01 e8 55 fd ff ff 41 58 41 59 85 c0 74 0c 48 8d 3d 95 7c  ..H..W.=....j..U...AXAY..t.H.=.|
0000cc40  02 00 e9 f2 00 00 00 8b 74 24 0c 48 8b 3d 9e 9b 03 00 e8 3e 9c ff ff e9 e4 00 00 00              ........t$.H.=.....>........

0000cc5c  e8e99bffff         call    buf_setpos
{ Does not return }

0000cc61     48 8b 3d 88 9b 03 00 48 8b 2d 11 9c 03 00 8b 5f 08 2b 5f 0c 44 29 e3 48 8b 45 08 89 de 4c 8b   H.=....H.-....._.+_.D).H.E...L.
0000cc80  70 10 e8 e6 9c ff ff 48 8b 3d 62 9b 03 00 89 de 49 89 c5 e8 ac 9c ff ff 48 8d 4d 28 89 da 4c 89  p......H.=b.....I.......H.M(..L.
0000cca0  ee 48 89 c7 e8 df fc ff ff 85 c0 75 8e 48 8b 3d 3c 9b 03 00 89 de 4c 8d 6c 24 18 e8 d5 9b ff ff  .H.........u.H.=<.....L.l$......
0000ccc0  48 8b 05 b9 9b 03 00 48 8b 3d 22 9b 03 00 31 f6 48 8b 40 10 8b 6f 08 44 0f b6 70 10 e8 69 9b ff  H......H.="...1.H.@..o.D..p..i..
0000cce0  ff 48 8b 15 08 9b 03 00 48 8b 35 91 9b 03 00 4d 89 e8 44 29 f5 8b 3d 0d 9b 03 00 89 e9 e8 97 fc  .H......H.5....M..D)..=.........
0000cd00  ff ff 48 8b 3d e7 9a 03 00 89 ee e8 3a 9b ff ff 48 8b 3d d9 9a 03 00 44 89 f6 e8 25 9c ff ff 41  ..H.=.......:...H.=....D...%...A
0000cd20  0f b6 d6 4c 89 ef 48 89 c6 e8 18 97 ff ff 85 c0 74 0e 48 8d 3d af 7b 02 00 31 c0 e8 91 8e ff ff  ...L..H.........t.H.=.{..1......
0000cd40  48 8b 3d a9 9a 03 00 be 04 00 00 00 e8 f9 9a ff ff 48 8b 3d 98 9a 03 00 e8 7f 9b ff ff 48 8b 3d  H.=..............H.=.........H.=
0000cd60  8c 9a 03 00 0f b6 c0 8b 57 08 44 29 e2 29 c2 44 8d 62 fb 83 ea 06 81 fa 14 80 00 00 76 11 44 89  ........W.D).).D.b..........v.D.
0000cd80  e6 48 8d 3d 70 7b 02 00 31 c0 e8 42 8e ff ff be 05 00 00 00 e8 b1 9a ff ff e8 8e 1d 00 00 4c 8b  .H.=p{..1..B..................L.
0000cda0  2d 4b 9a 03 00 85 c0 0f 84 a4 00 00 00 48 8b 05 cc 9a 03 00 bf 01 80 00 00 48 8b 68 20 e8 7b 99  -K...........H...........H.h .{.
0000cdc0  ff ff 44 89 e6 4c 89 ef 44 89 65 08 48 89 c3 e8 70 9b ff ff 48 89 ef be 02 00 00 00 48 89 45 00  ..D..L..D.e.H...p...H.......H.E.
0000cde0  8b 43 10 89 45 20 48 8b 03 48 89 45 18 e8 fe 82 ff ff 48 8d 3d 12 7b 02 00 85 c0 0f 85 38 ff ff  .C..E H..H.E......H.=.{......8..
0000ce00  ff 8b 73 10 48 89 df 2b 75 20 e8 ed 99 ff ff 83 7d 08 00 75 09 81 7b 08 00 80 00 00 76 0c 48 8d  ..s.H..+u ......}..u..{.....v.H.
0000ce20  3d f1 7a 02 00 e9 0f ff ff ff 48 89 df 31 f6 48 89 1d c2 99 03 00 e8 0f 9a ff ff 48 8b 3d ae 99  =.z.......H..1.H...........H.=..
0000ce40  03 00 31 d2 89 15 b6 99 03 00 e8 22 99 ff ff eb 1c 41 8b 75 0c 4c 89 ef 4c 89 2d 99 99 03 00 89  ..1........".....A.u.L..L.-.....
0000ce60  35 9b 99 03 00 44 01 e6 e8 8f 99 ff ff 31 c0 ff 05 93 99 03 00 48 89 05 74 99 03 00 48 8b 44 24  5....D.......1.......H..t...H.D$
0000ce80  38 64 48 2b 04 25 28 00 00 00 74 05 e8 7f 83 ff ff 48 83 c4 48 5b 5d 41 5c 41 5d 41 5e 41 5f e9  8dH+.%(...t......H..H[]A\A]A^A_.
0000cea0  65 98 ff ff                                                                                      e...

0000cea4    void read_packet() __noreturn

0000cea4  4157               push    r15 {__saved_r15}
0000cea6  4156               push    r14 {__saved_r14}
0000cea8  4155               push    r13 {__saved_r13}
0000ceaa  4154               push    r12 {__saved_r12}
0000ceac  55                 push    rbp {__saved_rbp}
0000cead  53                 push    rbx {__saved_rbx}
0000ceae  4883ec28           sub     rsp, 0x28
0000ceb2  488b3d37990300     mov     rdi, qword [rel data_467f0]
0000ceb9  64488b0425280000…  mov     rax, qword [fs:0x28]
0000cec2  4889442418         mov     qword [rsp+0x18 {var_40}], rax
0000cec7  488b05b2990300     mov     rax, qword [rel data_46880]
0000cece  488b10             mov     rdx, qword [rax]
0000ced1  0fb66a10           movzx   ebp, byte [rdx+0x10]
0000ced5  4989ec             mov     r12, rbp
0000ced8  4885ff             test    rdi, rdi
0000cedb  7409               je      0xcee6

0000cedd  396f08             cmp     dword [rdi+0x8], ebp
0000cee0  0f8382010000       jae     0xd068

0000cee6  488b4010           mov     rax, qword [rax+0x10]
0000ceea  0fb65810           movzx   ebx, byte [rax+0x10]
0000ceee  4885ff             test    rdi, rdi
0000cef1  7514               jne     0xcf07

0000cef3  bf80000000         mov     edi, 0x80
0000cef8  e84098ffff         call    buf_new
{ Does not return }

0000cefd                                                                                         48 89 05                               H..
0000cf00  ec 98 03 00 48 89 c7                                                                             ....H..

0000cf07  4189ee             mov     r14d, ebp
0000cf0a  442b770c           sub     r14d, dword [rdi+0xc]
0000cf0e  4489f6             mov     esi, r14d
0000cf11  e8579affff         call    buf_getwriteptr
{ Does not return }

0000cf16                                                                    8b 3d 94 98 03 00 44 89 f2 48                        .=....D..H
0000cf20  89 c6 e8 89 84 ff ff 49 89 c5 85 c0 75 0e 48 8b 05 b3 99 03 00 e8 f2 97 ff ff eb 06 0f 88 8a 01  .......I....u.H.................
0000cf40  00 00 48 8b 3d a7 98 03 00 44 89 ee e8 15 99 ff ff 45 39 ee 0f 85 af 01 00 00 48 8b 3d 8f 98 03  ..H.=....D.......E9.......H.=...
0000cf60  00 31 f6 e8 e2 98 ff ff 48 8b 15 11 99 03 00 48 8b 3d 7a 98 03 00 48 8b 42 08 4c 8d 72 28 48 83  .1......H......H.=z...H.B.L.r(H.
0000cf80  78 18 00 74 40 89 ee 4c 8b 68 20 e8 b4 99 ff ff 48 8d 54 24 14 4d 89 f0 4c 89 e1 8b 3d 67 98 03  x..t@..L.h .....H.T$.M..L...=g..
0000cfa0  00 48 89 c6 e8 16 07 00 00 85 c0 74 0e 48 8d 3d 23 79 02 00 31 c0 e8 16 8c ff ff 8b 44 24 14 8d  .H.........t.H.=#y..1.......D$..
0000cfc0  74 03 04 eb 47 89 ee 4c 8b 78 10 e8 9d 99 ff ff 48 8b 3d 19 98 03 00 89 ee 49 89 c5 e8 63 99 ff  t...G..L.x......H.=......I...c..
0000cfe0  ff 4c 89 f1 4c 89 e2 4c 89 ee 48 89 c7 e8 29 97 ff ff 85 c0 75 b7 48 8b 3d f3 97 03 00 e8 94 99  .L..L..L..H...).....u.H.=.......
0000d000  ff ff 83 c0 04 89 44 24 14 8d 34 03 81 fe b8 88 00 00 77 10 8b 44 24 14 39 e8 72 08 31 d2 f7 f5  ......D$..4.......w..D$.9.r.1...
0000d020  85 d2 74 0e 48 8d 3d 20 79 02 00 31 c0 e8 9f 8b ff ff 48 8b 3d b7 97 03 00 39 77 10 73 17 89 74  ..t.H.= y..1......H.=....9w.s..t
0000d040  24 0c e8 47 97 ff ff 8b 74 24 0c 48 89 05 9e 97 03 00 48 89 c7 e8 a2 97 ff ff 48 8b 3d 8f 97 03  $..G....t$.H......H.......H.=...
0000d060  00 89 ee e8 e2 97 ff ff                                                                          ........

0000d068  488b3d81970300     mov     rdi, qword [rel data_467f0]
0000d06f  8b5f08             mov     ebx, dword [rdi+0x8]
0000d072  2b5f0c             sub     ebx, dword [rdi+0xc]
0000d075  7527               jne     0xd09e

0000d077  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
0000d07c  64482b0425280000…  sub     rax, qword [fs:0x28]
0000d085  0f858e000000       jne     0xd119

0000d08b  4883c428           add     rsp, 0x28
0000d08f  5b                 pop     rbx {__saved_rbx}
0000d090  5d                 pop     rbp {__saved_rbp}
0000d091  415c               pop     r12 {__saved_r12}
0000d093  415d               pop     r13 {__saved_r13}
0000d095  415e               pop     r14 {__saved_r14}
0000d097  415f               pop     r15 {__saved_r15}
0000d099  e9ddfaffff         jmp     decrypt_packet
{ Does not return }

0000d09e  89de               mov     esi, ebx
0000d0a0  e89f98ffff         call    buf_getptr
{ Does not return }

0000d0a5                 8b 3d 05 97 03 00 89 da 48 89 c6 e8 fb 82 ff ff 48 89 c5 85 c0 75 0e 48 8b 05 25       .=......H.......H....u.H..%
0000d0c0  98 03 00 e8 64 96 ff ff eb 29 79 27 e8 bf 7f ff ff 8b 38 83 ff 04 74 31 83 ff 0b 74 2c e8 ee 86  ....d....)y'......8...t1...t,...
0000d0e0  ff ff 48 8d 3d 50 78 02 00 48 89 c6 31 c0 e8 de 8a ff ff 48 8b 3d f6 96 03 00 89 ee e8 94 97 ff  ..H.=Px..H..1......H.=..........
0000d100  ff 39 dd 0f 84 6e ff ff ff 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05                       .9...n...H.D$.dH+.%(...t.

0000d119  e8f280ffff         call    __stack_chk_fail
{ Does not return }

0000d11e                                                                                            48 83                                H.
0000d120  c4 28 5b 5d 41 5c 41 5d 41 5e 41 5f e9 d8 95 ff ff                                               .([]A\A]A^A_.....

0000d131    void writebuf_enqueue(void* arg1) __noreturn

0000d131  53                 push    rbx {var_8}
0000d132  31f6               xor     esi, esi  {0x0}
0000d134  4889fb             mov     rbx, rdi
0000d137  e80e97ffff         call    buf_setpos
{ Does not return }

0000d13c                                                                                      48 89 de 48                              H..H
0000d140  8d 3d 8a 96 03 00 e8 7a b7 ff ff 8b 43 08 5b 01 05 93 96 03 00 e9 af 95 ff ff                    .=.....z....C.[...........

0000d15a    void encrypt_packet() __noreturn

0000d15a  4157               push    r15 {var_8}
0000d15c  4156               push    r14 {var_10}
0000d15e  4155               push    r13 {var_18}
0000d160  4154               push    r12 {var_20}
0000d162  55                 push    rbp {var_28}
0000d163  53                 push    rbx {var_30}
0000d164  4883ec48           sub     rsp, 0x48
0000d168  488b3d59960300     mov     rdi, qword [rel data_467c8]
0000d16f  64488b3425280000…  mov     rsi, qword [fs:0x28]
0000d178  4889742438         mov     qword [rsp+0x38 {var_40}], rsi
0000d17d  31f6               xor     esi, esi  {0x0}
0000d17f  e8c696ffff         call    buf_setpos
{ Does not return }

0000d184              48 8b 3d 3d 96 03 00 e8 4c 97 ff ff 48 8b 3d 31 96 03 00 31 f6 89 c5 e8 aa 96 ff ff      H.==....L...H.=1...1........
0000d1a0  f6 05 71 96 03 00 01 75 75 40 80 fd 31 77 0d 8d 45 fb 3c 01 76 06 40 80 fd 14 75 62 bf 10 00 00  ..q....uu@..1w..E.<.v.@...ub....
0000d1c0  00 e8 4a e4 ff ff 31 f6 48 8b 3d f9 95 03 00 48 89 30 48 89 c3 e8 fe 95 ff ff 48 8b 3d e7 95 03  ..J...1.H.=....H.0H.......H.=...
0000d1e0  00 31 f6 48 89 43 08 e8 5e 96 ff ff 48 8b 3d d5 95 03 00 31 f6 e8 02 96 ff ff 48 8b 05 df 96 03  .1.H.C..^...H.=....1......H.....
0000d200  00 48 85 c0 74 05 48 89 18 eb 07 48 89 1d c6 96 03 00 48 89 1d c7 96 03 00 e9 10 04 00 00 48 8b  .H..t.H....H......H...........H.
0000d220  05 5b 96 03 00 48 8b 90 50 03 00 00 48 8b 80 60 03 00 00 44 0f b6 60 10 48 8b 05 89 95 03 00 44  .[...H..P...H..`...D..`.H......D
0000d240  0f b6 6a 10 8b 40 08 45 89 e7 41 8d 7c 04 1e b8 10 00 00 00 41 38 c5 41 0f 43 c5 01 c7 e8 db 94  ..j..@.E..A.|.......A8.A.C......
0000d260  ff ff be 05 00 00 00 48 89 c3 48 89 c7 e8 8a 95 ff ff be 05 00 00 00 48 89 df e8 cb 95 ff ff e8  .......H..H............H........
0000d280  7c 18 00 00 4c 8b 35 3d 95 03 00 41 8b 4e 08 85 c0 0f 84 22 01 00 00 41 8b 46 0c 8d 71 15 01 c8  |...L.5=...A.N....."...A.F..q...
0000d2a0  89 04 24 8b 43 10 2b 43 0c 39 f0 73 18 ba de 02 00 00 48 8d 35 e5 75 02 00 48 8d 3d b0 76 02 00  ..$.C.+C.9.s......H.5.u..H.=.v..
0000d2c0  e9 ef 00 00 00 48 8b 05 b4 95 03 00 89 ce 4c 89 f7 4c 8b 80 70 03 00 00 41 89 48 08 4c 89 44 24  .....H........L..L..p...A.H.L.D$
0000d2e0  08 e8 5e 96 ff ff 4c 8b 44 24 08 8b 73 10 48 89 df 2b 73 0c 49 89 00 48 8b 05 82 95 03 00 48 8b  ..^...L.D$..s.H..+s.I..H......H.
0000d300  88 70 03 00 00 89 71 20 48 89 4c 24 08 e8 5b 96 ff ff 48 8b 4c 24 08 be 02 00 00 00 48 89 41 18  .p....q H.L$..[...H.L$......H.A.
0000d320  48 8b 05 59 95 03 00 48 8b b8 70 03 00 00 e8 ad 7f ff ff 48 8b 0d 46 95 03 00 8b 34 24 4c 89 f7  H..Y...H..p........H..F....4$L..
0000d340  89 44 24 08 48 8b 89 70 03 00 00 2b 71 08 e8 f7 94 ff ff 48 8b 15 26 95 03 00 8b 73 10 48 89 df  .D$.H..p...+q......H..&....s.H..
0000d360  48 8b 92 70 03 00 00 2b 72 20 e8 8d 94 ff ff 8b 73 08 48 89 df e8 d0 94 ff ff 8b 44 24 08 48 8d  H..p...+r ......s.H........D$.H.
0000d380  3d 86 75 02 00 85 c0 0f 85 ba 01 00 00 48 8b 05 ec 94 03 00 48 8b 80 70 03 00 00 83 78 08 00 74  =.u..........H......H..p....x..t
0000d3a0  57 ba f3 02 00 00 48 8d 35 f1 74 02 00 48 8d 3d f2 75 02 00 e8 c0 88 ff ff 89 ce 4c 89 f7 89 0c  W.....H.5.t..H.=.u.........L....
0000d3c0  24 e8 7e 95 ff ff 48 89 df 49 89 c6 48 8b 05 f5 93 03 00 8b 70 08 e8 92 95 ff ff 8b 0c 24 4c 89  $.~...H..I..H.......p........$L.
0000d3e0  f6 48 89 c7 f3 a4 48 89 df 48 8b 05 d8 93 03 00 8b 70 08 e8 6e 94 ff ff 48 8b 3d c9 93 03 00 31  .H....H..H.......p..n...H.=....1
0000d400  f6 e8 44 94 ff ff 48 8b 3d bb 93 03 00 31 f6 e8 e8 93 ff ff 48 8b 05 65 94 03 00 8b 4b 08 48 8b  ..D...H.=....1......H..e....K.H.
0000d420  90 58 03 00 00 89 c8 48 83 7a 18 00 74 03 8d 41 fc 41 0f b6 f5 31 d2 45 89 ee f7 f6 41 29 d6 41  .X.....H.z..t..A.A...1.E....A).A
0000d440  80 fe 03 77 03 45 01 ee 41 0f b6 c6 01 c8 83 f8 0f 77 03 45 01 ee 31 f6 48 89 df 45 0f b6 f6 e8  ...w.E..A........w.E..1.H..E....
0000d460  e6 93 ff ff 8b 43 08 48 89 df 41 8d 74 06 fc e8 f6 95 ff ff 44 89 f6 48 89 df e8 96 94 ff ff 8b  .....C.H..A.t.......D..H........
0000d480  73 08 48 89 df e8 c0 93 ff ff 44 89 f6 48 89 df e8 8e 93 ff ff 44 89 f6 48 89 df e8 a4 94 ff ff  s.H.......D..H.......D..H.......
0000d4a0  44 89 f6 48 89 c7 e8 3f af ff ff 48 8b 35 ce 93 03 00 48 8b 86 58 03 00 00 48 83 78 18 00 0f 84  D..H...?...H.5....H..X...H.x....
0000d4c0  9a 00 00 00 31 f6 48 89 df e8 7c 93 ff ff 44 89 e6 48 89 df 44 8b 6b 08 e8 46 93 ff ff 48 8b 15  ....1.H...|...D..H..D.k..F...H..
0000d4e0  9c 93 03 00 48 89 df 48 8b 82 58 03 00 00 48 89 54 24 08 4c 8b 70 18 43 8d 04 2c 89 c6 89 04 24  ....H..H..X...H.T$.L.p.C..,....$
0000d500  e8 68 94 ff ff 44 89 ee 48 89 df 49 89 c4 e8 31 94 ff ff 44 89 e9 8b 3d e8 92 03 00 45 0f b6 c7  .h...D..H..I...1...D...=....E...
0000d520  48 89 c6 50 6a 00 48 8b 54 24 18 4c 8d 8a 78 03 00 00 4c 89 e2 e8 4e f4 ff ff 5a 59 85 c0 74 0e  H..Pj.H.T$.L..x...L...N...ZY..t.
0000d540  48 8d 3d 86 74 02 00 31 c0 e8 83 86 ff ff 8b 34 24 48 89 df e8 3c 93 ff ff e9 98 00 00 00 8b 4b  H.=.t..1.......4$H...<.........K
0000d560  08 48 8d 44 24 18 8b 3d 98 92 03 00 48 89 da 49 89 c0 48 81 c6 50 03 00 00 48 89 04 24 e8 17 f4  .H.D$..=....H..I..H..P...H..$...
0000d580  ff ff 31 f6 48 89 df e8 be 92 ff ff 4c 8b 3d ed 92 03 00 44 8b 6b 08 48 89 df 49 8b 87 58 03 00  ..1.H.......L.=....D.k.H..I..X..
0000d5a0  00 44 89 ee 4c 8b 70 08 e8 c0 93 ff ff 44 89 ee 48 89 df 48 89 44 24 08 e8 87 93 ff ff 48 8b 74  .D..L.p......D..H..H.D$......H.t
0000d5c0  24 08 49 8d 8f 78 03 00 00 44 89 ea 48 89 c7 e8 b4 f3 ff ff 85 c0 0f 85 64 ff ff ff 44 89 ee 48  $.I..x...D..H...........d...D..H
0000d5e0  89 df e8 ae 92 ff ff 48 8b 34 24 44 89 e2 48 89 df e8 45 95 ff ff 48 89 df 8b 43 08 01 05 76 92  .......H.4$D..H...E...H...C...v.
0000d600  03 00 e8 2a fb ff ff ff 05 f7 91 03 00 e8 e8 8e ff ff 8d 55 fe 48 89 05 2c 92 03 00 80 fa 01 76  ...*...............U.H..,......v
0000d620  0d 40 80 fd 52 74 07 48 89 05 22 92 03 00 48 8b 44 24 38 64 48 2b 04 25 28 00 00 00 74 05 e8 cd  .@..Rt.H.."...H.D$8dH+.%(...t...
0000d640  7b ff ff 48 83 c4 48 5b 5d 41 5c 41 5d 41 5e 41 5f e9 b3 90 ff ff                                {..H..H[]A\A]A^A_.....

0000d656    void maybe_flush_reply_queue() __noreturn

0000d656  f605bb91030001     test    byte [rel data_46818], 0x1
0000d65d  745b               je      0xd6ba  {data_46818}

0000d65f  55                 push    rbp {__saved_rbp}
0000d660  53                 push    rbx {__saved_rbx}
0000d661  51                 push    rcx {var_18}
0000d662  488b1d6f920300     mov     rbx, qword [rel data_468d8]
0000d669  4885db             test    rbx, rbx
0000d66c  7434               je      0xd6a2

0000d66e  488b4308           mov     rax, qword [rbx+0x8]
0000d672  488b3d4f910300     mov     rdi, qword [rel data_467c8]
0000d679  8b5008             mov     edx, dword [rax+0x8]
0000d67c  488b30             mov     rsi, qword [rax]
0000d67f  e8b794ffff         call    buf_putbytes
{ Does not return }

0000d684              48 8b 7b 08 e8 e4 90 ff ff 48 8b 2b 48 89 df e8 c8 79 ff ff e8 bd fa ff ff 48 89 eb      H.{......H.+H....y.......H..
0000d6a0  eb c7                                                                                            ..

0000d6a2  31c0               xor     eax, eax  {0x0}
0000d6a4  48890535920300     mov     qword [rel data_468e0], rax  {0x0}
0000d6ab  48890526920300     mov     qword [rel data_468d8], rax  {0x0}
0000d6b2  5a                 pop     rdx {var_18}
0000d6b3  5b                 pop     rbx {__saved_rbx}
0000d6b4  5d                 pop     rbp {__saved_rbp}
0000d6b5  e94f90ffff         jmp     __x86_return_thunk
{ Does not return }

0000d6ba  e94a90ffff         jmp     __x86_return_thunk
{ Does not return }


0000d6bf    void __x86_indirect_thunk_r13() __noreturn

0000d6bf  e807000000         call    sub_d6cb

0000d6c4  f390               pause   
0000d6c6  0faee8             lfence  
0000d6c9  ebf9               jmp     0xd6c4


0000d6cb    int64_t sub_d6cb() __pure

0000d6cb  4c892c24           mov     qword [rsp {__return_addr}], r13
0000d6cf  c3                 retn     {__return_addr}


0000d6d0    void void_start() __noreturn

0000d6d0  31c0               xor     eax, eax  {0x0}
0000d6d2  e93290ffff         jmp     __x86_return_thunk
{ Does not return }


0000d6d7    void void_cipher(int64_t arg1, int64_t arg2, uint64_t arg3) __noreturn

0000d6d7  4889f8             mov     rax, rdi
0000d6da  4839f7             cmp     rdi, rsi
0000d6dd  7414               je      0xd6f3

0000d6df  51                 push    rcx {var_8}
0000d6e0  4889f7             mov     rdi, rsi
0000d6e3  4889c6             mov     rsi, rax
0000d6e6  e8457fffff         call    memmove
0000d6eb  31c0               xor     eax, eax  {0x0}
0000d6ed  5e                 pop     rsi {var_8}
0000d6ee  e91690ffff         jmp     __x86_return_thunk
{ Does not return }

0000d6f3  31c0               xor     eax, eax  {0x0}
0000d6f5  e90f90ffff         jmp     __x86_return_thunk
{ Does not return }


0000d6fa    void dropbear_big_endian_ctr_start(int32_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int32_t arg5, int64_t arg6) __noreturn

0000d6fa  4883ec10           sub     rsp, 0x10
0000d6fe  4151               push    r9 {var_18}
0000d700  41b900100000       mov     r9d, 0x1000
0000d706  e8245a0100         call    ctr_start
{ Does not return }


0000d70b    void sub_d70b() __noreturn

0000d70b  4883c418           add     rsp, 0x18
0000d70f  e9f58fffff         jmp     __x86_return_thunk
{ Does not return }


0000d714    void buf_put_algolist_all(void* arg1, int64_t arg2, int32_t arg3) __noreturn

0000d714  4157               push    r15 {var_8}
0000d716  4156               push    r14 {var_10}
0000d718  4155               push    r13 {var_18}
0000d71a  4154               push    r12 {var_20}
0000d71c  4989f4             mov     r12, rsi
0000d71f  31f6               xor     esi, esi  {0x0}
0000d721  55                 push    rbp {var_28}
0000d722  89d5               mov     ebp, edx
0000d724  53                 push    rbx {var_30}
0000d725  4889fb             mov     rbx, rdi
0000d728  51                 push    rcx {var_38}
0000d729  448b770c           mov     r14d, dword [rdi+0xc]
0000d72d  e83893ffff         call    buf_putint
{ Does not return }

0000d732                                                        85 ed 41 0f 95 c7 31 c0 45 31 ed                             ..A...1.E1.

{ Continuation of function sub_d783 }

0000d73d  4489ed             mov     ebp, r13d
0000d740  486bed28           imul    rbp, rbp, 0x28
0000d744  4c01e5             add     rbp, r12
0000d747  48837d0000         cmp     qword [rbp], 0x0
0000d74c  743f               je      0xd78d

0000d74e  807d1800           cmp     byte [rbp+0x18], 0x0
0000d752  7505               jne     0xd759

0000d754  4584ff             test    r15b, r15b
0000d757  742f               je      0xd788

0000d759  85c0               test    eax, eax
0000d75b  740d               je      0xd76a  {0x0}

0000d75d  be2c000000         mov     esi, 0x2c
0000d762  4889df             mov     rdi, rbx
0000d765  e8ab91ffff         call    buf_putbyte
{ Does not return }

0000d76a  488b6d00           mov     rbp, qword [rbp]
0000d76e  4889ef             mov     rdi, rbp
0000d771  e87a7affff         call    strlen
0000d776  4889ee             mov     rsi, rbp
0000d779  4889df             mov     rdi, rbx
0000d77c  89c2               mov     edx, eax
0000d77e  e8b893ffff         call    buf_putbytes
{ Does not return }


0000d783    void sub_d783(int64_t* arg1 @ rbx, int64_t arg2 @ r12, int32_t arg3 @ r13, int32_t arg4 @ r14, char arg5 @ r15) __noreturn

0000d783  b801000000         mov     eax, 0x1

0000d788  41ffc5             inc     r13d
0000d78b  ebb0               jmp     0xd73d

0000d78d  8b430c             mov     eax, dword [rbx+0xc]
0000d790  4489f6             mov     esi, r14d
0000d793  4889df             mov     rdi, rbx
0000d796  8d68fc             lea     ebp, [rax-0x4]
0000d799  e8ac90ffff         call    buf_setpos
{ Does not return }

0000d79e                                                                                            44 29                                D)
0000d7a0  f5 48 89 df 89 ee e8 bf 92 ff ff 58 89 ee 48 89 df 5b 5d 41 5c 41 5d 41 5e 41 5f e9 a6 90 ff ff  .H.........X..H..[]A\A]A^A_.....

0000d7c0    void buf_put_algolist(void* arg1, int64_t arg2) __noreturn

0000d7c0  31d2               xor     edx, edx  {0x0}
0000d7c2  e94dffffff         jmp     buf_put_algolist_all
{ Does not return }


0000d7c7    void buf_has_algo(void* arg1) __noreturn

0000d7c7  4157               push    r15 {var_8}
0000d7c9  41bf01000000       mov     r15d, 0x1
0000d7cf  4156               push    r14 {var_10}
0000d7d1  4155               push    r13 {var_18}
0000d7d3  4154               push    r12 {var_20}
0000d7d5  4989fc             mov     r12, rdi
0000d7d8  55                 push    rbp {var_28}
0000d7d9  53                 push    rbx {var_30}
0000d7da  4881ecb8010000     sub     rsp, 0x1b8
0000d7e1  4889742408         mov     qword [rsp+0x8 {var_1e0}], rsi
0000d7e6  488d742414         lea     rsi, [rsp+0x14 {var_1d4}]
0000d7eb  644c8b3425280000…  mov     r14, qword [fs:0x28]
0000d7f4  4c89b424a8010000   mov     qword [rsp+0x1a8 {var_40}], r14
0000d7fc  448b770c           mov     r14d, dword [rdi+0xc]
0000d800  e8c491ffff         call    buf_getstring
{ Does not return }

0000d805                 8b 4c 24 14 48 89 44 24 18 48 89 c3 31 c0 39 c8 73 3a 8a 14 03 84 d2 74 5f 80 fa       .L$.H.D$.H..1.9.s:.....t_..
0000d820  2c 75 29 41 83 ff 31 76 0e 48 8d 3d ae 71 02 00 31 c0 e8 9a 83 ff ff 8d 50 01 44 89 fe c6 04 03  ,u)A..1v.H.=.q..1.......P.D.....
0000d840  00 41 ff c7 48 01 da 48 89 54 f4 18 48 ff c0 eb c2 45 31 ed 45 39 fd 73 1a 4a 8b 7c ec 18 48 8b  .A..H..H.T..H....E1.E9.s.J.|..H.
0000d860  74 24 08 49 ff c5 e8 a5 7b ff ff 89 c5 85 c0 75 e3 eb 03 83 cd ff 48 85 db 74 0d eb 03 83 cd ff  t$.I....{......u......H..t......
0000d880  48 89 df e8 d8 77 ff ff 44 89 f6 4c 89 e7 e8 b7 8f ff ff 48 8b 84 24 a8 01 00 00 64 48 2b 04 25  H....w..D..L.......H..$....dH+.%
0000d8a0  28 00 00 00 74 05 e8 65 79 ff ff 48 81 c4 b8 01 00 00 89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 46  (...t..ey..H........[]A\A]A^A_.F
0000d8c0  8e ff ff                                                                                         ...

0000d8c3    void first_usable_algo(int64_t arg1) __noreturn

0000d8c3  31d2               xor     edx, edx  {0x0}

0000d8c5  4863c2             movsxd  rax, edx
0000d8c8  486bc028           imul    rax, rax, 0x28
0000d8cc  4801f8             add     rax, rdi
0000d8cf  48833800           cmp     qword [rax], 0x0
0000d8d3  740a               je      0xd8df

0000d8d5  80781800           cmp     byte [rax+0x18], 0x0
0000d8d9  7506               jne     0xd8e1

0000d8db  ffc2               inc     edx
0000d8dd  ebe6               jmp     0xd8c5

0000d8df  31c0               xor     eax, eax  {0x0}

0000d8e1  e9238effff         jmp     __x86_return_thunk
{ Does not return }


0000d8e6    void buf_match_algo(void* arg1, int64_t arg2, int32_t arg3, int32_t* arg4) __noreturn

0000d8e6  4157               push    r15 {var_8}
0000d8e8  4156               push    r14 {var_10}
0000d8ea  4989f6             mov     r14, rsi
0000d8ed  4155               push    r13 {var_18}
0000d8ef  4154               push    r12 {var_20}
0000d8f1  55                 push    rbp {var_28}
0000d8f2  53                 push    rbx {var_30}
0000d8f3  4881ec68030000     sub     rsp, 0x368
0000d8fa  8954240c           mov     dword [rsp+0xc {var_38c}], edx
0000d8fe  644c8b3c25280000…  mov     r15, qword [fs:0x28]
0000d907  4c89bc2458030000   mov     qword [rsp+0x358 {var_40}], r15
0000d90f  4989cf             mov     r15, rcx
0000d912  4885c9             test    rcx, rcx
0000d915  7405               je      0xd91c

0000d917  31c0               xor     eax, eax  {0x0}
0000d919  418907             mov     dword [r15], eax  {0x0}

0000d91c  488d742434         lea     rsi, [rsp+0x34 {var_364}]
0000d921  bd01000000         mov     ebp, 0x1
0000d926  e89e90ffff         call    buf_getstring
{ Does not return }

0000d92b                                   8b 74 24 34 48 89 44 24 38 49 89 c4 31 c0 39 f0 73 3b 41 8a 14             .t$4H.D$8I..1.9.s;A..
0000d940  04 84 d2 74 31 80 fa 2c 75 27 83 fd 31 76 0e 48 8d 3d 88 70 02 00 31 c0 e8 74 82 ff ff 8d 50 01  ...t1..,u'..1v.H.=.p..1..t....P.
0000d960  89 ef 41 c6 04 04 00 ff c5 4c 01 e2 48 89 54 fc 38 48 ff c0 eb c3 31 ed 4c 89 f6 31 c0 48 8b 1e  ..A......L..H.T.8H....1.L..1.H..
0000d980  48 8d 94 24 c8 01 00 00 48 85 db 74 15 80 7e 18 00 75 02 31 db 48 89 1c c2 48 83 c6 28 48 ff c0  H..$....H..t..~..u.1.H...H..(H..
0000d9a0  eb db 8a 0d f8 8d 03 00 48 8d 74 24 38 41 89 c2 49 89 f3 88 4c 24 07 fe c9 75 0b 41 89 ea 49 89  ........H.t$8A..I...L$...u.A..I.
0000d9c0  d3 89 c5 48 89 f2 45 31 ed 45 89 e9 45 39 d5 0f 83 a3 00 00 00 45 31 c0 44 89 44 24 08 41 39 e8  ...H..E1.E..E9.......E1.D.D$.A9.
0000d9e0  0f 83 8a 00 00 00 4b 8b 3c c3 48 85 ff 74 79 4a 8b 34 ea 48 85 f6 74 70 4c 89 44 24 28 44 89 4c  ......K.<.H..tyJ.4.H..tpL.D$(D.L
0000da00  24 24 4c 89 5c 24 18 48 89 54 24 10 44 89 54 24 20 e8 fa 79 ff ff 44 8b 54 24 20 48 8b 54 24 10  $$L.\$.H.T$.D.T$ ..y..D.T$ H.T$.
0000da20  85 c0 4c 8b 5c 24 18 44 8b 4c 24 24 4c 8b 44 24 28 75 35 4d 85 ff 74 1c 83 7c 24 0c 00 74 0e 45  ..L.\$.D.L$$L.D$(u5M..t..|$..t.E
0000da40  85 c9 75 10 41 c7 07 01 00 00 00 eb 07 44 0b 4c 24 08 eb ee 49 6b d8 28 80 7c 24 07 01 74 04 49  ..u.A........D.L$...Ik.(.|$..t.I
0000da60  6b dd 28 4c 01 f3 eb 10 49 ff c0 e9 68 ff ff ff 49 ff c5 e9 51 ff ff ff 4c 89 e7 e8 e0 75 ff ff  k.(L....I...h...I...Q...L....u..
0000da80  48 8b 84 24 58 03 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 78 77 ff ff 48 81 c4 68 03 00 00 48  H..$X...dH+.%(...t..xw..H..h...H
0000daa0  89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 58 8c ff ff                                               ..[]A\A]A^A_.X...

0000dab1    void algolist_string() __noreturn

0000dab1  55                 push    rbp {var_8}
0000dab2  4889fd             mov     rbp, rdi
0000dab5  bfc8000000         mov     edi, 0xc8
0000daba  53                 push    rbx {var_10}
0000dabb  4883ec18           sub     rsp, 0x18
0000dabf  e8798cffff         call    buf_new
{ Does not return }

0000dac4              48 89 ee 48 89 c3 48 89 c7 e8 ee fc ff ff 8b 73 08 48 89 df e8 6d 8d ff ff 48 89 df      H..H..H........s.H...m...H..
0000dae0  31 f6 e8 2e 8e ff ff 48 89 df be 04 00 00 00 e8 56 8d ff ff 8b 73 08 48 89 df 2b 73 0c e8 42 8e  1......H........V....s.H..+s..B.
0000db00  ff ff 48 89 c7 e8 4e db ff ff 48 89 df 48 89 44 24 08 e8 5a 8c ff ff 48 8b 44 24 08 48 83 c4 18  ..H...N...H..H.D$..Z...H.D$.H...
0000db20  5b 5d e9 e2 8b ff ff                                                                             [].....

0000db27    void check_user_algos(char* arg1) __noreturn

0000db27  4157               push    r15 {var_8}
0000db29  4156               push    r14 {var_10}
0000db2b  4155               push    r13 {var_18}
0000db2d  4154               push    r12 {var_20}
0000db2f  55                 push    rbp {var_28}
0000db30  31ed               xor     ebp, ebp  {0x0}
0000db32  53                 push    rbx {var_30}
0000db33  4881ec38080000     sub     rsp, 0x838
0000db3a  48897c2410         mov     qword [rsp+0x10 {var_858}], rdi
0000db3f  4889742418         mov     qword [rsp+0x18 {var_850}], rsi
0000db44  4889542420         mov     qword [rsp+0x20 {var_848}], rdx
0000db49  64488b0425280000…  mov     rax, qword [fs:0x28]
0000db52  4889842428080000   mov     qword [rsp+0x828 {var_40}], rax
0000db5a  31c0               xor     eax, eax  {0x0}
0000db5c  e8f7daffff         call    m_strdup
{ Does not return }

0000db61     b9 fe 01 00 00 49 89 c5 48 8d 44 24 30 48 89 44 24 08 48 8b 7c 24 08 31 c0 4c 89 eb 4d 89 ee   .....I..H.D$0H.D$.H.|$.1.L..M..
0000db80  f3 ab 44 8a 3b 83 fd 32 75 13 48 8b 74 24 10 48 8d 3d 63 6e 02 00 31 c0 e8 34 80 ff ff 41 80 ff  ..D.;..2u.H.t$.H.=cn..1..4...A..
0000dba0  2c 74 09 45 84 ff 0f 85 8f 00 00 00 c6 03 00 4c 8b 64 24 18 49 8b 3c 24 48 85 ff 74 58 4c 89 f6  ,t.E...........L.d$.I.<$H..tXL..
0000dbc0  e8 4b 78 ff ff 85 c0 74 06 49 83 c4 28 eb e5 48 8b 54 24 08 48 8b 3a 48 85 ff 74 1c 4c 89 f6 48  .Kx....t.I..(..H.T$.H.:H..t.L..H
0000dbe0  89 54 24 28 e8 27 78 ff ff 85 c0 74 43 48 8b 54 24 28 48 83 c2 28 eb dc 48 63 c5 b9 0a 00 00 00  .T$(.'x....tCH.T$(H..(..Hc......
0000dc00  4c 89 e6 ff c5 48 6b c0 28 48 8d 44 04 30 48 89 c7 f3 a5 eb 1b 48 8b 4c 24 20 4c 89 f2 bf 04 00  L....Hk.(H.D.0H......H.L$ L.....
0000dc20  00 00 31 c0 48 8d 35 e7 6d 02 00 e8 5b 80 ff ff 48 ff c3 45 84 ff 74 0b 49 89 de 48 ff c3 e9 3f  ..1.H.5.m...[...H..E..t.I..H...?
0000dc40  ff ff ff 4c 89 ef e8 15 74 ff ff 8d 4d 01 48 8b 7c 24 18 48 8b 74 24 08 48 63 c9 48 6b c9 28 f3  ...L....t...M.H.|$.H.t$.Hc.Hk.(.
0000dc60  a4 48 8b 84 24 28 08 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 97 75 ff ff 48 81 c4 38 08 00 00  .H..$(...dH+.%(...t...u..H..8...
0000dc80  89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 78 8a ff ff                                               ..[]A\A]A^A_.x...

0000dc91    int64_t dropbear_zfree(int64_t arg1, int64_t arg2)

0000dc91  4889f7             mov     rdi, rsi
0000dc94  e9c773ffff         jmp     free


0000dc99    void dropbear_zalloc(int64_t arg1, int32_t arg2, int32_t arg3) __noreturn

0000dc99  89d2               mov     edx, edx
0000dc9b  89f7               mov     edi, esi
0000dc9d  4889d6             mov     rsi, rdx
0000dca0  e997d9ffff         jmp     m_calloc
{ Does not return }


0000dca5    void kexinitialise() __noreturn

0000dca5  50                 push    rax {var_8}
0000dca6  31d2               xor     edx, edx  {0x0}
0000dca8  8025a98b0300e0     and     byte [rel data_46858], 0xe0
0000dcaf  8025ae8b0300fe     and     byte [rel data_46864], 0xfe
0000dcb6  488915bb8b0300     mov     qword [rel data_46878], rdx  {0x0}
0000dcbd  e83888ffff         call    monotonic_now
{ Does not return }

0000dcc2        48 89 05 a7 8b 03 00 59 e9 3a 8a ff ff                                                       H......Y.:...

0000dccf    void switch_keys() __noreturn

0000dccf  8a05838b0300       mov     al, byte [rel data_46858]
0000dcd5  53                 push    rbx {__saved_rbx}
0000dcd6  488d3d006f0200     lea     rdi, [rel data_34bdd]  {"Unexpected newkeys message"}
0000dcdd  f7d0               not     eax
0000dcdf  a803               test    al, 0x3
0000dce1  0f8591000000       jne     0xdd78

0000dce7  48833d918b030000   cmp     qword [rel data_46880], 0x0
0000dcef  7511               jne     0xdd02  {data_46880}

0000dcf1  bfb8060000         mov     edi, 0x6b8
0000dcf6  e815d9ffff         call    m_malloc
{ Does not return }

0000dcfb                                                                                   48 89 05 7e 8b                             H..~.
0000dd00  03 00                                                                                            ..

0000dd02  f6054f8b030010     test    byte [rel data_46858], 0x10
0000dd09  0f84e7000000       je      0xddf6  {data_46858}

0000dd0f  488b1d728b0300     mov     rbx, qword [rel data_46888]
0000dd16  83bb4803000000     cmp     dword [rbx+0x348], 0x0
0000dd1d  0f84d3000000       je      0xddf6

0000dd23  8b431c             mov     eax, dword [rbx+0x1c]
0000dd26  ffc8               dec     eax
0000dd28  83f801             cmp     eax, 0x1
0000dd2b  7752               ja      0xdd7f

0000dd2d  bf70000000         mov     edi, 0x70
0000dd32  e8d9d8ffff         call    m_malloc
{ Does not return }

0000dd37                                                                       ba 70 00 00 00 48 8d 35 b5                         .p...H.5.
0000dd40  6e 02 00 48 89 43 20 48 8b 05 3a 8b 03 00 48 8b 78 20 48 8d 05 40 ff ff ff 48 89 47 40 48 8d 05  n..H.C H..:...H.x H..@...H.G@H..
0000dd60  2d ff ff ff 48 89 47 48 e8 83 78 ff ff 85 c0 74 14 48 8d 3d 93 6b 02 00                          -...H.GH..x....t.H.=.k..

0000dd78  31c0               xor     eax, eax  {0x0}
0000dd7a  e8527effff         call    dropbear_exit
{ Does not return }

0000dd7f  31c9               xor     ecx, ecx  {0x0}
0000dd81  48894b20           mov     qword [rbx+0x20], rcx  {0x0}
0000dd85  488b05f48a0300     mov     rax, qword [rel data_46880]
0000dd8c  488b7820           mov     rdi, qword [rax+0x20]
0000dd90  4885ff             test    rdi, rdi
0000dd93  7430               je      0xddc5

0000dd95  e82677ffff         call    inflateEnd
0000dd9a  83f8fe             cmp     eax, 0xfffffffe
0000dd9d  7509               jne     0xdda8

0000dd9f  488d3da76a0200     lea     rdi, [rel data_3484d]  {"Crypto error"}
0000dda6  ebd0               jmp     0xdd78

0000dda8  488b05d18a0300     mov     rax, qword [rel data_46880]
0000ddaf  488b7820           mov     rdi, qword [rax+0x20]
0000ddb3  e8a872ffff         call    free
0000ddb8  488b05c18a0300     mov     rax, qword [rel data_46880]
0000ddbf  31d2               xor     edx, edx  {0x0}
0000ddc1  48895020           mov     qword [rax+0x20], rdx  {0x0}

0000ddc5  4889c7             mov     rdi, rax
0000ddc8  488b35b98a0300     mov     rsi, qword [rel data_46888]
0000ddcf  b9d4000000         mov     ecx, 0xd4
0000ddd4  31db               xor     ebx, ebx  {0x0}
0000ddd6  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
0000ddd8  488b3da98a0300     mov     rdi, qword [rel data_46888]
0000dddf  be50030000         mov     esi, 0x350
0000dde4  e8468fffff         call    m_burn
0000dde9  488b05988a0300     mov     rax, qword [rel data_46888]
0000ddf0  899848030000       mov     dword [rax+0x348], ebx  {0x0}

0000ddf6  f6055b8a030008     test    byte [rel data_46858], 0x8
0000ddfd  0f8416010000       je      0xdf19  {data_46858}

0000de03  488b1d7e8a0300     mov     rbx, qword [rel data_46888]
0000de0a  83bb9806000000     cmp     dword [rbx+0x698], 0x0
0000de11  0f8402010000       je      0xdf19

0000de17  8b836c030000       mov     eax, dword [rbx+0x36c]
0000de1d  ffc8               dec     eax
0000de1f  83f801             cmp     eax, 0x1
0000de22  7767               ja      0xde8b

0000de24  bf70000000         mov     edi, 0x70
0000de29  e8e2d7ffff         call    m_malloc
{ Does not return }

0000de2e                                            45 31 c9 b9 0f 00 00 00 83 ce ff 48 89 83 70 03 00 00                E1.........H..p...
0000de40  41 b8 08 00 00 00 ba 08 00 00 00 48 8b 05 36 8a 03 00 48 8b b8 70 03 00 00 48 8d 05 39 fe ff ff  A..........H..6...H..p...H..9...
0000de60  48 89 47 40 48 8d 05 26 fe ff ff 48 89 47 48 48 8d 05 82 6d 02 00 6a 70 50 e8 12 75 ff ff 41 5a  H.G@H..&...H.GHH...m..jpP..u..AZ
0000de80  41 5b 85 c0 74 0f e9 e6 fe ff ff                                                                 A[..t......

0000de8b  4531c9             xor     r9d, r9d  {0x0}
0000de8e  4c898b70030000     mov     qword [rbx+0x370], r9  {0x0}
0000de95  488b3de4890300     mov     rdi, qword [rel data_46880]
0000de9c  488b8770030000     mov     rax, qword [rdi+0x370]
0000dea3  4885c0             test    rax, rax
0000dea6  7435               je      0xdedd

0000dea8  4889c7             mov     rdi, rax
0000deab  e8e076ffff         call    deflateEnd
0000deb0  83f8fe             cmp     eax, 0xfffffffe
0000deb3  0f84e6feffff       je      0xdd9f

0000deb9  488b05c0890300     mov     rax, qword [rel data_46880]
0000dec0  488bb870030000     mov     rdi, qword [rax+0x370]
0000dec7  e89471ffff         call    free
0000decc  488b3dad890300     mov     rdi, qword [rel data_46880]
0000ded3  4531c0             xor     r8d, r8d  {0x0}
0000ded6  4c898770030000     mov     qword [rdi+0x370], r8  {0x0}

0000dedd  488b05a4890300     mov     rax, qword [rel data_46888]
0000dee4  4881c750030000     add     rdi, 0x350
0000deeb  b9d4000000         mov     ecx, 0xd4
0000def0  488db050030000     lea     rsi, [rax+0x350]
0000def7  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
0000def9  488db850030000     lea     rdi, [rax+0x350]
0000df00  be50030000         mov     esi, 0x350
0000df05  e8258effff         call    m_burn
0000df0a  488b0577890300     mov     rax, qword [rel data_46888]
0000df11  31f6               xor     esi, esi  {0x0}
0000df13  89b098060000       mov     dword [rax+0x698], esi  {0x0}

0000df19  8a0539890300       mov     al, byte [rel data_46858]
0000df1f  f7d0               not     eax
0000df21  a818               test    al, 0x18
0000df23  7550               jne     0xdf75

0000df25  488b3d5c890300     mov     rdi, qword [rel data_46888]
0000df2c  488b054d890300     mov     rax, qword [rel data_46880]
0000df33  488b97a0060000     mov     rdx, qword [rdi+0x6a0]
0000df3a  488990a0060000     mov     qword [rax+0x6a0], rdx
0000df41  8b97a8060000       mov     edx, dword [rdi+0x6a8]
0000df47  8990a8060000       mov     dword [rax+0x6a8], edx
0000df4d  8b97ac060000       mov     edx, dword [rdi+0x6ac]
0000df53  8990ac060000       mov     dword [rax+0x6ac], edx
0000df59  31d2               xor     edx, edx  {0x0}
0000df5b  8990b0060000       mov     dword [rax+0x6b0], edx  {0x0}
0000df61  e8fa70ffff         call    free
0000df66  31c9               xor     ecx, ecx  {0x0}
0000df68  5b                 pop     rbx {__saved_rbx}
0000df69  48890d18890300     mov     qword [rel data_46888], rcx  {0x0}
0000df70  e930fdffff         jmp     kexinitialise
{ Does not return }

0000df75  5b                 pop     rbx {__saved_rbx}
0000df76  e98e87ffff         jmp     __x86_return_thunk
{ Does not return }


0000df7b    void read_kex_algos() __noreturn

0000df7b  4157               push    r15 {var_8}
0000df7d  be10000000         mov     esi, 0x10
0000df82  4156               push    r14 {var_10}
0000df84  4155               push    r13 {var_18}
0000df86  4154               push    r12 {var_20}
0000df88  55                 push    rbp {var_28}
0000df89  53                 push    rbx {var_30}
0000df8a  31db               xor     ebx, ebx  {0x0}
0000df8c  4883ec28           sub     rsp, 0x28
0000df90  488b3d61880300     mov     rdi, qword [rel data_467f8]
0000df97  64488b0425280000…  mov     rax, qword [fs:0x28]
0000dfa0  4889442418         mov     qword [rsp+0x18 {var_40}], rax
0000dfa5  31c0               xor     eax, eax  {0x0}
0000dfa7  31c0               xor     eax, eax  {0x0}
0000dfa9  89442414           mov     dword [rsp+0x14 {var_44}], eax  {0x0}
0000dfad  e8e388ffff         call    buf_incrpos
{ Does not return }

0000dfb2                                                        48 8b 3d cf 88 03 00 31 c0 b9 ae 01 00 00                    H.=....1......
0000dfc0  48 8d 35 5a 6b 02 00 f3 ab 48 8b 3d 28 88 03 00 e8 f2 f7 ff ff 85 c0 0f 94 c3 80 3d bf 87 03 00  H.5Zk....H.=(..............=....
0000dfe0  01 75 2a 83 3d 72 88 03 00 00 75 5b 48 8b 3d 05 88 03 00 48 8d 35 41 6b 02 00 e8 c8 f7 ff ff 85  .u*.=r....u[H.=....H.5Ak........
0000e000  c0 75 0a c7 05 c3 88 03 00 01 00 00 00 83 3d 48 88 03 00 00 75 31 80 3d 83 87 03 00 00 48 8d 35  .u............=H....u1.=.....H.5
0000e020  22 6b 02 00 75 07 48 8d 35 36 6b 02 00 48 8b 3d c4 87 03 00 e8 8e f7 ff ff 85 c0 75 0a c7 05 21  "k..u.H.56k..H.=...........u...!
0000e040  88 03 00 01 00 00 00 48 8b 3d aa 87 03 00 48 8d 6c 24 14 89 da 48 8d 35 64 80 03 00 48 89 e9 e8  .......H.=....H.l$...H.5d...H...
0000e060  82 f8 ff ff 44 8b 74 24 14 48 85 c0 0f 84 72 02 00 00 48 8b 40 10 48 85 c0 0f 84 65 02 00 00 48  ....D.t$.H....r...H.@.H....e...H
0000e080  8b 15 02 88 03 00 48 8b 3d 6b 87 03 00 48 89 e9 48 8d 35 69 82 03 00 48 89 82 a0 06 00 00 89 da  ......H.=k...H..H.5i...H........
0000e0a0  e8 41 f8 ff ff 44 23 74 24 14 44 89 74 24 0c 48 85 c0 0f 84 35 02 00 00 48 8b 1d c9 87 03 00 0f  .A...D#t$.D.t$.H....5...H.......
0000e0c0  be 78 08 89 bb ac 06 00 00 e8 4b 91 ff ff 48 8b 3d 23 87 03 00 31 c9 31 d2 89 83 a8 06 00 00 48  .x........K...H.=#...1.1.......H
0000e0e0  8d 1d 3a 85 03 00 48 89 de e8 f8 f7 ff ff 49 89 c5 48 85 c0 0f 84 fc 01 00 00 48 8b 3d f7 86 03  ..:...H.......I..H........H.=...
0000e100  00 31 c9 31 d2 48 89 de e8 d9 f7 ff ff 49 89 c4 48 85 c0 0f 84 e6 01 00 00 48 8b 3d d8 86 03 00  .1.1.H.......I..H........H.=....
0000e120  48 8d 1d 99 84 03 00 31 c9 31 d2 48 89 de e8 b3 f7 ff ff 48 89 c5 49 8b 45 20 48 83 78 18 00 75  H......1.1.H.......H..I.E H.x..u
0000e140  0a 48 85 ed 75 07 e9 bd 01 00 00 31 ed 48 8b 3d a4 86 03 00 31 c9 31 d2 48 89 de e8 86 f7 ff ff  .H..u......1.H.=....1.1.H.......
0000e160  48 89 c3 49 8b 44 24 20 48 83 78 18 00 75 0a 48 85 db 75 07 e9 98 01 00 00 31 db 48 8b 35 3e 87  H..I.D$ H.x..u.H..u......1.H.5>.
0000e180  03 00 48 8b 3d 6f 86 03 00 31 c9 31 d2 e8 54 f7 ff ff 49 89 c6 48 85 c0 0f 84 7c 01 00 00 48 8b  ..H.=o...1.1..T...I..H....|...H.
0000e1a0  35 23 87 03 00 48 8b 3d 4c 86 03 00 31 c9 31 d2 e8 31 f7 ff ff 49 89 c7 48 85 c0 0f 84 62 01 00  5#...H.=L...1.1..1...I..H....b..
0000e1c0  00 48 8b 3d 30 86 03 00 e8 7f 88 ff ff 48 8b 3d 24 86 03 00 e8 73 88 ff ff 48 8b 3d 18 86 03 00  .H.=0........H.=$....s...H.=....
0000e1e0  e8 1f 87 ff ff 84 c0 74 15 80 0d 68 86 03 00 04 f6 44 24 0c 01 75 07 c6 05 1c 86 03 00 01 80 3d  .......t...h.....D$..u.........=
0000e200  9b 85 03 00 00 48 8b 05 7c 86 03 00 49 8b 7d 10 49 8b 74 24 10 49 8b 4d 20 49 8b 54 24 20 75 4d  .....H..|...I.}.I.t$.I.M I.T$ uM
0000e220  48 89 30 48 89 b8 50 03 00 00 48 89 50 08 48 89 88 58 03 00 00 48 85 db 75 06 48 8b 52 28 eb 04  H.0H..P...H.P.H..X...H..u.H.R(..
0000e240  48 8b 53 10 48 89 50 10 48 85 ed 75 06 48 8b 51 28 eb 04 48 8b 55 10 48 89 90 60 03 00 00 41 0f  H.S.H.P.H..u.H.Q(..H.U.H..`...A.
0000e260  be 57 08 89 50 1c 41 0f be 56 08 eb 4b 48 89 38 48 89 b0 50 03 00 00 48 89 48 08 48 89 90 58 03  .W..P.A..V..KH.8H..P...H.H.H..X.
0000e280  00 00 48 85 ed 75 06 48 8b 49 28 eb 04 48 8b 4d 10 48 89 48 10 48 85 db 75 06 48 8b 52 28 eb 04  ..H..u.H.I(..H.M.H.H.H..u.H.R(..
0000e2a0  48 8b 53 10 48 89 90 60 03 00 00 41 0f be 56 08 89 50 1c 41 0f be 57 08 89 90 6c 03 00 00 48 8b  H.S.H..`...A..V..P.A..W...l...H.
0000e2c0  3d 33 85 03 00 e8 cc 86 ff ff 48 83 3d 26 86 03 00 00 74 64 f6 44 24 0c 01 74 5d 80 0d 82 85 03  =3........H.=&....td.D$..t].....
0000e2e0  00 01 eb 54 48 8d 35 13 69 02 00 eb 3d 48 8d 35 0e 69 02 00 eb 34 48 8d 35 0d 69 02 00 eb 2b 48  ...TH.5.i...=H.5.i...4H.5.i...+H
0000e300  8d 35 0d 69 02 00 eb 22 48 8d 35 0d 69 02 00 eb 19 48 8d 35 0d 69 02 00 eb 10 48 8d 35 0d 69 02  .5.i..."H.5.i....H.5.i....H.5.i.
0000e320  00 eb 07 48 8d 35 0e 69 02 00 48 8d 3d 11 69 02 00 31 c0 e8 99 78 ff ff 48 8b 44 24 18 64 48 2b  ...H.5.i..H.=.i..1...x..H.D$.dH+
0000e340  04 25 28 00 00 00 74 05 e8 c3 6e ff ff 48 83 c4 28 5b 5d 41 5c 41 5d 41 5e 41 5f e9 a9 83 ff ff  .%(...t...n..H..([]A\A]A^A_.....

0000e360    void hashkeys(int64_t arg1, int32_t arg2, int64_t arg3) __noreturn

0000e360  4157               push    r15 {var_8}
0000e362  4156               push    r14 {var_10}
0000e364  4189f6             mov     r14d, esi
0000e367  4889d6             mov     rsi, rdx
0000e36a  4155               push    r13 {var_18}
0000e36c  4154               push    r12 {var_20}
0000e36e  55                 push    rbp {var_28}
0000e36f  4889fd             mov     rbp, rdi
0000e372  53                 push    rbx {var_30}
0000e373  4881ec48010000     sub     rsp, 0x148
0000e37a  4889542410         mov     qword [rsp+0x10 {var_168}], rdx
0000e37f  488d7c2428         lea     rdi, [rsp+0x28 {var_150}]
0000e384  ba01000000         mov     edx, 0x1
0000e389  4c8dac24f8000000   lea     r13, [rsp+0xf8 {var_80}]
0000e391  884c241c           mov     byte [rsp+0x1c {var_15c}], cl
0000e395  b934000000         mov     ecx, 0x34
0000e39a  64488b0425280000…  mov     rax, qword [fs:0x28]
0000e3a3  4889842438010000   mov     qword [rsp+0x138 {var_40}], rax
0000e3ab  488b05d6840300     mov     rax, qword [rel data_46888]
0000e3b2  488b80a0060000     mov     rax, qword [rax+0x6a0]
0000e3b9  4c8b6020           mov     r12, qword [rax+0x20]
0000e3bd  488d442428         lea     rax, [rsp+0x28 {var_150}]
0000e3c2  f3a5               rep movsd dword [rdi], [rsi] {var_220} {var_150}  {0x0}
0000e3c4  4889442408         mov     qword [rsp+0x8 {var_170}], rax {var_150}
0000e3c9  488d74241c         lea     rsi, [rsp+0x1c]
0000e3ce  488b7c2408         mov     rdi, qword [rsp+0x8 {var_170}]
0000e3d3  498b8424b0000000   mov     rax, qword [r12+0xb0]
0000e3db  e84c83ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000e3e0  48 8b 05 a9 84 03 00 49 8b 8c 24 b0 00 00 00 48 8b 7c 24 08 8b 50 08 48 8b 30 e8 4b 0a 00 00 48  H......I..$....H.|$..P.H.0.K...H
0000e400  8b 7c 24 08 4c 89 ee 49 8b 84 24 b8 00 00 00 e8 18 83 ff ff 49 8b 44 24 10 44 89 f1 48 89 ef 4c  .|$.L..I..$.........I.D$.D..H..L
0000e420  89 ee 48 39 c1 48 0f 47 c8 f3 a4 41 8b 5c 24 10 44 39 f3 73 64 48 8b 7c 24 08 48 8b 74 24 10 b9  ..H9.H.G...A.\$.D9.sdH.|$.H.t$..
0000e440  34 00 00 00 41 89 df f3 a5 4c 89 fa 48 8b 7c 24 08 48 89 ee 49 01 ef 49 8b 84 24 b0 00 00 00 e8  4...A....L..H.|$.H..I..I..$.....
0000e460  c8 82 ff ff 48 8b 7c 24 08 4c 89 ee 49 8b 84 24 b8 00 00 00 e8 b3 82 ff ff 49 8b 44 24 10 44 89  ....H.|$.L..I..$.........I.D$.D.
0000e480  f1 4c 89 ff 29 d9 4c 89 ee 48 39 c1 48 0f 47 c8 f3 a4 41 03 5c 24 10 eb 97 48 8b 7c 24 08 be d0  .L..).L..H9.H.G...A.\$...H.|$...
0000e4a0  00 00 00 e8 87 88 ff ff 48 8b 84 24 38 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 50 6d ff ff  ........H..$8...dH+.%(...t..Pm..
0000e4c0  48 81 c4 48 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 33 82 ff ff                                H..H...[]A\A]A^A_.3...

0000e4d6    void gen_new_keys() __noreturn

0000e4d6  4157               push    r15 {var_8}
0000e4d8  4156               push    r14 {var_10}
0000e4da  4155               push    r13 {var_18}
0000e4dc  4154               push    r12 {var_20}
0000e4de  55                 push    rbp {var_28}
0000e4df  53                 push    rbx {var_30}
0000e4e0  4881eca8010000     sub     rsp, 0x1a8
0000e4e7  64488b0425280000…  mov     rax, qword [fs:0x28]
0000e4f0  4889842498010000   mov     qword [rsp+0x198 {var_40}], rax
0000e4f8  488b0589830300     mov     rax, qword [rel data_46888]
0000e4ff  488b80a0060000     mov     rax, qword [rax+0x6a0]
0000e506  488b5820           mov     rbx, qword [rax+0x20]
0000e50a  488d442420         lea     rax, [rsp+0x20 {var_1b8}]
0000e50f  48890424           mov     qword [rsp {var_1d8}], rax {var_1b8}
0000e513  488b3c24           mov     rdi, qword [rsp {var_1d8}]
0000e517  488b83a8000000     mov     rax, qword [rbx+0xa8]
0000e51e  e80982ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000e523           48 8b 15 6e 83 03 00 48 85 d2 74 2d 48 8b 34 24 48 89 df e8 5e 8a ff ff 48 8b 3d 56 83     H..n...H..t-H.4$H...^...H.=V.
0000e540  03 00 e8 d9 81 01 00 48 8b 3d 4a 83 03 00 e8 0d 6b ff ff 31 c9 48 89 0d 3c 83 03 00 48 8b 05 3d  .......H.=J.....k..1.H..<...H..=
0000e560  83 03 00 48 85 c0 74 2b 8b 50 08 48 8b 8b b0 00 00 00 48 8b 30 48 8b 3c 24 e8 cc 08 00 00 48 8b  ...H..t+.P.H......H.0H.<$.....H.
0000e580  3d 1b 83 03 00 e8 ec 81 ff ff 31 d2 48 89 15 0d 83 03 00 48 8b 05 0e 83 03 00 48 8b 8b b0 00 00  =.........1.H......H......H.....
0000e5a0  00 48 8b 3c 24 8b 50 08 48 8b 30 e8 9a 08 00 00 48 8b 3d f1 82 03 00 e8 ba 81 ff ff 31 c0 80 3d  .H.<$.P.H.0.....H.=.........1..=
0000e5c0  db 81 03 00 00 48 8d bc 24 f0 00 00 00 48 89 05 d4 82 03 00 48 8d 84 24 58 01 00 00 48 89 44 24  .....H..$....H......H..$X...H.D$
0000e5e0  08 48 8d 84 24 04 01 00 00 48 89 44 24 10 48 8d 84 24 18 01 00 00 48 89 44 24 18 75 17 4c 8b 7c  .H..$....H.D$.H..$....H.D$.u.L.|
0000e600  24 08 4c 8b 74 24 10 b3 46 40 b5 45 49 89 c5 49 89 fc eb 17 4c 8b 7c 24 18 4c 8b 6c 24 08 b3 45  $.L.t$..F@.EI..I....L.|$.L.l$..E
0000e620  40 b5 46 4c 8b 64 24 10 49 89 fe 48 8b 14 24 b9 41 00 00 00 be 14 00 00 00 e8 22 fd ff ff 48 8b  @.FL.d$.I..H..$.A........."...H.
0000e640  14 24 48 8b 7c 24 10 b9 42 00 00 00 be 14 00 00 00 e8 0a fd ff ff 48 8b 14 24 48 8b 7c 24 18 b9  .$H.|$..B.............H..$H.|$..
0000e660  43 00 00 00 be 40 00 00 00 e8 f2 fc ff ff 48 8b 14 24 48 8b 7c 24 08 b9 44 00 00 00 be 40 00 00  C....@........H..$H.|$..D....@..
0000e680  00 e8 da fc ff ff 48 8b 05 fb 81 03 00 48 8b 00 48 8b 00 48 85 c0 74 4e 48 8b 38 48 85 ff 74 19  ......H......H..H..H..tNH.8H..t.
0000e6a0  e8 07 45 01 00 89 c7 85 c0 79 11 48 8d 3d 9b 61 02 00 31 c0 e8 18 75 ff ff 83 cf ff 48 8b 05 c5  ..E......y.H.=.a..1...u.....H...
0000e6c0  81 03 00 45 31 c0 4c 89 f6 48 8b 10 48 8b 48 08 4c 8d 48 28 4c 8b 11 8b 4a 08 4c 89 fa e8 57 07  ...E1.L..H..H.H.L.H(L...J.L...W.
0000e6e0  00 00 85 c0 75 c5 48 8b 05 9b 81 03 00 48 8b 80 50 03 00 00 48 8b 00 48 85 c0 74 50 48 8b 38 48  ....u.H......H..P...H..H..tPH.8H
0000e700  85 ff 74 0d e8 a3 44 01 00 89 c7 85 c0 79 05 eb 9a 83 cf ff 48 8b 05 6d 81 03 00 45 31 c0 4c 89  ..t...D......y......H..m...E1.L.
0000e720  e6 48 8b 90 50 03 00 00 48 8b 88 58 03 00 00 4c 8d 88 78 03 00 00 4c 8b 11 8b 4a 08 4c 89 ea e8  .H..P...H..X...L..x...L...J.L...
0000e740  f5 06 00 00 85 c0 0f 85 5f ff ff ff 48 8b 3d 35 81 03 00 48 8b 87 60 03 00 00 48 83 38 00 74 36  ........_...H.=5...H..`...H.8.t6
0000e760  8b 70 08 48 8b 14 24 40 0f be cd 48 81 c7 78 06 00 00 e8 e9 fb ff ff 48 8b 2d 0a 81 03 00 48 8b  .p.H..$@...H..x........H.-....H.
0000e780  85 60 03 00 00 48 8b 00 48 8b 38 e8 7a 44 01 00 89 85 68 03 00 00 48 8b 3d eb 80 03 00 48 8b 47  .`...H..H.8.zD....h...H.=....H.G
0000e7a0  10 48 83 38 00 74 2f 8b 70 08 48 8b 14 24 0f be cb 48 81 c7 28 03 00 00 e8 a3 fb ff ff 48 8b 1d  .H.8.t/.p.H..$...H..(........H..
0000e7c0  c4 80 03 00 48 8b 43 10 48 8b 00 48 8b 38 e8 37 44 01 00 89 43 18 48 8b 05 ab 80 03 00 48 8d bc  ....H.C.H..H.8.7D...C.H......H..
0000e7e0  24 f0 00 00 00 be 14 00 00 00 c7 80 98 06 00 00 01 00 00 00 c7 80 48 03 00 00 01 00 00 00 e8 2c  $.....................H........,
0000e800  85 ff ff 48 8b 7c 24 18 be 40 00 00 00 e8 1d 85 ff ff 48 8b 7c 24 10 be 14 00 00 00 e8 0e 85 ff  ...H.|$..@........H.|$..........
0000e820  ff 48 8b 7c 24 08 be 40 00 00 00 e8 ff 84 ff ff 48 8b 3c 24 be d0 00 00 00 e8 f1 84 ff ff 48 8b  .H.|$..@........H.<$..........H.
0000e840  84 24 98 01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 ba 69 ff ff 48 81 c4 a8 01 00 00 5b 5d 41  .$....dH+.%(...t...i..H......[]A
0000e860  5c 41 5d 41 5e 41 5f e9 9d 7e ff ff                                                              \A]A^A_..~..

0000e86c    void send_msg_kexinit() __noreturn

0000e86c  4154               push    r12 {var_8}
0000e86e  488b3d537f0300     mov     rdi, qword [rel data_467c8]
0000e875  be14000000         mov     esi, 0x14
0000e87a  4c8d259f7d0300     lea     r12, [rel sshciphers]
0000e881  55                 push    rbp {var_10}
0000e882  488d2d37780300     lea     rbp, [rel sshkex]
0000e889  53                 push    rbx {var_18}
0000e88a  488d1d6f7a0300     lea     rbx, [rel sigalgs]
0000e891  e87f80ffff         call    buf_putbyte
{ Does not return }

0000e896                                                                    48 8b 3d 2b 7f 03 00 be 10 00                        H.=+......
0000e8a0  00 00 e8 c6 80 ff ff be 10 00 00 00 48 89 c7 e8 36 9b ff ff 48 8b 3d 0d 7f 03 00 be 10 00 00 00  ............H...6...H.=.........
0000e8c0  e8 a1 7f ff ff 48 8b 3d fc 7e 03 00 48 89 ee e8 ec ee ff ff 48 8b 3d ed 7e 03 00 48 89 de e8 dd  .....H.=.~..H.......H.=.~..H....
0000e8e0  ee ff ff 48 8b 3d de 7e 03 00 4c 89 e6 e8 ce ee ff ff 48 8b 3d cf 7e 03 00 4c 89 e6 4c 8d 25 bd  ...H.=.~..L.......H.=.~..L..L.%.
0000e900  7c 03 00 e8 b8 ee ff ff 48 8b 3d b9 7e 03 00 4c 89 e6 e8 a9 ee ff ff 48 8b 3d aa 7e 03 00 4c 89  |.......H.=.~..L.......H.=.~..L.
0000e920  e6 4c 8d 25 4c 5f 02 00 e8 93 ee ff ff 48 8b 35 8c 7f 03 00 48 8b 3d 8d 7e 03 00 e8 80 ee ff ff  .L.%L_.......H.5....H.=.~.......
0000e940  48 8b 35 81 7f 03 00 48 8b 3d 7a 7e 03 00 e8 6d ee ff ff 48 8b 3d 6e 7e 03 00 31 d2 4c 89 e6 e8  H.5....H.=z~...m...H.=n~..1.L...
0000e960  3d 82 ff ff 48 8b 3d 5d 7e 03 00 31 d2 4c 89 e6 e8 2c 82 ff ff 48 8b 3d 4c 7e 03 00 31 f6 48 83  =...H.=]~..1.L...,...H.=L~..1.H.
0000e980  3d 72 7f 03 00 00 40 0f 95 c6 e8 86 7f ff ff 48 8b 3d 32 7e 03 00 31 f6 e8 cd 80 ff ff 48 8b 3d  =r....@........H.=2~..1......H.=
0000e9a0  24 7e 03 00 e8 2f 7e ff ff 48 89 05 08 7f 03 00 e8 a5 e7 ff ff bf b8 06 00 00 80 25 57 7e 03 00  $~.../~..H.................%W~..
0000e9c0  fe 80 0d 90 7e 03 00 01 e8 43 cc ff ff 48 83 3d 23 7f 03 00 00 48 89 05 ac 7e 03 00 74 4e 48 89  ....~....C...H.=#....H...~..tNH.
0000e9e0  ef e8 dd ee ff ff 48 89 df 48 8b 50 10 48 8b 05 94 7e 03 00 48 89 90 a0 06 00 00 e8 c3 ee ff ff  ......H..H.P.H...~..H...........
0000ea00  48 8b 1d 81 7e 03 00 0f be 78 08 89 bb ac 06 00 00 e8 03 88 ff ff 89 83 a8 06 00 00 48 8b 05 d5  H...~....x..................H...
0000ea20  7e 03 00 5b 5d 41 5c e9 00 7d ff ff 5b 5d 41 5c e9 d4 7c ff ff                                   ~..[]A\..}..[]A\..|..

0000ea35    void send_msg_newkeys() __noreturn

0000ea35  51                 push    rcx {var_8}
0000ea36  488b3d8b7d0300     mov     rdi, qword [rel data_467c8]
0000ea3d  be15000000         mov     esi, 0x15
0000ea42  e8ce7effff         call    buf_putbyte
{ Does not return }

0000ea47                       e8 0e e7 ff ff 80 0d 05 7e 03 00 08 83 3d 02 7e 03 00 00 74 0a c7 05 fa 7d         ........~....=.~...t....}
0000ea60  03 00 01 00 00 00 80 0d ab 7d 03 00 01 c7 05 e5 7d 03 00 01 00 00 00 e8 5a fa ff ff 31 c0 e8 4c  .........}......}.......Z...1..L
0000ea80  f2 ff ff 83 3d de 7d 03 00 00 74 08 31 d2 89 15 70 7d 03 00 58 e9 6f 7c ff ff                    ....=.}...t.1...p}..X.o|..

0000ea9a    void recv_msg_newkeys() __noreturn

0000ea9a  51                 push    rcx {var_8}
0000ea9b  31c0               xor     eax, eax  {0x0}
0000ea9d  800db47d030010     or      byte [rel data_46858], 0x10
0000eaa4  e826f2ffff         call    switch_keys
{ Does not return }

0000eaa9                             83 3d b8 7d 03 00 00 74 08 31 d2 89 15 4e 7d 03 00 58 e9 49 7c ff ff           .=.}...t.1...N}..X.I|..

0000eac0    void kexfirstinitialise() __noreturn

0000eac0  488d0579790300     lea     rax, [rel ssh_nocompress]
0000eac7  833d167f030000     cmp     dword [rel data_469e4], 0x0
0000eace  4889c2             mov     rdx, rax  {ssh_nocompress}
0000ead1  741a               je      0xeaed

0000ead3  488d05467a0300     lea     rax, [rel ssh_compress]
0000eada  803dbf7c030000     cmp     byte [rel ses], 0x0
0000eae1  4889c2             mov     rdx, rax  {ssh_compress}
0000eae4  7407               je      0xeaed

0000eae6  488d0553790300     lea     rax, [rel ssh_nocompress]

0000eaed  488905cc7d0300     mov     qword [rel data_468c0], rax
0000eaf4  488915cd7d0300     mov     qword [rel data_468c8], rdx
0000eafb  e9a5f1ffff         jmp     kexinitialise
{ Does not return }


0000eb00    void is_compress_trans() __noreturn

0000eb00  488b05797d0300     mov     rax, qword [rel data_46880]
0000eb07  8b806c030000       mov     eax, dword [rax+0x36c]
0000eb0d  83f801             cmp     eax, 0x1
0000eb10  7415               je      0xeb27

0000eb12  833df77d030000     cmp     dword [rel data_46910], 0x0
0000eb19  0f95c2             setne   dl  {data_46910}
0000eb1c  83f802             cmp     eax, 0x2
0000eb1f  0f94c0             sete    al
0000eb22  0fb6c0             movzx   eax, al
0000eb25  21d0               and     eax, edx

0000eb27  e9dd7bffff         jmp     __x86_return_thunk
{ Does not return }


0000eb2c    void is_compress_recv() __noreturn

0000eb2c  488b054d7d0300     mov     rax, qword [rel data_46880]
0000eb33  8b401c             mov     eax, dword [rax+0x1c]
0000eb36  83f801             cmp     eax, 0x1
0000eb39  7415               je      0xeb50

0000eb3b  833dce7d030000     cmp     dword [rel data_46910], 0x0
0000eb42  0f95c2             setne   dl  {data_46910}
0000eb45  83f802             cmp     eax, 0x2
0000eb48  0f94c0             sete    al
0000eb4b  0fb6c0             movzx   eax, al
0000eb4e  21d0               and     eax, edx

0000eb50  e9b47bffff         jmp     __x86_return_thunk
{ Does not return }


0000eb55    void recv_msg_kexinit() __noreturn

0000eb55  55                 push    rbp {var_8}
0000eb56  53                 push    rbx {var_10}
0000eb57  51                 push    rcx {var_18}
0000eb58  f605f97c030001     test    byte [rel data_46858], 0x1
0000eb5f  7505               jne     0xeb66  {data_46858}

0000eb61  e806fdffff         call    send_msg_kexinit
{ Does not return }

0000eb66  488d3de9600200     lea     rdi, [rel data_34c56]  {"Unexpected KEXINIT"}
0000eb6d  f605e47c030002     test    byte [rel data_46858], 0x2
0000eb74  0f8592010000       jne     0xed0c  {data_46858}

0000eb7a  488b3d377c0300     mov     rdi, qword [rel data_467b8]
0000eb81  488d1de1600200     lea     rbx, [rel data_34c69]  {"SSH-2.0-dropbear_2025.87"}
0000eb88  e86366ffff         call    strlen
0000eb8d  488b15647c0300     mov     rdx, qword [rel data_467f8]
0000eb94  488b0d1d7d0300     mov     rcx, qword [rel data_468b8]
0000eb9b  89c5               mov     ebp, eax
0000eb9d  8b5208             mov     edx, dword [rdx+0x8]
0000eba0  035108             add     edx, dword [rcx+0x8]
0000eba3  8dbc02dc0b0000     lea     edi, [rdx+rax+0xbdc]
0000ebaa  e88e7bffff         call    buf_new
{ Does not return }

0000ebaf                                               80 3d ea 7b 03 00 00 48 89 05 f3 7c 03 00 0f 85 85                 .=.{...H...|.....
0000ebc0  00 00 00 e8 b3 f3 ff ff 48 8b 3d e1 7c 03 00 48 89 de ba 18 00 00 00 e8 c5 7f ff ff 48 8b 35 d5  ........H.=.|..H............H.5.
0000ebe0  7b 03 00 48 8b 3d c6 7c 03 00 89 ea e8 b0 7f ff ff 48 8b 05 c0 7c 03 00 48 8b 3d b1 7c 03 00 8b  {..H.=.|.........H...|..H.=.|...
0000ec00  50 08 48 8b 30 e8 97 7f ff ff 8b 35 f0 7b 03 00 48 8b 3d e1 7b 03 00 e8 2e 7c ff ff 48 8b 3d d5  P.H.0......5.{..H.=.{....|..H.=.
0000ec20  7b 03 00 8b 5f 08 2b 5f 0c 89 de e8 14 7d ff ff 48 8b 3d 79 7c 03 00 89 da 48 89 c6 e8 60 7f ff  {..._.+_.....}..H.=y|....H...`..
0000ec40  ff b0 1f e9 80 00 00 00 e8 2e f3 ff ff 48 8b 35 64 7b 03 00 48 8b 3d 55 7c 03 00 89 ea e8 3f 7f  .............H.5d{..H.=U|.....?.
0000ec60  ff ff 48 8b 3d 47 7c 03 00 ba 18 00 00 00 48 89 de e8 2b 7f ff ff 8b 35 84 7b 03 00 48 8b 3d 75  ..H.=G|.......H...+....5.{..H.=u
0000ec80  7b 03 00 e8 c2 7b ff ff 48 8b 3d 69 7b 03 00 8b 5f 08 2b 5f 0c 89 de e8 a8 7c ff ff 48 8b 3d 0d  {....{..H.=i{..._.+_.....|..H.=.
0000eca0  7c 03 00 89 da 48 89 c6 e8 f4 7e ff ff 48 8b 05 04 7c 03 00 48 8b 3d f5 7b 03 00 8b 50 08 48 8b  |....H....~..H...|..H.=.{...P.H.
0000ecc0  30 e8 db 7e ff ff b0 1e 48 8b 3d e9 7b 03 00 88 05 44 7b 03 00 e8 97 7a ff ff 31 d2 80 0d 75 7b  0..~....H.=.{....D{....z..1...u{
0000ece0  03 00 02 83 3d 7e 7b 03 00 00 48 89 15 c7 7b 03 00 74 20 83 3d 62 7b 03 00 00 75 17 83 3d 05 7b  ....=~{...H...{..t .=b{...u..=.{
0000ed00  03 00 01 74 0e 48 8d 3d 76 5f 02 00                                                              ...t.H.=v_..

0000ed0c  31c0               xor     eax, eax  {0x0}
0000ed0e  e8be6effff         call    dropbear_exit
{ Does not return }

0000ed13                                                           58 5b 5d e9 ee 79 ff ff                                    X[]..y..

0000ed1b    void finish_kexhashbuf() __noreturn

0000ed1b  4155               push    r13 {var_8}
0000ed1d  4154               push    r12 {var_10}
0000ed1f  55                 push    rbp {var_18}
0000ed20  53                 push    rbx {var_20}
0000ed21  4881ece8000000     sub     rsp, 0xe8
0000ed28  64488b0425280000…  mov     rax, qword [fs:0x28]
0000ed31  48898424d8000000   mov     qword [rsp+0xd8 {var_30}], rax
0000ed39  488b05487b0300     mov     rax, qword [rel data_46888]
0000ed40  488d6c2408         lea     rbp, [rsp+0x8 {var_100}]
0000ed45  4889ef             mov     rdi, rbp {var_100}
0000ed48  488b80a0060000     mov     rax, qword [rax+0x6a0]
0000ed4f  488b5820           mov     rbx, qword [rax+0x20]
0000ed53  488b83a8000000     mov     rax, qword [rbx+0xa8]
0000ed5a  e8cd79ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000ed5f                                                                                               48                                 H
0000ed60  8b 3d 4a 7b 03 00 31 f6 e8 dd 7a ff ff 48 8b 3d 3c 7b 03 00 4c 8b ab b0 00 00 00 44 8b 67 08 44  .=J{..1...z..H.=<{..L......D.g.D
0000ed80  89 e6 e8 bd 7b ff ff 44 89 e2 48 89 ef 48 89 c6 e8 2a e9 ff ff 8b 7b 10 e8 a0 79 ff ff 8b 73 10  ....{..D..H..H...*....{...y...s.
0000eda0  4c 8b a3 b8 00 00 00 48 89 c7 48 89 05 f7 7a 03 00 e8 b7 7b ff ff 48 89 ef 48 89 c6 e8 b4 9b ff  L......H..H...z....{..H..H......
0000edc0  ff 8b 73 10 48 8b 3d dd 7a 03 00 e8 2c 7a ff ff 48 8b 3d d9 7a 03 00 e8 9a 79 ff ff be d0 00 00  ..s.H.=.z...,z..H.=.z....y......
0000ede0  00 48 89 ef e8 46 7f ff ff 31 c0 48 83 3d 9d 7a 03 00 00 48 89 05 b6 7a 03 00 75 13 48 8b 3d a5  .H...F...1.H.=.z...H...z..u.H.=.
0000ee00  7a 03 00 e8 d0 79 ff ff 48 89 05 81 7a 03 00 48 8b 84 24 d8 00 00 00 64 48 2b 04 25 28 00 00 00  z....y..H...z..H..$....dH+.%(...
0000ee20  74 05 e8 e9 63 ff ff 48 81 c4 e8 00 00 00 5b 5d 41 5c 41 5d e9 d0 78 ff ff                       t...c..H......[]A\A]..x..

0000ee39    void __x86_indirect_thunk_r10() __noreturn

0000ee39  e807000000         call    sub_ee45

0000ee3e  f390               pause   
0000ee40  0faee8             lfence  
0000ee43  ebf9               jmp     0xee3e


0000ee45    int64_t sub_ee45() __pure

0000ee45  4c891424           mov     qword [rsp {__return_addr}], r10
0000ee49  c3                 retn     {__return_addr}


0000ee4a    void __x86_indirect_thunk_rcx() __noreturn

0000ee4a  e807000000         call    sub_ee56

0000ee4f  f390               pause   
0000ee51  0faee8             lfence  
0000ee54  ebf9               jmp     0xee4f


0000ee56    int64_t sub_ee56() __pure

0000ee56  48890c24           mov     qword [rsp {__return_addr}], rcx
0000ee5a  c3                 retn     {__return_addr}


0000ee5b    void remove_channel(int32_t* arg1) __noreturn

0000ee5b  53                 push    rbx {__saved_rbx}
0000ee5c  4889fb             mov     rbx, rdi
0000ee5f  488b7f38           mov     rdi, qword [rdi+0x38]
0000ee63  e8fe230000         call    cbuf_free
0000ee68  31ff               xor     edi, edi  {0x0}
0000ee6a  48897b38           mov     qword [rbx+0x38], rdi  {0x0}
0000ee6e  488b7b40           mov     rdi, qword [rbx+0x40]
0000ee72  4885ff             test    rdi, rdi
0000ee75  740b               je      0xee82

0000ee77  e8ea230000         call    cbuf_free
0000ee7c  31f6               xor     esi, esi  {0x0}
0000ee7e  48897340           mov     qword [rbx+0x40], rsi  {0x0}

0000ee82  803d1779030001     cmp     byte [rel ses], 0x1
0000ee89  8b7b28             mov     edi, dword [rbx+0x28]
0000ee8c  7405               je      0xee93

0000ee8e  83ff01             cmp     edi, 0x1
0000ee91  7415               je      0xeea8

0000ee93  e8896fffff         call    m_close
{ Does not return }

0000ee98                                                                          8b 7b 2c e8 81 6f ff ff                          .{,..o..
0000eea0  8b 7b 30 e8 79 6f ff ff                                                                          .{0.yo..

0000eea8  488b4378           mov     rax, qword [rbx+0x78]
0000eeac  488b4028           mov     rax, qword [rax+0x28]
0000eeb0  4885c0             test    rax, rax
0000eeb3  7408               je      0xeebd

0000eeb5  4889df             mov     rdi, rbx
0000eeb8  e86f78ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000eebd  488b7b60           mov     rdi, qword [rbx+0x60]
0000eec1  4885ff             test    rdi, rdi
0000eec4  7405               je      0xeecb

0000eec6  e8a6260000         call    cancel_connect
{ Does not return }

0000eecb  8b13               mov     edx, dword [rbx]
0000eecd  488b05947a0300     mov     rax, qword [rel data_46968]
0000eed4  31c9               xor     ecx, ecx  {0x0}
0000eed6  4889df             mov     rdi, rbx
0000eed9  48890cd0           mov     qword [rax+rdx*8], rcx  {0x0}
0000eedd  e87e61ffff         call    free
0000eee2  ff0d8c7a0300       dec     dword [rel data_46974]
0000eee8  5b                 pop     rbx {__saved_rbx}
0000eee9  e966d8ffff         jmp     update_channel_prio
{ Does not return }


0000eeee    void getchannel_msg() __noreturn

0000eeee  53                 push    rbx {var_8}
0000eeef  4889fb             mov     rbx, rdi
0000eef2  488b3dff780300     mov     rdi, qword [rel data_467f8]
0000eef9  e8987affff         call    buf_getint
{ Does not return }

0000eefe                                                                                            3b 05                                ;.
0000ef00  6c 7a 03 00 89 c2 73 12 48 8b 0d 59 7a 03 00 89 c0 48 8b 04 c1 48 85 c0 75 26 48 85 db 74 11 48  lz....s.H..Yz....H...H..u&H..t.H
0000ef20  89 de 48 8d 3d 75 5d 02 00 31 c0 e8 a1 6c ff ff 89 d6 48 8d 3d 7f 5d 02 00 31 c0 e8 91 6c ff ff  ..H.=u]..1...l....H.=.]..1...l..
0000ef40  5b e9 c3 77 ff ff                                                                                [..w..

0000ef46    void send_msg_channel_open_confirmation(int64_t arg1, int32_t arg2, int32_t arg3) __noreturn

0000ef46  4154               push    r12 {var_8}
0000ef48  4189f4             mov     r12d, esi
0000ef4b  be5b000000         mov     esi, 0x5b
0000ef50  55                 push    rbp {var_10}
0000ef51  89d5               mov     ebp, edx
0000ef53  53                 push    rbx {var_18}
0000ef54  4889fb             mov     rbx, rdi
0000ef57  488b3d6a780300     mov     rdi, qword [rel data_467c8]
0000ef5e  e8b279ffff         call    buf_putbyte
{ Does not return }

0000ef63           8b 73 04 48 8b 3d 5b 78 03 00 e8 f8 7a ff ff 8b 33 48 8b 3d 4d 78 03 00 e8 ea 7a ff ff     .s.H.=[x....z...3H.=Mx....z..
0000ef80  48 8b 3d 41 78 03 00 44 89 e6 e8 db 7a ff ff 48 8b 3d 32 78 03 00 89 ee e8 cd 7a ff ff 5b 5d 41  H.=Ax..D....z..H.=2x......z..[]A
0000efa0  5c e9 b4 e1 ff ff                                                                                \.....

0000efa6    void close_chan_fd(void* arg1, int32_t arg2, int32_t arg3) __noreturn

0000efa6  4154               push    r12 {__saved_r12}
0000efa8  55                 push    rbp {__saved_rbp}
0000efa9  89f5               mov     ebp, esi
0000efab  53                 push    rbx {__saved_rbx}
0000efac  837f3400           cmp     dword [rdi+0x34], 0x0
0000efb0  4889fb             mov     rbx, rdi
0000efb3  741f               je      0xefd4

0000efb5  4189d4             mov     r12d, edx
0000efb8  89d6               mov     esi, edx
0000efba  89ef               mov     edi, ebp
0000efbc  e80f62ffff         call    shutdown
0000efc1  4585e4             test    r12d, r12d
0000efc4  741b               je      0xefe1

0000efc6  396b28             cmp     dword [rbx+0x28], ebp
0000efc9  753c               jne     0xf007

0000efcb  c74328ffffffff     mov     dword [rbx+0x28], 0xffffffff  {0xffffffff}
0000efd2  eb33               jmp     0xf007

0000efd4  89f7               mov     edi, esi
0000efd6  41bc01000000       mov     r12d, 0x1
0000efdc  e8406effff         call    m_close
{ Does not return }

0000efe1  396b2c             cmp     dword [rbx+0x2c], ebp
0000efe4  7507               jne     0xefed

0000efe6  c7432cffffffff     mov     dword [rbx+0x2c], 0xffffffff  {0xffffffff}

0000efed  48837b4000         cmp     qword [rbx+0x40], 0x0
0000eff2  750c               jne     0xf000

0000eff4  396b30             cmp     dword [rbx+0x30], ebp
0000eff7  7507               jne     0xf000

0000eff9  c74330ffffffff     mov     dword [rbx+0x30], 0xffffffff  {0xffffffff}

0000f000  4585e4             test    r12d, r12d
0000f003  7415               je      0xf01a

0000f005  ebbf               jmp     0xefc6

0000f007  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f00c  740c               je      0xf01a

0000f00e  396b30             cmp     dword [rbx+0x30], ebp
0000f011  7507               jne     0xf01a

0000f013  c74330ffffffff     mov     dword [rbx+0x30], 0xffffffff  {0xffffffff}

0000f01a  837b3400           cmp     dword [rbx+0x34], 0x0
0000f01e  7418               je      0xf038

0000f020  48837b28ff         cmp     qword [rbx+0x28], 0xffffffffffffffff
0000f025  7511               jne     0xf038

0000f027  837b30ff           cmp     dword [rbx+0x30], 0xffffffff
0000f02b  750b               jne     0xf038

0000f02d  5b                 pop     rbx {__saved_rbx}
0000f02e  89ef               mov     edi, ebp
0000f030  5d                 pop     rbp {__saved_rbp}
0000f031  415c               pop     r12 {__saved_r12}
0000f033  e9e96dffff         jmp     m_close
{ Does not return }

0000f038  5b                 pop     rbx {__saved_rbx}
0000f039  5d                 pop     rbp {__saved_rbp}
0000f03a  415c               pop     r12 {__saved_r12}
0000f03c  e9c876ffff         jmp     __x86_return_thunk
{ Does not return }


0000f041    void send_msg_channel_data(void* arg1, int64_t arg2) __noreturn

0000f041  4155               push    r13 {__saved_r13}
0000f043  4154               push    r12 {__saved_r12}
0000f045  55                 push    rbp {__saved_rbp}
0000f046  53                 push    rbx {__saved_rbx}
0000f047  4883ec18           sub     rsp, 0x18
0000f04b  64488b0425280000…  mov     rax, qword [fs:0x28]
0000f054  4889442408         mov     qword [rsp+0x8 {var_30}], rax
0000f059  31c0               xor     eax, eax  {0x0}
0000f05b  837f4800           cmp     dword [rdi+0x48], 0x0
0000f05f  7415               je      0xf076

0000f061  bac2020000         mov     edx, 0x2c2
0000f066  488d355e5c0200     lea     rsi, [rel data_34ccb]  {"src/common-channel.c"}
0000f06d  488d3d6c5c0200     lea     rdi, [rel data_34ce0]  {"!channel->sent_close"}
0000f074  eb29               jmp     0xf09f

0000f076  448b6730           mov     r12d, dword [rdi+0x30]
0000f07a  85f6               test    esi, esi
0000f07c  440f44672c         cmove   r12d, dword [rdi+0x2c]
0000f081  4889fb             mov     rbx, rdi
0000f084  4189f5             mov     r13d, esi
0000f087  4585e4             test    r12d, r12d
0000f08a  7918               jns     0xf0a4

0000f08c  baca020000         mov     edx, 0x2ca
0000f091  488d35335c0200     lea     rsi, [rel data_34ccb]  {"src/common-channel.c"}
0000f098  488d3d565c0200     lea     rdi, [rel data_34cf5]  {"fd >= 0"}

0000f09f  e8d56bffff         call    fail_assert
{ Does not return }

0000f0a4  8b570c             mov     edx, dword [rdi+0xc]
0000f0a7  8b4718             mov     eax, dword [rdi+0x18]
0000f0aa  488b3d17770300     mov     rdi, qword [rel data_467c8]
0000f0b1  39d0               cmp     eax, edx
0000f0b3  8b4f10             mov     ecx, dword [rdi+0x10]
0000f0b6  480f47c2           cmova   rax, rdx
0000f0ba  8d14b500000000     lea     edx, [rsi*4]
0000f0c1  8d69f7             lea     ebp, [rcx-0x9]
0000f0c4  29d5               sub     ebp, edx
0000f0c6  4839c5             cmp     rbp, rax
0000f0c9  480f47e8           cmova   rbp, rax
0000f0cd  4885ed             test    rbp, rbp
0000f0d0  0f8402010000       je      0xf1d8

0000f0d6  8d765e             lea     esi, [rsi+0x5e]
0000f0d9  e83778ffff         call    buf_putbyte
{ Does not return }

0000f0de                                                                                            8b 73                                .s
0000f0e0  04 48 8b 3d e0 76 03 00 e8 7d 79 ff ff 45 85 ed 74 11 48 8b 3d cf 76 03 00 be 01 00 00 00 e8 67  .H.=.v...}y..E..t.H.=.v........g
0000f100  79 ff ff 48 8b 3d be 76 03 00 31 f6 44 8b 6f 0c e8 55 79 ff ff 48 8b 3d ac 76 03 00 89 ee e8 4a  y..H.=.v..1.D.o..Uy..H.=.v.....J
0000f120  78 ff ff 48 89 ea 44 89 e7 48 89 c6 e8 7f 62 ff ff 89 44 24 04 89 c6 85 c0 7f 1d 74 0a e8 4e 5f  x..H..D..H....b...D$.......t..N_
0000f140  ff ff 83 38 04 74 0d 31 d2 44 89 e6 48 89 df e8 52 fe ff ff 31 f6 eb 2d 48 8b 6b 70 48 85 ed 74  ...8.t.1.D..H...R...1..-H.kpH..t
0000f160  40 48 8b 3d 60 76 03 00 e8 00 78 ff ff 48 8d 54 24 04 48 89 df 48 89 c6 e8 85 0f 00 00 8b 74 24  @H.=`v....x..H.T$.H..H........t$
0000f180  04 85 f6 75 1c 48 8b 3d 3c 76 03 00 e8 b9 76 ff ff 48 8b 3d 30 76 03 00 31 f6 e8 5d 76 ff ff eb  ...u.H.=<v....v..H.=0v..1..]v...
0000f1a0  37 48 8b 3d 20 76 03 00 e8 b9 76 ff ff 48 8b 3d 14 76 03 00 44 89 ee e8 8e 76 ff ff 8b 74 24 04  7H.= v....v..H.=.v..D....v...t$.
0000f1c0  48 8b 3d 01 76 03 00 e8 9e 78 ff ff 8b 44 24 04 29 43 0c e8 82 df ff ff                          H.=.v....x...D$.)C......

0000f1d8  488b442408         mov     rax, qword [rsp+0x8 {var_30}]
0000f1dd  64482b0425280000…  sub     rax, qword [fs:0x28]
0000f1e6  7405               je      0xf1ed

0000f1e8  e82360ffff         call    __stack_chk_fail
{ Does not return }

0000f1ed  4883c418           add     rsp, 0x18
0000f1f1  5b                 pop     rbx {__saved_rbx}
0000f1f2  5d                 pop     rbp {__saved_rbp}
0000f1f3  415c               pop     r12 {__saved_r12}
0000f1f5  415d               pop     r13 {__saved_r13}
0000f1f7  e90d75ffff         jmp     __x86_return_thunk
{ Does not return }


0000f1fc    void send_msg_channel_close(void* arg1) __noreturn

0000f1fc  53                 push    rbx {var_8}
0000f1fd  488b4778           mov     rax, qword [rdi+0x78]
0000f201  4889fb             mov     rbx, rdi
0000f204  488b4020           mov     rax, qword [rax+0x20]
0000f208  4885c0             test    rax, rax
0000f20b  7405               je      0xf212

0000f20d  e81a75ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000f212  488b3daf750300     mov     rdi, qword [rel data_467c8]
0000f219  be61000000         mov     esi, 0x61
0000f21e  e8f276ffff         call    buf_putbyte
{ Does not return }

0000f223           8b 73 04 48 8b 3d 9b 75 03 00 e8 38 78 ff ff e8 23 df ff ff 8b 73 2c 48 89 df 31 d2 c7     .s.H.=.u...8x...#....s,H..1..
0000f240  43 54 01 00 00 00 c7 43 48 01 00 00 00 e8 54 fd ff ff 8b 73 30 48 89 df ba 02 00 00 00 e8 44 fd  CT.....CH.....T....s0H........D.
0000f260  ff ff 8b 73 28 48 89 df ba 01 00 00 00 5b e9 33 fd ff ff                                         ...s(H.......[.3...

0000f273    void writechannel(int64_t arg1, int32_t arg2, int32_t* arg3) __noreturn

0000f273  4156               push    r14 {var_8}
0000f275  4989ce             mov     r14, rcx
0000f278  4155               push    r13 {var_10}
0000f27a  4989d5             mov     r13, rdx
0000f27d  4154               push    r12 {var_18}
0000f27f  4189f4             mov     r12d, esi
0000f282  55                 push    rbp {var_20}
0000f283  53                 push    rbx {var_28}
0000f284  4889fb             mov     rbx, rdi
0000f287  4c89ef             mov     rdi, r13
0000f28a  4883ec60           sub     rsp, 0x60
0000f28e  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0000f297  48896c2458         mov     qword [rsp+0x58 {var_30}], rbp
0000f29c  4c89c5             mov     rbp, r8
0000f29f  488d542408         lea     rdx, [rsp+0x8 {var_80}]
0000f2a4  488d4c2418         lea     rcx, [rsp+0x18 {var_70}]
0000f2a9  488d742410         lea     rsi, [rsp+0x10 {var_78}]
0000f2ae  4c8d44240c         lea     r8, [rsp+0xc {var_7c}]
0000f2b3  e88d200000         call    cbuf_readptrs
{ Does not return }

0000f2b8                                                                          8b 44 24 08 31 d2 85 c0                          .D$.1...
0000f2c0  74 14 48 8b 54 24 10 48 89 44 24 28 48 89 54 24 20 ba 01 00 00 00 8b 4c 24 0c 85 c9 74 1f 48 63  t.H.T$.H.D$(H.T$ ......L$...t.Hc
0000f2e0  c2 48 8b 74 24 18 ff c2 48 c1 e0 04 48 89 74 04 20 48 89 4c 04 28 48 85 ed 75 07 eb 4a 48 85 ed  .H.t$...H...H.t. H.L.(H..u..JH..
0000f300  74 41 4d 85 f6 75 1f 48 8d 0d f2 89 02 00 ba d5 01 00 00 48 8d 35 b1 59 02 00 48 8d 3d dc 59 02  tAM..u.H...........H.5.Y..H.=.Y.
0000f320  00 e8 9a 5f ff ff 8b 4d 00 48 63 c2 ff c2 48 c1 e0 04 48 89 4c 04 28 31 c9 4c 89 74 04 20 89 4d  ..._...M.Hc...H...H.L.(1.L.t. .M
0000f340  00 eb 04 85 d2 74 69 48 8d 74 24 20 44 89 e7 e8 bc 5d ff ff 49 89 c6 48 85 c0 79 26 e8 2f 5d ff  .....tiH.t$ D....]..I..H..y&./].
0000f360  ff 8b 00 83 f8 04 74 48 83 f8 0b 74 43 ba 01 00 00 00 44 89 e6 48 89 df 83 cd ff e8 26 fc ff ff  ......tH...tC.....D..H......&...
0000f380  eb 30 44 8b 64 24 0c 44 03 64 24 08 4c 89 ef 41 39 c4 44 0f 47 e0 44 89 e6 e8 7f 20 00 00 48 85  .0D.d$.D.d$.L..A9.D.G.D.... ..H.
0000f3a0  ed 74 09 44 89 f0 44 29 e0 89 45 00 44 01 73 10 31 ed 8b 05 10 76 03 00 b9 03 00 00 00 31 d2 44  .t.D..D)..E.D.s.1....v.......1.D
0000f3c0  8b 63 10 f7 f1 41 39 c4 72 3f 48 8b 3d f7 73 03 00 be 5d 00 00 00 e8 3a 75 ff ff 8b 73 04 48 8b  .c...A9.r?H.=.s...]....:u...s.H.
0000f3e0  3d e3 73 03 00 e8 80 76 ff ff 48 8b 3d d7 73 03 00 44 89 e6 e8 71 76 ff ff e8 5c dd ff ff 8b 43  =.s....v..H.=.s..D...qv...\....C
0000f400  10 01 43 08 31 c0 89 43 10 44 8b 63 08 44 39 25 b4 75 03 00 ba 12 02 00 00 48 8d 35 ab 58 02 00  ..C.1..C.D.c.D9%.u.......H.5.X..
0000f420  48 8d 3d df 58 02 00 72 21 48 8b 7b 38 e8 62 1e 00 00 44 39 e0 73 18 ba 13 02 00 00 48 8d 35 88  H.=.X..r!H.{8.b...D9.s......H.5.
0000f440  58 02 00 48 8d 3d e4 58 02 00 e8 2a 68 ff ff 48 8b 7b 40 48 85 ff 74 1f 8b 5b 08 e8 34 1e 00 00  X..H.=.X...*h..H.{@H..t..[..4...
0000f460  ba 14 02 00 00 48 8d 35 5f 58 02 00 48 8d 3d f3 58 02 00 39 d8 72 d3 48 8b 44 24 58 64 48 2b 04  .....H.5_X..H.=.X..9.r.H.D$XdH+.
0000f480  25 28 00 00 00 74 05 e8 84 5d ff ff 48 83 c4 60 89 e8 5b 5d 41 5c 41 5d 41 5e e9 6a 72 ff ff     %(...t...]..H..`..[]A\A]A^.jr..

0000f49f    void write_pending(void* arg1) __noreturn

0000f49f  53                 push    rbx {__saved_rbx}
0000f4a0  837f2800           cmp     dword [rdi+0x28], 0x0
0000f4a4  4889fb             mov     rbx, rdi
0000f4a7  790a               jns     0xf4b3

0000f4a9  31c0               xor     eax, eax  {0x0}
0000f4ab  837b3000           cmp     dword [rbx+0x30], 0x0
0000f4af  7918               jns     0xf4c9

0000f4b1  eb2e               jmp     0xf4e1

0000f4b3  488b7f38           mov     rdi, qword [rdi+0x38]
0000f4b7  e8d01d0000         call    cbuf_getused
{ Does not return }

0000f4bc                                                                                      89 c2 b8 01                              ....
0000f4c0  00 00 00 85 d2 74 e2 eb 18                                                                       .....t...

0000f4c9  488b7b40           mov     rdi, qword [rbx+0x40]
0000f4cd  31c0               xor     eax, eax  {0x0}
0000f4cf  4885ff             test    rdi, rdi
0000f4d2  740d               je      0xf4e1

0000f4d4  e8b31d0000         call    cbuf_getused
{ Does not return }

0000f4d9                                                                             85 c0 0f 95 c0 0f b6                           .......
0000f4e0  c0                                                                                               .

0000f4e1  5b                 pop     rbx {__saved_rbx}
0000f4e2  e92272ffff         jmp     __x86_return_thunk
{ Does not return }


0000f4e7    void check_close(void* arg1) __noreturn

0000f4e7  55                 push    rbp {__saved_rbp}
0000f4e8  bd01000000         mov     ebp, 0x1
0000f4ed  53                 push    rbx {__saved_rbx}
0000f4ee  4889fb             mov     rbx, rdi
0000f4f1  56                 push    rsi {var_18}
0000f4f2  488b4778           mov     rax, qword [rdi+0x78]
0000f4f6  488b4010           mov     rax, qword [rax+0x10]
0000f4fa  4885c0             test    rax, rax
0000f4fd  7413               je      0xf512

0000f4ff  837f4800           cmp     dword [rdi+0x48], 0x0
0000f503  750d               jne     0xf512

0000f505  e82272ffff         call    __x86_indirect_thunk_rax
{ Does not return }

0000f50a                                31 ed 85 c0 40 0f 95 c5                                                      1...@...

0000f512  837b5800           cmp     dword [rbx+0x58], 0x0
0000f516  7441               je      0xf559

0000f518  8b7b2c             mov     edi, dword [rbx+0x2c]
0000f51b  85ff               test    edi, edi
0000f51d  7816               js      0xf535

0000f51f  e85470ffff         call    fd_read_pending
{ Does not return }

0000f524              85 c0 75 0d 8b 73 2c 31 d2 48 89 df e8 71 fa ff ff                                       ..u..s,1.H...q...

0000f535  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f53a  751d               jne     0xf559

0000f53c  8b7b30             mov     edi, dword [rbx+0x30]
0000f53f  85ff               test    edi, edi
0000f541  7816               js      0xf559

0000f543  e83070ffff         call    fd_read_pending
{ Does not return }

0000f548                          85 c0 75 0d 8b 73 30 31 d2 48 89 df e8 4d fa ff ff                               ..u..s01.H...M...

0000f559  837b4c00           cmp     dword [rbx+0x4c], 0x0
0000f55d  7429               je      0xf588

0000f55f  4889df             mov     rdi, rbx
0000f562  e838ffffff         call    write_pending
{ Does not return }

0000f567                       a8 01 75 1d 85 ed 74 19 83 7b 48 00 75 08 48 89 df e8 7f fc ff ff 59 48 89         ..u...t..{H.u.H.......YH.
0000f580  df 5b 5d e9 d3 f8 ff ff                                                                          .[].....

0000f588  837b5000           cmp     dword [rbx+0x50], 0x0
0000f58c  7508               jne     0xf596

0000f58e  837b28fe           cmp     dword [rbx+0x28], 0xfffffffe
0000f592  7520               jne     0xf5b4

0000f594  eb2d               jmp     0xf5c3

0000f596  4889df             mov     rdi, rbx
0000f599  e801ffffff         call    write_pending
{ Does not return }

0000f59e                                                                                            85 c0                                ..
0000f5a0  75 ec                                                                                            u.

0000f5a2  8b7328             mov     esi, dword [rbx+0x28]
0000f5a5  ba01000000         mov     edx, 0x1
0000f5aa  4889df             mov     rdi, rbx
0000f5ad  e8f4f9ffff         call    close_chan_fd
{ Does not return }

0000f5b2                                                        eb 0f                                                        ..

0000f5b4  488b4378           mov     rax, qword [rbx+0x78]
0000f5b8  4883781000         cmp     qword [rax+0x10], 0x0
0000f5bd  7404               je      0xf5c3

0000f5bf  85ed               test    ebp, ebp
0000f5c1  75df               jne     0xf5a2  {0x1}

0000f5c3  837b5400           cmp     dword [rbx+0x54], 0x0
0000f5c7  753f               jne     0xf608

0000f5c9  837b2cff           cmp     dword [rbx+0x2c], 0xffffffff
0000f5cd  7539               jne     0xf608

0000f5cf  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f5d4  7506               jne     0xf5dc

0000f5d6  837b30ff           cmp     dword [rbx+0x30], 0xffffffff
0000f5da  752c               jne     0xf608

0000f5dc  488b3de5710300     mov     rdi, qword [rel data_467c8]
0000f5e3  be60000000         mov     esi, 0x60
0000f5e8  e82873ffff         call    buf_putbyte
{ Does not return }

0000f5ed                                         8b 73 04 48 8b 3d d1 71 03 00 e8 6e 74 ff ff e8 59 db ff               .s.H.=.q...nt...Y..
0000f600  ff c7 43 54 01 00 00 00                                                                          ..CT....

0000f608  48837b28ff         cmp     qword [rbx+0x28], 0xffffffffffffffff
0000f60d  752e               jne     0xf63d

0000f60f  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f614  7506               jne     0xf61c

0000f616  837b30ff           cmp     dword [rbx+0x30], 0xffffffff
0000f61a  7521               jne     0xf63d

0000f61c  837b4800           cmp     dword [rbx+0x48], 0x0
0000f620  751b               jne     0xf63d

0000f622  85ed               test    ebp, ebp
0000f624  7417               je      0xf63d  {0x0}

0000f626  4889df             mov     rdi, rbx
0000f629  e871feffff         call    write_pending
{ Does not return }

0000f62e                                            85 c0 75 0b 5a 48 89 df 5b 5d e9 bf fb ff ff                         ..u.ZH..[].....

0000f63d  58                 pop     rax {var_18}
0000f63e  5b                 pop     rbx {__saved_rbx}
0000f63f  5d                 pop     rbp {__saved_rbp}
0000f640  e9c470ffff         jmp     __x86_return_thunk
{ Does not return }


0000f645    void newchannel(int32_t arg1, int64_t arg2, int32_t arg3, int32_t arg4) __noreturn

0000f645  4157               push    r15 {__saved_r15}
0000f647  4531ff             xor     r15d, r15d  {0x0}
0000f64a  4156               push    r14 {__saved_r14}
0000f64c  4189ce             mov     r14d, ecx
0000f64f  4155               push    r13 {__saved_r13}
0000f651  4189d5             mov     r13d, edx
0000f654  4154               push    r12 {__saved_r12}
0000f656  4989f4             mov     r12, rsi
0000f659  55                 push    rbp {__saved_rbp}
0000f65a  53                 push    rbx {__saved_rbx}
0000f65b  4883ec18           sub     rsp, 0x18
0000f65f  8b050b730300       mov     eax, dword [rel data_46970]
0000f665  897c240c           mov     dword [rsp+0xc {var_3c}], edi
0000f669  488b3df8720300     mov     rdi, qword [rel data_46968]

0000f670  4489fd             mov     ebp, r15d
0000f673  4139c7             cmp     r15d, eax
0000f676  7310               jae     0xf688

0000f678  4a833cff00         cmp     qword [rdi+r15*8], 0x0
0000f67d  498d4f01           lea     rcx, [r15+0x1]
0000f681  740e               je      0xf691

0000f683  4989cf             mov     r15, rcx
0000f686  ebe8               jmp     0xf670

0000f688  4439f8             cmp     eax, r15d
0000f68b  0f8495000000       je      0xf726

0000f691  bf88000000         mov     edi, 0x88
0000f696  e875bfffff         call    m_malloc
{ Does not return }

0000f69b                                                                                   31 c9 31 f6 31                             1.1.1
0000f6a0  ff 48 89 c3 4c 89 60 78 89 28 48 89 48 48 48 89 48 50 8b 44 24 0c 89 7b 6c 8b 3d 09 73 03 00 89  .H..L.`x.(H.HHH.HP.D$..{l.=.s...
0000f6c0  43 04 48 b8 fe ff ff ff fe ff ff ff 44 89 6b 0c 44 89 73 18 48 89 73 20 48 89 43 28 c7 43 30 ff  C.H.........D.k.D.s.H.s H.C(.C0.
0000f6e0  ff ff ff e8 44 1b 00 00 45 31 c0 45 31 c9 48 89 43 38 8b 05 d0 72 03 00 4c 89 43 40 89 43 08 b8  ....D...E1.E1.H.C8...r..L.C@.C..
0000f700  f7 7f 00 00 48 c1 e0 20 44 89 8b 80 00 00 00 48 89 43 10 48 8b 05 4e 72 03 00 4a 89 1c f8 ff 05  ....H.. D......H.C.H..Nr..J.....
0000f720  50 72 03 00 eb 4b                                                                                Pr...K

0000f726  31db               xor     ebx, ebx
0000f728  4181ffe7030000     cmp     r15d, 0x3e7
0000f72f  7740               ja      0xf771

0000f731  418d7703           lea     esi, [r15+0x3]
0000f735  48c1e603           shl     rsi, 0x3
0000f739  e843bfffff         call    m_realloc
{ Does not return }

0000f73e                                                                                            8b 15                                ..
0000f740  2c 72 03 00 48 89 05 1d 72 03 00 4a 8d 34 f8 44 89 f8 8d 4a 03 89 0d 15 72 03 00 39 c8 0f 83 2e  ,r..H...r..J.4.D...J....r..9....
0000f760  ff ff ff 31 d2 ff c0 48 83 c6 08 48 89 56 f8 eb ea                                               ...1...H...H.V...

0000f771  4883c418           add     rsp, 0x18
0000f775  4889d8             mov     rax, rbx  {0x0}
0000f778  5b                 pop     rbx {__saved_rbx}
0000f779  5d                 pop     rbp {__saved_rbp}
0000f77a  415c               pop     r12 {__saved_r12}
0000f77c  415d               pop     r13 {__saved_r13}
0000f77e  415e               pop     r14 {__saved_r14}
0000f780  415f               pop     r15 {__saved_r15}
0000f782  e9826fffff         jmp     __x86_return_thunk
{ Does not return }


0000f787    void send_msg_channel_open_failure.constprop.0(int32_t arg1, int32_t arg2) __noreturn

0000f787  4154               push    r12 {var_8}
0000f789  4189fc             mov     r12d, edi
0000f78c  488b3d35700300     mov     rdi, qword [rel data_467c8]
0000f793  55                 push    rbp {var_10}
0000f794  89f5               mov     ebp, esi
0000f796  be5c000000         mov     esi, 0x5c
0000f79b  53                 push    rbx {var_18}
0000f79c  4889d3             mov     rbx, rdx
0000f79f  e87171ffff         call    buf_putbyte
{ Does not return }

0000f7a4              48 8b 3d 1d 70 03 00 44 89 e6 e8 b7 72 ff ff 48 8b 3d 0e 70 03 00 89 ee e8 a9 72 ff      H.=.p..D....r..H.=.p......r.
0000f7c0  ff 48 89 df e8 27 5a ff ff 48 8b 3d f8 6f 03 00 48 89 de 89 c2 e8 c7 73 ff ff 48 8b 3d e7 6f 03  .H...'Z..H.=.o..H......s..H.=.o.
0000f7e0  00 31 d2 48 8d 35 8a 50 02 00 e8 b2 73 ff ff 5b 5d 41 5c e9 62 d9 ff ff                          .1.H.5.P....s..[]A\.b...

0000f7f8    void chaninitialise() __noreturn

0000f7f8  53                 push    rbx {var_8}
0000f7f9  4889fb             mov     rbx, rdi
0000f7fc  bf08000000         mov     edi, 0x8
0000f801  e80abeffff         call    m_malloc
{ Does not return }

0000f806                    31 d2 31 c9 c7 05 5c 71 03 00 01 00 00 00 48 89 05 4d 71 03 00 48 89 10 48 89        1.1...\q......H..Mq..H..H.
0000f820  1d 53 71 03 00 5b 89 0d 48 71 03 00 e9 a7 12 00 00                                               .Sq..[..Hq.......

0000f831    void chancleanup() __noreturn

0000f831  53                 push    rbx {__saved_rbx}
0000f832  31db               xor     ebx, ebx  {0x0}

0000f834  3b1d36710300       cmp     ebx, dword [rel data_46970]
0000f83a  488b3d27710300     mov     rdi, qword [rel data_46968]
0000f841  7314               jae     0xf857

0000f843  89d8               mov     eax, ebx
0000f845  488b3cc7           mov     rdi, qword [rdi+rax*8]
0000f849  4885ff             test    rdi, rdi
0000f84c  7405               je      0xf853

0000f84e  e808f6ffff         call    remove_channel
{ Does not return }

0000f853  ffc3               inc     ebx
0000f855  ebdd               jmp     0xf834

0000f857  e80458ffff         call    free
0000f85c  31c0               xor     eax, eax  {0x0}
0000f85e  5b                 pop     rbx {__saved_rbx}
0000f85f  48890502710300     mov     qword [rel data_46968], rax  {0x0}
0000f866  e99e6effff         jmp     __x86_return_thunk
{ Does not return }


0000f86b    void getchannel() __noreturn

0000f86b  31ff               xor     edi, edi  {0x0}
0000f86d  e97cf6ffff         jmp     getchannel_msg
{ Does not return }


0000f872    void channelio(int64_t arg1, int64_t arg2) __noreturn

0000f872  4157               push    r15 {__saved_r15}
0000f874  41bf01000000       mov     r15d, 0x1
0000f87a  4156               push    r14 {__saved_r14}
0000f87c  4989f6             mov     r14, rsi
0000f87f  4155               push    r13 {__saved_r13}
0000f881  4531ed             xor     r13d, r13d  {0x0}
0000f884  4154               push    r12 {__saved_r12}
0000f886  55                 push    rbp {__saved_rbp}
0000f887  4889fd             mov     rbp, rdi
0000f88a  53                 push    rbx {__saved_rbx}
0000f88b  52                 push    rdx {var_38}

0000f88c  443b2ddd700300     cmp     r13d, dword [rel data_46970]
0000f893  0f8312010000       jae     0xf9ab  {data_46970}

0000f899  488b15c8700300     mov     rdx, qword [rel data_46968]
0000f8a0  4489e8             mov     eax, r13d
0000f8a3  488b1cc2           mov     rbx, qword [rdx+rax*8]
0000f8a7  4885db             test    rbx, rbx
0000f8aa  0f84f3000000       je      0xf9a3

0000f8b0  48637b2c           movsxd  rdi, dword [rbx+0x2c]
0000f8b4  85ff               test    edi, edi
0000f8b6  7905               jns     0xf8bd

0000f8b8  4531e4             xor     r12d, r12d  {0x0}
0000f8bb  eb28               jmp     0xf8e5

0000f8bd  e88e59ffff         call    __fdelt_chk
0000f8c2  8b4b2c             mov     ecx, dword [rbx+0x2c]
0000f8c5  4889c2             mov     rdx, rax
0000f8c8  4c89f8             mov     rax, r15  {0x1}
0000f8cb  48d3e0             shl     rax, cl
0000f8ce  482344d500         and     rax, qword [rbp+rdx*8]
0000f8d3  74e3               je      0xf8b8

0000f8d5  31f6               xor     esi, esi  {0x0}
0000f8d7  4889df             mov     rdi, rbx
0000f8da  41bc01000000       mov     r12d, 0x1
0000f8e0  e85cf7ffff         call    send_msg_channel_data
{ Does not return }

0000f8e5  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f8ea  7533               jne     0xf91f

0000f8ec  48637b30           movsxd  rdi, dword [rbx+0x30]
0000f8f0  85ff               test    edi, edi
0000f8f2  782b               js      0xf91f

0000f8f4  e85759ffff         call    __fdelt_chk
0000f8f9  8b4b30             mov     ecx, dword [rbx+0x30]
0000f8fc  4889c2             mov     rdx, rax
0000f8ff  4c89f8             mov     rax, r15  {0x1}
0000f902  48d3e0             shl     rax, cl
0000f905  482344d500         and     rax, qword [rbp+rdx*8]
0000f90a  7413               je      0xf91f

0000f90c  be01000000         mov     esi, 0x1
0000f911  4889df             mov     rdi, rbx
0000f914  41bc01000000       mov     r12d, 0x1
0000f91a  e822f7ffff         call    send_msg_channel_data
{ Does not return }

0000f91f  48637b28           movsxd  rdi, dword [rbx+0x28]
0000f923  85ff               test    edi, edi
0000f925  7830               js      0xf957

0000f927  e82459ffff         call    __fdelt_chk
0000f92c  8b7328             mov     esi, dword [rbx+0x28]
0000f92f  4889c2             mov     rdx, rax
0000f932  4c89f8             mov     rax, r15  {0x1}
0000f935  89f1               mov     ecx, esi
0000f937  48d3e0             shl     rax, cl
0000f93a  492304d6           and     rax, qword [r14+rdx*8]
0000f93e  7417               je      0xf957

0000f940  488b5338           mov     rdx, qword [rbx+0x38]
0000f944  4531c0             xor     r8d, r8d  {0x0}
0000f947  31c9               xor     ecx, ecx  {0x0}
0000f949  4889df             mov     rdi, rbx
0000f94c  41bc01000000       mov     r12d, 0x1
0000f952  e81cf9ffff         call    writechannel
{ Does not return }

0000f957  48837b4000         cmp     qword [rbx+0x40], 0x0
0000f95c  7434               je      0xf992

0000f95e  48637b30           movsxd  rdi, dword [rbx+0x30]
0000f962  85ff               test    edi, edi
0000f964  782c               js      0xf992

0000f966  e8e558ffff         call    __fdelt_chk
0000f96b  8b7330             mov     esi, dword [rbx+0x30]
0000f96e  4889c2             mov     rdx, rax
0000f971  4c89f8             mov     rax, r15  {0x1}
0000f974  89f1               mov     ecx, esi
0000f976  48d3e0             shl     rax, cl
0000f979  492304d6           and     rax, qword [r14+rdx*8]
0000f97d  7413               je      0xf992

0000f97f  488b5340           mov     rdx, qword [rbx+0x40]
0000f983  4531c0             xor     r8d, r8d  {0x0}
0000f986  31c9               xor     ecx, ecx  {0x0}
0000f988  4889df             mov     rdi, rbx
0000f98b  e8e3f8ffff         call    writechannel
{ Does not return }

0000f990                                                  eb 09                                                            ..

0000f992  440b258b6e0300     or      r12d, dword [rel data_46824]
0000f999  7408               je      0xf9a3

0000f99b  4889df             mov     rdi, rbx
0000f99e  e844fbffff         call    check_close
{ Does not return }

0000f9a3  41ffc5             inc     r13d
0000f9a6  e9e1feffff         jmp     0xf88c

0000f9ab  58                 pop     rax {var_38}
0000f9ac  4889ef             mov     rdi, rbp
0000f9af  5b                 pop     rbx {__saved_rbx}
0000f9b0  5d                 pop     rbp {__saved_rbp}
0000f9b1  415c               pop     r12 {__saved_r12}
0000f9b3  415d               pop     r13 {__saved_r13}
0000f9b5  415e               pop     r14 {__saved_r14}
0000f9b7  415f               pop     r15 {__saved_r15}
0000f9b9  e99f110000         jmp     handle_listeners
{ Does not return }


0000f9be    void channel_connect_done(int32_t arg1, int32_t arg2, void* arg3) __noreturn

0000f9be  53                 push    rbx {__saved_rbx}
0000f9bf  4889d3             mov     rbx, rdx
0000f9c2  85ff               test    edi, edi
0000f9c4  7522               jne     0xf9e8

0000f9c6  31c0               xor     eax, eax  {0x0}
0000f9c8  897228             mov     dword [rdx+0x28], esi
0000f9cb  4889df             mov     rdi, rbx
0000f9ce  89722c             mov     dword [rdx+0x2c], esi
0000f9d1  8b7308             mov     esi, dword [rbx+0x8]
0000f9d4  c7423401000000     mov     dword [rdx+0x34], 0x1
0000f9db  48894260           mov     qword [rdx+0x60], rax  {0x0}
0000f9df  8b5214             mov     edx, dword [rdx+0x14]
0000f9e2  5b                 pop     rbx {__saved_rbx}
0000f9e3  e95ef5ffff         jmp     send_msg_channel_open_confirmation
{ Does not return }

0000f9e8  8b7b04             mov     edi, dword [rbx+0x4]
0000f9eb  4889ca             mov     rdx, rcx
0000f9ee  be02000000         mov     esi, 0x2
0000f9f3  e88ffdffff         call    send_msg_channel_open_failure.constprop.0
{ Does not return }

0000f9f8                                                                          48 89 df 5b e9 5a f4 ff                          H..[.Z..
0000fa00  ff                                                                                               .

0000fa01    void setchannelfds(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

0000fa01  4156               push    r14 {__saved_r14}
0000fa03  85d2               test    edx, edx
0000fa05  4155               push    r13 {__saved_r13}
0000fa07  410f95c6           setne   r14b
0000fa0b  4531ed             xor     r13d, r13d  {0x0}
0000fa0e  4154               push    r12 {__saved_r12}
0000fa10  4989f4             mov     r12, rsi
0000fa13  55                 push    rbp {__saved_rbp}
0000fa14  4889fd             mov     rbp, rdi
0000fa17  53                 push    rbx {__saved_rbx}

0000fa18  443b2d516f0300     cmp     r13d, dword [rel data_46970]
0000fa1f  0f83dc000000       jae     0xfb01  {data_46970}

0000fa25  488b153c6f0300     mov     rdx, qword [rel data_46968]
0000fa2c  4489e8             mov     eax, r13d
0000fa2f  488b1cc2           mov     rbx, qword [rdx+rax*8]
0000fa33  4885db             test    rbx, rbx
0000fa36  0f84bd000000       je      0xfaf9

0000fa3c  837b0c00           cmp     dword [rbx+0xc], 0x0
0000fa40  7459               je      0xfa9b

0000fa42  f605cf6d030001     test    byte [rel data_46818], 0x1
0000fa49  7405               je      0xfa50  {data_46818}

0000fa4b  4584f6             test    r14b, r14b
0000fa4e  7507               jne     0xfa57

0000fa50  48837b7000         cmp     qword [rbx+0x70], 0x0
0000fa55  7444               je      0xfa9b

0000fa57  48637b2c           movsxd  rdi, dword [rbx+0x2c]
0000fa5b  85ff               test    edi, edi
0000fa5d  7815               js      0xfa74

0000fa5f  e8ec57ffff         call    __fdelt_chk
0000fa64  8b4b2c             mov     ecx, dword [rbx+0x2c]
0000fa67  ba01000000         mov     edx, 0x1
0000fa6c  48d3e2             shl     rdx, cl
0000fa6f  480954c500         or      qword [rbp+rax*8], rdx

0000fa74  48837b4000         cmp     qword [rbx+0x40], 0x0
0000fa79  7520               jne     0xfa9b

0000fa7b  48637b30           movsxd  rdi, dword [rbx+0x30]
0000fa7f  85ff               test    edi, edi
0000fa81  7818               js      0xfa9b

0000fa83  e8c857ffff         call    __fdelt_chk
0000fa88  8b4b30             mov     ecx, dword [rbx+0x30]
0000fa8b  4889c2             mov     rdx, rax
0000fa8e  b801000000         mov     eax, 0x1
0000fa93  48d3e0             shl     rax, cl
0000fa96  480944d500         or      qword [rbp+rdx*8], rax

0000fa9b  837b2800           cmp     dword [rbx+0x28], 0x0
0000fa9f  7825               js      0xfac6

0000faa1  488b7b38           mov     rdi, qword [rbx+0x38]
0000faa5  e8e2170000         call    cbuf_getused
{ Does not return }

0000faaa                                85 c0 74 18 48 63 7b 28 e8 99 57 ff ff 8b 4b 28 ba 01 00 00 00 48            ..t.Hc{(..W...K(.....H
0000fac0  d3 e2 49 09 14 c4                                                                                ..I...

0000fac6  488b7b40           mov     rdi, qword [rbx+0x40]
0000faca  4885ff             test    rdi, rdi
0000facd  742a               je      0xfaf9

0000facf  837b3000           cmp     dword [rbx+0x30], 0x0
0000fad3  7824               js      0xfaf9

0000fad5  e8b2170000         call    cbuf_getused
{ Does not return }

0000fada                                                                                85 c0 74 1b 48 63                            ..t.Hc
0000fae0  7b 30 e8 69 57 ff ff 8b 4b 30 48 89 c2 b8 01 00 00 00 48 d3 e0 49 09 04 d4                       {0.iW...K0H.......H..I...

0000faf9  41ffc5             inc     r13d
0000fafc  e917ffffff         jmp     0xfa18

0000fb01  5b                 pop     rbx {__saved_rbx}
0000fb02  4889ef             mov     rdi, rbp
0000fb05  5d                 pop     rbp {__saved_rbp}
0000fb06  415c               pop     r12 {__saved_r12}
0000fb08  415d               pop     r13 {__saved_r13}
0000fb0a  415e               pop     r14 {__saved_r14}
0000fb0c  e9ee0f0000         jmp     set_listener_fds
{ Does not return }


0000fb11    void recv_msg_channel_eof() __noreturn

0000fb11  50                 push    rax {var_8}
0000fb12  488d3da2520200     lea     rdi, [rel data_34dbb]
0000fb19  e8d0f3ffff         call    getchannel_msg
{ Does not return }

0000fb1e                                                                                            c7 40                                .@
0000fb20  50 01 00 00 00 48 89 c7 5a e9 b9 f9 ff ff                                                        P....H..Z.....

0000fb2e    void recv_msg_channel_close() __noreturn

0000fb2e  50                 push    rax {var_8}
0000fb2f  488d3d89520200     lea     rdi, [rel data_34dbf]  {"Close"}
0000fb36  e8b3f3ffff         call    getchannel_msg
{ Does not return }

0000fb3b                                                                                   48 89 c7 48 b8                             H..H.
0000fb40  01 00 00 00 01 00 00 00 48 89 47 4c 5a e9 95 f9 ff ff                                            ........H.GLZ.....

0000fb52    void common_recv_msg_channel_data(void* arg1, int32_t arg2, int64_t arg3) __noreturn

0000fb52  4155               push    r13 {__saved_r13}
0000fb54  4154               push    r12 {__saved_r12}
0000fb56  55                 push    rbp {__saved_rbp}
0000fb57  53                 push    rbx {__saved_rbx}
0000fb58  4883ec18           sub     rsp, 0x18
0000fb5c  64488b0425280000…  mov     rax, qword [fs:0x28]
0000fb65  4889442408         mov     qword [rsp+0x8 {var_30}], rax
0000fb6a  31c0               xor     eax, eax  {0x0}
0000fb6c  837f5000           cmp     dword [rdi+0x50], 0x0
0000fb70  7409               je      0xfb7b

0000fb72  488d3d4c520200     lea     rdi, [rel data_34dc5]  {"Received data after eof"}
0000fb79  eb3d               jmp     0xfbb8

0000fb7b  4189f5             mov     r13d, esi
0000fb7e  85f6               test    esi, esi
0000fb80  0f880f010000       js      0xfc95

0000fb86  4989d4             mov     r12, rdx
0000fb89  4885d2             test    rdx, rdx
0000fb8c  0f8403010000       je      0xfc95

0000fb92  4889fd             mov     rbp, rdi
0000fb95  488b3d5c6c0300     mov     rdi, qword [rel data_467f8]
0000fb9c  e8f56dffff         call    buf_getint
{ Does not return }

0000fba1     4c 89 e7 89 c3 e8 e9 16 00 00 39 d8 73 0e 48 8d 3d 27 52 02 00 31 c0                           L.........9.s.H.='R..1.

0000fbb8  e81460ffff         call    dropbear_exit
{ Does not return }

0000fbbd                                                                                         8b 45 08                               .E.
0000fbc0  ba 36 03 00 00 48 8d 35 ff 50 02 00 48 8d 3d 1b 52 02 00 39 d8 72 20 29 d8 39 05 e9 6d 03 00 89  .6...H.5.P..H.=.R..9.r ).9..m...
0000fbe0  45 08 73 18 ba 38 03 00 00 48 8d 35 db 50 02 00 48 8d 3d 0f 51 02 00 e8 7d 60 ff ff 48 8b 3d f5  E.s..8...H.5.P..H.=.Q...}`..H.=.
0000fc00  6b 03 00 89 de 89 5c 24 04 e8 36 6d ff ff 44 89 ee 48 89 ef 4c 8d 44 24 04 48 89 c1 4c 89 e2 e8  k.....\$..6m..D..H..L.D$.H..L...
0000fc20  4f f6 ff ff 44 8b 6c 24 04 48 8b 3d c8 6b 03 00 89 c5 44 89 ee 44 29 eb e8 58 6c ff ff 85 ed 75  O...D.l$.H.=.k....D..D)..Xl....u
0000fc40  54 85 db 74 50 4c 89 e7 e8 51 16 00 00 48 8b 3d a4 6b 03 00 39 d8 0f 47 c3 89 c5 89 c6 e8 e2 6c  T..tPL...Q...H.=.k..9..G.......l
0000fc60  ff ff 89 ee 4c 89 e7 29 eb 49 89 c5 e8 11 17 00 00 89 e9 4c 89 ee 48 89 c7 f3 a4 89 ee 4c 89 e7  ....L..).I.........L..H......L..
0000fc80  e8 3e 17 00 00 48 8b 3d 6c 6b 03 00 89 ee e8 02 6c ff ff eb ac                                   .>...H.=lk......l....

0000fc95  488b442408         mov     rax, qword [rsp+0x8 {var_30}]
0000fc9a  64482b0425280000…  sub     rax, qword [fs:0x28]
0000fca3  7405               je      0xfcaa

0000fca5  e86655ffff         call    __stack_chk_fail
{ Does not return }

0000fcaa  4883c418           add     rsp, 0x18
0000fcae  5b                 pop     rbx {__saved_rbx}
0000fcaf  5d                 pop     rbp {__saved_rbp}
0000fcb0  415c               pop     r12 {__saved_r12}
0000fcb2  415d               pop     r13 {__saved_r13}
0000fcb4  e9506affff         jmp     __x86_return_thunk
{ Does not return }


0000fcb9    void recv_msg_channel_data() __noreturn

0000fcb9  50                 push    rax {var_8}
0000fcba  e8acfbffff         call    getchannel
{ Does not return }

0000fcbf                                                                                               48                                 H
0000fcc0  8b 50 38 8b 70 28 48 89 c7 59 e9 83 fe ff ff                                                     .P8.p(H..Y.....

0000fccf    void recv_msg_channel_window_adjust() __noreturn

0000fccf  53                 push    rbx {var_8}
0000fcd0  e896fbffff         call    getchannel
{ Does not return }

0000fcd5                                                                 48 8b 3d 1c 6b 03 00 48 89 c3 e8                       H.=.k..H...
0000fce0  b2 6c ff ff ba 00 65 cd 1d 39 d0 0f 47 c2 01 43 0c 8b 43 0c 39 d0 0f 47 c2 89 43 0c 5b e9 07 6a  .l....e..9..G..C..C.9..G..C.[..j
0000fd00  ff ff                                                                                            ..

0000fd02    void recv_msg_channel_open() __noreturn

0000fd02  4157               push    r15 {var_8}
0000fd04  4156               push    r14 {var_10}
0000fd06  4155               push    r13 {var_18}
0000fd08  4154               push    r12 {var_20}
0000fd0a  55                 push    rbp {var_28}
0000fd0b  53                 push    rbx {var_30}
0000fd0c  4883ec18           sub     rsp, 0x18
0000fd10  488b3de16a0300     mov     rdi, qword [rel data_467f8]
0000fd17  64488b3425280000…  mov     rsi, qword [fs:0x28]
0000fd20  4889742408         mov     qword [rsp+0x8 {var_40}], rsi
0000fd25  488d742404         lea     rsi, [rsp+0x4 {var_44}]
0000fd2a  e89a6cffff         call    buf_getstring
{ Does not return }

0000fd2f                                               48 8b 3d c2 6a 03 00 49 89 c4 e8 58 6c ff ff 48 8b                 H.=.j..I...Xl..H.
0000fd40  3d b3 6a 03 00 41 89 c5 e8 49 6c ff ff 48 8b 3d a4 6a 03 00 89 c3 e8 3b 6c ff ff 83 7c 24 04 40  =.j..A...Il..H.=.j.....;l...|$.@
0000fd60  0f 87 90 00 00 00 4c 8b 3d 0b 6c 03 00 89 c5 4d 8b 37 4d 85 f6 74 7f 49 8b 36 4c 89 e7 e8 8e 56  ......L.=.l....M.7M..t.I.6L....V
0000fd80  ff ff 85 c0 74 06 49 83 c7 08 eb e3 b8 00 40 00 00 4c 89 f6 44 89 ef 39 c5 0f 46 c5 89 c1 b8 00  ....t.I.......@..L..D..9..F.....
0000fda0  65 cd 1d 39 c3 0f 46 c3 89 c2 e8 96 f8 ff ff 48 89 c5 48 85 c0 74 46 48 8b 40 78 48 8b 40 08 48  e..9..F........H..H..tFH.@xH.@.H
0000fdc0  85 c0 74 1d 48 89 ef e8 60 69 ff ff 89 c3 83 f8 63 74 40 85 c0 7e 0a 48 89 ef e8 7c f0 ff ff eb  ..t.H...`i......ct@..~.H...|....
0000fde0  21 e8 6e c9 ff ff 8b 55 14 8b 75 08 48 89 ef e8 52 f1 ff ff eb 1d bb 03 00 00 00 eb 05 bb 04 00  !.n....U..u.H...R...............
0000fe00  00 00 48 8d 15 6b 4a 02 00 89 de 44 89 ef e8 74 f9 ff ff 4c 89 e7 e8 45 52 ff ff 48 8b 44 24 08  ..H..kJ....D...t...L...ER..H.D$.
0000fe20  64 48 2b 04 25 28 00 00 00 74 05 e8 e0 53 ff ff 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f e9 c6  dH+.%(...t...S..H...[]A\A]A^A_..
0000fe40  68 ff ff                                                                                         h..

0000fe43    void send_msg_channel_failure(void* arg1) __noreturn

0000fe43  837f4800           cmp     dword [rdi+0x48], 0x0
0000fe47  752a               jne     0xfe73

0000fe49  53                 push    rbx {var_8}
0000fe4a  4889fb             mov     rbx, rdi
0000fe4d  488b3d74690300     mov     rdi, qword [rel data_467c8]
0000fe54  be64000000         mov     esi, 0x64
0000fe59  e8b76affff         call    buf_putbyte
{ Does not return }

0000fe5e                                                                                            8b 73                                .s
0000fe60  04 48 8b 3d 60 69 03 00 e8 fd 6b ff ff 5b e9 e7 d2 ff ff                                         .H.=`i....k..[.....

0000fe73  e99168ffff         jmp     __x86_return_thunk
{ Does not return }


0000fe78    void recv_msg_channel_request() __noreturn

0000fe78  53                 push    rbx {var_8}
0000fe79  e8edf9ffff         call    getchannel
{ Does not return }

0000fe7e                                                                                            48 89                                H.
0000fe80  c3 48 8b 40 78 48 8b 40 18 48 85 c0 74 09 48 89 df 5b e9 95 68 ff ff 48 8b 3d 5a 69 03 00 e8 a9  .H.@xH.@.H..t.H..[..h..H.=Zi....
0000fea0  6b ff ff 48 8b 3d 4e 69 03 00 e8 55 6a ff ff 84 c0 74 06 48 89 df 5b eb 8a 5b e9 4a 68 ff ff     k..H.=Ni...Uj....t.H..[..[.Jh..

0000febf    void send_msg_channel_success(void* arg1) __noreturn

0000febf  837f4800           cmp     dword [rdi+0x48], 0x0
0000fec3  752a               jne     0xfeef

0000fec5  53                 push    rbx {var_8}
0000fec6  4889fb             mov     rbx, rdi
0000fec9  488b3df8680300     mov     rdi, qword [rel data_467c8]
0000fed0  be63000000         mov     esi, 0x63
0000fed5  e83b6affff         call    buf_putbyte
{ Does not return }

0000feda                                                                                8b 73 04 48 8b 3d                            .s.H.=
0000fee0  e4 68 03 00 e8 81 6b ff ff 5b e9 6b d2 ff ff                                                     .h....k..[.k...

0000feef  e91568ffff         jmp     __x86_return_thunk
{ Does not return }


0000fef4    void send_msg_channel_open_init(int32_t arg1, int64_t arg2) __noreturn

0000fef4  4154               push    r12 {var_8}
0000fef6  31c9               xor     ecx, ecx  {0x0}
0000fef8  31d2               xor     edx, edx  {0x0}
0000fefa  4989f4             mov     r12, rsi
0000fefd  55                 push    rbp {var_10}
0000fefe  89fd               mov     ebp, edi
0000ff00  31ff               xor     edi, edi  {0x0}
0000ff02  53                 push    rbx {var_18}
0000ff03  e83df7ffff         call    newchannel
{ Does not return }

0000ff08                          48 89 c3 83 c8 ff 48 85 db 0f 84 8d 00 00 00 89 ef e8 6b 61 ff ff 8b 05          H.....H...........ka....
0000ff20  9c 68 03 00 89 6b 2c be 5a 00 00 00 89 6b 28 48 8b 3d 92 68 03 00 39 e8 c7 43 34 01 00 00 00 c7  .h...k,.Z....k(H.=.h..9..C4.....
0000ff40  43 6c 01 00 00 00 0f 4c c5 89 05 71 68 03 00 e8 c1 69 ff ff 49 8b 2c 24 48 89 ef e8 90 52 ff ff  Cl.....L...qh....i..I.,$H....R..
0000ff60  48 8b 3d 61 68 03 00 48 89 ee 89 c2 e8 30 6c ff ff 8b 33 48 8b 3d 4e 68 03 00 e8 eb 6a ff ff 8b  H.=ah..H.....0l...3H.=Nh....j...
0000ff80  35 43 6a 03 00 48 8b 3d 3c 68 03 00 e8 d9 6a ff ff 48 8b 3d 30 68 03 00 be f7 7f 00 00 e8 c8 6a  5Cj..H.=<h....j..H.=0h.........j
0000ffa0  ff ff 31 c0 5b 5d 41 5c e9 5c 67 ff ff                                                           ..1.[]A\.\g..

0000ffad    void recv_msg_channel_open_confirmation() __noreturn

0000ffad  53                 push    rbx {var_8}
0000ffae  e8b8f8ffff         call    getchannel
{ Does not return }

0000ffb3                                                           83 78 6c 00 75 0e 48 8d 3d 4d 4e 02 00                     .xl.u.H.=MN..
0000ffc0  31 c0 e8 0a 5c ff ff 48 89 c3 31 c0 48 8b 3d 25 68 03 00 89 43 6c e8 bb 69 ff ff 48 8b 3d 16 68  1...\..H..1.H.=%h...Cl..i..H.=.h
0000ffe0  03 00 89 43 04 e8 ac 69 ff ff 48 8b 3d 07 68 03 00 89 43 0c e8 9d 69 ff ff 89 43 18 48 8b 43 78  ...C...i..H.=.h...C...i...C.H.Cx
00010000  48 8b 40 08 48 85 c0 74 15 48 89 df e8 1b 67 ff ff 85 c0 7e 09 48 89 df 5b e9 3d ee ff ff 5b e9  H.@.H..t.H....g....~.H..[.=...[.
00010020  30 c7 ff ff                                                                                      0...

00010024    void recv_msg_channel_open_failure() __noreturn

00010024  51                 push    rcx {var_8}
00010025  e841f8ffff         call    getchannel
{ Does not return }

0001002a                                83 78 6c 00 75 0e 48 8d 3d d6 4d 02 00 31 c0 e8 93 5b ff ff 48 89            .xl.u.H.=.M..1...[..H.
00010040  c7 31 c0 89 47 6c 5a e9 0f ee ff ff                                                              .1..GlZ.....

0001004c    void send_msg_request_success() __noreturn

0001004c  50                 push    rax {var_8}
0001004d  488b3d74670300     mov     rdi, qword [rel data_467c8]
00010054  be51000000         mov     esi, 0x51
00010059  e8b768ffff         call    buf_putbyte
{ Does not return }

0001005e                                                                                            5a e9                                Z.
00010060  f6 d0 ff ff                                                                                      ....

00010064    void send_msg_request_failure() __noreturn

00010064  50                 push    rax {var_8}
00010065  488b3d5c670300     mov     rdi, qword [rel data_467c8]
0001006c  be52000000         mov     esi, 0x52
00010071  e89f68ffff         call    buf_putbyte
{ Does not return }

00010076                                                                    5a e9 de d0 ff ff                                    Z.....

0001007c    void get_any_ready_channel() __noreturn

0001007c  31c0               xor     eax, eax  {0x0}
0001007e  833def68030000     cmp     dword [rel data_46974], 0x0
00010085  7431               je      0x100b8  {data_46974}

00010087  8b0de3680300       mov     ecx, dword [rel data_46970]
0001008d  488b35d4680300     mov     rsi, qword [rel data_46968]
00010094  31d2               xor     edx, edx  {0x0}

00010096  4839ca             cmp     rdx, rcx
00010099  731b               jae     0x100b6

0001009b  488b04d6           mov     rax, qword [rsi+rdx*8]
0001009f  4885c0             test    rax, rax
000100a2  740d               je      0x100b1

000100a4  4883785000         cmp     qword [rax+0x50], 0x0
000100a9  7506               jne     0x100b1

000100ab  83786c00           cmp     dword [rax+0x6c], 0x0
000100af  7407               je      0x100b8

000100b1  48ffc2             inc     rdx
000100b4  ebe0               jmp     0x10096

000100b6  31c0               xor     eax, eax  {0x0}

000100b8  e94c66ffff         jmp     __x86_return_thunk
{ Does not return }


000100bd    void start_send_channel_request() __noreturn

000100bd  55                 push    rbp {var_8}
000100be  4889fd             mov     rbp, rdi
000100c1  53                 push    rbx {var_10}
000100c2  4889f3             mov     rbx, rsi
000100c5  be62000000         mov     esi, 0x62
000100ca  50                 push    rax {var_18}
000100cb  488b3df6660300     mov     rdi, qword [rel data_467c8]
000100d2  e83e68ffff         call    buf_putbyte
{ Does not return }

000100d7                                                                       8b 75 04 48 8b 3d e7 66 03                         .u.H.=.f.
000100e0  00 e8 84 69 ff ff 48 89 df e8 02 51 ff ff 48 8b 3d d3 66 03 00 48 89 de 59 89 c2 5b 5d e9 9f 6a  ...i..H....Q..H.=.f..H..Y..[]..j
00010100  ff ff                                                                                            ..

00010102    void __x86_indirect_thunk_rbp() __noreturn

00010102  e807000000         call    sub_1010e

00010107  f390               pause   
00010109  0faee8             lfence  
0001010c  ebf9               jmp     0x10107


0001010e    int64_t sub_1010e() __pure

0001010e  48892c24           mov     qword [rsp {__return_addr}], rbp
00010112  c3                 retn     {__return_addr}


00010113    void login_free_entry(void* ptr)

00010113  e9484fffff         jmp     free


00010118    void login_set_current_time(void* arg1) __noreturn

00010118  53                 push    rbx {__saved_rbx}
00010119  31f6               xor     esi, esi  {0x0}
0001011b  4883ec20           sub     rsp, 0x20
0001011f  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00010128  48895c2418         mov     qword [rsp+0x18 {var_10}], rbx
0001012d  4889fb             mov     rbx, rdi
00010130  488d7c2408         lea     rdi, [rsp+0x8 {var_20}]
00010135  e87651ffff         call    gettimeofday
0001013a  488b442408         mov     rax, qword [rsp+0x8 {var_20}]
0001013f  488983d8010000     mov     qword [rbx+0x1d8], rax
00010146  488b442410         mov     rax, qword [rsp+0x10 {var_18}]
0001014b  488983e0010000     mov     qword [rbx+0x1e0], rax
00010152  488b442418         mov     rax, qword [rsp+0x18 {var_10}]
00010157  64482b0425280000…  sub     rax, qword [fs:0x28]
00010160  7405               je      0x10167

00010162  e8a950ffff         call    __stack_chk_fail
{ Does not return }

00010167  4883c420           add     rsp, 0x20
0001016b  5b                 pop     rbx {__saved_rbx}
0001016c  e99865ffff         jmp     __x86_return_thunk
{ Does not return }


00010171    void line_fullname(int64_t arg1, char* arg2, int64_t arg3) __noreturn

00010171  4155               push    r13 {__saved_r13}
00010173  31c0               xor     eax, eax  {0x0}
00010175  4c8d2de34c0200     lea     r13, [rel data_34e5f]
0001017c  4154               push    r12 {__saved_r12}
0001017e  4989f4             mov     r12, rsi
00010181  4c89ee             mov     rsi, r13  {data_34e5f, "/dev/"}
00010184  55                 push    rbp {__saved_rbp}
00010185  4889d5             mov     rbp, rdx
00010188  53                 push    rbx {__saved_rbx}
00010189  4889fb             mov     rbx, rdi
0001018c  51                 push    rcx {var_28}
0001018d  4889d1             mov     rcx, rdx
00010190  ba05000000         mov     edx, 0x5
00010195  f3aa               rep stosb byte [rdi]  {0x0}
00010197  4c89e7             mov     rdi, r12
0001019a  e8214fffff         call    strncmp
0001019f  85c0               test    eax, eax
000101a1  7411               je      0x101b4

000101a3  4c89e7             mov     rdi, r12
000101a6  e84550ffff         call    strlen
000101ab  4883c005           add     rax, 0x5
000101af  4839c5             cmp     rbp, rax
000101b2  7310               jae     0x101c4

000101b4  4889ea             mov     rdx, rbp
000101b7  4c89e6             mov     rsi, r12
000101ba  4889df             mov     rdi, rbx
000101bd  e8be53ffff         call    strlcpy
000101c2  eb1c               jmp     0x101e0

000101c4  4889ea             mov     rdx, rbp
000101c7  4c89ee             mov     rsi, r13  {data_34e5f, "/dev/"}
000101ca  4889df             mov     rdi, rbx
000101cd  e8ae53ffff         call    strlcpy
000101d2  4889ea             mov     rdx, rbp
000101d5  4c89e6             mov     rsi, r12
000101d8  4889df             mov     rdi, rbx
000101db  e82053ffff         call    strlcat

000101e0  5a                 pop     rdx {var_28}
000101e1  4889d8             mov     rax, rbx
000101e4  5b                 pop     rbx {__saved_rbx}
000101e5  5d                 pop     rbp {__saved_rbp}
000101e6  415c               pop     r12 {__saved_r12}
000101e8  415d               pop     r13 {__saved_r13}
000101ea  e91a65ffff         jmp     __x86_return_thunk
{ Does not return }


000101ef    void login_init_entry(void* arg1, int32_t arg2, int64_t arg3, int64_t arg4, char* arg5) __noreturn

000101ef  4155               push    r13 {__saved_r13}
000101f1  31c0               xor     eax, eax  {0x0}
000101f3  4154               push    r12 {__saved_r12}
000101f5  4989d4             mov     r12, rdx
000101f8  55                 push    rbp {__saved_rbp}
000101f9  4889cd             mov     rbp, rcx
000101fc  b99a000000         mov     ecx, 0x9a
00010201  53                 push    rbx {__saved_rbx}
00010202  4889fb             mov     rbx, rdi
00010205  4151               push    r9 {var_28}
00010207  f3ab               rep stosd dword [rdi]  {0x0}
00010209  897348             mov     dword [rbx+0x48], esi
0001020c  4d85c0             test    r8, r8
0001020f  7411               je      0x10222

00010211  4c89c6             mov     rsi, r8
00010214  488d7b50           lea     rdi, [rbx+0x50]
00010218  ba40000000         mov     edx, 0x40
0001021d  e84fffffff         call    line_fullname
{ Does not return }

00010222  4d85e4             test    r12, r12
00010225  7439               je      0x10260

00010227  4c8dab90000000     lea     r13, [rbx+0x90]
0001022e  ba40000000         mov     edx, 0x40
00010233  4c89e6             mov     rsi, r12
00010236  4c89ef             mov     rdi, r13
00010239  e84253ffff         call    strlcpy
0001023e  4c89ef             mov     rdi, r13
00010241  e8ea51ffff         call    getpwnam
00010246  4885c0             test    rax, rax
00010249  750f               jne     0x1025a

0001024b  4c89ee             mov     rsi, r13
0001024e  488d3d104c0200     lea     rdi, [rel data_34e65]  {"login_init_entry: Cannot find us…"}
00010255  e87759ffff         call    dropbear_exit
{ Does not return }

0001025a  8b4010             mov     eax, dword [rax+0x10 {passwd::pw_uid}]
0001025d  89434c             mov     dword [rbx+0x4c], eax

00010260  4885ed             test    rbp, rbp
00010263  7414               je      0x10279

00010265  488dbbd0000000     lea     rdi, [rbx+0xd0]
0001026c  ba00010000         mov     edx, 0x100
00010271  4889ee             mov     rsi, rbp
00010274  e80753ffff         call    strlcpy

00010279  5a                 pop     rdx {var_28}
0001027a  b801000000         mov     eax, 0x1
0001027f  5b                 pop     rbx {__saved_rbx}
00010280  5d                 pop     rbp {__saved_rbp}
00010281  415c               pop     r12 {__saved_r12}
00010283  415d               pop     r13 {__saved_r13}
00010285  e97f64ffff         jmp     __x86_return_thunk
{ Does not return }


0001028a    void login_alloc_entry(int32_t arg1) __noreturn

0001028a  4155               push    r13 {var_8}
0001028c  4989d5             mov     r13, rdx
0001028f  4154               push    r12 {var_10}
00010291  4989f4             mov     r12, rsi
00010294  55                 push    rbp {var_18}
00010295  89fd               mov     ebp, edi
00010297  bf68020000         mov     edi, 0x268
0001029c  53                 push    rbx {var_20}
0001029d  4883ec18           sub     rsp, 0x18
000102a1  48894c2408         mov     qword [rsp+0x8 {var_30}], rcx
000102a6  e865b3ffff         call    m_malloc
{ Does not return }

000102ab                                   4c 8b 44 24 08 4c 89 e9 4c 89 e2 89 ee 48 89 c7 48 89 c3 e8 2c             L.D$.L..L....H..H...,
000102c0  ff ff ff                                                                                         ...

000102c3    void sub_102c3(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

000102c3  4883c418           add     rsp, 0x18
000102c7  4889d8             mov     rax, rbx
000102ca  5b                 pop     rbx {arg1}
000102cb  5d                 pop     rbp {arg2}
000102cc  415c               pop     r12 {arg3}
000102ce  415d               pop     r13 {arg4}
000102d0  e93464ffff         jmp     __x86_return_thunk
{ Does not return }


000102d5    void line_stripname(int64_t arg1, char* arg2, int64_t arg3) __noreturn

000102d5  31c0               xor     eax, eax  {0x0}
000102d7  4889d1             mov     rcx, rdx
000102da  4154               push    r12 {__saved_r12}
000102dc  4989d4             mov     r12, rdx
000102df  55                 push    rbp {__saved_rbp}
000102e0  4889f5             mov     rbp, rsi
000102e3  ba05000000         mov     edx, 0x5
000102e8  488d35704b0200     lea     rsi, [rel data_34e5f]  {"/dev/"}
000102ef  53                 push    rbx {__saved_rbx}
000102f0  4889fb             mov     rbx, rdi
000102f3  f3aa               rep stosb byte [rdi]  {0x0}
000102f5  4889ef             mov     rdi, rbp
000102f8  e8c34dffff         call    strncmp
000102fd  85c0               test    eax, eax
000102ff  7509               jne     0x1030a

00010301  488d7505           lea     rsi, [rbp+0x5]
00010305  4c89e2             mov     rdx, r12
00010308  eb06               jmp     0x10310

0001030a  4c89e2             mov     rdx, r12
0001030d  4889ee             mov     rsi, rbp

00010310  4889df             mov     rdi, rbx
00010313  e86852ffff         call    strlcpy
00010318  4889d8             mov     rax, rbx
0001031b  5b                 pop     rbx {__saved_rbx}
0001031c  5d                 pop     rbp {__saved_rbp}
0001031d  415c               pop     r12 {__saved_r12}
0001031f  e9e563ffff         jmp     __x86_return_thunk
{ Does not return }


00010324    void lastlog_perform_login(void* arg1) __noreturn

00010324  4157               push    r15 {var_8}
00010326  b949000000         mov     ecx, 0x49
0001032b  ba20000000         mov     edx, 0x20
00010330  4156               push    r14 {var_10}
00010332  4155               push    r13 {var_18}
00010334  4154               push    r12 {var_20}
00010336  4c8d25504b0200     lea     r12, [rel data_34e8d]  {"/var/log/lastlog"}
0001033d  55                 push    rbp {var_28}
0001033e  4889fd             mov     rbp, rdi
00010341  53                 push    rbx {var_30}
00010342  488d7550           lea     rsi, [rbp+0x50]
00010346  4881ecc8050000     sub     rsp, 0x5c8
0001034d  64488b0425280000…  mov     rax, qword [fs:0x28]
00010356  48898424b8050000   mov     qword [rsp+0x5b8 {var_40}], rax
0001035e  31c0               xor     eax, eax  {0x0}
00010360  4c8dac2494000000   lea     r13, [rsp+0x94 {s}]
00010368  4c89ef             mov     rdi, r13 {s}
0001036b  f3ab               rep stosd dword [rdi] {var_688} {s}  {0x0}
0001036d  488dbc2498000000   lea     rdi, [rsp+0x98 {var_560}]
00010375  e85bffffff         call    line_stripname
{ Does not return }

0001037a                                                                                48 8d b5 d0 00 00                            H.....
00010380  00 ba 00 01 00 00 48 8d bc 24 b8 00 00 00 e8 ed 51 ff ff 48 8b 85 d8 01 00 00 48 89 e6 4c 89 e7  ......H..$......Q..H......H..L..
000103a0  89 84 24 94 00 00 00 e8 d4 50 ff ff 85 c0 74 27 e8 db 4c ff ff 8b 38 e8 14 54 ff ff 4c 89 e2 bf  ..$......P....t'..L...8..T..L...
000103c0  04 00 00 00 48 8d 35 d3 4a 02 00 48 89 c1 31 c0 e8 b6 58 ff ff eb 6f 8b 44 24 18 25 00 f0 00 00  ....H.5.J..H..1...X...o.D$.%....
000103e0  3d 00 40 00 00 74 24 3d 00 80 00 00 75 58 48 8d bc 24 b8 01 00 00 ba 00 04 00 00 4c 89 e6 41 bf  =.@..t$=....uXH..$.........L..A.
00010400  01 00 00 00 e8 77 51 ff ff eb 56 48 8d bc 24 b8 01 00 00 50 48 8d 85 90 00 00 00 b9 00 04 00 00  .....wQ...VH..$....PH...........
00010420  50 ba 01 00 00 00 4d 89 e1 4c 8d 05 56 3c 02 00 be 00 04 00 00 31 c0 41 bf 02 00 00 00 e8 0e 4c  P.....M..L..V<.......1.A.......L
00010440  ff ff 5a 59 eb 1b 4c 89 e2 48 8d 35 7a 4a 02 00 bf 04 00 00 00 31 c0 e8 2f 58 ff ff e9 de 00 00  ..ZY..L..H.5zJ.......1../X......
00010460  00 4c 8d b4 24 b8 01 00 00 ba 80 01 00 00 be 42 00 00 00 31 c0 4c 89 f7 e8 63 52 ff ff 89 c3 85  .L..$..........B...1.L...cR.....
00010480  c0 79 23 e8 08 4c ff ff 8b 38 e8 41 53 ff ff 4c 89 f2 bf 06 00 00 00 48 8d 35 61 4a 02 00 48 89  .y#..L...8.AS..L.......H.5aJ..H.
000104a0  c1 e9 92 00 00 00 41 ff cf 75 4a 48 63 6d 4c 31 d2 89 c7 48 69 ed 24 01 00 00 48 89 ee e8 de 4d  ......A..uJHcmL1...Hi.$...H....M
000104c0  ff ff 48 39 c5 74 2e e8 c4 4b ff ff 8b 38 e8 fd 52 ff ff 4c 89 f2 bf 04 00 00 00 48 8d 35 44 4a  ..H9.t...K...8..R..L.......H.5DJ
000104e0  02 00 48 89 c1 31 c0 e8 9f 57 ff ff 89 df e8 2e 59 ff ff eb 4a 48 8b 3d d4 5a 03 00 b9 24 01 00  ..H..1...W......Y...JH.=.Z...$..
00010500  00 4c 89 ea 89 de e8 fb 83 ff ff 89 df 48 3d 24 01 00 00 74 2e e8 26 4e ff ff e8 71 4b ff ff 8b  .L...........H=$...t..&N...qK...
00010520  38 e8 aa 52 ff ff 4c 89 e2 bf 04 00 00 00 48 8d 35 13 4a 02 00 48 89 c1 31 c0 e8 4c 57 ff ff 31  8..R..L.......H.5.J..H..1..LW..1
00010540  c0 eb 0a e8 f8 4d ff ff b8 01 00 00 00 48 8b 94 24 b8 05 00 00 64 48 2b 14 25 28 00 00 00 74 05  .....M.......H..$....dH+.%(...t.
00010560  e8 ab 4c ff ff 48 81 c4 c8 05 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 8e 61 ff ff                 ..L..H......[]A\A]A^A_..a..

0001057b    void line_abbrevname(char* arg1, char* arg2, uint64_t arg3) __noreturn

0001057b  31c0               xor     eax, eax  {0x0}
0001057d  4889d1             mov     rcx, rdx
00010580  4154               push    r12 {__saved_r12}
00010582  4989fc             mov     r12, rdi
00010585  55                 push    rbp {__saved_rbp}
00010586  4889d5             mov     rbp, rdx
00010589  ba05000000         mov     edx, 0x5
0001058e  53                 push    rbx {__saved_rbx}
0001058f  4889f3             mov     rbx, rsi
00010592  488d35c6480200     lea     rsi, [rel data_34e5f]  {"/dev/"}
00010599  f3aa               rep stosb byte [rdi]  {0x0}
0001059b  4889df             mov     rdi, rbx
0001059e  e81d4bffff         call    strncmp
000105a3  85c0               test    eax, eax
000105a5  7504               jne     0x105ab

000105a7  4883c305           add     rbx, 0x5

000105ab  4889df             mov     rdi, rbx
000105ae  e83d4cffff         call    strlen
000105b3  4885c0             test    rax, rax
000105b6  741c               je      0x105d4

000105b8  4863f0             movsxd  rsi, eax
000105bb  4839ee             cmp     rsi, rbp
000105be  7406               je      0x105c6

000105c0  4829ee             sub     rsi, rbp
000105c3  4801f3             add     rbx, rsi

000105c6  4889ea             mov     rdx, rbp
000105c9  4889de             mov     rsi, rbx
000105cc  4c89e7             mov     rdi, r12
000105cf  e8dc4affff         call    strncpy

000105d4  4c89e0             mov     rax, r12
000105d7  5b                 pop     rbx {__saved_rbx}
000105d8  5d                 pop     rbp {__saved_rbp}
000105d9  415c               pop     r12 {__saved_r12}
000105db  e92961ffff         jmp     __x86_return_thunk
{ Does not return }


000105e0    void set_utmp_time(void* arg1, void* arg2) __noreturn

000105e0  488b87d8010000     mov     rax, qword [rdi+0x1d8]
000105e7  898654010000       mov     dword [rsi+0x154], eax
000105ed  488b87e0010000     mov     rax, qword [rdi+0x1e0]
000105f4  898658010000       mov     dword [rsi+0x158], eax
000105fa  e90a61ffff         jmp     __x86_return_thunk
{ Does not return }


000105ff    void construct_utmp(void* arg1, void* arg2) __noreturn

000105ff  4154               push    r12 {var_8}
00010601  31c0               xor     eax, eax  {0x0}
00010603  b960000000         mov     ecx, 0x60
00010608  ba04000000         mov     edx, 0x4
0001060d  55                 push    rbp {var_10}
0001060e  4889fd             mov     rbp, rdi
00010611  4889f7             mov     rdi, rsi
00010614  53                 push    rbx {var_18}
00010615  4c8d6550           lea     r12, [rbp+0x50]
00010619  4889f3             mov     rbx, rsi
0001061c  f3ab               rep stosd dword [rdi]  {0x0}
0001061e  488d7e28           lea     rdi, [rsi+0x28]
00010622  4c89e6             mov     rsi, r12
00010625  e851ffffff         call    line_abbrevname
{ Does not return }

0001062a                                8b 45 44 66 83 f8 07 74 0d 66 83 f8 08 75 0c 66 c7 03 08 00 eb 05            .EDf...t.f...u.f......
00010640  66 c7 03 07 00 48 8b 85 d8 01 00 00 48 8d 7b 08 ba 20 00 00 00 4c 89 e6 89 83 54 01 00 00 48 8b  f....H......H.{.. ...L....T...H.
00010660  85 e0 01 00 00 89 83 58 01 00 00 e8 65 fc ff ff 8b 45 48 66 83 7d 44 08 89 43 04 74 40 48 8d b5  .......X....e....EHf.}D..C.t@H..
00010680  90 00 00 00 48 8d 7b 2c ba 20 00 00 00 e8 1e 4a ff ff 48 8d b5 d0 00 00 00 48 8d 7b 4c ba 00 01  ....H.{,. .....J..H......H.{L...
000106a0  00 00 e8 09 4a ff ff 66 83 bd e8 01 00 00 02 75 0c 8b 85 ec 01 00 00 89 83 5c 01 00 00 5b 5d 41  ....J..f.......u.........\...[]A
000106c0  5c e9 43 60 ff ff                                                                                \.C`..

000106c6    void syslogin_write_entry(void* arg1) __noreturn

000106c6  55                 push    rbp {var_8}
000106c7  53                 push    rbx {var_10}
000106c8  4883ec18           sub     rsp, 0x18
000106cc  8b4744             mov     eax, dword [rdi+0x44]
000106cf  64488b1c25280000…  mov     rbx, qword [fs:0x28]
000106d8  48895c2408         mov     qword [rsp+0x8 {var_20}], rbx
000106dd  4889fb             mov     rbx, rdi
000106e0  6683f807           cmp     ax, 0x7
000106e4  740b               je      0x106f1

000106e6  6683f808           cmp     ax, 0x8
000106ea  7444               je      0x10730

000106ec  e997000000         jmp     0x10788

000106f1  bf80010000         mov     edi, 0x180
000106f6  e8354effff         call    malloc
000106fb  488d3576480200     lea     rsi, [rel data_34f78]  {"syslogin_perform_login: couldn't…"}
00010702  4889c5             mov     rbp, rax
00010705  4885c0             test    rax, rax
00010708  0f8481000000       je      0x1078f

0001070e  4889c6             mov     rsi, rax
00010711  4889df             mov     rdi, rbx
00010714  e8e6feffff         call    construct_utmp
{ Does not return }

00010719                                                                             48 89 ef e8 bf 4c ff                           H....L.
00010720  ff 48 89 ef e8 37 49 ff ff b8 01 00 00 00 eb 6d                                                  .H...7I........m

00010730  4889e7             mov     rdi, rsp {var_28}
00010733  488d7350           lea     rsi, [rbx+0x50]
00010737  ba08000000         mov     edx, 0x8
0001073c  e894fbffff         call    line_stripname
{ Does not return }

00010741     48 89 e7 e8 97 49 ff ff 85 c0 75 27 e8 3e 49 ff ff 8b 38 e8 77 50 ff ff 48 89 e2 bf 04 00 00   H....I....u'.>I...8.wP..H......
00010760  00 48 8d 35 3a 48 02 00 48 89 c1 31 c0 e8 19 55 ff ff eb b5 48 8d 35 f9 40 02 00 48 89 e7 48 89  .H.5:H..H..1...U....H.5.@..H..H.
00010780  f2 e8 aa 49 ff ff eb a1                                                                          ...I....

00010788  488d354d480200     lea     rsi, [rel data_34fdc]  {"syslogin_write_entry: Invalid ty…"}

0001078f  31c0               xor     eax, eax  {0x0}
00010791  bf04000000         mov     edi, 0x4
00010796  e8f054ffff         call    dropbear_log
{ Does not return }


0001079b    void sub_1079b(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

0001079b  31c0               xor     eax, eax  {0x0}
0001079d  488b542408         mov     rdx, qword [rsp+0x8 {arg1}]
000107a2  64482b1425280000…  sub     rdx, qword [fs:0x28]
000107ab  7405               je      0x107b2

000107ad  e85e4affff         call    __stack_chk_fail
{ Does not return }

000107b2  4883c418           add     rsp, 0x18
000107b6  5b                 pop     rbx {arg2}
000107b7  5d                 pop     rbp {arg3}
000107b8  e94c5fffff         jmp     __x86_return_thunk
{ Does not return }


000107bd    void lastlog_write_entry(void* arg1) __noreturn

000107bd  66837f4407         cmp     word [rdi+0x44], 0x7
000107c2  7505               jne     0x107c9

000107c4  e95bfbffff         jmp     lastlog_perform_login
{ Does not return }

000107c9  50                 push    rax {var_8}
000107ca  488d3534480200     lea     rsi, [rel data_35005]  {"lastlog_write_entry: Invalid typ…"}
000107d1  31c0               xor     eax, eax  {0x0}
000107d3  bf04000000         mov     edi, 0x4
000107d8  e8ae54ffff         call    dropbear_log
{ Does not return }

000107dd                                                                                         31 c0 5a                               1.Z
000107e0  e9 24 5f ff ff                                                                                   .$_..

000107e5    void login_write(void* arg1) __noreturn

000107e5  53                 push    rbx {__saved_rbx}
000107e6  4889fb             mov     rbx, rdi
000107e9  e8124bffff         call    geteuid
000107ee  89c2               mov     edx, eax
000107f0  b801000000         mov     eax, 0x1
000107f5  85d2               test    edx, edx
000107f7  7521               jne     0x1081a

000107f9  4889df             mov     rdi, rbx
000107fc  e817f9ffff         call    login_set_current_time
{ Does not return }

00010801     48 89 df e8 bd fe ff ff 66 83 7b 44 07 75 08 48 89 df e8 a5 ff ff ff 31 c0                     H.......f.{D.u.H.......1.

0001081a  5b                 pop     rbx {__saved_rbx}
0001081b  e9e95effff         jmp     __x86_return_thunk
{ Does not return }


00010820    void login_login(void* arg1) __noreturn

00010820  66c747440700       mov     word [rdi+0x44], 0x7
00010826  ebbd               jmp     login_write
{ Does not return }


00010828    void login_logout(void* arg1) __noreturn

00010828  66c747440800       mov     word [rdi+0x44], 0x8
0001082e  ebb5               jmp     login_write
{ Does not return }


00010830    int64_t cleanup_tcp(void* arg1)

00010830  53                 push    rbx {__saved_rbx}
00010831  488b5f28           mov     rbx, qword [rdi+0x28]
00010835  488b3b             mov     rdi, qword [rbx]
00010838  e82348ffff         call    free
0001083d  488b7b10           mov     rdi, qword [rbx+0x10]
00010841  e81a48ffff         call    free
00010846  488b7b20           mov     rdi, qword [rbx+0x20]
0001084a  e81148ffff         call    free
0001084f  4889df             mov     rdi, rbx
00010852  5b                 pop     rbx {__saved_rbx}
00010853  e90848ffff         jmp     free


00010858    void tcp_acceptor(void* arg1, int32_t arg2) __noreturn

00010858  4156               push    r14 {__saved_r14}
0001085a  4889f8             mov     rax, rdi
0001085d  4155               push    r13 {__saved_r13}
0001085f  4154               push    r12 {__saved_r12}
00010861  55                 push    rbp {__saved_rbp}
00010862  53                 push    rbx {__saved_rbx}
00010863  4881ecc0040000     sub     rsp, 0x4c0
0001086a  488b6828           mov     rbp, qword [rax+0x28]
0001086e  64488b3c25280000…  mov     rdi, qword [fs:0x28]
00010877  4889bc24b8040000   mov     qword [rsp+0x4b8 {var_30}], rdi
0001087f  89f7               mov     edi, esi
00010881  4c8d742410         lea     r14, [rsp+0x10 {var_4d8}]
00010886  488d54240c         lea     rdx, [rsp+0xc {var_4dc}]
0001088b  c744240c80000000   mov     dword [rsp+0xc {var_4dc}], 0x80
00010893  4c89f6             mov     rsi, r14 {var_4d8}
00010896  e8654effff         call    accept
0001089b  85c0               test    eax, eax
0001089d  0f88fa000000       js      0x1099d

000108a3  89c3               mov     ebx, eax
000108a5  b901040000         mov     ecx, 0x401
000108aa  41b920000000       mov     r9d, 0x20
000108b0  4c89f7             mov     rdi, r14 {var_4d8}
000108b3  4c8dac2497000000   lea     r13, [rsp+0x97 {serv}]
000108bb  4c8da424b7000000   lea     r12, [rsp+0xb7 {host}]
000108c3  50                 push    rax {var_4f0}
000108c4  6a03               push    0x3 {var_4f8}
000108c6  8b74241c           mov     esi, dword [rsp+0x1c {var_4dc}]
000108ca  4c89e2             mov     rdx, r12 {host}
000108cd  4d89e8             mov     r8, r13 {serv}
000108d0  e88b4affff         call    getnameinfo
000108d5  5a                 pop     rdx {var_4f8}  {0x3}
000108d6  59                 pop     rcx {var_4f0}
000108d7  85c0               test    eax, eax
000108d9  740c               je      0x108e7

000108db  89df               mov     edi, ebx
000108dd  e83f55ffff         call    m_close
{ Does not return }

000108e2        e9 b6 00 00 00                                                                               .....

000108e7  488b7530           mov     rsi, qword [rbp+0x30]
000108eb  89df               mov     edi, ebx
000108ed  e802f6ffff         call    send_msg_channel_open_init
{ Does not return }

000108f2                                                        85 c0 0f 85 9c 00 00 00 8b 45 38 85 c0 75                    .........E8..u
00010900  09 48 8b 5d 00 8b 6d 08 eb 23 ff c8 74 18 ba 50 00 00 00 48 8d 35 1d 47 02 00 48 8d 3d 27 47 02  .H.]..m..#..t..P...H.5.G..H.='G.
00010920  00 e8 53 53 ff ff 48 8b 5d 20 8b 6d 18 48 85 db 75 07 48 8d 1d f4 46 02 00 48 89 df e8 af 48 ff  ..SS..H.] .m.H..u.H...F..H....H.
00010940  ff 48 8b 3d 80 5e 03 00 48 89 de 89 c2 e8 4f 62 ff ff 48 8b 3d 6f 5e 03 00 89 ee e8 0a 61 ff ff  .H.=.^..H.....Ob..H.=o^......a..
00010960  4c 89 e7 e8 88 48 ff ff 48 8b 3d 59 5e 03 00 4c 89 e6 89 c2 e8 28 62 ff ff 4c 89 ef e8 3f 4d ff  L....H..H.=Y^..L.....(b..L...?M.
00010980  ff 48 8b 3d 40 5e 03 00 89 c6 e8 db 60 ff ff e8 c6 c7 ff ff eb 07 89 df e8 a3 49 ff ff           .H.=@^......`.............I..

0001099d  488b8424b8040000   mov     rax, qword [rsp+0x4b8 {var_30}]
000109a5  64482b0425280000…  sub     rax, qword [fs:0x28]
000109ae  7405               je      0x109b5

000109b0  e85b48ffff         call    __stack_chk_fail
{ Does not return }

000109b5  4881c4c0040000     add     rsp, 0x4c0
000109bc  5b                 pop     rbx {__saved_rbx}
000109bd  5d                 pop     rbp {__saved_rbp}
000109be  415c               pop     r12 {__saved_r12}
000109c0  415d               pop     r13 {__saved_r13}
000109c2  415e               pop     r14 {__saved_r14}
000109c4  e9405dffff         jmp     __x86_return_thunk
{ Does not return }


000109c9    void listen_tcpfwd(void* arg1) __noreturn

000109c9  4155               push    r13 {var_8}
000109cb  31d2               xor     edx, edx  {0x0}
000109cd  b920000000         mov     ecx, 0x20
000109d2  4c8d052f3f0200     lea     r8, [rel data_34908]
000109d9  4154               push    r12 {var_10}
000109db  55                 push    rbp {var_18}
000109dc  4889f5             mov     rbp, rsi
000109df  be20000000         mov     esi, 0x20
000109e4  53                 push    rbx {var_20}
000109e5  4889fb             mov     rbx, rdi
000109e8  4883ec48           sub     rsp, 0x48
000109ec  448b4f18           mov     r9d, dword [rdi+0x18]
000109f0  64488b0425280000…  mov     rax, qword [fs:0x28]
000109f9  4889442438         mov     qword [rsp+0x38 {var_30}], rax
000109fe  31c0               xor     eax, eax  {0x0}
00010a00  4c8d642418         lea     r12, [rsp+0x18 {s}]
00010a05  4889542408         mov     qword [rsp+0x8 {var_60}], rdx  {0x0}
00010a0a  ba01000000         mov     edx, 0x1
00010a0f  4c89e7             mov     rdi, r12 {s}
00010a12  4c8d6c2410         lea     r13, [rsp+0x10 {var_58}]
00010a17  e83446ffff         call    __snprintf_chk
00010a1c  488b7b10           mov     rdi, qword [rbx+0x10]
00010a20  4c89ea             mov     rdx, r13 {var_58}
00010a23  4c89e6             mov     rsi, r12 {s}
00010a26  51                 push    rcx {var_70}
00010a27  4c8d0d925d0300     lea     r9, [rel data_467c0]
00010a2e  b902000000         mov     ecx, 0x2
00010a33  ff7328             push    qword [rbx+0x28] {var_78}
00010a36  4c8d442418         lea     r8, [rsp+0x18 {var_60}]
00010a3b  e8db140000         call    dropbear_listen
{ Does not return }

00010a40  48 8b 54 24 18 5e 5f 85 c0 79 1f 48 8d 35 15 46 02 00 bf 06 00 00 00 31 c0 e8 2d 52 ff ff 48 8b  H.T$.^_..y.H.5.F.......1..-R..H.
00010a60  7c 24 08 e8 f8 45 ff ff eb 47 41 89 c4 48 89 d7 e8 eb 45 ff ff 31 c0 48 89 d9 ba 67 2c 61 43 4c  |$...E...GA..H....E..1.H...g,aCL
00010a80  8d 0d aa fd ff ff 4c 8d 05 cb fd ff ff 44 89 e6 4c 89 ef 48 89 44 24 08 e8 40 01 00 00 48 85 c0  ......L......D..L..H.D$..@...H..
00010aa0  74 0f 48 85 ed 75 04 31 c0 eb 09 48 89 45 00 eb f6 83 c8 ff 48 8b 54 24 38 64 48 2b 14 25 28 00  t.H..u.1...H.E......H.T$8dH+.%(.
00010ac0  00 00 74 05 e8 47 47 ff ff 48 83 c4 48 5b 5d 41 5c 41 5d e9 31 5c ff ff                          ..t..GG..H..H[]A\A].1\..

00010ad8    void listeners_initialise() __noreturn

00010ad8  50                 push    rax {var_8}
00010ad9  bf08000000         mov     edi, 0x8
00010ade  e82dabffff         call    m_malloc
{ Does not return }

00010ae3           31 d2 c7 05 a1 5e 03 00 01 00 00 00 48 89 05 92 5e 03 00 48 89 10 59 e9 0a 5c ff ff        1....^......H...^..H..Y..\..

00010aff    void set_listener_fds(int64_t arg1) __noreturn

00010aff  4155               push    r13 {__saved_r13}
00010b01  4154               push    r12 {__saved_r12}
00010b03  4989fc             mov     r12, rdi
00010b06  55                 push    rbp {__saved_rbp}
00010b07  31ed               xor     ebp, ebp  {0x0}
00010b09  53                 push    rbx {__saved_rbx}
00010b0a  52                 push    rdx {var_28}

00010b0b  3b2d7f5e0300       cmp     ebp, dword [rel data_46990]
00010b11  733e               jae     0x10b51  {data_46990}

00010b13  488b156e5e0300     mov     rdx, qword [rel data_46988]
00010b1a  89e8               mov     eax, ebp
00010b1c  4c8b2cc2           mov     r13, qword [rdx+rax*8]
00010b20  4d85ed             test    r13, r13
00010b23  7504               jne     0x10b29

00010b25  ffc5               inc     ebp
00010b27  ebe2               jmp     0x10b0b

00010b29  31db               xor     ebx, ebx  {0x0}

00010b2b  413b5d08           cmp     ebx, dword [r13+0x8]
00010b2f  73f4               jae     0x10b25

00010b31  49637c9d00         movsxd  rdi, dword [r13+rbx*4]
00010b36  e81547ffff         call    __fdelt_chk
00010b3b  418b4c9d00         mov     ecx, dword [r13+rbx*4]
00010b40  ba01000000         mov     edx, 0x1
00010b45  48ffc3             inc     rbx
00010b48  48d3e2             shl     rdx, cl
00010b4b  490914c4           or      qword [r12+rax*8], rdx
00010b4f  ebda               jmp     0x10b2b

00010b51  58                 pop     rax {var_28}
00010b52  5b                 pop     rbx {__saved_rbx}
00010b53  5d                 pop     rbp {__saved_rbp}
00010b54  415c               pop     r12 {__saved_r12}
00010b56  415d               pop     r13 {__saved_r13}
00010b58  e9ac5bffff         jmp     __x86_return_thunk
{ Does not return }


00010b5d    void handle_listeners(int64_t arg1) __noreturn

00010b5d  4157               push    r15 {__saved_r15}
00010b5f  41bf01000000       mov     r15d, 0x1
00010b65  4156               push    r14 {__saved_r14}
00010b67  4155               push    r13 {__saved_r13}
00010b69  4989fd             mov     r13, rdi
00010b6c  4154               push    r12 {__saved_r12}
00010b6e  55                 push    rbp {__saved_rbp}
00010b6f  31ed               xor     ebp, ebp  {0x0}
00010b71  53                 push    rbx {__saved_rbx}
00010b72  52                 push    rdx {var_38}

00010b73  3b2d175e0300       cmp     ebp, dword [rel data_46990]
00010b79  7352               jae     0x10bcd  {data_46990}

00010b7b  488b15065e0300     mov     rdx, qword [rel data_46988]
00010b82  89e8               mov     eax, ebp
00010b84  488b1cc2           mov     rbx, qword [rdx+rax*8]
00010b88  4885db             test    rbx, rbx
00010b8b  7504               jne     0x10b91

00010b8d  ffc5               inc     ebp
00010b8f  ebe2               jmp     0x10b73

00010b91  4531e4             xor     r12d, r12d  {0x0}

00010b94  443b6308           cmp     r12d, dword [rbx+0x8]
00010b98  73f3               jae     0x10b8d

00010b9a  4a633ca3           movsxd  rdi, dword [rbx+r12*4]
00010b9e  4989fe             mov     r14, rdi
00010ba1  e8aa46ffff         call    __fdelt_chk
00010ba6  4489f1             mov     ecx, r14d
00010ba9  4889c2             mov     rdx, rax
00010bac  4c89f8             mov     rax, r15  {0x1}
00010baf  48d3e0             shl     rax, cl
00010bb2  492344d500         and     rax, qword [r13+rdx*8]
00010bb7  740f               je      0x10bc8

00010bb9  488b4310           mov     rax, qword [rbx+0x10]
00010bbd  4489f6             mov     esi, r14d
00010bc0  4889df             mov     rdi, rbx
00010bc3  e8645bffff         call    __x86_indirect_thunk_rax
{ Does not return }

00010bc8  49ffc4             inc     r12
00010bcb  ebc7               jmp     0x10b94

00010bcd  58                 pop     rax {var_38}
00010bce  5b                 pop     rbx {__saved_rbx}
00010bcf  5d                 pop     rbp {__saved_rbp}
00010bd0  415c               pop     r12 {__saved_r12}
00010bd2  415d               pop     r13 {__saved_r13}
00010bd4  415e               pop     r14 {__saved_r14}
00010bd6  415f               pop     r15 {__saved_r15}
00010bd8  e92c5bffff         jmp     __x86_return_thunk
{ Does not return }


00010bdd    void new_listener(int64_t arg1, int32_t arg2, int32_t arg3) __noreturn

00010bdd  4157               push    r15 {__saved_r15}
00010bdf  4989ff             mov     r15, rdi
00010be2  4156               push    r14 {__saved_r14}
00010be4  4189d6             mov     r14d, edx
00010be7  4155               push    r13 {__saved_r13}
00010be9  4989cd             mov     r13, rcx
00010bec  4154               push    r12 {__saved_r12}
00010bee  4d89c4             mov     r12, r8
00010bf1  55                 push    rbp {__saved_rbp}
00010bf2  31ed               xor     ebp, ebp  {0x0}
00010bf4  53                 push    rbx {__saved_rbx}
00010bf5  89f3               mov     ebx, esi
00010bf7  4883ec18           sub     rsp, 0x18
00010bfb  8b058f5d0300       mov     eax, dword [rel data_46990]
00010c01  488b3d805d0300     mov     rdi, qword [rel data_46988]
00010c08  4c890c24           mov     qword [rsp {var_48}], r9

00010c0c  39c5               cmp     ebp, eax
00010c0e  7310               jae     0x10c20

00010c10  48833cef00         cmp     qword [rdi+rbp*8], 0x0
00010c15  488d4d01           lea     rcx, [rbp+0x1]
00010c19  7409               je      0x10c24

00010c1b  4889cd             mov     rbp, rcx
00010c1e  ebec               jmp     0x10c0c

00010c20  39e8               cmp     eax, ebp
00010c22  7404               je      0x10c28

00010c24  31c0               xor     eax, eax  {0x0}
00010c26  eb68               jmp     0x10c90

00010c28  83f814             cmp     eax, 0x14
00010c2b  7620               jbe     0x10c4d

00010c2d  4d8d24af           lea     r12, [r15+rbp*4]
00010c31  31ed               xor     ebp, ebp  {0x0}

00010c33  4839dd             cmp     rbp, rbx
00010c36  740e               je      0x10c46

00010c38  418b3c24           mov     edi, dword [r12]
00010c3c  48ffc5             inc     rbp
00010c3f  e8fc46ffff         call    close
00010c44  ebed               jmp     0x10c33

00010c46  31c0               xor     eax, eax  {0x0}
00010c48  e99e000000         jmp     0x10ceb

00010c4d  8d7501             lea     esi, [rbp+0x1]
00010c50  896c240c           mov     dword [rsp+0xc {var_3c}], ebp
00010c54  48c1e603           shl     rsi, 0x3
00010c58  e824aaffff         call    m_realloc
{ Does not return }

00010c5d                                                                                         8b 15 2d                               ..-
00010c60  5d 03 00 44 8b 44 24 0c 48 89 05 19 5d 03 00 48 8d 04 e8 8d 4a 01 89 0d 14 5d 03 00 41 39 c8 73  ]..D.D$.H...]..H....J....]..A9.s
00010c80  a3 31 d2 41 ff c0 48 83 c0 08 48 89 50 f8 eb ec                                                  .1.A..H...H.P...

00010c90  39d8               cmp     eax, ebx
00010c92  731a               jae     0x10cae

00010c94  418b0c87           mov     ecx, dword [r15+rax*4]
00010c98  8b35225b0300       mov     esi, dword [rel data_467c0]
00010c9e  39f1               cmp     ecx, esi
00010ca0  0f4cce             cmovl   ecx, esi
00010ca3  48ffc0             inc     rax
00010ca6  890d145b0300       mov     dword [rel data_467c0], ecx
00010cac  ebe2               jmp     0x10c90

00010cae  bf30000000         mov     edi, 0x30
00010cb3  e858a9ffff         call    m_malloc
{ Does not return }

00010cb8                                                                          89 d9 4c 89 fe 48 8b 14                          ..L..H..
00010cc0  24 89 68 0c 48 c1 e1 02 48 89 c7 44 89 70 20 4c 89 68 28 89 58 08 f3 a4 4c 89 60 10 48 89 50 18  $.h.H...H..D.p L.h(.X...L.`.H.P.
00010ce0  48 8b 0d a1 5c 03 00 48 89 04 e9                                                                 H...\..H...

00010ceb  4883c418           add     rsp, 0x18
00010cef  5b                 pop     rbx {__saved_rbx}
00010cf0  5d                 pop     rbp {__saved_rbp}
00010cf1  415c               pop     r12 {__saved_r12}
00010cf3  415d               pop     r13 {__saved_r13}
00010cf5  415e               pop     r14 {__saved_r14}
00010cf7  415f               pop     r15 {__saved_r15}
00010cf9  e90b5affff         jmp     __x86_return_thunk
{ Does not return }


00010cfe    void get_listener(int32_t arg1) __noreturn

00010cfe  488b05835c0300     mov     rax, qword [rel data_46988]
00010d05  4156               push    r14 {__saved_r14}
00010d07  4989d6             mov     r14, rdx
00010d0a  4155               push    r13 {__saved_r13}
00010d0c  4989f5             mov     r13, rsi
00010d0f  4154               push    r12 {__saved_r12}
00010d11  4189fc             mov     r12d, edi
00010d14  55                 push    rbp {__saved_rbp}
00010d15  31ed               xor     ebp, ebp  {0x0}
00010d17  53                 push    rbx {__saved_rbx}
00010d18  488b18             mov     rbx, qword [rax]

00010d1b  3b2d6f5c0300       cmp     ebp, dword [rel data_46990]
00010d21  7321               jae     0x10d44  {data_46990}

00010d23  4885db             test    rbx, rbx
00010d26  7504               jne     0x10d2c

00010d28  ffc5               inc     ebp
00010d2a  ebef               jmp     0x10d1b

00010d2c  44396320           cmp     dword [rbx+0x20], r12d
00010d30  75f6               jne     0x10d28

00010d32  488b7328           mov     rsi, qword [rbx+0x28]
00010d36  4c89ef             mov     rdi, r13
00010d39  e84abcffff         call    __x86_indirect_thunk_r14
{ Does not return }

00010d3e                                                                                            85 c0                                ..
00010d40  74 e6 eb 02                                                                                      t...

00010d44  31db               xor     ebx, ebx
00010d46  4889d8             mov     rax, rbx  {0x0}
00010d49  5b                 pop     rbx {__saved_rbx}
00010d4a  5d                 pop     rbp {__saved_rbp}
00010d4b  415c               pop     r12 {__saved_r12}
00010d4d  415d               pop     r13 {__saved_r13}
00010d4f  415e               pop     r14 {__saved_r14}
00010d51  e9b359ffff         jmp     __x86_return_thunk
{ Does not return }


00010d56    int64_t remove_listener(void* arg1)

00010d56  55                 push    rbp {__saved_rbp}
00010d57  53                 push    rbx {__saved_rbx}
00010d58  4889fb             mov     rbx, rdi
00010d5b  4150               push    r8 {var_18}
00010d5d  488b4718           mov     rax, qword [rdi+0x18]
00010d61  4885c0             test    rax, rax
00010d64  7405               je      0x10d6b

00010d66  e8c159ffff         call    __x86_indirect_thunk_rax
{ Does not return }

00010d6b  31ed               xor     ebp, ebp  {0x0}

00010d6d  3b6b08             cmp     ebp, dword [rbx+0x8]
00010d70  730d               jae     0x10d7f

00010d72  8b3cab             mov     edi, dword [rbx+rbp*4]
00010d75  48ffc5             inc     rbp
00010d78  e8c345ffff         call    close
00010d7d  ebee               jmp     0x10d6d

00010d7f  4863530c           movsxd  rdx, dword [rbx+0xc]
00010d83  488b05fe5b0300     mov     rax, qword [rel data_46988]
00010d8a  31c9               xor     ecx, ecx  {0x0}
00010d8c  4889df             mov     rdi, rbx
00010d8f  48890cd0           mov     qword [rax+rdx*8], rcx  {0x0}
00010d93  5e                 pop     rsi {var_18}
00010d94  5b                 pop     rbx {__saved_rbx}
00010d95  5d                 pop     rbp {__saved_rbp}
00010d96  e9c542ffff         jmp     free


00010d9b    void remove_all_listeners() __noreturn

00010d9b  53                 push    rbx {__saved_rbx}
00010d9c  31db               xor     ebx, ebx  {0x0}

00010d9e  3b1dec5b0300       cmp     ebx, dword [rel data_46990]
00010da4  488b3ddd5b0300     mov     rdi, qword [rel data_46988]
00010dab  7314               jae     0x10dc1

00010dad  89d8               mov     eax, ebx
00010daf  488b3cc7           mov     rdi, qword [rdi+rax*8]
00010db3  4885ff             test    rdi, rdi
00010db6  7405               je      0x10dbd

00010db8  e899ffffff         call    remove_listener

00010dbd  ffc3               inc     ebx
00010dbf  ebdd               jmp     0x10d9e

00010dc1  e89a42ffff         call    free
00010dc6  31c0               xor     eax, eax  {0x0}
00010dc8  5b                 pop     rbx {__saved_rbx}
00010dc9  488905b85b0300     mov     qword [rel data_46988], rax  {0x0}
00010dd0  e93459ffff         jmp     __x86_return_thunk
{ Does not return }


00010dd5    void recv_unimplemented() __noreturn

00010dd5  50                 push    rax {var_8}
00010dd6  488b3deb590300     mov     rdi, qword [rel data_467c8]
00010ddd  be03000000         mov     esi, 0x3
00010de2  e82e5bffff         call    buf_putbyte
{ Does not return }

00010de7                       8b 05 1b 5a 03 00 48 8b 3d d4 59 03 00 8d 70 ff e8 6e 5c ff ff 5a e9 58 c3         ...Z..H.=.Y...p..n\..Z.X.
00010e00  ff ff                                                                                            ..

00010e02    void process_packet() __noreturn

00010e02  4154               push    r12 {var_8}
00010e04  4531e4             xor     r12d, r12d  {0x0}
00010e07  833d5a5a030000     cmp     dword [rel data_46868], 0x0
00010e0e  55                 push    rbp {var_10}
00010e0f  53                 push    rbx {var_18}
00010e10  740e               je      0x10e20

00010e12  4531e4             xor     r12d, r12d  {0x0}
00010e15  833d405a030000     cmp     dword [rel data_4685c], 0x0
00010e1c  410f94c4           sete    r12b  {data_4685c}

00010e20  488b3dd1590300     mov     rdi, qword [rel data_467f8]
00010e27  e8b05affff         call    buf_getbyte
{ Does not return }

00010e2c                                      89 c3 e8 c7 56 ff ff 48 89 05 06 5a 03 00 48 89 c5 80 fb 01              ....V..H...Z..H.....
00010e40  75 10 48 8d 3d 35 42 02 00 31 c0 e8 dc 4c ff ff eb 10 45 85 e4 75 0b 8d 43 fe 3c 02 0f 86 c2 00  u.H.=5B..1...L....E..u..C.<.....
00010e60  00 00 89 d8 83 e0 fd 3c 50 74 0c 80 fb 64 74 07 48 89 2d d9 59 03 00 0f b6 15 9b 59 03 00 38 da  .......<Pt...dt.H.-.Y......Y..8.
00010e80  0f 94 c0 84 d2 74 34 84 c0 75 30 8d 43 ff 3c 30 77 18 8d 43 fb 3c 01 76 11 80 fb 14 74 0c 45 85  .....t4..u0.C.<0w..C.<.v....t.E.
00010ea0  e4 75 07 e8 2d ff ff ff eb 7a 0f b6 f3 48 8d 3d de 41 02 00 31 c0 e8 16 4d ff ff 80 3d 58 59 03  .u..-....z...H.=.A..1...M...=XY.
00010ec0  00 00 74 09 c6 05 4f 59 03 00 00 eb 57 84 d2 74 0b 84 c0 74 07 c6 05 3d 59 03 00 00 83 3d 2d 5a  ..t...OY....W..t...t...=Y....=-Z
00010ee0  03 00 00 75 05 80 fb 3c 77 0b 48 8b 35 1f 59 03 00 31 d2 eb 13 0f b6 f3 48 8d 3d ba 41 02 00 31  ...u...<w.H.5.Y..1......H.=.A..1
00010f00  c0 e8 cb 4c ff ff ff c2 89 d0 48 c1 e0 04 48 01 f0 8a 08 84 c9 74 8c 38 d9 75 eb 48 8b 40 08 e8  ...L......H...H......t.8.u.H.@..
00010f20  08 58 ff ff 48 8b 3d cd 58 03 00 88 1d ea 58 03 00 e8 3b 58 ff ff 31 c0 5b 5d 48 89 05 b7 58 03  .X..H.=.X.....X...;X..1.[]H...X.
00010f40  00 41 5c e9 c1 57 ff ff                                                                          .A\..W..

00010f48    void readhostkey() __noreturn

00010f48  4155               push    r13 {var_8}
00010f4a  4989d5             mov     r13, rdx
00010f4d  4154               push    r12 {var_10}
00010f4f  4989f4             mov     r12, rsi
00010f52  55                 push    rbp {var_18}
00010f53  4889fd             mov     rbp, rdi
00010f56  bfa4060000         mov     edi, 0x6a4
00010f5b  53                 push    rbx {var_20}
00010f5c  51                 push    rcx {var_28}
00010f5d  e8db57ffff         call    buf_new
{ Does not return }

00010f62        48 89 ee 48 89 c7 48 89 c3 e8 8b 50 ff ff 89 c5 83 f8 ff 74 39 31 f6 48 89 df e8 c9 58 ff    H..H..H....P.......t91.H....X.
00010f80  ff 8b 6b 08 48 89 df 89 ee e8 b6 59 ff ff 89 ee 31 ed 48 89 c7 e8 c7 73 ff ff 4c 89 ea 4c 89 e6  ..k.H......Y....1.H....s..L..L..
00010fa0  48 89 df e8 78 64 ff ff ff c0 40 0f 94 c5 f7 dd 48 89 df e8 be 57 ff ff 5a 89 e8 5b 5d 41 5c 41  H...xd....@.....H....W..Z..[]A\A
00010fc0  5d e9 43 57 ff ff                                                                                ].CW..

00010fc6    void parse_ciphers_macs() __noreturn

00010fc6  55                 push    rbp {__saved_rbp}
00010fc7  53                 push    rbx {__saved_rbx}
00010fc8  52                 push    rdx {var_18}
00010fc9  488b1d185a0300     mov     rbx, qword [rel data_469e8]
00010fd0  4885db             test    rbx, rbx
00010fd3  7464               je      0x11039

00010fd5  488d3501410200     lea     rsi, [rel data_350dd]  {"help"}
00010fdc  4889df             mov     rdi, rbx
00010fdf  e82c44ffff         call    strcmp
00010fe4  488d3535560300     lea     rsi, [rel sshciphers]
00010feb  85c0               test    eax, eax
00010fed  7530               jne     0x1101f

00010fef  4889f7             mov     rdi, rsi  {sshciphers}
00010ff2  bd01000000         mov     ebp, 0x1
00010ff7  e8b5caffff         call    algolist_string
{ Does not return }

00010ffc                                                                                      48 8d 35 df                              H.5.
00011000  40 02 00 bf 06 00 00 00 48 89 c2 48 89 c3 31 c0 e8 76 4c ff ff 48 89 df e8 43 40 ff ff eb 1c     @.......H..H..1..vL..H...C@....

0001101f  4889df             mov     rdi, rbx
00011022  488d15cf400200     lea     rdx, [rel data_350f8]  {"cipher"}
00011029  e8f9caffff         call    check_user_algos
{ Does not return }

0001102e                                            48 8d 3d ca 40 02 00 85 c0 74 6d                                     H.=.@....tm

00011039  31ed               xor     ebp, ebp  {0x0}
0001103b  488b1dae590300     mov     rbx, qword [rel data_469f0]
00011042  4885db             test    rbx, rbx
00011045  7464               je      0x110ab

00011047  488d358f400200     lea     rsi, [rel data_350dd]  {"help"}
0001104e  4889df             mov     rdi, rbx
00011051  e8ba43ffff         call    strcmp
00011056  488d3563550300     lea     rsi, [rel sshhashes]
0001105d  85c0               test    eax, eax
0001105f  752b               jne     0x1108c

00011061  4889f7             mov     rdi, rsi  {sshhashes}
00011064  e848caffff         call    algolist_string
{ Does not return }

00011069                             48 8d 35 b3 40 02 00 bf 06 00 00 00 48 89 c3 48 89 c2 31 c0 e8 09 4c           H.5.@.......H..H..1...L
00011080  ff ff 48 89 df e8 d6 3f ff ff eb 23                                                              ..H....?...#

0001108c  488d15a3400200     lea     rdx, [rel data_35136]
00011093  4889df             mov     rdi, rbx
00011096  e88ccaffff         call    check_user_algos
{ Does not return }

0001109b                                                                                   85 c0 75 0c 48                             ..u.H
000110a0  8d 3d 94 40 02 00                                                                                .=.@..

000110a6  e8264bffff         call    dropbear_exit
{ Does not return }

000110ab  85ed               test    ebp, ebp
000110ad  740b               je      0x110ba  {0x1}

000110af  488d3d6d330200     lea     rdi, [rel data_34423]
000110b6  31c0               xor     eax, eax  {0x0}
000110b8  ebec               jmp     0x110a6

000110ba  58                 pop     rax {var_18}
000110bb  5b                 pop     rbx {__saved_rbx}
000110bc  5d                 pop     rbp {__saved_rbp}
000110bd  e94756ffff         jmp     __x86_return_thunk
{ Does not return }


000110c2    int64_t print_version()

000110c2  488b3d57560300     mov     rdi, qword [rel stderr]
000110c9  488d0daa3b0200     lea     rcx, [rel data_34c69[0x11]]  {"2025.87"}
000110d0  488d1584400200     lea     rdx, [rel data_3515b]  {"Dropbear v%s\n"}
000110d7  31c0               xor     eax, eax  {0x0}
000110d9  be01000000         mov     esi, 0x1
000110de  e99d46ffff         jmp     __fprintf_chk


000110e3    void parse_recv_window(int64_t arg1) __noreturn

000110e3  53                 push    rbx {var_8}
000110e4  4883ec10           sub     rsp, 0x10
000110e8  64488b1c25280000…  mov     rbx, qword [fs:0x28]
000110f1  48895c2408         mov     qword [rsp+0x8 {var_10}], rbx
000110f6  4889fb             mov     rbx, rdi
000110f9  488d742404         lea     rsi, [rsp+0x4 {var_14}]
000110fe  e8f551ffff         call    m_str_to_uint
{ Does not return }

00011103           89 c2 8b 44 24 04 ff c2 74 0b 8d 50 ff 81 fa ff ff 9f 00 76 2f 3d 00 00 a0 00 76 0a c7     ...D$...t..P.......v/=....v..
00011120  05 9f 58 03 00 00 00 a0 00 8b 0d 99 58 03 00 48 89 da bf 04 00 00 00 31 c0 48 8d 35 29 40 02 00  ..X.........X..H.......1.H.5)@..
00011140  e8 46 4b ff ff eb 06 89 05 7b 58 03 00 48 8b 44 24 08 64 48 2b 04 25 28 00 00 00 74 05 e8 ae 40  .FK......{X..H.D$.dH+.%(...t...@
00011160  ff ff 48 83 c4 10 5b e9 9d 55 ff ff                                                              ..H...[..U..

0001116c    void split_address_port(char* arg1, int64_t* arg2, int64_t* arg3) __noreturn

0001116c  31c0               xor     eax, eax  {0x0}
0001116e  4156               push    r14 {var_8}
00011170  4989fe             mov     r14, rdi
00011173  4155               push    r13 {var_10}
00011175  4989d5             mov     r13, rdx
00011178  4154               push    r12 {var_18}
0001117a  55                 push    rbp {var_20}
0001117b  4889f5             mov     rbp, rsi
0001117e  53                 push    rbx {var_28}
0001117f  488906             mov     qword [rsi], rax  {0x0}
00011182  488902             mov     qword [rdx], rax  {0x0}
00011185  e8cea4ffff         call    m_strdup
{ Does not return }

0001118a                                80 38 5b 48 89 c3 75 45 4c 8d 60 01 be 5d 00 00 00 4c 89 e7 e8 9d            .8[H..uEL.`..]...L....
000111a0  40 ff ff 48 85 c0 75 1b 4c 89 f2 48 8d 35 d6 3f 02 00 31 c0 83 cd ff bf 04 00 00 00 e8 ca 4a ff  @..H..u.L..H.5.?..1...........J.
000111c0  ff eb 52 8a 50 01 c6 00 00 84 d2 74 2f 48 ff c0 80 fa 3a 74 12 eb d1 be 3a 00 00 00 48 89 c7 49  ..R.P......t/H....:t....:...H..I
000111e0  89 dc e8 99 40 ff ff 48 85 c0 74 10 c6 00 00 48 8d 78 01 e8 60 a4 ff ff 49 89 45 00 41 80 3c 24  ....@..H..t....H.x..`...I.E.A.<$
00011200  00 75 04 31 ed eb 0e 4c 89 e7 e8 49 a4 ff ff 48 89 45 00 eb ee 48 89 df e8 43 3e ff ff 5b 89 e8  .u.1...L...I...H.E...H...C>..[..
00011220  5d 41 5c 41 5d 41 5e e9 dd 54 ff ff                                                              ]A\A]A^..T..

0001122c    void cbuf_new(int32_t arg1) __noreturn

0001122c  53                 push    rbx {var_8}
0001122d  81ff00e1f505       cmp     edi, 0x5f5e100
00011233  760e               jbe     0x11243

00011235  488d3d5d3f0200     lea     rdi, [rel data_35199]  {"Bad cbuf size"}
0001123c  31c0               xor     eax, eax  {0x0}
0001123e  e88e49ffff         call    dropbear_exit
{ Does not return }

00011243  89fb               mov     ebx, edi
00011245  bf18000000         mov     edi, 0x18
0001124a  e8c1a3ffff         call    m_malloc
{ Does not return }

0001124f                                               31 c9 31 d2 89 50 04 48 89 48 08 48 89 48 10 89 18                 1.1..P.H.H.H.H...
00011260  5b e9 a3 54 ff ff                                                                                [..T..

00011266    int64_t cbuf_free(int32_t* arg1)

00011266  53                 push    rbx {__saved_rbx}
00011267  4889fb             mov     rbx, rdi
0001126a  488b7f10           mov     rdi, qword [rdi+0x10]
0001126e  4885ff             test    rdi, rdi
00011271  7410               je      0x11283

00011273  8b33               mov     esi, dword [rbx]
00011275  e8b55affff         call    m_burn
0001127a  488b7b10           mov     rdi, qword [rbx+0x10]
0001127e  e8dd3dffff         call    free

00011283  4889df             mov     rdi, rbx
00011286  5b                 pop     rbx {__saved_rbx}
00011287  e9d43dffff         jmp     free


0001128c    void cbuf_getused(void* arg1) __noreturn

0001128c  8b470c             mov     eax, dword [rdi+0xc]
0001128f  e97554ffff         jmp     __x86_return_thunk
{ Does not return }


00011294    void cbuf_getavail(int32_t* arg1) __noreturn

00011294  8b07               mov     eax, dword [rdi]
00011296  2b470c             sub     eax, dword [rdi+0xc]
00011299  e96b54ffff         jmp     __x86_return_thunk
{ Does not return }


0001129e    void cbuf_writelen(int32_t* arg1) __noreturn

0001129e  51                 push    rcx {var_8}
0001129f  448b4f0c           mov     r9d, dword [rdi+0xc]
000112a3  8b0f               mov     ecx, dword [rdi]
000112a5  4439c9             cmp     ecx, r9d
000112a8  7315               jae     0x112bf

000112aa  ba49000000         mov     edx, 0x49
000112af  488d35f13e0200     lea     rsi, [rel data_351a7]  {"src/circbuffer.c"}
000112b6  488d3dfb3e0200     lea     rdi, [rel data_351b8]  {"cbuf->used <= cbuf->size"}
000112bd  eb37               jmp     0x112f6

000112bf  448b4708           mov     r8d, dword [rdi+0x8]
000112c3  8d3409             lea     esi, [rcx+rcx]
000112c6  8b7f04             mov     edi, dword [rdi+0x4]
000112c9  31d2               xor     edx, edx
000112cb  89f0               mov     eax, esi
000112cd  29f8               sub     eax, edi
000112cf  4401c0             add     eax, r8d
000112d2  f7f1               div     ecx  {0x0}  {0x0}
000112d4  4489c8             mov     eax, r9d
000112d7  4189d2             mov     r10d, edx
000112da  31d2               xor     edx, edx
000112dc  f7f1               div     ecx  {0x0}  {0x0}
000112de  4139d2             cmp     r10d, edx
000112e1  7418               je      0x112fb

000112e3  ba4a000000         mov     edx, 0x4a
000112e8  488d35b83e0200     lea     rsi, [rel data_351a7]  {"src/circbuffer.c"}
000112ef  488d3ddb3e0200     lea     rdi, [rel data_351d1]  {"((2*cbuf->size)+cbuf->writepos-c…"}

000112f6  e87e49ffff         call    fail_assert
{ Does not return }

000112fb  4429c6             sub     esi, r8d
000112fe  31d2               xor     edx, edx
00011300  8d043e             lea     eax, [rsi+rdi]
00011303  f7f1               div     ecx  {0x0}  {0x0}
00011305  89c8               mov     eax, ecx
00011307  4429c8             sub     eax, r9d
0001130a  89d6               mov     esi, edx
0001130c  31d2               xor     edx, edx
0001130e  f7f1               div     ecx  {0x0}  {0x0}
00011310  39d6               cmp     esi, edx
00011312  7415               je      0x11329

00011314  ba4b000000         mov     edx, 0x4b
00011319  488d35873e0200     lea     rsi, [rel data_351a7]  {"src/circbuffer.c"}
00011320  488d3dfc3e0200     lea     rdi, [rel data_35223]  {"((2*cbuf->size)+cbuf->readpos-cb…"}
00011327  ebcd               jmp     0x112f6

00011329  31c0               xor     eax, eax  {0x0}
0001132b  4139c9             cmp     r9d, ecx
0001132e  740f               je      0x1133f

00011330  89c8               mov     eax, ecx
00011332  4429c0             sub     eax, r8d
00011335  4139f8             cmp     r8d, edi
00011338  7305               jae     0x1133f

0001133a  89f8               mov     eax, edi
0001133c  4429c0             sub     eax, r8d

0001133f  5a                 pop     rdx {var_8}
00011340  e9c453ffff         jmp     __x86_return_thunk
{ Does not return }


00011345    void cbuf_readptrs(int32_t* arg1, int64_t* arg2, int32_t* arg3, int64_t* arg4, int32_t* arg5) __noreturn

00011345  8b4704             mov     eax, dword [rdi+0x4]
00011348  4989d1             mov     r9, rdx
0001134b  4889c2             mov     rdx, rax
0001134e  48034710           add     rax, qword [rdi+0x10]
00011352  488906             mov     qword [rsi], rax
00011355  8b07               mov     eax, dword [rdi]
00011357  29d0               sub     eax, edx
00011359  8b570c             mov     edx, dword [rdi+0xc]
0001135c  39d0               cmp     eax, edx
0001135e  0f47c2             cmova   eax, edx
00011361  418901             mov     dword [r9], eax
00011364  8b570c             mov     edx, dword [rdi+0xc]
00011367  39d0               cmp     eax, edx
00011369  7308               jae     0x11373

0001136b  488b7710           mov     rsi, qword [rdi+0x10]
0001136f  29c2               sub     edx, eax
00011371  eb04               jmp     0x11377

00011373  31f6               xor     esi, esi  {0x0}
00011375  31d2               xor     edx, edx  {0x0}

00011377  488931             mov     qword [rcx], rsi
0001137a  418910             mov     dword [r8], edx
0001137d  e98753ffff         jmp     __x86_return_thunk
{ Does not return }


00011382    void cbuf_writeptr(int32_t* arg1, int32_t arg2) __noreturn

00011382  55                 push    rbp {var_8}
00011383  89f5               mov     ebp, esi
00011385  53                 push    rbx {var_10}
00011386  4889fb             mov     rbx, rdi
00011389  51                 push    rcx {var_18}
0001138a  e80fffffff         call    cbuf_writelen
{ Does not return }

0001138f                                               39 e8 73 0e 48 8d 3d e8 3e 02 00 31 c0 e8 30 48 ff                 9.s.H.=.>..1..0H.
000113a0  ff 48 8b 43 10 48 85 c0 75 0b 8b 3b e8 5f a2 ff ff 48 89 43 10 8b 53 08 48 01 d0 5a 5b 5d e9 46  .H.C.H..u..;._...H.C..S.H..Z[].F
000113c0  53 ff ff                                                                                         S..

000113c3    void cbuf_incrwrite(int32_t* arg1, int32_t arg2) __noreturn

000113c3  55                 push    rbp {var_8}
000113c4  4889fd             mov     rbp, rdi
000113c7  53                 push    rbx {var_10}
000113c8  89f3               mov     ebx, esi
000113ca  52                 push    rdx {var_18}
000113cb  e8cefeffff         call    cbuf_writelen
{ Does not return }

000113d0                                                  39 d8 73 0e 48 8d 3d a7 3e 02 00 31 c0 e8 ef 47                  9.s.H.=.>..1...G
000113e0  ff ff 8b 45 0c 8b 4d 00 01 d8 89 45 0c 39 c1 73 18 ba 7c 00 00 00 48 8d 35 aa 3d 02 00 48 8d 3d  ...E..M....E.9.s..|...H.5.=..H.=
00011400  b4 3d 02 00 e8 70 48 ff ff 8b 45 08 31 d2 01 d8 f7 f1 89 55 08 58 5b 5d e9 ec 52 ff ff           .=...pH...E.1......U.X[]..R..

0001141d    void cbuf_incrread(int32_t* arg1, int32_t arg2) __noreturn

0001141d  8b570c             mov     edx, dword [rdi+0xc]
00011420  39f2               cmp     edx, esi
00011422  7319               jae     0x1143d

00011424  50                 push    rax {var_8}
00011425  ba82000000         mov     edx, 0x82
0001142a  488d35763d0200     lea     rsi, [rel data_351a7]  {"src/circbuffer.c"}
00011431  488d3d593e0200     lea     rdi, [rel data_35291]  {"cbuf->used >= len"}
00011438  e83c48ffff         call    fail_assert
{ Does not return }

0001143d  29f2               sub     edx, esi
0001143f  89f0               mov     eax, esi
00011441  034704             add     eax, dword [rdi+0x4]
00011444  89570c             mov     dword [rdi+0xc], edx
00011447  31d2               xor     edx, edx
00011449  f737               div     dword [rdi]  {0x0}  {0x0}
0001144b  895704             mov     dword [rdi+0x4], edx
0001144e  e9b652ffff         jmp     __x86_return_thunk
{ Does not return }


00011453    void list_append() __noreturn

00011453  55                 push    rbp {var_8}
00011454  4889f5             mov     rbp, rsi
00011457  53                 push    rbx {var_10}
00011458  4889fb             mov     rbx, rdi
0001145b  bf20000000         mov     edi, 0x20
00011460  51                 push    rcx {var_18}
00011461  e8aaa1ffff         call    m_malloc
{ Does not return }

00011466                    31 f6 48 83 3b 00 48 89 28 48 89 58 18 48 89 70 08 75 0b 31 d2 48 89 03 48 89        1.H.;.H.(H.X.H.p.u.1.H..H.
00011480  50 10 eb 0c 48 8b 53 08 48 89 50 10 48 89 42 08 48 89 43 08 58 5b 5d e9 6d 52 ff ff              P...H.S.H.P.H.B.H.C.X[].mR..

0001149c    void list_new() __noreturn

0001149c  50                 push    rax {var_8}
0001149d  bf10000000         mov     edi, 0x10
000114a2  e869a1ffff         call    m_malloc
{ Does not return }


000114a7    void sub_114a7(int64_t* arg1 @ rax) __noreturn

000114a7  31d2               xor     edx, edx  {0x0}
000114a9  48895008           mov     qword [rax+0x8], rdx  {0x0}
000114ad  488910             mov     qword [rax], rdx  {0x0}
000114b0  59                 pop     rcx {__return_addr}
000114b1  e95352ffff         jmp     __x86_return_thunk
{ Does not return }


000114b6    void list_remove(int64_t* arg1) __noreturn

000114b6  488b5718           mov     rdx, qword [rdi+0x18]
000114ba  488b4f08           mov     rcx, qword [rdi+0x8]
000114be  53                 push    rbx {__saved_rbx}
000114bf  488b1f             mov     rbx, qword [rdi]
000114c2  48393a             cmp     qword [rdx], rdi
000114c5  7503               jne     0x114ca

000114c7  48890a             mov     qword [rdx], rcx

000114ca  488b4710           mov     rax, qword [rdi+0x10]
000114ce  48397a08           cmp     qword [rdx+0x8], rdi
000114d2  7504               jne     0x114d8

000114d4  48894208           mov     qword [rdx+0x8], rax

000114d8  4885c0             test    rax, rax
000114db  7404               je      0x114e1

000114dd  48894808           mov     qword [rax+0x8], rcx

000114e1  488b5708           mov     rdx, qword [rdi+0x8]
000114e5  4885d2             test    rdx, rdx
000114e8  7404               je      0x114ee

000114ea  48894210           mov     qword [rdx+0x10], rax

000114ee  e86d3bffff         call    free
000114f3  4889d8             mov     rax, rbx
000114f6  5b                 pop     rbx {__saved_rbx}
000114f7  e90d52ffff         jmp     __x86_return_thunk
{ Does not return }


000114fc    void cancel_callback(int32_t arg1, int32_t arg2) __noreturn

000114fc  89f8               mov     eax, edi
000114fe  89f7               mov     edi, esi
00011500  85c0               test    eax, eax
00011502  7505               jne     0x11509

00011504  e91849ffff         jmp     m_close
{ Does not return }

00011509  e9fb51ffff         jmp     __x86_return_thunk
{ Does not return }


0001150e    void remove_connect(int64_t* arg1, int64_t* arg2) __noreturn

0001150e  55                 push    rbp {__saved_rbp}
0001150f  4889f5             mov     rbp, rsi
00011512  53                 push    rbx {__saved_rbx}
00011513  4889fb             mov     rbx, rdi
00011516  52                 push    rdx {var_18}
00011517  488b3f             mov     rdi, qword [rdi]
0001151a  4885ff             test    rdi, rdi
0001151d  7412               je      0x11531

0001151f  837f0401           cmp     dword [rdi+0x4 {addrinfo::ai_family}], 0x1
00011523  7407               je      0x1152c

00011525  e82643ffff         call    freeaddrinfo
0001152a  eb05               jmp     0x11531

0001152c  e82f3bffff         call    free

00011531  488b7b10           mov     rdi, qword [rbx+0x10]
00011535  e8263bffff         call    free
0001153a  488b7b18           mov     rdi, qword [rbx+0x18]
0001153e  e81d3bffff         call    free
00011543  488b7b40           mov     rdi, qword [rbx+0x40]
00011547  e8143bffff         call    free
0001154c  488b7b48           mov     rdi, qword [rbx+0x48]
00011550  e80b3bffff         call    free
00011555  488b7b50           mov     rdi, qword [rbx+0x50]
00011559  e8023bffff         call    free
0001155e  4889df             mov     rdi, rbx
00011561  e8fa3affff         call    free
00011566  58                 pop     rax {var_18}
00011567  4889ef             mov     rdi, rbp
0001156a  5b                 pop     rbx {__saved_rbx}
0001156b  5d                 pop     rbp {__saved_rbp}
0001156c  e945ffffff         jmp     list_remove
{ Does not return }


00011571    void cancel_connect(void* arg1) __noreturn

00011571  488d0584ffffff     lea     rax, [rel cancel_callback]
00011578  48894720           mov     qword [rdi+0x20], rax  {cancel_callback}
0001157c  31c0               xor     eax, eax  {0x0}
0001157e  48894728           mov     qword [rdi+0x28], rax  {0x0}
00011582  e98251ffff         jmp     __x86_return_thunk
{ Does not return }


00011587    void connect_remote() __noreturn

00011587  4157               push    r15 {var_8}
00011589  4d89c7             mov     r15, r8
0001158c  4156               push    r14 {var_10}
0001158e  4155               push    r13 {var_18}
00011590  4989f5             mov     r13, rsi
00011593  4154               push    r12 {var_20}
00011595  4989d4             mov     r12, rdx
00011598  55                 push    rbp {var_28}
00011599  4889cd             mov     rbp, rcx
0001159c  53                 push    rbx {var_30}
0001159d  4883ec58           sub     rsp, 0x58
000115a1  48897c2408         mov     qword [rsp+0x8 {var_80}], rdi
000115a6  bf60000000         mov     edi, 0x60
000115ab  644c8b3425280000…  mov     r14, qword [fs:0x28]
000115b4  4c89742448         mov     qword [rsp+0x48 {var_40}], r14
000115b9  4d89ce             mov     r14, r9
000115bc  e84fa0ffff         call    m_malloc
{ Does not return }

000115c1     48 8b 7c 24 08 48 89 c3 e8 8a a0 ff ff 4c 89 ef 48 89 43 10 e8 7e a0 ff ff c7 43 38 ff ff ff   H.|$.H.......L..H.C..~....C8...
000115e0  ff 48 89 de 48 8d 3d 3d 52 03 00 48 89 43 18 8b 84 24 90 00 00 00 4c 89 63 20 89 43 58 48 89 6b  .H..H.==R..H.C...$....L.c .CXH.k
00011600  28 e8 4d fe ff ff 48 8d 54 24 18 31 c0 4c 89 ee b9 0c 00 00 00 48 89 d7 f3 ab 48 8b 7c 24 08 48  (.M...H.T$.1.L.......H....H.|$.H
00011620  89 d9 c7 44 24 20 01 00 00 00 e8 91 41 ff ff 85 c0 74 56 89 c7 41 89 c4 e8 33 3c ff ff 48 89 c7  ...D$ ......A....tV..A...3<..H..
00011640  e8 ab 3b ff ff 8d 68 64 48 63 ed 48 89 ef e8 bd 9f ff ff 44 89 e7 48 89 43 40 e8 11 3c ff ff 48  ..;...hdHc.H.......D..H.C@..<..H
00011660  8b 7b 40 48 83 c9 ff 48 89 ee 50 ba 01 00 00 00 4c 8d 05 2c 3c 02 00 31 c0 41 55 4c 8b 4c 24 18  .{@H...H..P.....L..,<..1.AUL.L$.
00011680  e8 cb 39 ff ff 58 5a eb 07 48 8b 03 48 89 43 08 4d 85 ff 74 0c 4c 89 ff e8 bb 9f ff ff 48 89 43  ..9..XZ..H..H.C.M..t.L.......H.C
000116a0  48 4d 85 f6 74 0c 4c 89 f7 e8 aa 9f ff ff 48 89 43 50 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00  HM..t.L.......H.CPH.D$HdH+.%(...
000116c0  74 05 e8 49 3b ff ff 48 83 c4 58 48 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 2c 50 ff ff           t..I;..H..XH..[]A\A]A^A_.,P..

000116dd    void connect_streamlocal(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4) __noreturn

000116dd  4156               push    r14 {var_8}
000116df  4989f6             mov     r14, rsi
000116e2  4155               push    r13 {var_10}
000116e4  4989d5             mov     r13, rdx
000116e7  4154               push    r12 {var_18}
000116e9  4189cc             mov     r12d, ecx
000116ec  55                 push    rbp {var_20}
000116ed  4889fd             mov     rbp, rdi
000116f0  bf60000000         mov     edi, 0x60
000116f5  53                 push    rbx {var_28}
000116f6  e8159fffff         call    m_malloc
{ Does not return }

000116fb                                                                                   48 89 ef 48 89                             H..H.
00011700  c3 e8 52 9f ff ff c7 43 38 ff ff ff ff 48 8d 3d 14 51 03 00 48 89 de 48 89 43 10 31 c0 48 89 43  ..R....C8....H.=.Q..H..H.C.1.H.C
00011720  18 4c 89 73 20 4c 89 6b 28 44 89 63 58 e8 21 fd ff ff 48 89 ef e8 b6 3a ff ff 48 83 f8 6b 76 12  .L.s L.k(D.cX.!...H....:..H..kv.
00011740  48 8d 3d 7f 3b 02 00 e8 0c 9f ff ff 48 89 43 40 eb 4e bf 9e 00 00 00 e8 b4 9e ff ff 48 89 ee 48  H.=.;.......H.C@.N..........H..H
00011760  b9 01 00 00 00 01 00 00 00 48 89 03 48 8d 50 30 48 8d 78 32 48 89 48 04 b9 37 00 00 00 48 c1 e1  .........H..H.P0H.x2H.H..7...H..
00011780  21 48 89 50 18 ba 6c 00 00 00 48 89 48 0c 66 c7 40 30 01 00 e8 e7 3d ff ff 48 8b 03 48 89 43 08  !H.P..l...H.H.f.@0....=..H..H.C.
000117a0  48 89 d8 5b 5d 41 5c 41 5d 41 5e e9 59 4f ff ff                                                  H..[]A\A]A^.YO..

000117b0    void remove_connect_pending() __noreturn

000117b0  488b0571500300     mov     rax, qword [rel data_46828]
000117b7  4885c0             test    rax, rax
000117ba  7505               jne     0x117c1

000117bc  e9484fffff         jmp     __x86_return_thunk
{ Does not return }

000117c1  52                 push    rdx {var_8}
000117c2  488b38             mov     rdi, qword [rax]
000117c5  4889c6             mov     rsi, rax
000117c8  e841fdffff         call    remove_connect
{ Does not return }

000117cd                                         48 8b 05 54 50 03 00 48 85 c0 75 e9 59 e9 2a 4f ff ff                  H..TP..H..u.Y.*O..

000117df    void handle_connect_fds(int64_t arg1) __noreturn

000117df  4155               push    r13 {__saved_r13}
000117e1  41bd01000000       mov     r13d, 0x1
000117e7  4154               push    r12 {__saved_r12}
000117e9  55                 push    rbp {__saved_rbp}
000117ea  53                 push    rbx {__saved_rbx}
000117eb  4883ec18           sub     rsp, 0x18
000117ef  488b2d32500300     mov     rbp, qword [rel data_46828]
000117f6  644c8b2425280000…  mov     r12, qword [fs:0x28]
000117ff  4c89642408         mov     qword [rsp+0x8 {var_30}], r12
00011804  4989fc             mov     r12, rdi

00011807  4885ed             test    rbp, rbp
0001180a  0f84b4000000       je      0x118c4

00011810  488b5d00           mov     rbx, qword [rbp]
00011814  c744240404000000   mov     dword [rsp+0x4 {var_34}], 0x4
0001181c  48637b38           movsxd  rdi, dword [rbx+0x38]
00011820  85ff               test    edi, edi
00011822  7819               js      0x1183d

00011824  e8273affff         call    __fdelt_chk
00011829  8b7b38             mov     edi, dword [rbx+0x38]
0001182c  4889c2             mov     rdx, rax
0001182f  4c89e8             mov     rax, r13  {0x1}
00011832  89f9               mov     ecx, edi
00011834  48d3e0             shl     rax, cl
00011837  492304d4           and     rax, qword [r12+rdx*8]
0001183b  7506               jne     0x11843

0001183d  488b6d08           mov     rbp, qword [rbp+0x8]
00011841  ebc4               jmp     0x11807

00011843  4889e1             mov     rcx, rsp {var_38}
00011846  4c8d442404         lea     r8, [rsp+0x4 {var_34}]
0001184b  ba04000000         mov     edx, 0x4
00011850  be01000000         mov     esi, 0x1
00011855  e8763bffff         call    getsockopt
0001185a  8b7b38             mov     edi, dword [rbx+0x38]
0001185d  85c0               test    eax, eax
0001185f  740e               je      0x1186f

00011861  e8bb45ffff         call    m_close
{ Does not return }

00011866                    c7 43 38 ff ff ff ff eb ce                                                           .C8......

0001186f  833c2400           cmp     dword [rsp {var_38}], 0x0
00011873  7431               je      0x118a6

00011875  e8a745ffff         call    m_close
{ Does not return }

0001187a                                                                                c7 43 38 ff ff ff                            .C8...
00011880  ff 48 8b 7b 40 e8 d6 37 ff ff 31 c0 8b 3c 24 48 89 43 40 e8 38 3f ff ff 48 89 c7 e8 b8 9d ff ff  .H.{@..7..1..<$H.C@.8?..H.......
000118a0  48 89 43 40 eb 97                                                                                H.C@..

000118a6  89fe               mov     esi, edi
000118a8  488b5328           mov     rdx, qword [rbx+0x28]
000118ac  31ff               xor     edi, edi  {0x0}
000118ae  488b4320           mov     rax, qword [rbx+0x20]
000118b2  31c9               xor     ecx, ecx  {0x0}
000118b4  e8734effff         call    __x86_indirect_thunk_rax
{ Does not return }

000118b9                                                                             48 89 ee 48 89 df e8                           H..H...
000118c0  4a fc ff ff                                                                                      J...

000118c4  488b442408         mov     rax, qword [rsp+0x8 {var_30}]
000118c9  64482b0425280000…  sub     rax, qword [fs:0x28]
000118d2  7405               je      0x118d9

000118d4  e83739ffff         call    __stack_chk_fail
{ Does not return }

000118d9  4883c418           add     rsp, 0x18
000118dd  5b                 pop     rbx {__saved_rbx}
000118de  5d                 pop     rbp {__saved_rbp}
000118df  415c               pop     r12 {__saved_r12}
000118e1  415d               pop     r13 {__saved_r13}
000118e3  e9214effff         jmp     __x86_return_thunk
{ Does not return }


000118e8    void connect_set_writequeue(void* arg1, int64_t arg2) __noreturn

000118e8  48897730           mov     qword [rdi+0x30], rsi
000118ec  e9184effff         jmp     __x86_return_thunk
{ Does not return }


000118f1    void packet_queue_to_iovec(int64_t* arg1, int64_t arg2, int32_t* arg3) __noreturn

000118f1  4157               push    r15 {__saved_r15}
000118f3  4156               push    r14 {__saved_r14}
000118f5  4989f6             mov     r14, rsi
000118f8  4155               push    r13 {__saved_r13}
000118fa  4154               push    r12 {__saved_r12}
000118fc  55                 push    rbp {__saved_rbp}
000118fd  4889d5             mov     rbp, rdx
00011900  53                 push    rbx {__saved_rbx}
00011901  51                 push    rcx {var_38}
00011902  8b12               mov     edx, dword [rdx]
00011904  8b4710             mov     eax, dword [rdi+0x10]
00011907  4c8b3f             mov     r15, qword [rdi]
0001190a  39d0               cmp     eax, edx
0001190c  0f47c2             cmova   eax, edx
0001190f  ba00040000         mov     edx, 0x400
00011914  39d0               cmp     eax, edx
00011916  0f47c2             cmova   eax, edx  {0x400}
00011919  4531ed             xor     r13d, r13d  {0x0}
0001191c  894500             mov     dword [rbp], eax
0001191f  443b6d00           cmp     r13d, dword [rbp]
00011923  734d               jae     0x11972

00011925  498b3f             mov     rdi, qword [r15]
00011928  448b6708           mov     r12d, dword [rdi+0x8]
0001192c  442b670c           sub     r12d, dword [rdi+0xc]
00011930  4585e4             test    r12d, r12d
00011933  7f18               jg      0x1194d

00011935  ba82010000         mov     edx, 0x182
0001193a  488d359a390200     lea     rsi, [rel data_352db]  {"src/netio.c"}
00011941  488d3d9f390200     lea     rdi, [rel data_352e7]  {"len > 0"}
00011948  e82c43ffff         call    fail_assert
{ Does not return }

0001194d  4489eb             mov     ebx, r13d  {0x0}
00011950  4489e6             mov     esi, r12d
00011953  41ffc5             inc     r13d  {0x1}
00011956  e8e94fffff         call    buf_getptr
{ Does not return }

0001195b                                                                                   48 c1 e3 04 4d                             H...M
00011960  8b 7f 08 4c 01 f3 48 89 03 44 89 e0 48 89 43 08 eb ad                                            ...L..H..D..H.C...

00011972  58                 pop     rax {var_38}
00011973  5b                 pop     rbx {__saved_rbx}
00011974  5d                 pop     rbp {__saved_rbp}
00011975  415c               pop     r12 {__saved_r12}
00011977  415d               pop     r13 {__saved_r13}
00011979  415e               pop     r14 {__saved_r14}
0001197b  415f               pop     r15 {__saved_r15}
0001197d  e9874dffff         jmp     __x86_return_thunk
{ Does not return }


00011982    void packet_queue_consume(int64_t* arg1, int64_t arg2) __noreturn

00011982  4154               push    r12 {__saved_r12}
00011984  4989fc             mov     r12, rdi
00011987  55                 push    rbp {__saved_rbp}
00011988  53                 push    rbx {__saved_rbx}
00011989  4889f3             mov     rbx, rsi
0001198c  4885db             test    rbx, rbx
0001198f  7e3b               jle     0x119cc

00011991  4c89e7             mov     rdi, r12
00011994  e8036fffff         call    examine
{ Does not return }

00011999                                                                             48 89 c5 8b 40 08 2b                           H...@.+
000119a0  45 0c 48 98 48 39 d8 7e 0e 89 de 48 89 ef 5b 5d 41 5c e9 de 4e ff ff 4c 89 e7 48 29 c3 e8 87 6e  E.H.H9.~...H..[]A\..N..L..H)...n
000119c0  ff ff 48 89 ef e8 a7 4d ff ff eb c0                                                              ..H....M....

000119cc  5b                 pop     rbx {__saved_rbx}
000119cd  5d                 pop     rbp {__saved_rbp}
000119ce  415c               pop     r12 {__saved_r12}
000119d0  e9344dffff         jmp     __x86_return_thunk
{ Does not return }


000119d5    void set_sock_nodelay(int64_t arg1) __noreturn

000119d5  4883ec18           sub     rsp, 0x18
000119d9  41b804000000       mov     r8d, 0x4
000119df  ba01000000         mov     edx, 0x1
000119e4  be06000000         mov     esi, 0x6
000119e9  64488b0425280000…  mov     rax, qword [fs:0x28]
000119f2  4889442408         mov     qword [rsp+0x8 {var_10}], rax
000119f7  31c0               xor     eax, eax  {0x0}
000119f9  488d4c2404         lea     rcx, [rsp+0x4 {var_14}]
000119fe  c744240401000000   mov     dword [rsp+0x4 {var_14}], 0x1
00011a06  e83537ffff         call    setsockopt
00011a0b  488b442408         mov     rax, qword [rsp+0x8 {var_10}]
00011a10  64482b0425280000…  sub     rax, qword [fs:0x28]
00011a19  7405               je      0x11a20

00011a1b  e8f037ffff         call    __stack_chk_fail
{ Does not return }

00011a20  4883c418           add     rsp, 0x18
00011a24  e9e04cffff         jmp     __x86_return_thunk
{ Does not return }


00011a29    void set_listen_fast_open(int64_t arg1) __noreturn

00011a29  4883ec18           sub     rsp, 0x18
00011a2d  41b804000000       mov     r8d, 0x4
00011a33  ba17000000         mov     edx, 0x17
00011a38  be06000000         mov     esi, 0x6
00011a3d  64488b0425280000…  mov     rax, qword [fs:0x28]
00011a46  4889442408         mov     qword [rsp+0x8 {var_10}], rax
00011a4b  31c0               xor     eax, eax  {0x0}
00011a4d  488d4c2404         lea     rcx, [rsp+0x4 {var_14}]
00011a52  c744240405000000   mov     dword [rsp+0x4 {var_14}], 0x5
00011a5a  e8e136ffff         call    setsockopt
00011a5f  488b442408         mov     rax, qword [rsp+0x8 {var_10}]
00011a64  64482b0425280000…  sub     rax, qword [fs:0x28]
00011a6d  7405               je      0x11a74

00011a6f  e89c37ffff         call    __stack_chk_fail
{ Does not return }

00011a74  4883c418           add     rsp, 0x18
00011a78  e98c4cffff         jmp     __x86_return_thunk
{ Does not return }


00011a7d    void set_sock_priority(int32_t arg1, int32_t arg2) __noreturn

00011a7d  4154               push    r12 {__saved_r12}
00011a7f  55                 push    rbp {__saved_rbp}
00011a80  53                 push    rbx {__saved_rbx}
00011a81  89fb               mov     ebx, edi
00011a83  4883ec10           sub     rsp, 0x10
00011a87  8b05334f0300       mov     eax, dword [rel opts]
00011a8d  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00011a96  48896c2408         mov     qword [rsp+0x8 {var_20}], rbp
00011a9b  89f5               mov     ebp, esi
00011a9d  4c8d642404         lea     r12, [rsp+0x4 {opts_2}]
00011aa2  85c0               test    eax, eax
00011aa4  753f               jne     0x11ae5

00011aa6  83fd01             cmp     ebp, 0x1
00011aa9  7505               jne     0x11ab0

00011aab  b848000000         mov     eax, 0x48

00011ab0  41b804000000       mov     r8d, 0x4
00011ab6  4c89e1             mov     rcx, r12 {opts_2}
00011ab9  ba43000000         mov     edx, 0x43
00011abe  89df               mov     edi, ebx
00011ac0  be29000000         mov     esi, 0x29
00011ac5  89442404           mov     dword [rsp+0x4 {opts_2}], eax
00011ac9  e87236ffff         call    setsockopt
00011ace  41b804000000       mov     r8d, 0x4
00011ad4  4c89e1             mov     rcx, r12 {opts_2}
00011ad7  31f6               xor     esi, esi  {0x0}
00011ad9  ba01000000         mov     edx, 0x1
00011ade  89df               mov     edi, ebx
00011ae0  e85b36ffff         call    setsockopt

00011ae5  31c0               xor     eax, eax  {0x0}
00011ae7  ffcd               dec     ebp
00011ae9  7505               jne     0x11af0

00011aeb  b806000000         mov     eax, 0x6

00011af0  41b804000000       mov     r8d, 0x4
00011af6  4c89e1             mov     rcx, r12 {opts_2}
00011af9  ba0c000000         mov     edx, 0xc
00011afe  89df               mov     edi, ebx
00011b00  be01000000         mov     esi, 0x1
00011b05  89442404           mov     dword [rsp+0x4 {opts_2}], eax
00011b09  e83236ffff         call    setsockopt
00011b0e  488b442408         mov     rax, qword [rsp+0x8 {var_20}]
00011b13  64482b0425280000…  sub     rax, qword [fs:0x28]
00011b1c  7405               je      0x11b23

00011b1e  e8ed36ffff         call    __stack_chk_fail
{ Does not return }

00011b23  4883c410           add     rsp, 0x10
00011b27  5b                 pop     rbx {__saved_rbx}
00011b28  5d                 pop     rbp {__saved_rbp}
00011b29  415c               pop     r12 {__saved_r12}
00011b2b  e9d94bffff         jmp     __x86_return_thunk
{ Does not return }


00011b30    void set_connect_fds(int64_t arg1) __noreturn

00011b30  4157               push    r15 {__saved_r15}
00011b32  4156               push    r14 {__saved_r14}
00011b34  4155               push    r13 {__saved_r13}
00011b36  4154               push    r12 {__saved_r12}
00011b38  55                 push    rbp {__saved_rbp}
00011b39  53                 push    rbx {__saved_rbx}
00011b3a  4883ec58           sub     rsp, 0x58
00011b3e  4c8b2de34c0300     mov     r13, qword [rel data_46828]
00011b45  644c8b3425280000…  mov     r14, qword [fs:0x28]
00011b4e  4c89742448         mov     qword [rsp+0x48 {var_40}], r14
00011b53  4989fe             mov     r14, rdi

00011b56  4d85ed             test    r13, r13
00011b59  0f84d1020000       je      0x11e30

00011b5f  498b4508           mov     rax, qword [r13+0x8]
00011b63  498b5d00           mov     rbx, qword [r13]
00011b67  48890424           mov     qword [rsp {var_88_1}], rax

00011b6b  4c8b7b08           mov     r15, qword [rbx+0x8]
00011b6f  448b6338           mov     r12d, dword [rbx+0x38]
00011b73  4d85ff             test    r15, r15
00011b76  0f844a020000       je      0x11dc6

00011b7c  4585e4             test    r12d, r12d
00011b7f  0f8946020000       jns     0x11dcb

00011b85  4183fcff           cmp     r12d, 0xffffffff
00011b89  7418               je      0x11ba3

00011b8b  ba4a000000         mov     edx, 0x4a
00011b90  488d3544370200     lea     rsi, [rel data_352db]  {"src/netio.c"}
00011b97  488d3d51370200     lea     rdi, [rel data_352ef]  {"c->sock == -1"}
00011b9e  e8d640ffff         call    fail_assert
{ Does not return }

00011ba3  418b570c           mov     edx, dword [r15+0xc]
00011ba7  418b7708           mov     esi, dword [r15+0x8]
00011bab  418b7f04           mov     edi, dword [r15+0x4]
00011baf  e8ac3cffff         call    socket
00011bb4  894338             mov     dword [rbx+0x38], eax
00011bb7  85c0               test    eax, eax
00011bb9  0f88ee010000       js      0x11dad

00011bbf  41837f0401         cmp     dword [r15+0x4], 0x1
00011bc4  bd73000000         mov     ebp, 0x73
00011bc9  7505               jne     0x11bd0

00011bcb  bd0b000000         mov     ebp, 0xb

00011bd0  4c8b4348           mov     r8, qword [rbx+0x48]
00011bd4  4d85c0             test    r8, r8
00011bd7  750b               jne     0x11be4

00011bd9  48837b5000         cmp     qword [rbx+0x50], 0x0
00011bde  0f843b010000       je      0x11d1f

00011be4  488d542418         lea     rdx, [rsp+0x18 {var_70}]
00011be9  31c0               xor     eax, eax  {0x0}
00011beb  b90c000000         mov     ecx, 0xc
00011bf0  488b7350           mov     rsi, qword [rbx+0x50]
00011bf4  4889d7             mov     rdi, rdx {var_70}
00011bf7  4531c9             xor     r9d, r9d  {0x0}
00011bfa  f3ab               rep stosd dword [rdi] {var_a0} {var_70}  {0x0}
00011bfc  488d4c2410         lea     rcx, [rsp+0x10 {var_78}]
00011c01  4c89c7             mov     rdi, r8
00011c04  4c894c2410         mov     qword [rsp+0x10 {var_78}], r9  {0x0}
00011c09  c744242001000000   mov     dword [rsp+0x20 {var_68_1}], 0x1
00011c11  418b4704           mov     eax, dword [r15+0x4]
00011c15  c744241801000000   mov     dword [rsp+0x18 {var_70}], 0x1
00011c1d  8944241c           mov     dword [rsp+0x1c {var_6c_1}], eax
00011c21  e89a3bffff         call    getaddrinfo
00011c26  85c0               test    eax, eax
00011c28  7462               je      0x11c8c

00011c2a  89c7               mov     edi, eax
00011c2c  89442408           mov     dword [rsp+0x8 {code_1}], eax
00011c30  e83b36ffff         call    gai_strerror
00011c35  4889c7             mov     rdi, rax
00011c38  e8b335ffff         call    strlen
00011c3d  488b7b40           mov     rdi, qword [rbx+0x40]
00011c41  4889c5             mov     rbp, rax
00011c44  e81734ffff         call    free
00011c49  4531c0             xor     r8d, r8d  {0x0}
00011c4c  83c564             add     ebp, 0x64
00011c4f  4c894340           mov     qword [rbx+0x40], r8  {0x0}
00011c53  4863ed             movsxd  rbp, ebp
00011c56  4889ef             mov     rdi, rbp
00011c59  e8b299ffff         call    m_malloc
{ Does not return }

00011c5e                                                                                            8b 7c                                .|
00011c60  24 08 48 89 43 40 e8 05 36 ff ff 4c 8b 4b 48 48 8b 7b 40 48 89 ee 50 4c 8d 05 7f 36 02 00 48 83  $.H.C@..6..L.KHH.{@H..PL...6..H.
00011c80  c9 ff ba 01 00 00 00 ff 73 50 eb 7d                                                              ........sP.}

00011c8c  488b442410         mov     rax, qword [rsp+0x10 {var_78}]
00011c91  8b7b38             mov     edi, dword [rbx+0x38]
00011c94  8b5010             mov     edx, dword [rax+0x10 {addrinfo::ai_addrlen}]
00011c97  488b7018           mov     rsi, qword [rax+0x18 {addrinfo::ai_addr}]
00011c9b  e87039ffff         call    bind
00011ca0  488b7c2410         mov     rdi, qword [rsp+0x10 {var_78}]
00011ca5  89442408           mov     dword [rsp+0x8 {var_80_1}], eax
00011ca9  e8a23bffff         call    freeaddrinfo
00011cae  8b442408           mov     eax, dword [rsp+0x8 {var_80_1}]
00011cb2  31ff               xor     edi, edi  {0x0}
00011cb4  48897c2410         mov     qword [rsp+0x10 {var_78}], rdi  {0x0}
00011cb9  85c0               test    eax, eax
00011cbb  7962               jns     0x11d1f

00011cbd  e8ce33ffff         call    __errno_location
00011cc2  488b7b40           mov     rdi, qword [rbx+0x40]
00011cc6  8b28               mov     ebp, dword [rax]
00011cc8  e89333ffff         call    free
00011ccd  31f6               xor     esi, esi  {0x0}
00011ccf  bf2c010000         mov     edi, 0x12c
00011cd4  48897340           mov     qword [rbx+0x40], rsi  {0x0}
00011cd8  e83399ffff         call    m_malloc
{ Does not return }

00011cdd                                                                                         89 ef 48                               ..H
00011ce0  89 43 40 e8 e8 3a ff ff 4c 8b 4b 48 48 8b 7b 40 4c 8d 05 36 36 02 00 50 48 83 c9 ff ba 01 00 00  .C@..:..L.KHH.{@L..66..PH.......
00011d00  00 be 2c 01 00 00 ff 73 50 31 c0 e8 40 33 ff ff 8b 7b 38 e8 28 36 ff ff 5a 59 e9 85 00 00 00     ..,....sP1..@3...{8.(6..ZY.....

00011d1f  8b7b38             mov     edi, dword [rbx+0x38]
00011d22  8b05984a0300       mov     eax, dword [rel data_467c0]
00011d28  39f8               cmp     eax, edi
00011d2a  0f4cc7             cmovl   eax, edi
00011d2d  89058d4a0300       mov     dword [rel data_467c0], eax
00011d33  e89dfcffff         call    set_sock_nodelay
{ Does not return }

00011d38                                                                          8b 73 58 8b 7b 38 e8 3a                          .sX.{8.:
00011d40  fd ff ff 8b 7b 38 e8 3e 43 ff ff 41 8b 57 10 49 8b 77 18 8b 7b 38 e8 05 3a ff ff 85 c0 0f 89 c7  ....{8.>C..A.W.I.w..{8..:.......
00011d60  00 00 00 e8 28 33 ff ff 39 28 0f 84 ba 00 00 00 48 8b 7b 40 48 89 44 24 08 e8 e2 32 ff ff 31 c0  ....(3..9(......H.{@H.D$...2..1.
00011d80  48 89 43 40 48 8b 44 24 08 8b 38 e8 40 3a ff ff 48 89 c7 e8 c0 98 ff ff 8b 7b 38 48 89 43 40 e8  H.C@H.D$..8.@:..H........{8H.C@.
00011da0  9c 35 ff ff c7 43 38 ff ff ff ff eb 03                                                           .5...C8......

00011dad  4189c4             mov     r12d, eax
00011db0  4d8b7f28           mov     r15, qword [r15+0x28]
00011db4  4d85ff             test    r15, r15
00011db7  0f85c8fdffff       jne     0x11b85

00011dbd  4c897b08           mov     qword [rbx+0x8], r15
00011dc1  e9a5fdffff         jmp     0x11b6b

00011dc6  4585e4             test    r12d, r12d
00011dc9  781c               js      0x11de7

00011dcb  4963fc             movsxd  rdi, r12d
00011dce  e87d34ffff         call    __fdelt_chk
00011dd3  8b4b38             mov     ecx, dword [rbx+0x38]
00011dd6  4889c2             mov     rdx, rax
00011dd9  b801000000         mov     eax, 0x1
00011dde  48d3e0             shl     rax, cl
00011de1  490904d6           or      qword [r14+rdx*8], rax
00011de5  eb3a               jmp     0x11e21

00011de7  488b4b40           mov     rcx, qword [rbx+0x40]
00011deb  4885c9             test    rcx, rcx
00011dee  7513               jne     0x11e03

00011df0  488d3d65350200     lea     rdi, [rel data_3535c]  {"unexpected failure"}
00011df7  e85c98ffff         call    m_strdup
{ Does not return }

00011dfc                                                                                      48 89 43 40                              H.C@
00011e00  48 89 c1                                                                                         H..

00011e03  83ceff             or      esi, 0xffffffff  {0xffffffff}
00011e06  83cfff             or      edi, 0xffffffff  {0xffffffff}
00011e09  488b5328           mov     rdx, qword [rbx+0x28]
00011e0d  488b4320           mov     rax, qword [rbx+0x20]
00011e11  e81649ffff         call    __x86_indirect_thunk_rax
{ Does not return }

00011e16                                                                    4c 89 ee 48 89 df e8 ed f6 ff                        L..H......
00011e20  ff                                                                                               .

00011e21  4c8b2c24           mov     r13, qword [rsp {var_88_1}]
00011e25  e92cfdffff         jmp     0x11b56

00011e2a                                4d 8b 7f 28 eb 8d                                                            M..(..

00011e30  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00011e35  64482b0425280000…  sub     rax, qword [fs:0x28]
00011e3e  7405               je      0x11e45

00011e40  e8cb33ffff         call    __stack_chk_fail
{ Does not return }

00011e45  4883c458           add     rsp, 0x58
00011e49  5b                 pop     rbx {__saved_rbx}
00011e4a  5d                 pop     rbp {__saved_rbp}
00011e4b  415c               pop     r12 {__saved_r12}
00011e4d  415d               pop     r13 {__saved_r13}
00011e4f  415e               pop     r14 {__saved_r14}
00011e51  415f               pop     r15 {__saved_r15}
00011e53  e9b148ffff         jmp     __x86_return_thunk
{ Does not return }


00011e58    void get_sock_port(int32_t arg1) __noreturn

00011e58  55                 push    rbp {__saved_rbp}
00011e59  4189f8             mov     r8d, edi
00011e5c  b920000000         mov     ecx, 0x20
00011e61  53                 push    rbx {__saved_rbx}
00011e62  4881ecb8000000     sub     rsp, 0xb8
00011e69  64488b0425280000…  mov     rax, qword [fs:0x28]
00011e72  48898424a8000000   mov     qword [rsp+0xa8 {var_20}], rax
00011e7a  31c0               xor     eax, eax  {0x0}
00011e7c  488d5c2408         lea     rbx, [rsp+0x8 {var_c0}]
00011e81  488d542404         lea     rdx, [rsp+0x4 {addrlen}]
00011e86  c744240480000000   mov     dword [rsp+0x4 {addrlen}], 0x80
00011e8e  4889df             mov     rdi, rbx {var_c0}
00011e91  4889de             mov     rsi, rbx {var_c0}
00011e94  f3ab               rep stosd dword [rdi] {var_140} {var_c0}  {0x0}
00011e96  4489c7             mov     edi, r8d
00011e99  e87238ffff         call    getsockname
00011e9e  89c2               mov     edx, eax
00011ea0  31c0               xor     eax, eax  {0x0}
00011ea2  85d2               test    edx, edx
00011ea4  784f               js      0x11ef5

00011ea6  8b442408           mov     eax, dword [rsp+0x8 {var_c0}]
00011eaa  6683f80a           cmp     ax, 0xa
00011eae  750a               jne     0x11eba

00011eb0  c74424041c000000   mov     dword [rsp+0x4 {addrlen}], 0x1c
00011eb8  eb0d               jmp     0x11ec7

00011eba  83e0f7             and     eax, 0xfffffff7
00011ebd  89c2               mov     edx, eax
00011ebf  31c0               xor     eax, eax  {0x0}
00011ec1  6683fa02           cmp     dx, 0x2
00011ec5  752e               jne     0x11ef5

00011ec7  488dac2488000000   lea     rbp, [rsp+0x88 {var_40}]
00011ecf  50                 push    rax {var_d0_1}
00011ed0  31c9               xor     ecx, ecx  {0x0}
00011ed2  31d2               xor     edx, edx  {0x0}
00011ed4  6a02               push    0x2 {var_d8_1}
00011ed6  8b742414           mov     esi, dword [rsp+0x14 {addrlen}]
00011eda  41b920000000       mov     r9d, 0x20
00011ee0  4989e8             mov     r8, rbp {var_40}
00011ee3  4889df             mov     rdi, rbx {var_c0}
00011ee6  e87534ffff         call    getnameinfo
00011eeb  4889ef             mov     rdi, rbp {var_40}
00011eee  e82d38ffff         call    atoi
00011ef3  5a                 pop     rdx {var_d8_1}
00011ef4  59                 pop     rcx {var_d0_1}

00011ef5  488b9424a8000000   mov     rdx, qword [rsp+0xa8 {var_20}]
00011efd  64482b1425280000…  sub     rdx, qword [fs:0x28]
00011f06  7405               je      0x11f0d

00011f08  e80333ffff         call    __stack_chk_fail
{ Does not return }

00011f0d  4881c4b8000000     add     rsp, 0xb8
00011f14  5b                 pop     rbx {__saved_rbx}
00011f15  5d                 pop     rbp {__saved_rbp}
00011f16  e9ee47ffff         jmp     __x86_return_thunk
{ Does not return }


00011f1b    void dropbear_listen(char* arg1, char* arg2, int64_t arg3, int32_t arg4, int64_t* arg5, char* arg6) __noreturn

00011f1b  4157               push    r15 {__saved_r15}
00011f1d  4989fa             mov     r10, rdi
00011f20  31ff               xor     edi, edi  {0x0}
00011f22  4d89cf             mov     r15, r9
00011f25  4156               push    r14 {__saved_r14}
00011f27  4155               push    r13 {__saved_r13}
00011f29  4154               push    r12 {__saved_r12}
00011f2b  4d89c4             mov     r12, r8
00011f2e  55                 push    rbp {__saved_rbp}
00011f2f  53                 push    rbx {__saved_rbx}
00011f30  4881ec88000000     sub     rsp, 0x88
00011f37  488b8424c0000000   mov     rax, qword [rsp+0xc0 {arg6}]
00011f3f  4889542410         mov     qword [rsp+0x10 {var_a8}], rdx
00011f44  488d542448         lea     rdx, [rsp+0x48 {var_70}]
00011f49  894c241c           mov     dword [rsp+0x1c {var_9c}], ecx
00011f4d  b90c000000         mov     ecx, 0xc
00011f52  4889442408         mov     qword [rsp+0x8 {var_b0}], rax
00011f57  64488b0425280000…  mov     rax, qword [fs:0x28]
00011f60  4889442478         mov     qword [rsp+0x78 {var_40}], rax
00011f65  31c0               xor     eax, eax  {0x0}
00011f67  48897c2440         mov     qword [rsp+0x40 {pai}], rdi  {0x0}
00011f6c  4889d7             mov     rdi, rdx {var_70}
00011f6f  f3ab               rep stosd dword [rdi] {var_a0} {var_70}  {0x0}
00011f71  c744245001000000   mov     dword [rsp+0x50 {var_68}], 0x1
00011f79  4d85d2             test    r10, r10
00011f7c  7411               je      0x11f8f

00011f7e  41803a00           cmp     byte [r10], 0x0
00011f82  7503               jne     0x11f87

00011f84  4531d2             xor     r10d, r10d  {0x0}

00011f87  c744244801000000   mov     dword [rsp+0x48 {var_70}], 0x1

00011f8f  488d4c2440         lea     rcx, [rsp+0x40 {pai}]
00011f94  4c89d7             mov     rdi, r10
00011f97  e82438ffff         call    getaddrinfo
00011f9c  4189c5             mov     r13d, eax
00011f9f  85c0               test    eax, eax
00011fa1  746f               je      0x12012

00011fa3  4d85e4             test    r12, r12
00011fa6  7451               je      0x11ff9

00011fa8  49833c2400         cmp     qword [r12], 0x0
00011fad  754a               jne     0x11ff9

00011faf  89c7               mov     edi, eax
00011fb1  e8ba32ffff         call    gai_strerror
00011fb6  4889c7             mov     rdi, rax
00011fb9  e83232ffff         call    strlen
00011fbe  8d5814             lea     ebx, [rax+0x14]
00011fc1  4863db             movsxd  rbx, ebx
00011fc4  4889df             mov     rdi, rbx
00011fc7  e84496ffff         call    m_malloc
{ Does not return }

00011fcc                                      44 89 ef 49 89 04 24 e8 98 32 ff ff 49 8b 3c 24 48 83 c9 ff              D..I..$..2..I.<$H...
00011fe0  48 89 de 49 89 c1 4c 8d 05 82 33 02 00 ba 01 00 00 00 31 c0 e8 57 30 ff ff                       H..I..L...3.......1..W0..

00011ff9  488b7c2440         mov     rdi, qword [rsp+0x40 {pai}]
00011ffe  4885ff             test    rdi, rdi
00012001  7508               jne     0x1200b

00012003  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00012006  e927020000         jmp     0x12232

0001200b  e84038ffff         call    freeaddrinfo
00012010  ebf1               jmp     0x12003

00012012  31d2               xor     edx, edx  {0x0}
00012014  31c9               xor     ecx, ecx  {0x0}
00012016  488d442438         lea     rax, [rsp+0x38 {var_80}]
0001201b  488b6c2440         mov     rbp, qword [rsp+0x40 {pai}]
00012020  48891424           mov     qword [rsp {var_b8_1}], rdx  {0x0}
00012024  4531f6             xor     r14d, r14d  {0x0}
00012027  894c2418           mov     dword [rsp+0x18 {var_a0}], ecx  {0x0}
0001202b  4889442420         mov     qword [rsp+0x20 {var_98_1}], rax {var_80}

00012030  4885ed             test    rbp, rbp
00012033  0f8477010000       je      0x121b0

00012039  8b54241c           mov     edx, dword [rsp+0x1c {var_9c}]
0001203d  39542418           cmp     dword [rsp+0x18 {var_a0}], edx
00012041  0f8369010000       jae     0x121b0

00012047  4585f6             test    r14d, r14d
0001204a  8b7d04             mov     edi, dword [rbp+0x4 {addrinfo::ai_family}]
0001204d  7e22               jle     0x12071  {0x1}

0001204f  83ff02             cmp     edi, 0x2
00012052  7405               je      0x12059

00012054  83ff0a             cmp     edi, 0xa
00012057  750c               jne     0x12065

00012059  488b4518           mov     rax, qword [rbp+0x18 {addrinfo::ai_addr}]
0001205d  4883c002           add     rax, 0x2 {sockaddr::sa_data}
00012061  48890424           mov     qword [rsp {var_b8_1}], rax

00012065  4489f0             mov     eax, r14d  {0x0}
00012068  488b1424           mov     rdx, qword [rsp {var_b8_1}]
0001206c  86e0               xchg    al, ah  {0x0}  {0x0}  {0x0}
0001206e  668902             mov     word [rdx], ax  {0x0}

00012071  8b442418           mov     eax, dword [rsp+0x18 {var_a0}]
00012075  488b4c2410         mov     rcx, qword [rsp+0x10 {var_a8}]
0001207a  8b550c             mov     edx, dword [rbp+0xc {addrinfo::ai_protocol}]
0001207d  8b7508             mov     esi, dword [rbp+0x8 {addrinfo::ai_socktype}]
00012080  488d0c81           lea     rcx, [rcx+rax*4]
00012084  48894c2428         mov     qword [rsp+0x28 {var_90_1}], rcx
00012089  e8d237ffff         call    socket
0001208e  488b4c2428         mov     rcx, qword [rsp+0x28 {var_90_1}]
00012093  89c3               mov     ebx, eax
00012095  8901               mov     dword [rcx], eax
00012097  85c0               test    eax, eax
00012099  790d               jns     0x120a8

0001209b  e8f02fffff         call    __errno_location
000120a0  448b28             mov     r13d, dword [rax]
000120a3  e9ff000000         jmp     0x121a7

000120a8  488b4c2420         mov     rcx, qword [rsp+0x20 {var_98_1}]
000120ad  41b804000000       mov     r8d, 0x4
000120b3  ba02000000         mov     edx, 0x2
000120b8  89c7               mov     edi, eax
000120ba  be01000000         mov     esi, 0x1
000120bf  c744243801000000   mov     dword [rsp+0x38 {var_80}], 0x1
000120c7  e87430ffff         call    setsockopt
000120cc  48837c240800       cmp     qword [rsp+0x8 {var_b0}], 0x0
000120d2  743a               je      0x1210e

000120d4  488b7c2408         mov     rdi, qword [rsp+0x8 {var_b0}]
000120d9  e81231ffff         call    strlen
000120de  488b4c2408         mov     rcx, qword [rsp+0x8 {var_b0}]
000120e3  ba19000000         mov     edx, 0x19
000120e8  89df               mov     edi, ebx
000120ea  4189c0             mov     r8d, eax
000120ed  be01000000         mov     esi, 0x1
000120f2  e84930ffff         call    setsockopt
000120f7  85c0               test    eax, eax
000120f9  7913               jns     0x1210e

000120fb  488d3581320200     lea     rsi, [rel data_35383]  {"Couldn't set SO_BINDTODEVICE"}
00012102  bf04000000         mov     edi, 0x4
00012107  31c0               xor     eax, eax  {0x0}
00012109  e87d3bffff         call    dropbear_log
{ Does not return }

0001210e  837d040a           cmp     dword [rbp+0x4 {addrinfo::ai_family}], 0xa
00012112  753b               jne     0x1214f

00012114  488d4c243c         lea     rcx, [rsp+0x3c {var_7c}]
00012119  41b804000000       mov     r8d, 0x4
0001211f  ba1a000000         mov     edx, 0x1a
00012124  89df               mov     edi, ebx
00012126  be29000000         mov     esi, 0x29
0001212b  c744243c01000000   mov     dword [rsp+0x3c {var_7c}], 0x1
00012133  e80830ffff         call    setsockopt
00012138  ffc0               inc     eax
0001213a  7513               jne     0x1214f

0001213c  488d355d320200     lea     rsi, [rel data_353a0]  {"Couldn't set IPV6_V6ONLY"}
00012143  bf04000000         mov     edi, 0x4
00012148  31c0               xor     eax, eax  {0x0}
0001214a  e83c3bffff         call    dropbear_log
{ Does not return }

0001214f  89df               mov     edi, ebx
00012151  e87ff8ffff         call    set_sock_nodelay
{ Does not return }

00012156                                                                    8b 55 10 48 8b 75 18 89 df e8                        .U.H.u....
00012160  ac 34 ff ff 85 c0 78 10 be e8 03 00 00 89 df e8 ec 33 ff ff 85 c0 79 11 e8 13 2f ff ff 89 df 44  .4....x..........3....y.../....D
00012180  8b 28 e8 b9 31 ff ff eb 1e 45 85 f6 75 0a 89 df e8 c3 fc ff ff 41 89 c6 41 8b 07 39 d8 0f 4c c3  .(..1....E..u........A..A..9..L.
000121a0  ff 44 24 18 41 89 07                                                                             .D$.A..

000121a7  488b6d28           mov     rbp, qword [rbp+0x28 {addrinfo::ai_next}]
000121ab  e980feffff         jmp     0x12030

000121b0  488b7c2440         mov     rdi, qword [rsp+0x40 {pai}]
000121b5  4885ff             test    rdi, rdi
000121b8  740c               je      0x121c6

000121ba  e89136ffff         call    freeaddrinfo
000121bf  31c0               xor     eax, eax  {0x0}
000121c1  4889442440         mov     qword [rsp+0x40 {pai}], rax  {0x0}

000121c6  8b442418           mov     eax, dword [rsp+0x18 {var_a0}]
000121ca  85c0               test    eax, eax
000121cc  7564               jne     0x12232

000121ce  4d85e4             test    r12, r12
000121d1  0f842cfeffff       je      0x12003

000121d7  49833c2400         cmp     qword [r12], 0x0
000121dc  0f8521feffff       jne     0x12003

000121e2  4489ef             mov     edi, r13d
000121e5  e8e635ffff         call    strerror
000121ea  4889c7             mov     rdi, rax
000121ed  e8fe2fffff         call    strlen
000121f2  8d5814             lea     ebx, [rax+0x14]
000121f5  4863db             movsxd  rbx, ebx
000121f8  4889df             mov     rdi, rbx
000121fb  e81094ffff         call    m_malloc
{ Does not return }

00012200  44 89 ef 49 89 04 24 e8 c4 35 ff ff 49 8b 3c 24 48 83 c9 ff 48 89 de 49 89 c1 4c 8d 05 98 31 02  D..I..$..5..I.<$H...H..I..L...1.
00012220  00 ba 01 00 00 00 31 c0 e8 23 2e ff ff e9 d1 fd ff ff                                            ......1..#........

00012232  488b542478         mov     rdx, qword [rsp+0x78 {var_40}]
00012237  64482b1425280000…  sub     rdx, qword [fs:0x28]
00012240  7405               je      0x12247

00012242  e8c92fffff         call    __stack_chk_fail
{ Does not return }

00012247  4881c488000000     add     rsp, 0x88
0001224e  5b                 pop     rbx {__saved_rbx}
0001224f  5d                 pop     rbp {__saved_rbp}
00012250  415c               pop     r12 {__saved_r12}
00012252  415d               pop     r13 {__saved_r13}
00012254  415e               pop     r14 {__saved_r14}
00012256  415f               pop     r15 {__saved_r15}
00012258  e9ac44ffff         jmp     __x86_return_thunk
{ Does not return }


0001225d    void getaddrstring(int32_t* arg1, int64_t arg2, int64_t arg3) __noreturn

0001225d  4155               push    r13 {__saved_r13}
0001225f  4154               push    r12 {__saved_r12}
00012261  55                 push    rbp {__saved_rbp}
00012262  4889f5             mov     rbp, rsi
00012265  be10000000         mov     esi, 0x10
0001226a  53                 push    rbx {__saved_rbx}
0001226b  4881ec38040000     sub     rsp, 0x438
00012272  8b07               mov     eax, dword [rdi]
00012274  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001227d  48899c2428040000   mov     qword [rsp+0x428 {var_30}], rbx
00012285  4889d3             mov     rbx, rdx
00012288  6683f802           cmp     ax, 0x2
0001228c  7410               je      0x1229e

0001228e  be1c000000         mov     esi, 0x1c
00012293  6683f80a           cmp     ax, 0xa
00012297  7405               je      0x1229e

00012299  be80000000         mov     esi, 0x80

0001229e  4c8d642405         lea     r12, [rsp+0x5 {serv}]
000122a3  4c8d6c2426         lea     r13, [rsp+0x26 {host}]
000122a8  50                 push    rax {var_460}
000122a9  b901040000         mov     ecx, 0x401
000122ae  6a03               push    0x3 {var_468}
000122b0  4c89ea             mov     rdx, r13 {host}
000122b3  41b920000000       mov     r9d, 0x20
000122b9  4d89e0             mov     r8, r12 {serv}
000122bc  e89f30ffff         call    getnameinfo
000122c1  5a                 pop     rdx {var_468}  {0x3}
000122c2  59                 pop     rcx {var_460}
000122c3  89c7               mov     edi, eax
000122c5  85c0               test    eax, eax
000122c7  7416               je      0x122df

000122c9  e8a22fffff         call    gai_strerror
000122ce  488d3df8300200     lea     rdi, [rel data_353cd]  {"Failed lookup: %s"}
000122d5  4889c6             mov     rsi, rax
000122d8  31c0               xor     eax, eax  {0x0}
000122da  e8f238ffff         call    dropbear_exit
{ Does not return }

000122df  4885ed             test    rbp, rbp
000122e2  740c               je      0x122f0

000122e4  4c89ef             mov     rdi, r13 {host}
000122e7  e86c93ffff         call    m_strdup
{ Does not return }

000122ec                                      48 89 45 00                                                              H.E.

000122f0  4885db             test    rbx, rbx
000122f3  740b               je      0x12300

000122f5  4c89e7             mov     rdi, r12 {serv}
000122f8  e85b93ffff         call    m_strdup
{ Does not return }

000122fd                                                                                         48 89 03                               H..

00012300  488b842428040000   mov     rax, qword [rsp+0x428 {var_30}]
00012308  64482b0425280000…  sub     rax, qword [fs:0x28]
00012311  7405               je      0x12318

00012313  e8f82effff         call    __stack_chk_fail
{ Does not return }

00012318  4881c438040000     add     rsp, 0x438
0001231f  5b                 pop     rbx {__saved_rbx}
00012320  5d                 pop     rbp {__saved_rbp}
00012321  415c               pop     r12 {__saved_r12}
00012323  415d               pop     r13 {__saved_r13}
00012325  e9df43ffff         jmp     __x86_return_thunk
{ Does not return }


0001232a    void get_socket_address(int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t arg6) __noreturn

0001232a  4157               push    r15 {__saved_r15}
0001232c  4156               push    r14 {__saved_r14}
0001232e  4155               push    r13 {__saved_r13}
00012330  4154               push    r12 {__saved_r12}
00012332  4189fc             mov     r12d, edi
00012335  55                 push    rbp {__saved_rbp}
00012336  4c89c5             mov     rbp, r8
00012339  53                 push    rbx {__saved_rbx}
0001233a  4889cb             mov     rbx, rcx
0001233d  4881eca8000000     sub     rsp, 0xa8
00012344  44894c240c         mov     dword [rsp+0xc {var_cc}], r9d
00012349  64488b0425280000…  mov     rax, qword [fs:0x28]
00012352  4889842498000000   mov     qword [rsp+0x98 {var_40}], rax
0001235a  4889d0             mov     rax, rdx
0001235d  4809f0             or      rax, rsi
00012360  7436               je      0x12398

00012362  4c8d7c2418         lea     r15, [rsp+0x18 {var_c0}]
00012367  4989f5             mov     r13, rsi
0001236a  4989d6             mov     r14, rdx
0001236d  c744241480000000   mov     dword [rsp+0x14 {var_c4}], 0x80
00012375  488d542414         lea     rdx, [rsp+0x14 {var_c4}]
0001237a  4c89fe             mov     rsi, r15 {var_c0}
0001237d  e88e33ffff         call    getsockname
00012382  85c0               test    eax, eax
00012384  783b               js      0x123c1

00012386  8b4c240c           mov     ecx, dword [rsp+0xc {var_cc}]
0001238a  4c89f2             mov     rdx, r14
0001238d  4c89ee             mov     rsi, r13
00012390  4c89ff             mov     rdi, r15 {var_c0}
00012393  e8c5feffff         call    getaddrstring
{ Does not return }

00012398  4889e8             mov     rax, rbp
0001239b  4809d8             or      rax, rbx
0001239e  7450               je      0x123f0

000123a0  4c8d6c2418         lea     r13, [rsp+0x18 {var_c0}]
000123a5  488d542414         lea     rdx, [rsp+0x14 {var_c4}]
000123aa  4489e7             mov     edi, r12d
000123ad  c744241480000000   mov     dword [rsp+0x14 {var_c4}], 0x80
000123b5  4c89ee             mov     rsi, r13 {var_c0}
000123b8  e8c32dffff         call    getpeername
000123bd  85c0               test    eax, eax
000123bf  791d               jns     0x123de

000123c1  e8ca2cffff         call    __errno_location
000123c6  8b38               mov     edi, dword [rax]
000123c8  e80334ffff         call    strerror
000123cd  488d3d0b300200     lea     rdi, [rel data_353df]  {"Failed socket address: %s"}
000123d4  4889c6             mov     rsi, rax
000123d7  31c0               xor     eax, eax  {0x0}
000123d9  e8f337ffff         call    dropbear_exit
{ Does not return }

000123de  8b4c240c           mov     ecx, dword [rsp+0xc {var_cc}]
000123e2  4889ea             mov     rdx, rbp
000123e5  4889de             mov     rsi, rbx
000123e8  4c89ef             mov     rdi, r13 {var_c0}
000123eb  e86dfeffff         call    getaddrstring
{ Does not return }

000123f0  488b842498000000   mov     rax, qword [rsp+0x98 {var_40}]
000123f8  64482b0425280000…  sub     rax, qword [fs:0x28]
00012401  7405               je      0x12408

00012403  e8082effff         call    __stack_chk_fail
{ Does not return }

00012408  4881c4a8000000     add     rsp, 0xa8
0001240f  5b                 pop     rbx {__saved_rbx}
00012410  5d                 pop     rbp {__saved_rbp}
00012411  415c               pop     r12 {__saved_r12}
00012413  415d               pop     r13 {__saved_r13}
00012415  415e               pop     r14 {__saved_r14}
00012417  415f               pop     r15 {__saved_r15}
00012419  e9eb42ffff         jmp     __x86_return_thunk
{ Does not return }


0001241e    void dropbear_chachapoly_crypt(int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, void* arg6) __noreturn

0001241e  4157               push    r15 {__saved_r15}
00012420  4156               push    r14 {__saved_r14}
00012422  4155               push    r13 {__saved_r13}
00012424  4154               push    r12 {__saved_r12}
00012426  55                 push    rbp {__saved_rbp}
00012427  53                 push    rbx {__saved_rbx}
00012428  4889d3             mov     rbx, rdx
0001242b  4881ecc8000000     sub     rsp, 0xc8
00012432  4c89442418         mov     qword [rsp+0x18 {var_e0}], r8
00012437  64488b1425280000…  mov     rdx, qword [fs:0x28]
00012440  48899424b8000000   mov     qword [rsp+0xb8 {var_40}], rdx
00012448  31d2               xor     edx, edx  {0x0}
0001244a  4983f810           cmp     r8, 0x10
0001244e  7509               jne     0x12459

00012450  4889cd             mov     rbp, rcx
00012453  4883f903           cmp     rcx, 0x3
00012457  770b               ja      0x12464

00012459  41be01000000       mov     r14d, 0x1
0001245f  e953010000         jmp     0x125b7

00012464  4c8dbc2480000000   lea     r15, [rsp+0x80 {var_78}]
0001246c  4d89cd             mov     r13, r9
0001246f  89f8               mov     eax, edi
00012471  31c9               xor     ecx, ecx  {0x0}
00012473  4c89cf             mov     rdi, r9
00012476  ba08000000         mov     edx, 0x8
0001247b  4989f4             mov     r12, rsi
0001247e  4c89fe             mov     rsi, r15 {var_78}
00012481  480fc8             bswap   rax
00012484  4889842480000000   mov     qword [rsp+0x80 {var_78}], rax
0001248c  e826390100         call    chacha_ivctr64
{ Does not return }

00012491                                                     48 8d b4 24 98 00 00 00 ba 20 00 00 00 4c 89                   H..$..... ...L.
000124a0  ef 48 89 74 24 10 e8 8b 39 01 00 41 89 c6 85 c0 0f 85 01 01 00 00 48 8d 44 24 28 48 8b 74 24 10  .H.t$...9..A..........H.D$(H.t$.
000124c0  ba 20 00 00 00 48 89 c7 48 89 44 24 08 e8 9b ef 00 00 83 bc 24 00 01 00 00 01 74 39 4d 8d b5 98  . ...H..H.D$........$.....t9M...
000124e0  00 00 00 31 c9 ba 08 00 00 00 4c 89 fe 4c 89 f7 e8 c2 38 01 00 4c 89 f7 48 89 d9 ba 04 00 00 00  ...1......L..L....8..L..H.......
00012500  4c 89 e6 e8 49 33 01 00 41 89 c6 85 c0 0f 85 a4 00 00 00 eb 44 48 8b 7c 24 08 48 89 ea 4c 89 e6  L...I3..A...........DH.|$.H..L..
00012520  4c 8d b4 24 88 00 00 00 e8 1d f0 00 00 48 8b 7c 24 08 48 8d 54 24 18 4c 89 f6 e8 26 f1 00 00 48  L..$.........H.|$.H.T$.L...&...H
00012540  8b 54 24 18 49 8d 3c 2c 4c 89 f6 e8 f6 3e ff ff 85 c0 74 88 e9 00 ff ff ff b9 01 00 00 00 ba 08  .T$.I.<,L....>....t.............
00012560  00 00 00 4c 89 fe 4c 89 ef e8 49 38 01 00 48 8d 4b 04 48 8d 55 fc 4c 89 ef 49 8d 74 24 04 e8 ce  ...L..L...I8..H.K.H.U.L..I.t$...
00012580  32 01 00 41 89 c6 85 c0 75 2d 83 bc 24 00 01 00 00 00 75 23 48 8b 7c 24 08 48 89 ea 48 89 de e8  2..A....u-..$.....u#H.|$.H..H...
000125a0  a6 ef 00 00 48 8b 7c 24 08 48 8d 54 24 18 48 8d 34 2b e8 ae f0 00 00                             ....H.|$.H.T$.H.4+.....

000125b7  488b8424b8000000   mov     rax, qword [rsp+0xb8 {var_40}]
000125bf  64482b0425280000…  sub     rax, qword [fs:0x28]
000125c8  7405               je      0x125cf

000125ca  e8412cffff         call    __stack_chk_fail
{ Does not return }

000125cf  4881c4c8000000     add     rsp, 0xc8
000125d6  4489f0             mov     eax, r14d  {0x1}
000125d9  5b                 pop     rbx {__saved_rbx}
000125da  5d                 pop     rbp {__saved_rbp}
000125db  415c               pop     r12 {__saved_r12}
000125dd  415d               pop     r13 {__saved_r13}
000125df  415e               pop     r14 {__saved_r14}
000125e1  415f               pop     r15 {__saved_r15}
000125e3  e92141ffff         jmp     __x86_return_thunk
{ Does not return }


000125e8    void dropbear_chachapoly_start(int64_t arg1, int64_t arg2, int32_t* arg3, int64_t arg4, int64_t, void* arg6) __noreturn

000125e8  b801000000         mov     eax, 0x1
000125ed  83f940             cmp     ecx, 0x40
000125f0  754c               jne     0x1263e

000125f2  55                 push    rbp {var_8}
000125f3  4889d5             mov     rbp, rdx
000125f6  4c89cf             mov     rdi, r9
000125f9  ba20000000         mov     edx, 0x20
000125fe  53                 push    rbx {var_10}
000125ff  4889ee             mov     rsi, rbp
00012602  4c89cb             mov     rbx, r9
00012605  51                 push    rcx {var_18}
00012606  b914000000         mov     ecx, 0x14
0001260b  e868380100         call    chacha_setup
{ Does not return }

00012610                                                  85 c0 75 22 48 8d 75 20 b9 14 00 00 00 ba 20 00                  ..u"H.u ...... .
00012620  00 00 48 8d bb 98 00 00 00 e8 4a 38 01 00 85 c0 0f 95 c0 0f b6 c0 5a 5b 5d e9 cb 40 ff ff        ..H.......J8..........Z[]..@..

0001263e  e9c640ffff         jmp     __x86_return_thunk
{ Does not return }


00012643    void dropbear_chachapoly_getlength(int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, void* arg5) __noreturn

00012643  4154               push    r12 {__saved_r12}
00012645  55                 push    rbp {__saved_rbp}
00012646  53                 push    rbx {__saved_rbx}
00012647  4883ec20           sub     rsp, 0x20
0001264b  64488b0425280000…  mov     rax, qword [fs:0x28]
00012654  4889442418         mov     qword [rsp+0x18 {var_20}], rax
00012659  b801000000         mov     eax, 0x1
0001265e  4883f903           cmp     rcx, 0x3
00012662  764e               jbe     0x126b2

00012664  498d9898000000     lea     rbx, [r8+0x98]
0001266b  89ff               mov     edi, edi
0001266d  31c9               xor     ecx, ecx  {0x0}
0001266f  4889f5             mov     rbp, rsi
00012672  480fcf             bswap   rdi
00012675  488d742410         lea     rsi, [rsp+0x10 {var_28}]
0001267a  48897c2410         mov     qword [rsp+0x10 {var_28}], rdi
0001267f  4989d4             mov     r12, rdx
00012682  4889df             mov     rdi, rbx
00012685  ba08000000         mov     edx, 0x8
0001268a  e828370100         call    chacha_ivctr64
{ Does not return }

0001268f                                               48 8d 4c 24 0c 48 89 ee 48 89 df ba 04 00 00 00 e8                 H.L$.H..H........
000126a0  ad 31 01 00 85 c0 75 0a 8b 54 24 0c 0f ca 41 89 14 24                                            .1....u..T$...A..$

000126b2  488b542418         mov     rdx, qword [rsp+0x18 {var_20}]
000126b7  64482b1425280000…  sub     rdx, qword [fs:0x28]
000126c0  7405               je      0x126c7

000126c2  e8492bffff         call    __stack_chk_fail
{ Does not return }

000126c7  4883c420           add     rsp, 0x20
000126cb  5b                 pop     rbx {__saved_rbx}
000126cc  5d                 pop     rbp {__saved_rbp}
000126cd  415c               pop     r12 {__saved_r12}
000126cf  e93540ffff         jmp     __x86_return_thunk
{ Does not return }


000126d4    void gen_kexcurve25519_param() __noreturn

000126d4  53                 push    rbx {var_8}
000126d5  4883ec30           sub     rsp, 0x30
000126d9  64488b3c25280000…  mov     rdi, qword [fs:0x28]
000126e2  48897c2428         mov     qword [rsp+0x28 {var_10}], rdi
000126e7  bf40000000         mov     edi, 0x40
000126ec  e81f8fffff         call    m_malloc
{ Does not return }

000126f1                                                     31 d2 0f 57 c0 be 20 00 00 00 48 89 c3 48 89                   1..W.. ...H..H.
00012700  c7 48 89 54 24 10 48 c7 44 24 08 09 00 00 00 0f 11 44 24 18 e8 d1 5c ff ff 48 8d 54 24 08 48 8d  .H.T$.H.D$.......D$...\..H.T$.H.
00012720  7b 20 48 89 de e8 0d 80 ff ff 48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 d1 2a ff ff 48  { H.......H.D$(dH+.%(...t...*..H
00012740  83 c4 30 48 89 d8 5b e9 bd 3f ff ff                                                              ..0H..[..?..

0001274c    int64_t free_kexcurve25519_param(int64_t arg1)

0001274c  4883ec18           sub     rsp, 0x18
00012750  be20000000         mov     esi, 0x20
00012755  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
0001275a  e8d045ffff         call    m_burn
0001275f  488b7c2408         mov     rdi, qword [rsp+0x8 {var_10}]
00012764  4883c418           add     rsp, 0x18
00012768  e9f328ffff         jmp     free


0001276d    void kexcurve25519_derive(int128_t* arg1, int64_t* arg2, int64_t arg3) __noreturn

0001276d  53                 push    rbx {var_8}
0001276e  0f57c0             xorps   xmm0, xmm0
00012771  4883ec30           sub     rsp, 0x30
00012775  64488b0425280000…  mov     rax, qword [fs:0x28]
0001277e  4889442428         mov     qword [rsp+0x28 {var_10}], rax
00012783  31c0               xor     eax, eax  {0x0}
00012785  837e0820           cmp     dword [rsi+0x8], 0x20
00012789  0f11442408         movups  xmmword [rsp+0x8], xmm0
0001278e  0f11442418         movups  xmmword [rsp+0x18 {var_20}], xmm0
00012793  740e               je      0x127a3

00012795  488d3d5d2c0200     lea     rdi, [rel data_353f9]  {"Bad curve25519"}
0001279c  31c0               xor     eax, eax  {0x0}
0001279e  e82e34ffff         call    dropbear_exit
{ Does not return }

000127a3  4889d3             mov     rbx, rdx
000127a6  488b16             mov     rdx, qword [rsi]
000127a9  4889fe             mov     rsi, rdi
000127ac  4889df             mov     rdi, rbx
000127af  e8837fffff         call    dropbear_curve25519_scalarmult
{ Does not return }

000127b4                                                              48 8d 7c 24 08 ba 20 00 00 00 48 89                      H.|$.. ...H.
000127c0  de e8 80 3c ff ff 85 c0 74 cb 48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 31 2a ff ff 48  ...<....t.H.D$(dH+.%(...t..1*..H
000127e0  83 c4 30 5b e9 20 3f ff ff                                                                       ..0[. ?..

000127e9    void kexcurve25519_comb_key(int128_t* arg1, int64_t* arg2) __noreturn

000127e9  4155               push    r13 {var_8}
000127eb  4154               push    r12 {var_10}
000127ed  55                 push    rbp {var_18}
000127ee  4889f5             mov     rbp, rsi
000127f1  53                 push    rbx {var_20}
000127f2  4889fb             mov     rbx, rdi
000127f5  4883ec38           sub     rsp, 0x38
000127f9  644c8b2425280000…  mov     r12, qword [fs:0x28]
00012802  4c89642428         mov     qword [rsp+0x28 {var_30}], r12
00012807  4989d4             mov     r12, rdx
0001280a  4c8d6c2408         lea     r13, [rsp+0x8 {var_50}]
0001280f  4c89ea             mov     rdx, r13 {var_50}
00012812  e856ffffff         call    kexcurve25519_derive
{ Does not return }

00012817                                                                       31 c0 31 f6 48 8d 3d 76 40                         1.1.H.=v@
00012820  03 00 e8 dd 45 ff ff 48 8b 3d 6a 40 03 00 ba 20 00 00 00 4c 89 ee e8 3e 47 ff ff be 20 00 00 00  ....E..H.=j@... ...L...>G... ...
00012840  4c 89 ef e8 e7 44 ff ff 80 3d 51 3f 03 00 00 48 8b 6d 00 48 8d 43 20 75 08 48 89 eb 48 89 c5 eb  L....D...=Q?...H.m.H.C u.H..H...
00012860  03 48 89 c3 48 8b 05 1d 40 03 00 48 8b 3d 3e 40 03 00 4c 89 e6 8b 90 a8 06 00 00 e8 ff 4c ff ff  .H..H...@..H.=>@..L..........L..
00012880  48 8b 3d 29 40 03 00 ba 20 00 00 00 48 89 ee e8 0d 43 ff ff 48 8b 3d 15 40 03 00 ba 20 00 00 00  H.=)@... ...H....C..H.=.@... ...
000128a0  48 89 de e8 f9 42 ff ff 48 8b 35 e9 3f 03 00 48 8b 3d fa 3f 03 00 e8 1c 43 ff ff e8 5b c4 ff ff  H....B..H.5.?..H.=.?....C...[...
000128c0  48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 3b 29 ff ff 48 83 c4 38 5b 5d 41 5c 41 5d e9  H.D$(dH+.%(...t..;)..H..8[]A\A].
000128e0  25 3e ff ff                                                                                      %>..

000128e4    void load_dh_p(int32_t* arg1) __noreturn

000128e4  488b059d3f0300     mov     rax, qword [rel data_46888]
000128eb  488b80a0060000     mov     rax, qword [rax+0x6a0]
000128f2  8b5010             mov     edx, dword [rax+0x10]
000128f5  488b7008           mov     rsi, qword [rax+0x8]
000128f9  e97b46ffff         jmp     bytes_to_mp
{ Does not return }


000128fe    void gen_kexdh_param() __noreturn

000128fe  4156               push    r14 {var_8}
00012900  b906000000         mov     ecx, 0x6
00012905  4155               push    r13 {var_10}
00012907  4154               push    r12 {var_18}
00012909  55                 push    rbp {var_20}
0001290a  53                 push    rbx {var_28}
0001290b  4883ec50           sub     rsp, 0x50
0001290f  64488b0425280000…  mov     rax, qword [fs:0x28]
00012918  4889442448         mov     qword [rsp+0x48 {var_30}], rax
0001291d  31c0               xor     eax, eax  {0x0}
0001291f  4889e7             mov     rdi, rsp {s}
00012922  4c8d6c2430         lea     r13, [rsp+0x30 {s_2}]
00012927  4c8d742418         lea     r14, [rsp+0x18 {s_1}]
0001292c  f3ab               rep stosd dword [rdi] {var_90} {s}  {0x0}
0001292e  488d7c2418         lea     rdi, [rsp+0x18 {s_1}]
00012933  b906000000         mov     ecx, 0x6
00012938  f3ab               rep stosd dword [rdi] {s} {s_1}  {0x0}
0001293a  488d7c2430         lea     rdi, [rsp+0x30 {s_2}]
0001293f  b906000000         mov     ecx, 0x6
00012944  f3ab               rep stosd dword [rdi] {s_1} {s_2}  {0x0}
00012946  bf30000000         mov     edi, 0x30
0001294b  e8c08cffff         call    m_malloc
{ Does not return }

00012950                                                  45 31 c9 4c 89 ea 4d 89 f0 4c 8d 60 18 48 89 e1                  E1.L..M..L.`.H..
00012960  48 89 c7 48 89 c3 4c 89 e6 31 c0 e8 e8 43 ff ff 48 89 e7 e8 6c ff ff ff 48 63 35 a1 56 02 00 4c  H..H..L..1...C..H...l...Hc5.V..L
00012980  89 ef e8 19 91 01 00 4c 89 e2 be 01 00 00 00 48 89 e7 e8 d9 92 01 00 85 c0 74 0e 48 8d 3d 66 2a  .......L.......H.........t.H.=f*
000129a0  02 00 31 c0 e8 28 32 ff ff 4c 89 f6 4c 89 e7 e8 bc 4e 01 00 85 c0 75 e3 4c 89 e6 4c 89 f7 e8 9f  ..1..(2..L..L....N....u.L..L....
000129c0  5d ff ff 48 89 d9 48 89 e2 4c 89 e6 4c 89 ef e8 dc 54 01 00 85 c0 75 c3 31 c9 4c 89 f2 48 89 e6  ]..H..H..L..L....T....u.1.L..H..
000129e0  4c 89 ef e8 98 3d 01 00 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8 13 28 ff ff 48 83 c4  L....=..H.D$HdH+.%(...t...(..H..
00012a00  50 48 89 d8 5b 5d 41 5c 41 5d 41 5e e9 f8 3c ff ff                                               PH..[]A\A]A^..<..

00012a11    void free_kexdh_param(int64_t* arg1) __noreturn

00012a11  4883ec18           sub     rsp, 0x18
00012a15  488d7718           lea     rsi, [rdi+0x18]
00012a19  31d2               xor     edx, edx  {0x0}
00012a1b  31c0               xor     eax, eax  {0x0}
00012a1d  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00012a22  e8593d0100         call    mp_clear_multi
{ Does not return }

00012a27                       48 8b 7c 24 08 48 83 c4 18 e9 2b 26 ff ff                                          H.|$.H....+&..

00012a35    void kexdh_comb_key() __noreturn

00012a35  4156               push    r14 {var_8}
00012a37  b906000000         mov     ecx, 0x6
00012a3c  4989d6             mov     r14, rdx
00012a3f  31d2               xor     edx, edx  {0x0}
00012a41  4155               push    r13 {var_10}
00012a43  4154               push    r12 {var_18}
00012a45  55                 push    rbp {var_20}
00012a46  4889fd             mov     rbp, rdi
00012a49  53                 push    rbx {var_28}
00012a4a  4889f3             mov     rbx, rsi
00012a4d  4883ec40           sub     rsp, 0x40
00012a51  64488b0425280000…  mov     rax, qword [fs:0x28]
00012a5a  4889442438         mov     qword [rsp+0x38 {var_30}], rax
00012a5f  31c0               xor     eax, eax  {0x0}
00012a61  488d7c2408         lea     rdi, [rsp+0x8 {s}]
00012a66  4c8d642408         lea     r12, [rsp+0x8 {s}]
00012a6b  4c8d6c2420         lea     r13, [rsp+0x20 {s_1}]
00012a70  4c89ee             mov     rsi, r13 {s_1}
00012a73  f3ab               rep stosd dword [rdi] {var_78} {s}  {0x0}
00012a75  488d7c2420         lea     rdi, [rsp+0x20 {s_1}]
00012a7a  b906000000         mov     ecx, 0x6
00012a7f  f3ab               rep stosd dword [rdi] {s} {s_1}  {0x0}
00012a81  4c89e7             mov     rdi, r12 {s}
00012a84  e8cf42ffff         call    m_mp_init_multi
{ Does not return }

00012a89                             4c 89 e7 e8 53 fe ff ff 4c 89 ea be 01 00 00 00 4c 89 e7 e8 cf 91 01           L...S...L.......L......
00012aa0  00 85 c0 74 0e 48 8d 3d 5c 29 02 00 31 c0 e8 1e 31 ff ff 4c 89 ee 48 89 df e8 82 3d 01 00 ff c0  ...t.H.=\)..1...1..L..H....=....
00012ac0  75 e3 be 01 00 00 00 48 89 df e8 c1 3d 01 00 ff c8 75 d2 31 f6 48 8d 3d bc 3d 03 00 31 c0 e8 21  u......H....=....u.1.H.=.=..1..!
00012ae0  43 ff ff 48 8d 75 18 4c 89 e2 48 89 df 48 8b 0d a4 3d 03 00 e8 b7 53 01 00 85 c0 75 a8 31 d2 4c  C..H.u.L..H..H...=....S....u.1.L
00012b00  89 e7 4c 89 ee 49 89 ec e8 73 3c 01 00 80 3d 8c 3c 03 00 00 75 06 49 89 dc 48 89 eb 48 8b 05 65  ..L..I...s<...=.<...u.I..H..H..e
00012b20  3d 03 00 48 8b 3d 86 3d 03 00 4c 89 f6 8b 90 a8 06 00 00 e8 47 4a ff ff 48 8b 3d 71 3d 03 00 48  =..H.=.=..L.........GJ..H.=q=..H
00012b40  89 de e8 90 40 ff ff 48 8b 3d 62 3d 03 00 4c 89 e6 e8 81 40 ff ff 48 8b 35 3b 3d 03 00 48 8b 3d  ....@..H.=b=..L....@..H.5;=..H.=
00012b60  4c 3d 03 00 e8 6e 40 ff ff e8 ad c1 ff ff 48 8b 44 24 38 64 48 2b 04 25 28 00 00 00 74 05 e8 8d  L=...n@.......H.D$8dH+.%(...t...
00012b80  26 ff ff 48 83 c4 40 5b 5d 41 5c 41 5d 41 5e e9 75 3b ff ff                                      &..H..@[]A\A]A^.u;..

00012b94    void gen_kexecdh_param() __noreturn

00012b94  53                 push    rbx {var_8}
00012b95  bf30000000         mov     edi, 0x30
00012b9a  e8718affff         call    m_malloc
{ Does not return }

00012b9f                                                                                               8b                                 .
00012ba0  35 fb 34 03 00 31 ff 48 89 c3 48 8b 05 d7 3c 03 00 48 89 da 48 8b 80 a0 06 00 00 48 8b 40 18 48  5.4..1.H..H...<..H..H......H.@.H
00012bc0  8b 48 08 e8 18 09 01 00 85 c0 74 0e 48 8d 3d 81 19 02 00 31 c0 e8 f7 2f ff ff 48 89 d8 5b e9 26  .H........t.H.=....1.../..H..[.&
00012be0  3b ff ff                                                                                         ;..

00012be3    void free_kexecdh_param(void* arg1) __noreturn

00012be3  4883ec18           sub     rsp, 0x18
00012be7  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00012bec  e8b7080100         call    ecc_free
{ Does not return }

00012bf1                                                     48 8b 7c 24 08 48 83 c4 18 e9 61 24 ff ff                      H.|$.H....a$..

00012bff    void kexecdh_comb_key(int64_t arg1, void* arg2) __noreturn

00012bff  4155               push    r13 {var_8}
00012c01  4154               push    r12 {var_10}
00012c03  4989d4             mov     r12, rdx
00012c06  55                 push    rbp {var_18}
00012c07  4889fd             mov     rbp, rdi
00012c0a  4889f7             mov     rdi, rsi
00012c0d  53                 push    rbx {var_20}
00012c0e  51                 push    rcx {var_28}
00012c0f  488b05723c0300     mov     rax, qword [rel data_46888]
00012c16  488b80a0060000     mov     rax, qword [rax+0x6a0]
00012c1d  488b7018           mov     rsi, qword [rax+0x18]
00012c21  e82b5fffff         call    buf_get_ecc_raw_pubkey
{ Does not return }

00012c26                    48 85 c0 75 0e 48 8d 3d 22 19 02 00 31 c0 e8 98 2f ff ff 48 89 ee 48 89 c7 48        H..u.H.="...1.../..H..H..H
00012c40  89 c3 e8 3a 62 ff ff 80 3d 52 3b 03 00 00 49 89 dd 48 89 05 40 3c 03 00 75 06 49 89 ed 48 89 dd  ...:b...=R;...I..H..@<..u.I..H..
00012c60  48 8b 05 21 3c 03 00 48 8b 3d 42 3c 03 00 4c 89 e6 8b 90 a8 06 00 00 e8 03 49 ff ff 48 8b 3d 2d  H..!<..H.=B<..L..........I..H.=-
00012c80  3c 03 00 4c 89 ee e8 40 5e ff ff 48 8b 3d 1e 3c 03 00 48 89 ee e8 31 5e ff ff 48 8b 35 f7 3b 03  <..L...@^..H.=.<..H...1^..H.5.;.
00012ca0  00 48 8b 3d 08 3c 03 00 e8 2a 3f ff ff 48 89 df e8 f3 07 01 00 48 89 df e8 a3 23 ff ff 58 5b 5d  .H.=.<...*?..H.......H....#..X[]
00012cc0  41 5c 41 5d e9 52 c0 ff ff                                                                       A\A].R...

00012cc9    void gen_kexpqhybrid_param() __noreturn

00012cc9  4155               push    r13 {var_8}
00012ccb  bf18000000         mov     edi, 0x18
00012cd0  4154               push    r12 {var_10}
00012cd2  55                 push    rbp {var_18}
00012cd3  53                 push    rbx {var_20}
00012cd4  51                 push    rcx {var_28}
00012cd5  e83689ffff         call    m_malloc
{ Does not return }

00012cda                                                                                48 89 c3 48 8b 05                            H..H..
00012ce0  a4 3b 03 00 48 8b 80 a0 06 00 00 48 8b 68 18 e8 e0 f9 ff ff 48 89 03 80 3d a2 3a 03 00 00 75 7d  .;..H......H.h......H...=.:...u}
00012d00  8b 7d 04 e8 35 3a ff ff 48 89 43 10 8b 45 00 8d 78 20 e8 26 3a ff ff 8b 75 04 48 8b 7b 10 48 89  .}..5:..H.C..E..x .&:...u.H.{.H.
00012d20  43 08 4c 8b 6d 10 e8 42 3c ff ff 48 8b 7b 08 8b 75 00 49 89 c4 e8 33 3c ff ff 4c 89 e6 48 89 c7  C.L.m..B<..H.{..u.I...3<..L..H..
00012d40  e8 7a a9 ff ff 48 8b 7b 08 8b 75 00 e8 15 3b ff ff 8b 75 04 48 8b 7b 10 e8 09 3b ff ff 48 8b 7b  .z...H.{..u...;...u.H.{...;..H.{
00012d60  10 31 f6 e8 e2 3a ff ff 48 8b 03 48 8b 7b 08 ba 20 00 00 00 48 8d 70 20 e8 be 3d ff ff 5a 48 89  .1...:..H..H.{.. ...H.p ..=..ZH.
00012d80  d8 5b 5d 41 5c 41 5d e9 7d 39 ff ff                                                              .[]A\A].}9..

00012d8c    int64_t free_kexpqhybrid_param(int64_t* arg1)

00012d8c  53                 push    rbx {__saved_rbx}
00012d8d  4889fb             mov     rbx, rdi
00012d90  488b3f             mov     rdi, qword [rdi]
00012d93  e8b4f9ffff         call    free_kexcurve25519_param
00012d98  488b7b10           mov     rdi, qword [rbx+0x10]
00012d9c  4885ff             test    rdi, rdi
00012d9f  740b               je      0x12dac

00012da1  e8d039ffff         call    buf_burn_free
00012da6  31c0               xor     eax, eax  {0x0}
00012da8  48894310           mov     qword [rbx+0x10], rax  {0x0}

00012dac  488b7b08           mov     rdi, qword [rbx+0x8]
00012db0  e8bc39ffff         call    buf_free
00012db5  4889df             mov     rdi, rbx
00012db8  5b                 pop     rbx {__saved_rbx}
00012db9  e9a222ffff         jmp     free


00012dbe    void kexpqhybrid_comb_key(int64_t arg1, void* arg2) __noreturn

00012dbe  4157               push    r15 {var_8}
00012dc0  4156               push    r14 {var_10}
00012dc2  4155               push    r13 {var_18}
00012dc4  4154               push    r12 {var_20}
00012dc6  55                 push    rbp {var_28}
00012dc7  4889f5             mov     rbp, rsi
00012dca  53                 push    rbx {var_30}
00012dcb  4889fb             mov     rbx, rdi
00012dce  4881ec08010000     sub     rsp, 0x108
00012dd5  803dc439030000     cmp     byte [rel ses], 0x0
00012ddc  4889542418         mov     qword [rsp+0x18 {var_120}], rdx
00012de1  64488b0425280000…  mov     rax, qword [fs:0x28]
00012dea  48898424f8000000   mov     qword [rsp+0xf8 {var_40}], rax
00012df2  488b058f3a0300     mov     rax, qword [rel data_46888]
00012df9  488b80a0060000     mov     rax, qword [rax+0x6a0]
00012e00  4c8b7018           mov     r14, qword [rax+0x18]
00012e04  4c8b6820           mov     r13, qword [rax+0x20]
00012e08  7506               jne     0x12e10

00012e0a  458b6608           mov     r12d, dword [r14+0x8]
00012e0e  eb03               jmp     0x12e13

00012e10  458b26             mov     r12d, dword [r14]

00012e13  4489e6             mov     esi, r12d
00012e16  4889ef             mov     rdi, rbp
00012e19  e8263bffff         call    buf_getptr
{ Does not return }

00012e1e                                                                                            44 89                                D.
00012e20  e6 48 89 ef 48 89 04 24 e8 68 3a ff ff be 20 00 00 00 48 89 ef e8 2c 3d ff ff be 20 00 00 00 48  .H..H..$.h:... ...H...,=... ...H
00012e40  89 ef 48 89 44 24 08 e8 49 3a ff ff 8b 45 08 39 45 0c 74 0e 48 8d 3d c2 25 02 00 31 c0 e8 6f 2d  ..H.D$..I:...E.9E.t.H.=.%..1..o-
00012e60  ff ff 41 8b 46 0c 8d 78 20 e8 cf 38 ff ff 80 3d 2b 39 03 00 00 49 89 c4 75 47 41 8b 76 04 48 8b  ..A.F..x ..8...=+9...I..uGA.v.H.
00012e80  7b 10 4d 8b 7e 20 e8 b9 3a ff ff 41 8b 76 0c 4c 89 e7 48 89 44 24 10 e8 d1 3a ff ff 48 8b 54 24  {.M.~ ..:..A.v.L..H.D$...:..H.T$
00012ea0  10 48 8b 34 24 48 89 c7 e8 6e 38 ff ff 48 8b 7b 10 e8 c0 38 ff ff 31 c0 48 89 43 10 e9 8b 00 00  .H.4$H...n8..H.{...8..1.H.C.....
00012ec0  00 48 83 7b 08 00 74 1f 48 8d 0d 51 53 02 00 ba 5b 00 00 00 48 8d 35 4d 25 02 00 48 8d 3d 59 25  .H.{..t.H..QS...[...H.5M%..H.=Y%
00012ee0  02 00 e8 d9 23 ff ff 41 8b 46 08 8d 78 20 e8 4a 38 ff ff 41 8b 76 0c 4c 89 e7 4d 8b 7e 18 48 89  ....#..A.F..x .J8..A.v.L..M.~.H.
00012f00  43 08 e8 66 3a ff ff 41 8b 76 08 48 8b 7b 08 48 89 44 24 10 e8 54 3a ff ff 48 8b 14 24 48 8b 74  C..f:..A.v.H.{.H.D$..T:..H..$H.t
00012f20  24 10 48 89 c7 e8 f1 37 ff ff 41 8b 76 08 48 8b 7b 08 e8 2f 39 ff ff 48 8b 03 48 8b 7b 08 ba 20  $.H....7..A.v.H.{../9..H..H.{.. 
00012f40  00 00 00 48 8d 70 20 e8 ef 3b ff ff 41 8b 76 0c 4c 89 e7 4c 8d 74 24 28 e8 09 39 ff ff be 20 00  ...H.p ..;..A.v.L..L.t$(..9... .
00012f60  00 00 4c 89 e7 e8 03 3a ff ff 48 8b 3b 48 8b 74 24 08 48 89 c2 e8 f3 f7 ff ff be 20 00 00 00 4c  ..L....:..H.;H.t$.H........ ...L
00012f80  89 e7 e8 df 38 ff ff 41 8b 45 10 8d 78 04 e8 aa 37 ff ff 41 8b 75 10 48 89 c7 48 89 05 ff 38 03  ....8..A.E..x...7..A.u.H..H...8.
00012fa0  00 e8 c4 3a ff ff 4c 89 f7 49 8b 85 a8 00 00 00 e8 77 37 ff ff 41 8b 54 24 08 49 8b 34 24 4c 89  ...:..L..I.......w7..A.T$.I.4$L.
00012fc0  f7 49 8b 85 b0 00 00 00 e8 5f 37 ff ff 41 8b 75 10 48 8b 3d c8 38 03 00 4d 8b bd b8 00 00 00 e8  .I......._7..A.u.H.=.8..M.......
00012fe0  89 39 ff ff 4c 89 f7 48 89 c6 e8 2c 37 ff ff be d0 00 00 00 4c 89 f7 e8 33 3d ff ff 41 8b 75 10  .9..L..H...,7.......L...3=..A.u.
00013000  48 8b 3d 99 38 03 00 e8 5a 38 ff ff 80 3d 8d 37 03 00 00 48 8b 5b 08 74 03 48 87 eb 48 8b 05 65  H.=.8...Z8...=.7...H.[.t.H..H..e
00013020  38 03 00 48 8b 74 24 18 48 8b 3d 81 38 03 00 8b 90 a8 06 00 00 e8 45 45 ff ff 48 8b 3d 6f 38 03  8..H.t$.H.=.8.........EE..H.=o8.
00013040  00 48 89 de e8 86 3b ff ff 48 8b 3d 60 38 03 00 48 89 ee e8 77 3b ff ff 48 8b 05 41 38 03 00 48  .H....;..H.=`8..H...w;..H..A8..H
00013060  8b 3d 4a 38 03 00 8b 50 08 48 8b 30 e8 ca 3a ff ff e8 a5 bc ff ff 4c 89 e7 e8 f8 36 ff ff 48 8b  .=J8...P.H.0..:.......L....6..H.
00013080  7c 24 08 e8 e9 36 ff ff 48 8b 84 24 f8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 70 21 ff ff  |$...6..H..$....dH+.%(...t..p!..
000130a0  48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 53 36 ff ff                                H......[]A\A]A^A_.S6..

000130b6    void crypto_int32_minmax(int32_t* arg1, int32_t* arg2) __noreturn

000130b6  8b17               mov     edx, dword [rdi]
000130b8  8b06               mov     eax, dword [rsi]
000130ba  39c2               cmp     edx, eax
000130bc  89d1               mov     ecx, edx
000130be  0f4fd0             cmovg   edx, eax
000130c1  0f4fc1             cmovg   eax, ecx
000130c4  8917               mov     dword [rdi], edx
000130c6  8906               mov     dword [rsi], eax
000130c8  e93c36ffff         jmp     __x86_return_thunk
{ Does not return }


000130cd    void F3_freeze(int32_t arg1) __noreturn

000130cd  0fbfc7             movsx   eax, di
000130d0  b2fd               mov     dl, 0xfd
000130d2  69c0ab2a0000       imul    eax, eax, 0x2aab
000130d8  0500400000         add     eax, 0x4000
000130dd  c1f80f             sar     eax, 0xf
000130e0  0fafc2             imul    eax, edx
000130e3  01f8               add     eax, edi
000130e5  e91f36ffff         jmp     __x86_return_thunk
{ Does not return }


000130ea    void Fq_freeze(int32_t arg1) __noreturn

000130ea  6bc70e             imul    eax, edi, 0xe
000130ed  c1f810             sar     eax, 0x10
000130f0  69c011eeffff       imul    eax, eax, 0xffffee11
000130f6  01f8               add     eax, edi
000130f8  69f8e4000000       imul    edi, eax, 0xe4
000130fe  c1ff14             sar     edi, 0x14
00013101  69ff11eeffff       imul    edi, edi, 0xffffee11
00013107  01c7               add     edi, eax
00013109  69c766e40000       imul    eax, edi, 0xe466
0001310f  0500000008         add     eax, 0x8000000
00013114  c1f81c             sar     eax, 0x1c
00013117  6669c011ee         imul    ax, ax, 0xee11
0001311c  01f8               add     eax, edi
0001311e  e9e635ffff         jmp     __x86_return_thunk
{ Does not return }


00013123    void uint32_divmod_uint14(int32_t* arg1, int16_t* arg2, int32_t arg3, int16_t arg4) __noreturn

00013123  0fb7c9             movzx   ecx, cx
00013126  4189d1             mov     r9d, edx
00013129  b800000080         mov     eax, 0x80000000
0001312e  31d2               xor     edx, edx
00013130  f7f1               div     ecx  {0x0}  {0x80000000}  {0x0}  {0x80000000}
00013132  4989f0             mov     r8, rsi
00013135  4c89ce             mov     rsi, r9
00013138  89ca               mov     edx, ecx
0001313a  4c0fafc8           imul    r9, rax
0001313e  49c1e91f           shr     r9, 0x1f
00013142  410fafd1           imul    edx, r9d
00013146  29d6               sub     esi, edx
00013148  89f2               mov     edx, esi
0001314a  29ce               sub     esi, ecx
0001314c  480fafc2           imul    rax, rdx
00013150  89ca               mov     edx, ecx
00013152  48c1e81f           shr     rax, 0x1f
00013156  0fafd0             imul    edx, eax
00013159  418d440101         lea     eax, [r9+rax+0x1]
0001315e  29d6               sub     esi, edx
00013160  89f2               mov     edx, esi
00013162  c1fa1f             sar     edx, 0x1f
00013165  21d1               and     ecx, edx
00013167  01d0               add     eax, edx
00013169  01f1               add     ecx, esi
0001316b  8907               mov     dword [rdi], eax
0001316d  66418908           mov     word [r8], cx
00013171  e99335ffff         jmp     __x86_return_thunk
{ Does not return }


00013176    void Rq_mult_small(int64_t arg1, int64_t arg2, void* arg3) __noreturn

00013176  4881ecd8170000     sub     rsp, 0x17d8
0001317d  4989f1             mov     r9, rsi
00013180  4989f8             mov     r8, rdi
00013183  4989d2             mov     r10, rdx
00013186  64488b0425280000…  mov     rax, qword [fs:0x28]
0001318f  48898424c8170000   mov     qword [rsp+0x17c8 {var_10}], rax
00013197  31c0               xor     eax, eax  {0x0}
00013199  488d742404         lea     rsi, [rsp+0x4 {s}]
0001319e  b9f1050000         mov     ecx, 0x5f1
000131a3  31d2               xor     edx, edx  {0x0}
000131a5  4889f7             mov     rdi, rsi {s}
000131a8  f3ab               rep stosd dword [rdi] {var_2f98} {s}  {0x0}

000131aa  450fbf1c51         movsx   r11d, word [r9+rdx*2]
000131af  31c0               xor     eax, eax  {0x0}

000131b1  410fbe3c02         movsx   edi, byte [r10+rax]
000131b6  8d0c10             lea     ecx, [rax+rdx]
000131b9  48ffc0             inc     rax
000131bc  4863c9             movsxd  rcx, ecx
000131bf  410faffb           imul    edi, r11d
000131c3  017c8c04           add     dword [rsp+rcx*4+0x4 {s}], edi
000131c7  483df9020000       cmp     rax, 0x2f9
000131cd  75e2               jne     0x131b1

000131cf  48ffc2             inc     rdx
000131d2  4881faf9020000     cmp     rdx, 0x2f9
000131d9  75cf               jne     0x131aa

000131db  4889f0             mov     rax, rsi {s}
000131de  488d8c24e40b0000   lea     rcx, [rsp+0xbe4 {var_bf4}]
000131e6  4889f2             mov     rdx, rsi {s}

000131e9  8bbae40b0000       mov     edi, dword [rdx+0xbe4]
000131ef  013a               add     dword [rdx], edi
000131f1  4883c204           add     rdx, 0x4
000131f5  4839d1             cmp     rcx {var_bf4}, rdx
000131f8  75ef               jne     0x131e9

000131fa  8b90e40b0000       mov     edx, dword [rax+0xbe4]
00013200  015004             add     dword [rax+0x4], edx
00013203  4883c004           add     rax, 0x4
00013207  4839c1             cmp     rcx {var_bf4}, rax
0001320a  75ee               jne     0x131fa

0001320c  31d2               xor     edx, edx  {0x0}
0001320e  8b3c96             mov     edi, dword [rsi+rdx*4 {s}]
00013211  e8d4feffff         call    Fq_freeze
{ Does not return }

00013216                                                                    66 41 89 04 50 48 ff c2 48 81                        fA..PH..H.
00013220  fa f9 02 00 00 75 e7 48 8b 84 24 c8 17 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 d1 1f ff ff 48  .....u.H..$....dH+.%(...t......H
00013240  81 c4 d8 17 00 00 e9 be 34 ff ff                                                                 ........4..

0001324b    void Small_encode(char* arg1, void* arg2) __noreturn

0001324b  4989f2             mov     r10, rsi
0001324e  4531c0             xor     r8d, r8d  {0x0}

00013251  31c0               xor     eax, eax  {0x0}
00013253  4531c9             xor     r9d, r9d  {0x0}

00013256  410fbe1402         movsx   edx, byte [r10+rax]
0001325b  8d0c00             lea     ecx, [rax+rax]
0001325e  48ffc0             inc     rax
00013261  ffc2               inc     edx
00013263  d3e2               shl     edx, cl
00013265  4101d1             add     r9d, edx
00013268  4883f804           cmp     rax, 0x4
0001326c  75e8               jne     0x13256

0001326e  46880c07           mov     byte [rdi+r8], r9b
00013272  49ffc0             inc     r8
00013275  4983c204           add     r10, 0x4
00013279  4981f8be000000     cmp     r8, 0xbe
00013280  75cf               jne     0x13251

00013282  8a86f8020000       mov     al, byte [rsi+0x2f8]
00013288  ffc0               inc     eax
0001328a  8887be000000       mov     byte [rdi+0xbe], al
00013290  e97434ffff         jmp     __x86_return_thunk
{ Does not return }


00013295    void Small_decode(char* arg1, void* arg2) __noreturn

00013295  4989f9             mov     r9, rdi
00013298  4531c0             xor     r8d, r8d  {0x0}

0001329b  460fb61406         movzx   r10d, byte [rsi+r8]
000132a0  31c0               xor     eax, eax  {0x0}

000132a2  8d0c00             lea     ecx, [rax+rax]
000132a5  4489d2             mov     edx, r10d
000132a8  d3fa               sar     edx, cl
000132aa  83e203             and     edx, 0x3
000132ad  ffca               dec     edx
000132af  41881401           mov     byte [r9+rax], dl
000132b3  48ffc0             inc     rax
000132b6  4883f804           cmp     rax, 0x4
000132ba  75e6               jne     0x132a2

000132bc  49ffc0             inc     r8
000132bf  4983c104           add     r9, 0x4
000132c3  4981f8be000000     cmp     r8, 0xbe
000132ca  75cf               jne     0x1329b

000132cc  8a86be000000       mov     al, byte [rsi+0xbe]
000132d2  83e003             and     eax, 0x3
000132d5  ffc8               dec     eax
000132d7  8887f8020000       mov     byte [rdi+0x2f8], al
000132dd  e92734ffff         jmp     __x86_return_thunk
{ Does not return }


000132e2    void Encode(void* arg1, int16_t* arg2, int16_t* arg3, int64_t arg4) __noreturn

000132e2  55                 push    rbp {__saved_rbp}
000132e3  4889e5             mov     rbp, rsp {__saved_rbp}
000132e6  4156               push    r14 {__saved_r14}
000132e8  4155               push    r13 {__saved_r13}
000132ea  4154               push    r12 {__saved_r12}
000132ec  53                 push    rbx {__saved_rbx}
000132ed  4883ec10           sub     rsp, 0x10
000132f1  644c8b0425280000…  mov     r8, qword [fs:0x28]
000132fa  4c8945d8           mov     qword [rbp-0x28 {var_30}], r8
000132fe  4989d0             mov     r8, rdx
00013301  4883f901           cmp     rcx, 0x1
00013305  7528               jne     0x1332f

00013307  668b16             mov     dx, word [rsi]
0001330a  66418b00           mov     ax, word [r8]

0001330e  6683f801           cmp     ax, 0x1
00013312  0f86d9000000       jbe     0x133f1

00013318  0fb7c0             movzx   eax, ax
0001331b  48ffc7             inc     rdi
0001331e  8857ff             mov     byte [rdi-0x1], dl
00013321  66c1ea08           shr     dx, 0x8
00013325  05ff000000         add     eax, 0xff
0001332a  c1f808             sar     eax, 0x8
0001332d  ebdf               jmp     0x1330e

0001332f  0f8ebc000000       jle     0x133f1

00013335  488d4101           lea     rax, [rcx+0x1]
00013339  4989e6             mov     r14, rsp {var_38}
0001333c  4c8d61ff           lea     r12, [rcx-0x1]
00013340  4989c1             mov     r9, rax
00013343  4883e0fe           and     rax, 0xfffffffffffffffe
00013347  4883c00f           add     rax, 0xf
0001334b  49d1f9             sar     r9, 0x1
0001334e  48c1e804           shr     rax, 0x4
00013352  48c1e004           shl     rax, 0x4
00013356  4829c4             sub     rsp, rax
00013359  4989e2             mov     r10, rsp
0001335c  4829c4             sub     rsp, rax
0001335f  31c0               xor     eax, eax  {0x0}
00013361  4889e3             mov     rbx, rsp

00013364  450fb72c40         movzx   r13d, word [r8+rax*2]
00013369  440fb75c4602       movzx   r11d, word [rsi+rax*2+0x2]
0001336f  0fb71446           movzx   edx, word [rsi+rax*2]
00013373  450fafdd           imul    r11d, r13d
00013377  4101d3             add     r11d, edx
0001337a  410fb7544002       movzx   edx, word [r8+rax*2+0x2]
00013380  410fafd5           imul    edx, r13d

00013384  81faff3f0000       cmp     edx, 0x3fff
0001338a  7616               jbe     0x133a2

0001338c  81c2ff000000       add     edx, 0xff
00013392  48ffc7             inc     rdi
00013395  44885fff           mov     byte [rdi-0x1], r11b
00013399  41c1eb08           shr     r11d, 0x8
0001339d  c1ea08             shr     edx, 0x8
000133a0  ebe2               jmp     0x13384

000133a2  4989c5             mov     r13, rax
000133a5  4883c002           add     rax, 0x2
000133a9  49d1fd             sar     r13, 0x1
000133ac  6647891c6a         mov     word [r10+r13*2], r11w
000133b1  664289146b         mov     word [rbx+r13*2], dx
000133b6  4c39e0             cmp     rax, r12
000133b9  7ca9               jl      0x13364

000133bb  4889c8             mov     rax, rcx
000133be  4883e0fe           and     rax, 0xfffffffffffffffe
000133c2  4839c1             cmp     rcx, rax
000133c5  7e19               jle     0x133e0

000133c7  4801c0             add     rax, rax
000133ca  49ffc5             inc     r13
000133cd  668b1406           mov     dx, word [rsi+rax]
000133d1  66418b0400         mov     ax, word [r8+rax]
000133d6  664389146a         mov     word [r10+r13*2], dx
000133db  664289046b         mov     word [rbx+r13*2], ax

000133e0  4c89c9             mov     rcx, r9
000133e3  4889da             mov     rdx, rbx
000133e6  4c89d6             mov     rsi, r10
000133e9  e8f4feffff         call    Encode
{ Does not return }

000133ee                                            4c 89 f4                                                             L..

000133f1  488b45d8           mov     rax, qword [rbp-0x28 {var_30}]
000133f5  64482b0425280000…  sub     rax, qword [fs:0x28]
000133fe  7405               je      0x13405

00013400  e80b1effff         call    __stack_chk_fail
{ Does not return }

00013405  488d65e0           lea     rsp, [rbp-0x20]
00013409  5b                 pop     rbx {__saved_rbx}
0001340a  415c               pop     r12 {__saved_r12}
0001340c  415d               pop     r13 {__saved_r13}
0001340e  415e               pop     r14 {__saved_r14}
00013410  5d                 pop     rbp {__saved_rbp}
00013411  e9f332ffff         jmp     __x86_return_thunk
{ Does not return }


00013416    void urandom32() __noreturn

00013416  4883ec18           sub     rsp, 0x18
0001341a  be04000000         mov     esi, 0x4
0001341f  64488b3c25280000…  mov     rdi, qword [fs:0x28]
00013428  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
0001342d  488d7c2404         lea     rdi, [rsp+0x4 {var_14}]
00013432  e8b34fffff         call    genrandom
{ Does not return }

00013437                                                                       0f b6 44 24 05 0f b6 54 24                         ..D$...T$
00013440  04 c1 e0 08 01 d0 0f b6 54 24 06 c1 e2 10 01 c2 0f b6 44 24 07 c1 e0 18 01 d0 48 8b 54 24 08 64  ........T$........D$......H.T$.d
00013460  48 2b 14 25 28 00 00 00 74 05 e8 a1 1d ff ff 48 83 c4 18 e9 91 32 ff ff                          H+.%(...t......H.....2..

00013478    void Short_random() __noreturn

00013478  4157               push    r15 {var_8}
0001347a  4156               push    r14 {var_10}
0001347c  4155               push    r13 {var_18}
0001347e  4154               push    r12 {var_20}
00013480  55                 push    rbp {var_28}
00013481  53                 push    rbx {var_30}
00013482  4881ec18180000     sub     rsp, 0x1818
00013489  48897c2410         mov     qword [rsp+0x10 {var_1838}], rdi
0001348e  488d6c2440         lea     rbp, [rsp+0x40 {var_1808}]
00013493  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001349c  48899c2408180000   mov     qword [rsp+0x1808 {var_40}], rbx
000134a4  31db               xor     ebx, ebx  {0x0}
000134a6  e86bffffff         call    urandom32
{ Does not return }

000134ab                                   89 44 9d 00 48 ff c3 48 81 fb f9 02 00 00 75 eb 31 c0 4c 8d 94             .D..H..H......u.1.L..
000134c0  24 24 0c 00 00 8b 54 05 00 48 83 c0 04 83 e2 fe 42 89 54 10 fc 48 3d 78 04 00 00 75 e8 8b 54 05  $$....T..H......B.T..H=x...u..T.
000134e0  00 83 e2 fc 83 ca 01 41 89 14 02 48 83 c0 04 48 3d e4 0b 00 00 75 e6 4d 89 d4 4c 8d bc 24 08 18  .......A...H...H=....u.M..L..$..
00013500  00 00 4c 89 d0 81 00 00 00 00 80 48 83 c0 04 4c 39 f8 75 f1 41 b8 00 02 00 00 4c 8d b4 24 24 0c  ..L........H...L9.u.A.....L..$$.
00013520  00 00 4f 8d 2c 00 4e 8d 0c 85 00 00 00 00 45 31 db 4c 89 dd 4d 01 eb 49 81 fb f9 02 00 00 48 8d  ..O.,.N.......E1.L..M..I......H.
00013540  3c ad 00 00 00 00 7f 20 4c 89 db 4c 01 d7 4c 29 c3 48 39 dd 7d db 4a 8d 34 0f 48 ff c5 e8 54 fb  <...... L..L..L).H9.}.J.4.H...T.
00013560  ff ff 48 83 c7 04 eb e9 41 bb f9 02 00 00 4c 01 f7 4d 29 c3 4c 39 dd 7d 12 4a 8d 34 0f 48 ff c5  ..H.....A.....L..M).L9.}.J.4.H..
00013580  e8 31 fb ff ff 48 83 c7 04 eb e9 4b 8d 04 40 31 ed 31 db 41 bb 00 02 00 00 48 89 44 24 18 4d 39  .1...H.....K..@1.1.A.....H.D$.M9
000135a0  c3 0f 8e 65 01 00 00 48 39 eb 74 66 4a 8d 44 05 00 41 b9 f9 02 00 00 4d 8d 2c 86 4d 29 d9 49 39  ...e...H9.tfJ.D..A.....M.,.M).I9
000135c0  e9 0f 84 3d 01 00 00 41 8b 45 00 48 8d 7c 24 3c 89 44 24 3c 4c 89 d8 48 8d 54 05 00 48 89 44 24  ...=...A.E.H.|$<.D$<L..H.T..H.D$
000135e0  08 49 8d 34 92 e8 cc fa ff ff 48 8b 44 24 08 48 d1 f8 4c 39 c0 7f e0 8b 44 24 3c 48 ff c5 49 83  .I.4......H.D$.H..L9....D$<H..I.
00013600  c5 04 41 89 45 fc 4a 8d 04 03 48 39 c5 75 af 4c 01 c5 4e 8d 6c 05 00 bd f9 02 00 00 4c 29 dd 4c  ..A.E.J...H9.u.L..N.l.......L).L
00013620  89 e8 4e 8d 0c ad 00 00 00 00 4c 29 c0 4c 39 ed 48 89 44 24 08 48 89 c3 7c 56 4d 01 d1 48 8d 7c  ..N.......L).L9.H.D$.H..|VM..H.|
00013640  24 3c 4c 39 eb 7d 3a 41 8b 11 89 54 24 3c 4c 89 da 48 8d 0c 13 48 89 54 24 20 49 8d 34 8a e8 53  $<L9.}:A...T$<L..H...H.T$ I.4..S
00013660  fa ff ff 48 8b 54 24 20 48 d1 fa 4c 39 c2 7f e1 8b 54 24 3c 48 ff c3 49 83 c1 04 41 89 51 fc eb  ...H.T$ H..L9....T$<H..I...A.Q..
00013680  c1 4c 8b 6c 24 08 48 8b 44 24 18 49 01 c5 eb 8f 48 8b 54 24 08 4d 01 f1 48 39 d5 7e 49 41 8b 09  .L.l$.H.D$.I....H.T$.M..H9.~IA..
000136a0  89 4c 24 3c 4c 89 d9 48 8d 34 0a 48 8d 7c 24 3c 48 89 4c 24 28 49 8d 34 b6 48 89 54 24 20 e8 f3  .L$<L..H.4.H.|$<H.L$(I.4.H.T$ ..
000136c0  f9 ff ff 48 8b 4c 24 28 48 8b 54 24 20 48 d1 f9 4c 39 c1 7f d2 8b 4c 24 3c 48 ff c2 49 83 c1 04  ...H.L$(H.T$ H..L9....L$<H..I...
000136e0  41 89 49 fc eb b2 4c 89 c2 48 8b 4c 24 08 4c 29 ea 48 8d 04 2a 31 d2 48 39 6c 24 08 48 0f 4f c2  A.I...L..H.L$.L).H..*1.H9l$.H.O.
00013700  48 8d 2c 08 49 d1 fb e9 92 fe ff ff 49 d1 f8 0f 85 0d fe ff ff 41 81 04 24 00 00 00 80 49 83 c4  H.,.I.......I........A..$....I..
00013720  04 4d 39 fc 75 ef 31 c0 41 8a 14 82 48 8b 4c 24 10 83 e2 03 ff ca 88 14 01 48 ff c0 48 3d f9 02  .M9.u.1.A...H.L$.........H..H=..
00013740  00 00 75 e4 48 8b 84 24 08 18 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 b4 1a ff ff 48 81 c4 18  ..u.H..$....dH+.%(...t......H...
00013760  18 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 97 2f ff ff                                            ...[]A\A]A^A_../..

00013772    void Hash_prefix(int64_t arg1, char arg2, int64_t arg3, int32_t arg4) __noreturn

00013772  55                 push    rbp {var_8}
00013773  4889e5             mov     rbp, rsp {var_8}
00013776  4155               push    r13 {var_10}
00013778  4154               push    r12 {var_18}
0001377a  448d6101           lea     r12d, [rcx+0x1]
0001377e  89c9               mov     ecx, ecx
00013780  4c8dadc8feffff     lea     r13, [rbp-0x138 {var_140}]
00013787  53                 push    rbx {var_20}
00013788  4d63e4             movsxd  r12, r12d
0001378b  4889fb             mov     rbx, rdi
0001378e  89f7               mov     edi, esi
00013790  498d44240f         lea     rax, [r12+0xf]
00013795  4883e0f0           and     rax, 0xfffffffffffffff0
00013799  4881ec28010000     sub     rsp, 0x128
000137a0  64488b3425280000…  mov     rsi, qword [fs:0x28]
000137a9  488975d8           mov     qword [rbp-0x28 {var_30}], rsi
000137ad  4889d6             mov     rsi, rdx
000137b0  4829c4             sub     rsp, rax
000137b3  488d442401         lea     rax, [rsp+0x1]
000137b8  40883c24           mov     byte [rsp], dil
000137bc  4889c7             mov     rdi, rax
000137bf  f3a4               rep movsb byte [rdi], [rsi]  {0x0}
000137c1  4c89ef             mov     rdi, r13 {var_140}
000137c4  e8a5d10000         call    sha512_init
{ Does not return }

000137c9                             4c 89 e2 48 89 e6 4c 89 ef e8 02 d5 00 00 48 8d 75 98 4c 89 ef e8 15           L..H..L.......H.u.L....
000137e0  d4 00 00 0f 10 45 98 0f 11 03 0f 10 45 a8 0f 11 43 10 48 8b 45 d8 64 48 2b 04 25 28 00 00 00 74  .....E......E...C.H.E.dH+.%(...t
00013800  05 e8 0a 1a ff ff 48 8d 65 e8 5b 41 5c 41 5d 5d e9 f4 2e ff ff                                   ......H.e.[A\A]].....

00013815    void HashSession(int64_t arg1, int32_t arg2, int64_t arg3) __noreturn

00013815  4155               push    r13 {var_8}
00013817  4154               push    r12 {var_10}
00013819  4189f4             mov     r12d, esi
0001381c  be03000000         mov     esi, 0x3
00013821  55                 push    rbp {var_18}
00013822  4889fd             mov     rbp, rdi
00013825  53                 push    rbx {var_20}
00013826  4881ec48040000     sub     rsp, 0x448
0001382d  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00013836  48899c2438040000   mov     qword [rsp+0x438 {var_30}], rbx
0001383e  4889cb             mov     rbx, rcx
00013841  4c8d6c2409         lea     r13, [rsp+0x9 {var_45f}]
00013846  b9bf000000         mov     ecx, 0xbf
0001384b  4c89ef             mov     rdi, r13 {var_45f}
0001384e  e81fffffff         call    Hash_prefix
{ Does not return }

00013853                                                           48 8d 44 24 29 b9 0f 04 00 00 4c 89 ea                     H.D$).....L..
00013860  48 89 c7 48 89 de f3 a4 b9 2f 04 00 00 44 89 e6 48 89 ef e8 fa fe ff ff 48 8b 84 24 38 04 00 00  H..H...../...D..H.......H..$8...
00013880  64 48 2b 04 25 28 00 00 00 74 05 e8 80 19 ff ff 48 81 c4 48 04 00 00 5b 5d 41 5c 41 5d e9 67 2e  dH+.%(...t......H..H...[]A\A].g.
000138a0  ff ff                                                                                            ..

000138a2    void Decode(int16_t* arg1, char* arg2, int16_t* arg3, int64_t arg4) __noreturn

000138a2  55                 push    rbp {__saved_rbp}
000138a3  4889e5             mov     rbp, rsp {__saved_rbp}
000138a6  4157               push    r15 {__saved_r15}
000138a8  4156               push    r14 {__saved_r14}
000138aa  4155               push    r13 {__saved_r13}
000138ac  4154               push    r12 {__saved_r12}
000138ae  53                 push    rbx {__saved_rbx}
000138af  4889fb             mov     rbx, rdi
000138b2  4883ec58           sub     rsp, 0x58
000138b6  644c8b2425280000…  mov     r12, qword [fs:0x28]
000138bf  4c8965c8           mov     qword [rbp-0x38 {var_40}], r12
000138c3  4989d4             mov     r12, rdx
000138c6  4883f901           cmp     rcx, 0x1
000138ca  7541               jne     0x1390d

000138cc  66418b0424         mov     ax, word [r12]
000138d1  6683f801           cmp     ax, 0x1
000138d5  750a               jne     0x138e1

000138d7  66c7070000         mov     word [rdi], 0x0
000138dc  e9e0010000         jmp     0x13ac1

000138e1  663d0001           cmp     ax, 0x100
000138e5  0fb7c8             movzx   ecx, ax
000138e8  488d7dc4           lea     rdi, [rbp-0x3c {var_44}]
000138ec  488d45c0           lea     rax, [rbp-0x40 {var_48}]
000138f0  7705               ja      0x138f7

000138f2  0fb616             movzx   edx, byte [rsi]
000138f5  eb03               jmp     0x138fa

000138f7  0fb716             movzx   edx, word [rsi]

000138fa  4889c6             mov     rsi, rax {var_48}
000138fd  e821f8ffff         call    uint32_divmod_uint14
{ Does not return }

00013902        8b 45 c0 66 89 03 e9 b4 01 00 00                                                             .E.f.......

0001390d  0f8eae010000       jle     0x13ac1

00013913  488d4101           lea     rax, [rcx+0x1]
00013917  48896590           mov     qword [rbp-0x70 {var_78}], rsp {var_88}
0001391b  4889ca             mov     rdx, rcx
0001391e  4989cf             mov     r15, rcx
00013921  4989c3             mov     r11, rax
00013924  4883e0fe           and     rax, 0xfffffffffffffffe
00013928  48d1fa             sar     rdx, 0x1
0001392b  4883c00f           add     rax, 0xf
0001392f  49d1fb             sar     r11, 0x1
00013932  48c1e804           shr     rax, 0x4
00013936  48c1e004           shl     rax, 0x4
0001393a  4829c4             sub     rsp, rax
0001393d  488965a8           mov     qword [rbp-0x58 {var_60}], rsp
00013941  4829c4             sub     rsp, rax
00013944  4889c8             mov     rax, rcx
00013947  4883e0fe           and     rax, 0xfffffffffffffffe
0001394b  4989e2             mov     r10, rsp
0001394e  4883c00f           add     rax, 0xf
00013952  4883e0f0           and     rax, 0xfffffffffffffff0
00013956  4829c4             sub     rsp, rax
00013959  488d04950f000000   lea     rax, [rdx*4+0xf]
00013961  4883e0f0           and     rax, 0xfffffffffffffff0
00013965  48896598           mov     qword [rbp-0x68 {var_70}], rsp
00013969  4829c4             sub     rsp, rax
0001396c  488d41ff           lea     rax, [rcx-0x1]
00013970  31c9               xor     ecx, ecx  {0x0}
00013972  488945a0           mov     qword [rbp-0x60 {var_68}], rax
00013976  4989e5             mov     r13, rsp

00013979  410fb7544c02       movzx   edx, word [r12+rcx*2+0x2]
0001397f  410fb7044c         movzx   eax, word [r12+rcx*2]
00013984  0fafc2             imul    eax, edx
00013987  4889ca             mov     rdx, rcx
0001398a  48d1fa             sar     rdx, 0x1
0001398d  3d00ff3f00         cmp     eax, 0x3fff00
00013992  7626               jbe     0x139ba

00013994  440fb67601         movzx   r14d, byte [rsi+0x1]
00013999  0fb63e             movzx   edi, byte [rsi]
0001399c  05ff000000         add     eax, 0xff
000139a1  41c7449500000001…  mov     dword [r13+rdx*4], 0x10000
000139aa  4883c602           add     rsi, 0x2
000139ae  c1e808             shr     eax, 0x8
000139b1  41c1e608           shl     r14d, 0x8
000139b5  4401f7             add     edi, r14d
000139b8  eb16               jmp     0x139d0

000139ba  3dff3f0000         cmp     eax, 0x3fff
000139bf  7619               jbe     0x139da

000139c1  41c7449500000100…  mov     dword [r13+rdx*4], 0x100
000139ca  0fb63e             movzx   edi, byte [rsi]
000139cd  48ffc6             inc     rsi

000139d0  05ff000000         add     eax, 0xff
000139d5  c1e808             shr     eax, 0x8
000139d8  eb0b               jmp     0x139e5

000139da  41c7449500010000…  mov     dword [r13+rdx*4], 0x1
000139e3  31ff               xor     edi, edi  {0x0}

000139e5  6641890452         mov     word [r10+rdx*2], ax
000139ea  4c8b4598           mov     r8, qword [rbp-0x68 {var_70}]
000139ee  4883c102           add     rcx, 0x2
000139f2  488b45a0           mov     rax, qword [rbp-0x60 {var_68}]
000139f6  6641893c50         mov     word [r8+rdx*2], di
000139fb  4839c1             cmp     rcx, rax
000139fe  0f8c75ffffff       jl      0x13979

00013a04  4c89f8             mov     rax, r15
00013a07  4d89fe             mov     r14, r15
00013a0a  48d1e8             shr     rax, 0x1
00013a0d  4983e6fe           and     r14, 0xfffffffffffffffe
00013a11  48894588           mov     qword [rbp-0x78 {var_80}], rax
00013a15  4d39fe             cmp     r14, r15
00013a18  7d0b               jge     0x13a25

00013a1a  66438b0474         mov     ax, word [r12+r14*2]
00013a1f  664189445202       mov     word [r10+rdx*2+0x2], ax

00013a25  488b7da8           mov     rdi, qword [rbp-0x58 {var_60}]
00013a29  4c89d2             mov     rdx, r10
00013a2c  4c89d9             mov     rcx, r11
00013a2f  e86efeffff         call    Decode
{ Does not return }

00013a34                                                              48 8d 45 bc 45 31 d2 48 89 45 80 48                      H.E.E1.H.E.H
00013a40  8b 75 a8 4d 89 d3 48 8b 45 98 48 8d 7d c0 49 d1 fb 43 0f b7 0c 54 42 0f b7 14 5e 43 0f af 54 9d  .u.M..H.E.H.}.I..C...TB...^C..T.
00013a60  00 42 0f b7 04 58 48 8b 75 80 01 c2 e8 b2 f6 ff ff 8b 55 c0 48 8d 75 be 48 8d 7d c4 43 0f b7 4c  .B...XH.u.........U.H.u.H.}.C..L
00013a80  54 02 e8 9c f6 ff ff 8b 45 bc 66 42 89 04 53 66 8b 45 be 66 42 89 44 53 02 48 8b 45 a0 49 83 c2  T.......E.fB..Sf.E.fB.DS.H.E.I..
00013aa0  02 49 39 c2 7c 99 4d 39 fe 7d 12 48 8b 45 a8 48 8b 4d 88 66 42 8b 44 58 02 66 89 04 8b 48 8b 65  .I9.|.M9.}.H.E.H.M.fB.DX.f...H.e
00013ac0  90                                                                                               .

00013ac1  488b45c8           mov     rax, qword [rbp-0x38 {var_40}]
00013ac5  64482b0425280000…  sub     rax, qword [fs:0x28]
00013ace  7405               je      0x13ad5

00013ad0  e83b17ffff         call    __stack_chk_fail
{ Does not return }

00013ad5  488d65d8           lea     rsp, [rbp-0x28]
00013ad9  5b                 pop     rbx {__saved_rbx}
00013ada  415c               pop     r12 {__saved_r12}
00013adc  415d               pop     r13 {__saved_r13}
00013ade  415e               pop     r14 {__saved_r14}
00013ae0  415f               pop     r15 {__saved_r15}
00013ae2  5d                 pop     rbp {__saved_rbp}
00013ae3  e9212cffff         jmp     __x86_return_thunk
{ Does not return }


00013ae8    void ZEncrypt(int64_t arg1, int64_t arg2, char* arg3) __noreturn

00013ae8  4155               push    r13 {var_8}
00013aea  4989f5             mov     r13, rsi
00013aed  4889d6             mov     rsi, rdx
00013af0  4154               push    r12 {var_10}
00013af2  4989fc             mov     r12, rdi
00013af5  55                 push    rbp {var_18}
00013af6  53                 push    rbx {var_20}
00013af7  4881ecd8170000     sub     rsp, 0x17d8
00013afe  64488b0425280000…  mov     rax, qword [fs:0x28]
00013b07  48898424c8170000   mov     qword [rsp+0x17c8 {var_30}], rax
00013b0f  31c0               xor     eax, eax  {0x0}
00013b11  488d9c24d6110000   lea     rbx, [rsp+0x11d6 {var_622}]

00013b19  66c70443ef11       mov     word [rbx+rax*2], 0x11ef {var_622}
00013b1f  48ffc0             inc     rax
00013b22  483df9020000       cmp     rax, 0x2f9
00013b28  75ef               jne     0x13b19

00013b2a  488dac24e40b0000   lea     rbp, [rsp+0xbe4 {var_c14}]
00013b32  b9f9020000         mov     ecx, 0x2f9
00013b37  4889da             mov     rdx, rbx {var_622}
00013b3a  4889ef             mov     rdi, rbp {var_c14}
00013b3d  e860fdffff         call    Decode
{ Does not return }

00013b42        31 c0 66 8b 4c 05 00 48 89 e6 8d 91 09 f7 ff ff 66 89 14 04 48 83 c0 02 48 3d f2 05 00 00    1.f.L..H........f...H...H=....
00013b60  75 e2 4c 89 ea 48 89 df e8 09 f6 ff ff 31 c9 4c 8d 84 24 f2 05 00 00 0f bf 3c 0b 48 83 c1 02 e8  u.L..H.......1.L..$......<.H....
00013b80  49 f5 ff ff 89 fe 66 98 29 c6 66 42 89 74 01 fe 48 81 f9 f2 05 00 00 75 de 31 d2 41 0f bf 04 10  I.....f.).fB.t..H......u.1.A....
00013ba0  69 c0 ab 2a 00 00 05 fd 82 7e 01 c1 f8 0f 66 89 44 15 00 48 83 c2 02 48 81 fa f2 05 00 00 75 db  i..*.....~....f.D..H...H......u.
00013bc0  31 c0 66 c7 04 43 fb 05 48 ff c0 48 3d f9 02 00 00 75 ef b9 f9 02 00 00 48 89 da 48 89 ee 4c 89  1.f..C..H..H=....u......H..H..L.
00013be0  e7 e8 fc f6 ff ff 48 8b 84 24 c8 17 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 12 16 ff ff 48 81  ......H..$....dH+.%(...t......H.
00013c00  c4 d8 17 00 00 5b 5d 41 5c 41 5d e9 f9 2a ff ff                                                  .....[]A\A]..*..

00013c10    void Hide(int64_t arg1, char* arg2, void* arg3) __noreturn

00013c10  4155               push    r13 {var_8}
00013c12  4989cb             mov     r11, rcx
00013c15  4154               push    r12 {var_10}
00013c17  4989f4             mov     r12, rsi
00013c1a  4889d6             mov     rsi, rdx
00013c1d  55                 push    rbp {var_18}
00013c1e  53                 push    rbx {var_20}
00013c1f  4889fb             mov     rbx, rdi
00013c22  4c89e7             mov     rdi, r12
00013c25  4883ec58           sub     rsp, 0x58
00013c29  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00013c32  48896c2448         mov     qword [rsp+0x48 {var_30}], rbp
00013c37  4c89c5             mov     rbp, r8
00013c3a  4c8d6c2408         lea     r13, [rsp+0x8 {var_70}]
00013c3f  e807f6ffff         call    Small_encode
{ Does not return }

00013c44              4c 89 da 48 89 df e8 99 fe ff ff b9 bf 00 00 00 4c 89 e2 4c 89 ef be 03 00 00 00 e8      L..H............L..L........
00013c60  0e fb ff ff 48 8d bb ef 03 00 00 b9 40 00 00 00 4c 89 ea be 02 00 00 00 0f 10 45 00 0f 11 44 24  ....H.......@...L.........E...D$
00013c80  28 0f 10 45 10 0f 11 44 24 38 e8 e3 fa ff ff 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8  (..E...D$8.....H.D$HdH+.%(...t..
00013ca0  6c 15 ff ff 48 83 c4 58 5b 5d 41 5c 41 5d e9 56 2a ff ff                                         l...H..X[]A\A].V*..

00013cb3    void ZKeyGen() __noreturn

00013cb3  4157               push    r15 {var_8}
00013cb5  4156               push    r14 {var_10}
00013cb7  4155               push    r13 {var_18}
00013cb9  4154               push    r12 {var_20}
00013cbb  55                 push    rbp {var_28}
00013cbc  53                 push    rbx {var_30}
00013cbd  4881ece82f0000     sub     rsp, 0x2fe8
00013cc4  48897c2420         mov     qword [rsp+0x20 {var_2ff8}], rdi
00013cc9  4889742408         mov     qword [rsp+0x8 {var_3010}], rsi
00013cce  644c8b2425280000…  mov     r12, qword [fs:0x28]
00013cd7  4c89a424d82f0000   mov     qword [rsp+0x2fd8 {var_40}], r12
00013cdf  4531e4             xor     r12d, r12d  {0x0}
00013ce2  488d8424f7200000   lea     rax, [rsp+0x20f7 {var_f21}]
00013cea  31ed               xor     ebp, ebp  {0x0}
00013cec  48890424           mov     qword [rsp {var_3018}], rax {var_f21}
00013cf0  e821f7ffff         call    urandom32
{ Does not return }

00013cf5                                                                 48 8b 1c 24 48 ff c5 25 ff ff ff                       H..$H..%...
00013d00  3f 8d 04 40 c1 e8 1e ff c8 88 44 1d ff 48 81 fd f9 02 00 00 75 da 4c 8d ac 24 e4 29 00 00 44 89  ?..@......D..H......u.L..$.)..D.
00013d20  e0 b9 fa 02 00 00 4c 89 ef 48 8d 9c 24 de 2c 00 00 48 8d 94 24 f0 23 00 00 f3 aa b9 fa 02 00 00  ......L..H..$.,..H..$.#.........
00013d40  48 89 df 48 8d b4 24 e2 29 00 00 f3 aa 48 89 d7 48 89 e9 c6 84 24 de 2c 00 00 01 f3 aa c6 84 24  H..H..$.)....H..H....$.,.......$
00013d60  f0 23 00 00 01 31 c0 66 c7 84 24 e8 26 00 00 ff ff 48 8b 0c 24 48 89 f2 48 29 c2 8a 0c 01 48 ff  .#...1.f..$.&....H..$H..H)....H.
00013d80  c0 88 0a 48 3d f9 02 00 00 75 e6 44 88 a4 24 e3 29 00 00 41 be f1 05 00 00 bd 01 00 00 00 4c 8d  ...H=....u.D..$.)..A..........L.
00013da0  bc 24 e5 29 00 00 ba f9 02 00 00 4c 89 ee 4c 89 ff e8 7a 18 ff ff 0f be 94 24 ea 26 00 00 0f be  .$.).......L..L...z......$.&....
00013dc0  8c 24 f0 23 00 00 44 88 a4 24 e4 29 00 00 4c 8d 8c 24 f0 23 00 00 4c 8d 84 24 ea 26 00 00 89 d0  .$.#..D..$.)..L..$.#..L..$.&....
00013de0  0f af ca 89 ea 66 31 f6 66 bf ff ff 66 85 c0 66 0f 45 f7 89 e8 f7 da f7 d8 f7 d9 66 c1 fa 0f 21  .....f1.f...f..f.E.........f...!
00013e00  f2 31 e8 0f bf d2 21 d0 31 e8 8d 68 01 31 c0 46 8a 14 08 42 8a 3c 00 44 89 d6 31 fe 40 0f be f6  .1....!.1..h.1.F...B.<.D..1.@...
00013e20  21 d6 41 31 f2 31 f7 46 88 14 08 45 8a 54 05 00 42 88 3c 00 40 8a 3c 03 44 89 d6 31 fe 40 0f be  !.A1.1.F...E.T..B.<.@.<.D..1.@..
00013e40  f6 21 d6 41 31 f2 31 f7 45 88 54 05 00 40 88 3c 03 48 ff c0 48 3d fa 02 00 00 75 b3 45 31 d2 89  .!.A1.1.E.T..@.<.H..H=....u.E1..
00013e60  ce 66 43 0f be 3c 11 66 43 0f be 04 10 0f af f9 01 c7 0f bf ff e8 53 f2 ff ff 43 88 04 10 49 ff  .fC..<.fC.............S...C...I.
00013e80  c2 49 81 fa fa 02 00 00 75 d7 31 c9 66 41 0f be 7c 0d 00 66 0f be 04 0b 0f af fe 01 c7 0f bf ff  .I......u.1.fA..|..f............
00013ea0  e8 28 f2 ff ff 88 04 0b 48 ff c1 48 81 f9 fa 02 00 00 75 d8 48 8d b4 24 eb 26 00 00 ba f9 02 00  .(......H..H......u.H..$.&......
00013ec0  00 4c 89 c7 e8 67 17 ff ff 44 88 a4 24 e3 29 00 00 41 ff ce 0f 85 cc fe ff ff 48 8d 84 24 fe 1d  .L...g...D..$.)..A........H..$..
00013ee0  00 00 8a 8c 24 f0 23 00 00 31 d2 48 8d bc 24 dc 2c 00 00 48 89 44 24 10 48 89 fe 48 29 d6 48 ff  ....$.#..1.H..$.,..H.D$.H..H).H.
00013f00  c2 8a 06 48 8b 74 24 10 0f af c1 88 44 32 ff 48 81 fa f9 02 00 00 75 e0 66 31 c0 66 ba ff ff 66  ...H.t$.....D2.H......u.f1.f...f
00013f20  85 ed 66 0f 45 c2 66 85 c0 0f 85 b3 fd ff ff 48 89 df 48 8d ac 24 16 12 00 00 4c 8d a4 24 0a 18  ..f.E.f........H..H..$....L..$..
00013f40  00 00 e8 31 f5 ff ff 31 c0 b9 7d 01 00 00 48 89 ef f3 ab b9 7d 01 00 00 4c 89 e7 ba ec 11 00 00  ...1...1..}...H.....}...L.......
00013f60  f3 ab b8 03 00 00 00 98 8d 3c 40 e8 7a f1 ff ff ff ca 75 f3 48 8d 94 24 2e 06 00 00 66 89 84 24  .........<@.z.....u.H..$....f..$
00013f80  0a 18 00 00 b9 f2 05 00 00 31 c0 48 89 d7 48 8d 94 24 22 0c 00 00 f3 aa 31 c0 66 c7 84 24 2e 06  .........1.H..H..$".....1.f..$..
00013fa0  00 00 01 00 c7 84 24 1e 0c 00 00 ff ff ff ff 66 0f be 0c 03 48 ff c0 48 83 ea 02 66 89 8a f2 05  ......$........f....H..H...f....
00013fc0  00 00 48 3d f9 02 00 00 75 e5 48 8d 84 24 18 12 00 00 c7 44 24 1c f1 05 00 00 41 bd 01 00 00 00  ..H=....u.H..$.....D$.....A.....
00013fe0  66 c7 84 24 14 12 00 00 00 00 48 89 44 24 28 48 8b 7c 24 28 ba f2 05 00 00 48 89 ee e8 2f 16 ff  f..$......H.D$(H.|$(.....H.../..
00014000  ff 66 8b 84 24 22 0c 00 00 44 89 ea 66 c7 84 24 16 12 00 00 00 00 66 31 c9 66 be ff ff 66 85 c0  .f..$"...D..f..$......f1.f...f..
00014020  66 0f 45 ce 44 89 e8 f7 da f7 d8 66 c1 fa 0f 21 ca 44 31 e8 0f bf ca 21 c8 44 31 e8 44 8d 68 01  f.E.D......f...!.D1....!.D1.D.h.
00014040  31 c0 66 8b 8c 04 22 0c 00 00 4c 8d 84 24 2e 06 00 00 66 44 8b 8c 04 2e 06 00 00 48 8d b4 24 22  1.f..."...L..$....fD.......H..$"
00014060  0c 00 00 44 89 cf 31 cf 21 d7 41 31 f9 31 f9 66 44 89 8c 04 2e 06 00 00 66 44 8b 4c 05 00 66 89  ...D..1.!.A1.1.fD.......fD.L..f.
00014080  8c 04 22 0c 00 00 66 41 8b 0c 04 44 89 cf 31 cf 21 d7 41 31 f9 31 f9 66 44 89 4c 05 00 66 41 89  .."...fA...D..1.!.A1.1.fD.L..fA.
000140a0  0c 04 48 83 c0 02 48 3d f4 05 00 00 75 94 44 0f bf bc 24 2e 06 00 00 0f bf 8c 24 22 0c 00 00 31  ..H...H=....u.D...$.......$"...1
000140c0  d2 44 89 fb 0f bf 3c 16 41 0f bf 04 10 41 0f af ff 0f af c1 29 c7 e8 0f f0 ff ff 66 89 04 16 48  .D....<.A....A......)......f...H
000140e0  83 c2 02 48 81 fa f4 05 00 00 75 d8 31 d2 41 0f bf 3c 14 0f bf 44 15 00 41 0f af ff 0f af c1 29  ...H......u.1.A..<...D..A......)
00014100  c7 e8 e4 ef ff ff 66 41 89 04 14 48 83 c2 02 48 81 fa f4 05 00 00 75 d6 4c 8d b4 24 22 0c 00 00  ......fA...H...H......u.L..$"...
00014120  48 8d b4 24 24 0c 00 00 ba f2 05 00 00 4c 89 f7 e8 fb 14 ff ff ff 4c 24 1c 66 c7 84 24 14 12 00  H..$$........L........L$.f..$...
00014140  00 00 00 0f 85 a6 fe ff ff ba ec 11 00 00 0f bf fb 41 0f af ff e8 90 ef ff ff 0f bf d8 ff ca 75  .................A.............u
00014160  ed 31 d2 48 8d 8c 24 06 18 00 00 0f bf 3c 11 48 8d 74 24 3c 0f af fb e8 6e ef ff ff 89 c7 48 89  .1.H..$......<.H.t$<....n.....H.
00014180  d0 48 83 ea 02 48 f7 d8 66 89 7c 04 3c 48 81 fa 0e fa ff ff 75 d5 48 8b 14 24 4c 89 f7 e8 d4 ef  .H...H..f.|.<H......u.H..$L.....
000141a0  ff ff 31 c0 66 41 8b 1c 06 8d 93 f7 08 00 00 66 89 54 05 00 48 83 c0 02 48 3d f2 05 00 00 75 e4  ..1.fA.........f.T..H...H=....u.
000141c0  31 c0 66 41 c7 04 44 ef 11 48 ff c0 48 3d f9 02 00 00 75 ee 48 8b 7c 24 20 b9 f9 02 00 00 4c 89  1.fA..D..H..H=....u.H.|$ .....L.
000141e0  e2 48 89 ee e8 f9 f0 ff ff 48 8b 7c 24 08 48 8d b4 24 de 2c 00 00 e8 50 f0 ff ff 48 8b 7c 24 08  .H.......H.|$.H..$.,...P...H.|$.
00014200  48 8b 74 24 10 48 81 c7 bf 00 00 00 e8 3a f0 ff ff 48 8b 84 24 d8 2f 00 00 64 48 2b 04 25 28 00  H.t$.H.......:...H..$./..dH+.%(.
00014220  00 00 74 05 e8 e7 0f ff ff 48 81 c4 e8 2f 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 ca 24 ff ff     ..t......H.../..[]A\A]A^A_..$..

0001423f    void crypto_kem_sntrup761_keypair() __noreturn

0001423f  55                 push    rbp {var_8}
00014240  4889fd             mov     rbp, rdi
00014243  53                 push    rbx {var_10}
00014244  4889f3             mov     rbx, rsi
00014247  51                 push    rcx {var_18}
00014248  e866faffff         call    ZKeyGen
{ Does not return }

0001424d                                         31 c0 8a 54 05 00 88 94 03 7e 01 00 00 48 ff c0 48 3d 86               1..T.....~...H..H=.
00014260  04 00 00 75 ea 48 8d bb 04 06 00 00 be bf 00 00 00 e8 74 41 ff ff 48 89 ea b9 86 04 00 00 48 8d  ...u.H............tA..H.......H.
00014280  bb c3 06 00 00 be 04 00 00 00 e8 e3 f4 ff ff 5a 31 c0 5b 5d e9 70 24 ff ff                       ...............Z1.[].p$..

00014299    void crypto_kem_sntrup761_enc(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00014299  4156               push    r14 {var_8}
0001429b  b986040000         mov     ecx, 0x486
000142a0  4155               push    r13 {var_10}
000142a2  4154               push    r12 {var_18}
000142a4  4989f4             mov     r12, rsi
000142a7  be04000000         mov     esi, 0x4
000142ac  55                 push    rbp {var_20}
000142ad  53                 push    rbx {var_28}
000142ae  4889fb             mov     rbx, rdi
000142b1  4881ecf0030000     sub     rsp, 0x3f0
000142b8  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000142c1  4889ac24e8030000   mov     qword [rsp+0x3e8 {var_30}], rbp
000142c9  4889d5             mov     rbp, rdx
000142cc  4c8d442410         lea     r8, [rsp+0x10 {var_408}]
000142d1  4c8d6c2430         lea     r13, [rsp+0x30 {var_3e8}]
000142d6  4c89c7             mov     rdi, r8 {var_408}
000142d9  4c8db424ef000000   lea     r14, [rsp+0xef {var_329}]
000142e1  4c89442408         mov     qword [rsp+0x8 {var_410}], r8 {var_408}
000142e6  e887f4ffff         call    Hash_prefix
{ Does not return }

000142eb                                   4c 89 f7 e8 85 f1 ff ff 4c 8b 44 24 08 4c 89 f2 4c 89 ee 48 89             L.......L.D$.L..L..H.
00014300  df 48 89 e9 e8 07 f9 ff ff 48 89 d9 4c 89 ea be 01 00 00 00 4c 89 e7 e8 f9 f4 ff ff 48 8b 84 24  .H.......H..L.......L.......H..$
00014320  e8 03 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 dc 0e ff ff 48 81 c4 f0 03 00 00 31 c0 5b 5d 41  ....dH+.%(...t......H......1.[]A
00014340  5c 41 5d 41 5e e9 bf 23 ff ff                                                                    \A]A^..#..

0001434a    void crypto_kem_sntrup761_dec(int64_t arg1, int64_t arg2, void* arg3) __noreturn

0001434a  4157               push    r15 {var_8}
0001434c  4156               push    r14 {var_10}
0001434e  4155               push    r13 {var_18}
00014350  4154               push    r12 {var_20}
00014352  4989f4             mov     r12, rsi
00014355  55                 push    rbp {var_28}
00014356  53                 push    rbx {var_30}
00014357  4881ece82d0000     sub     rsp, 0x2de8
0001435e  48897c2418         mov     qword [rsp+0x18 {var_2e00}], rdi
00014363  4c8db424d7230000   lea     r14, [rsp+0x23d7 {var_a41}]
0001436b  488dac2402120000   lea     rbp, [rsp+0x1202 {var_1c16}]
00014373  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001437c  48899c24d82d0000   mov     qword [rsp+0x2dd8 {var_40}], rbx
00014384  4889d3             mov     rbx, rdx
00014387  488d837e010000     lea     rax, [rbx+0x17e]
0001438e  4889de             mov     rsi, rbx
00014391  4889442408         mov     qword [rsp+0x8 {var_2e10}], rax
00014396  488d83c3060000     lea     rax, [rbx+0x6c3]
0001439d  4889442410         mov     qword [rsp+0x10 {var_2e08}], rax
000143a2  488d8424de200000   lea     rax, [rsp+0x20de {var_d3a}]
000143aa  4889c7             mov     rdi, rax {var_d3a}
000143ad  48890424           mov     qword [rsp {var_2e18}], rax {var_d3a}
000143b1  e8dfeeffff         call    Small_decode
{ Does not return }

000143b6                                                                    48 8d b3 bf 00 00 00 4c 89 f7                        H......L..
000143c0  e8 d0 ee ff ff 31 c0 66 c7 44 45 00 fb 05 48 ff c0 48 3d f9 02 00 00 75 ee 4c 8d ac 24 10 0c 00  .....1.f.DE...H..H=....u.L..$...
000143e0  00 b9 f9 02 00 00 48 89 ea 4c 89 e6 4c 89 ef e8 ae f4 ff ff 31 c0 66 41 6b 54 05 00 03 48 8d 74  ......H..L..L.......1.fAkT...H.t
00014400  24 2c 66 81 ea f7 08 66 89 54 04 2c 48 83 c0 02 48 3d f2 05 00 00 75 de 48 8b 14 24 4c 8d bc 24  $,f....f.T.,H...H=....u.H..$L..$
00014420  1e 06 00 00 4c 89 ff e8 4a ed ff ff 31 d2 41 0f bf 3c 17 8d 3c 7f e8 af ec ff ff 66 41 89 44 15  ....L...J...1.A..<..<......fA.D.
00014440  00 48 83 c2 02 48 81 fa f2 05 00 00 75 e0 31 c9 4c 8d bc 24 d0 26 00 00 41 0f bf 7c 4d 00 e8 6a  .H...H......u.1.L..$.&..A..|M..j
00014460  ec ff ff 41 88 04 0f 48 ff c1 48 81 f9 f9 02 00 00 75 e5 b9 e2 0b 00 00 31 c0 48 89 ef f3 aa 41  ...A...H..H......u......1.H....A
00014480  8a 3c 0f 31 d2 8d 34 11 89 f8 48 63 f6 41 f6 2c 16 48 ff c2 66 01 84 74 02 12 00 00 48 81 fa f9  .<.1..4...Hc.A.,.H..f..t....H...
000144a0  02 00 00 75 e0 48 ff c1 48 81 f9 f9 02 00 00 75 ce 48 89 e8 48 8d 8c 24 f2 17 00 00 48 89 ea 66  ...u.H..H......u.H..H..$....H..f
000144c0  8b b2 f2 05 00 00 66 01 32 48 83 c2 02 48 39 d1 75 ed 66 8b 90 f2 05 00 00 66 01 50 02 48 83 c0  ......f.2H...H9.u.f......f.P.H..
000144e0  02 48 39 c1 75 ec 31 c9 4c 8d ac 24 c9 29 00 00 0f bf 7c 4d 00 e8 d3 eb ff ff 41 88 44 0d 00 48  .H9.u.1.L..$.)....|M......A.D..H
00014500  ff c1 48 81 f9 f9 02 00 00 75 e5 31 c9 31 c0 49 0f be 54 0d 00 48 ff c1 48 83 e2 01 01 d0 48 81  ..H......u.1.1.I..T..H..H.....H.
00014520  f9 f9 02 00 00 75 e8 66 2d 1e 01 48 8d b4 24 e5 1d 00 00 66 31 ff 66 ba ff ff 66 85 c0 66 0f 45  .....u.f-..H..$....f1.f...f..f.E
00014540  fa 31 c0 89 f9 45 8a 44 05 00 48 ff c0 44 89 c2 83 f2 01 21 fa 44 31 c2 88 54 30 ff 48 3d 1e 01  .1...E.D..H..D.....!.D1..T0.H=..
00014560  00 00 75 e1 f7 d1 89 ca 41 8a 4c 05 00 21 d1 88 0c 06 48 ff c0 48 3d f9 02 00 00 75 eb 4c 8b 44  ..u.....A.L..!....H..H=....u.L.D
00014580  24 10 48 8b 4c 24 08 48 89 f2 4c 89 ef 4c 89 fe e8 7b f6 ff ff 31 d2 31 c0 41 8a 0c 14 41 32 4c  $.H.L$.H..L..L...{...1.1.A...A2L
000145a0  15 00 48 ff c2 0f b6 c9 09 c8 48 81 fa 0f 04 00 00 75 e6 0f b7 c0 b9 08 00 00 00 31 d2 ff c8 48  ..H.......H......u.........1...H
000145c0  98 48 d3 f8 48 83 e0 01 89 c6 ff c8 41 8a 3c 17 8a 8c 13 04 06 00 00 31 f9 21 c1 31 f9 41 88 0c  .H..H.......A.<........1.!.1.A..
000145e0  17 48 ff c2 48 81 fa bf 00 00 00 75 df 48 8b 7c 24 18 4c 89 e1 4c 89 fa e8 18 f2 ff ff 48 8b 84  .H..H......u.H.|$.L..L.......H..
00014600  24 d8 2d 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 fb 0b ff ff 48 81 c4 e8 2d 00 00 31 c0 5b 5d  $.-..dH+.%(...t......H...-..1.[]
00014620  41 5c 41 5d 41 5e 41 5f e9 dc 20 ff ff                                                           A\A]A^A_.. ..

0001462d    void libcrux_ml_kem_constant_time_ops_is_non_zero(char arg1) __noreturn

0001462d  400fb6c7           movzx   eax, dil
00014631  f7d8               neg     eax
00014633  66c1e80f           shr     ax, 0xf
00014637  e9cd20ffff         jmp     __x86_return_thunk
{ Does not return }


0001463c    void libcrux_sha3_generic_keccak_new_1e_f4(int64_t arg1) __noreturn

0001463c  31d2               xor     edx, edx  {0x0}
0001463e  4889f8             mov     rax, rdi
00014641  488917             mov     qword [rdi], rdx  {0x0}
00014644  48895708           mov     qword [rdi+0x8], rdx  {0x0}
00014648  48895710           mov     qword [rdi+0x10], rdx  {0x0}
0001464c  48895718           mov     qword [rdi+0x18], rdx  {0x0}
00014650  48895720           mov     qword [rdi+0x20], rdx  {0x0}
00014654  48895728           mov     qword [rdi+0x28], rdx  {0x0}
00014658  48895730           mov     qword [rdi+0x30], rdx  {0x0}
0001465c  48895738           mov     qword [rdi+0x38], rdx  {0x0}
00014660  48895740           mov     qword [rdi+0x40], rdx  {0x0}
00014664  48895748           mov     qword [rdi+0x48], rdx  {0x0}
00014668  48895750           mov     qword [rdi+0x50], rdx  {0x0}
0001466c  48895758           mov     qword [rdi+0x58], rdx  {0x0}
00014670  48895760           mov     qword [rdi+0x60], rdx  {0x0}
00014674  48895768           mov     qword [rdi+0x68], rdx  {0x0}
00014678  48895770           mov     qword [rdi+0x70], rdx  {0x0}
0001467c  48895778           mov     qword [rdi+0x78], rdx  {0x0}
00014680  48899780000000     mov     qword [rdi+0x80], rdx  {0x0}
00014687  48899788000000     mov     qword [rdi+0x88], rdx  {0x0}
0001468e  48899790000000     mov     qword [rdi+0x90], rdx  {0x0}
00014695  48899798000000     mov     qword [rdi+0x98], rdx  {0x0}
0001469c  488997a0000000     mov     qword [rdi+0xa0], rdx  {0x0}
000146a3  488997a8000000     mov     qword [rdi+0xa8], rdx  {0x0}
000146aa  488997b0000000     mov     qword [rdi+0xb0], rdx  {0x0}
000146b1  488997b8000000     mov     qword [rdi+0xb8], rdx  {0x0}
000146b8  488997c0000000     mov     qword [rdi+0xc0], rdx  {0x0}
000146bf  e94520ffff         jmp     __x86_return_thunk
{ Does not return }


000146c4    void libcrux_ml_kem_vector_portable_vector_type_zero(int64_t arg1) __noreturn

000146c4  31d2               xor     edx, edx  {0x0}
000146c6  4889f8             mov     rax, rdi
000146c9  488917             mov     qword [rdi], rdx  {0x0}
000146cc  48895708           mov     qword [rdi+0x8], rdx  {0x0}
000146d0  48895710           mov     qword [rdi+0x10], rdx  {0x0}
000146d4  48895718           mov     qword [rdi+0x18], rdx  {0x0}
000146d8  e92c20ffff         jmp     __x86_return_thunk
{ Does not return }


000146dd    void libcrux_ml_kem_vector_portable_arithmetic_add(int128_t* arg1, int64_t arg2, int128_t arg3) __noreturn

000146dd  4889f8             mov     rax, rdi
000146e0  31d2               xor     edx, edx  {0x0}

000146e2  668b0c56           mov     cx, word [rsi+rdx*2]
000146e6  66014c5408         add     word [rsp+rdx*2+0x8 {arg_8}], cx
000146eb  48ffc2             inc     rdx
000146ee  4883fa10           cmp     rdx, 0x10
000146f2  75ee               jne     0x146e2

000146f4  0f10442408         movups  xmm0, xmmword [rsp+0x8 {arg_8}]
000146f9  0f1100             movups  xmmword [rax], xmm0
000146fc  0f10442418         movups  xmm0, xmmword [rsp+0x18 {arg3}]
00014701  0f114010           movups  xmmword [rax+0x10], xmm0
00014705  e9ff1fffff         jmp     __x86_return_thunk
{ Does not return }


0001470a    void libcrux_ml_kem_vector_portable_arithmetic_sub(int128_t* arg1, int64_t arg2, int128_t arg3) __noreturn

0001470a  4889f8             mov     rax, rdi
0001470d  31d2               xor     edx, edx  {0x0}

0001470f  668b0c56           mov     cx, word [rsi+rdx*2]
00014713  66294c5408         sub     word [rsp+rdx*2+0x8 {arg_8}], cx
00014718  48ffc2             inc     rdx
0001471b  4883fa10           cmp     rdx, 0x10
0001471f  75ee               jne     0x1470f

00014721  0f10442408         movups  xmm0, xmmword [rsp+0x8 {arg_8}]
00014726  0f1100             movups  xmmword [rax], xmm0
00014729  0f10442418         movups  xmm0, xmmword [rsp+0x18 {arg3}]
0001472e  0f114010           movups  xmmword [rax+0x10], xmm0
00014732  e9d21fffff         jmp     __x86_return_thunk
{ Does not return }


00014737    void libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element(int32_t arg1) __noreturn

00014737  89f8               mov     eax, edi
00014739  6669ff01f3         imul    di, di, 0xf301
0001473e  c1f810             sar     eax, 0x10
00014741  0fbfff             movsx   edi, di
00014744  69ff010d0000       imul    edi, edi, 0xd01
0001474a  c1ff10             sar     edi, 0x10
0001474d  29f8               sub     eax, edi
0001474f  e9b51fffff         jmp     __x86_return_thunk
{ Does not return }


00014754    void libcrux_ml_kem_vector_portable_arithmetic_montgomery_multiply_by_constant(int64_t arg1, int16_t arg2, int16_t arg3) __noreturn

00014754  51                 push    rcx {var_8}
00014755  4889fa             mov     rdx, rdi
00014758  0fbff6             movsx   esi, si
0001475b  488d4c2410         lea     rcx, [rsp+0x10 {arg3}]
00014760  4c8d442430         lea     r8, [rsp+0x30 {arg_28}]
00014765  0fbf39             movsx   edi, word [rcx {arg3}]
00014768  4883c102           add     rcx {arg_a}, 0x2
0001476c  0faffe             imul    edi, esi
0001476f  e8c3ffffff         call    libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element
{ Does not return }

00014774                                                              66 89 41 fe 4c 39 c1 75 e8 0f 10 44                      f.A.L9.u...D
00014780  24 10 48 89 d0 0f 11 02 0f 10 44 24 20 0f 11 42 10 5a e9 72 1f ff ff                             $.H.......D$ ..B.Z.r...

00014797    void libcrux_ml_kem_vector_portable_ntt_ntt_step(int64_t arg1, int16_t arg2, int64_t arg3, int64_t arg4) __noreturn

00014797  4989f8             mov     r8, rdi
0001479a  0fbf3c4f           movsx   edi, word [rdi+rcx*2]
0001479e  0fbff6             movsx   esi, si
000147a1  4801d2             add     rdx, rdx
000147a4  4c01c2             add     rdx, r8
000147a7  0faffe             imul    edi, esi
000147aa  e888ffffff         call    libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element
{ Does not return }

000147af                                               66 8b 32 29 c6 66 41 89 34 48 66 01 02 e9 48 1f ff                 f.2).fA.4Hf...H..
000147c0  ff                                                                                               .

000147c1    void libcrux_ml_kem_vector_portable_ntt_inv_ntt_step(int64_t arg1, int16_t arg2, int64_t arg3, int64_t arg4) __noreturn

000147c1  4989f8             mov     r8, rdi
000147c4  668b3c4f           mov     di, word [rdi+rcx*2]
000147c8  0fbff6             movsx   esi, si
000147cb  66458b0c50         mov     r9w, word [r8+rdx*2]
000147d0  468d140f           lea     r10d, [rdi+r9]
000147d4  4429cf             sub     edi, r9d
000147d7  410fbfc2           movsx   eax, r10w
000147db  0fbfff             movsx   edi, di
000147de  69c0bf4e0000       imul    eax, eax, 0x4ebf
000147e4  0faffe             imul    edi, esi
000147e7  0500000002         add     eax, 0x2000000
000147ec  c1f81a             sar     eax, 0x1a
000147ef  6669c0fff2         imul    ax, ax, 0xf2ff
000147f4  4401d0             add     eax, r10d
000147f7  6641890450         mov     word [r8+rdx*2], ax
000147fc  e836ffffff         call    libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element
{ Does not return }

00014801     66 41 89 04 48 e9 fe 1e ff ff                                                                  fA..H.....

0001480b    void libcrux_ml_kem_vector_portable_ntt_ntt_multiply_binomials(int64_t arg1, int64_t arg2, int16_t arg3, int64_t arg4, int64_t arg5) __noreturn

0001480b  55                 push    rbp {var_8}
0001480c  4889f0             mov     rax, rsi
0001480f  89d6               mov     esi, edx
00014811  53                 push    rbx {var_10}
00014812  460fbf1c47         movsx   r11d, word [rdi+r8*2]
00014817  0fbff6             movsx   esi, si
0001481a  420fbf2c40         movsx   ebp, word [rax+r8*2]
0001481f  0fbf144f           movsx   edx, word [rdi+rcx*2]
00014823  4489df             mov     edi, r11d
00014826  440fbf1448         movsx   r10d, word [rax+rcx*2]
0001482b  0faffd             imul    edi, ebp
0001482e  89d3               mov     ebx, edx
00014830  410fafda           imul    ebx, r10d
00014834  0fafd5             imul    edx, ebp
00014837  e8fbfeffff         call    libcrux_ml_kem_vector_portable_arithmetic_montgomery_reduce_element
{ Does not return }

0001483c                                                                                      45 0f af d3                              E...
00014840  0f bf f8 0f af fe 01 df e8 ea fe ff ff 42 8d 3c 12 89 c6 e8 df fe ff ff 66 41 89 34 49 66 43 89  .............B.<........fA.4IfC.
00014860  04 41 5b 5d e9 a0 1e ff ff                                                                       .A[].....

00014869    void libcrux_ml_kem_polynomial_ZERO_89_ea() __noreturn

00014869  4883ec38           sub     rsp, 0x38
0001486d  64488b0c25280000…  mov     rcx, qword [fs:0x28]
00014876  48894c2428         mov     qword [rsp+0x28 {var_10}], rcx
0001487b  4889f9             mov     rcx, rdi
0001487e  488d7c2408         lea     rdi, [rsp+0x8 {var_30}]
00014883  e83cfeffff         call    libcrux_ml_kem_vector_portable_vector_type_zero
{ Does not return }

00014888                          0f 10 44 24 08 0f 11 01 0f 10 44 24 18 0f 11 41 10 e8 26 fe ff ff 0f 10          ..D$......D$...A..&.....
000148a0  44 24 08 0f 11 41 20 0f 10 44 24 18 0f 11 41 30 e8 0f fe ff ff 0f 10 44 24 08 0f 11 41 40 0f 10  D$...A ..D$...A0.......D$...A@..
000148c0  44 24 18 0f 11 41 50 e8 f8 fd ff ff 0f 10 44 24 08 0f 11 41 60 0f 10 44 24 18 0f 11 41 70 e8 e1  D$...AP.......D$...A`..D$...Ap..
000148e0  fd ff ff 0f 10 44 24 08 0f 11 81 80 00 00 00 0f 10 44 24 18 0f 11 81 90 00 00 00 e8 c4 fd ff ff  .....D$..........D$.............
00014900  0f 10 44 24 08 0f 11 81 a0 00 00 00 0f 10 44 24 18 0f 11 81 b0 00 00 00 e8 a7 fd ff ff 0f 10 44  ..D$..........D$...............D
00014920  24 08 0f 11 81 c0 00 00 00 0f 10 44 24 18 0f 11 81 d0 00 00 00 e8 8a fd ff ff 0f 10 44 24 08 0f  $..........D$...............D$..
00014940  11 81 e0 00 00 00 0f 10 44 24 18 0f 11 81 f0 00 00 00 e8 6d fd ff ff 0f 10 44 24 08 0f 11 81 00  ........D$.........m.....D$.....
00014960  01 00 00 0f 10 44 24 18 0f 11 81 10 01 00 00 e8 50 fd ff ff 0f 10 44 24 08 0f 11 81 20 01 00 00  .....D$.........P.....D$.... ...
00014980  0f 10 44 24 18 0f 11 81 30 01 00 00 e8 33 fd ff ff 0f 10 44 24 08 0f 11 81 40 01 00 00 0f 10 44  ..D$....0....3.....D$....@.....D
000149a0  24 18 0f 11 81 50 01 00 00 e8 16 fd ff ff 0f 10 44 24 08 0f 11 81 60 01 00 00 0f 10 44 24 18 0f  $....P..........D$....`.....D$..
000149c0  11 81 70 01 00 00 e8 f9 fc ff ff 0f 10 44 24 08 0f 11 81 80 01 00 00 0f 10 44 24 18 0f 11 81 90  ..p..........D$..........D$.....
000149e0  01 00 00 e8 dc fc ff ff 0f 10 44 24 08 0f 11 81 a0 01 00 00 0f 10 44 24 18 0f 11 81 b0 01 00 00  ..........D$..........D$........
00014a00  e8 bf fc ff ff 0f 10 44 24 08 0f 11 81 c0 01 00 00 0f 10 44 24 18 0f 11 81 d0 01 00 00 e8 a2 fc  .......D$..........D$...........
00014a20  ff ff 0f 10 44 24 08 0f 11 81 e0 01 00 00 0f 10 44 24 18 0f 11 81 f0 01 00 00 48 8b 44 24 28 64  ....D$..........D$........H.D$(d
00014a40  48 2b 04 25 28 00 00 00 74 05 e8 c1 07 ff ff 48 89 c8 48 83 c4 38 e9 ae 1c ff ff                 H+.%(...t......H..H..8.....

00014a5b    void libcrux_ml_kem_polynomial_ntt_multiply_89_2a() __noreturn

00014a5b  4157               push    r15 {var_8}
00014a5d  4156               push    r14 {var_10}
00014a5f  4989fe             mov     r14, rdi
00014a62  4155               push    r13 {var_18}
00014a64  4154               push    r12 {var_20}
00014a66  55                 push    rbp {var_28}
00014a67  53                 push    rbx {var_30}
00014a68  4881ec88000000     sub     rsp, 0x88
00014a6f  4889742418         mov     qword [rsp+0x18 {var_a0}], rsi
00014a74  644c8b3c25280000…  mov     r15, qword [fs:0x28]
00014a7d  4c897c2478         mov     qword [rsp+0x78 {var_40}], r15
00014a82  4989d7             mov     r15, rdx
00014a85  e8dffdffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }

00014a8a                                4c 8d 1d 8f 38 02 00 45 31 d2 4c 8d 4c 24 58 4b 8d 04 17 45 8b ab            L...8..E1.L.L$XK...E..
00014aa0  80 00 00 00 4c 89 cf 31 c9 48 89 44 24 08 48 8b 44 24 18 41 b8 01 00 00 00 66 41 8b 9b 86 00 00  ....L..1.H.D$.H.D$.A.....fA.....
00014ac0  00 41 8b ab 84 00 00 00 4c 89 5c 24 28 4c 01 d0 66 45 8b a3 82 00 00 00 4c 89 54 24 20 48 89 44  .A......L.\$(L..fE......L.T$ H.D
00014ae0  24 10 e8 dd fb ff ff 48 8b 74 24 08 48 8b 7c 24 10 41 0f bf d5 41 f7 dd e8 0e fd ff ff 48 8b 74  $......H.t$.H.|$.A...A.......H.t
00014b00  24 08 48 8b 7c 24 10 41 0f bf d5 41 b8 03 00 00 00 b9 02 00 00 00 e8 f0 fc ff ff 48 8b 74 24 08  $.H.|$.A...A...............H.t$.
00014b20  48 8b 7c 24 10 41 0f bf d4 41 b8 05 00 00 00 b9 04 00 00 00 41 f7 dc e8 cf fc ff ff 48 8b 74 24  H.|$.A...A..........A.......H.t$
00014b40  08 48 8b 7c 24 10 41 0f bf d4 41 b8 07 00 00 00 b9 06 00 00 00 e8 b1 fc ff ff 48 8b 74 24 08 48  .H.|$.A...A...............H.t$.H
00014b60  8b 7c 24 10 0f bf d5 41 b8 09 00 00 00 b9 08 00 00 00 f7 dd e8 92 fc ff ff 48 8b 74 24 08 48 8b  .|$....A.................H.t$.H.
00014b80  7c 24 10 0f bf d5 41 b8 0b 00 00 00 b9 0a 00 00 00 e8 75 fc ff ff 48 8b 74 24 08 48 8b 7c 24 10  |$....A...........u...H.t$.H.|$.
00014ba0  0f bf d3 41 b8 0d 00 00 00 b9 0c 00 00 00 f7 db e8 56 fc ff ff 48 8b 74 24 08 48 8b 7c 24 10 0f  ...A.............V...H.t$.H.|$..
00014bc0  bf d3 41 b8 0f 00 00 00 b9 0e 00 00 00 e8 39 fc ff ff 4c 8b 54 24 20 0f 10 44 24 58 4c 8b 5c 24  ..A...........9...L.T$ ..D$XL.\$
00014be0  28 43 0f 11 04 32 0f 10 44 24 68 49 83 c2 20 49 83 c3 08 43 0f 11 44 32 f0 49 81 fa 00 02 00 00  (C...2..D$hI.. I...C..D2.I......
00014c00  0f 85 93 fe ff ff 48 8b 54 24 78 64 48 2b 14 25 28 00 00 00 74 05 e8 f5 05 ff ff 48 81 c4 88 00  ......H.T$xdH+.%(...t......H....
00014c20  00 00 4c 89 f0 5b 5d 41 5c 41 5d 41 5e 41 5f e9 d5 1a ff ff                                      ..L..[]A\A]A^A_.....

00014c34    void libcrux_ml_kem_polynomial_add_to_ring_element_89_84(void* arg1, int64_t arg2) __noreturn

00014c34  4883ec58           sub     rsp, 0x58
00014c38  4989f9             mov     r9, rdi
00014c3b  4531c0             xor     r8d, r8d  {0x0}
00014c3e  644c8b1425280000…  mov     r10, qword [fs:0x28]
00014c47  4c89542448         mov     qword [rsp+0x48 {var_10}], r10
00014c4c  4989f2             mov     r10, rsi
00014c4f  488d7c2408         lea     rdi, [rsp+0x8 {var_50}]
00014c54  430f10440110       movups  xmm0, xmmword [r9+r8+0x10]
00014c5a  430f100c01         movups  xmm1, xmmword [r9+r8]
00014c5f  4883ec20           sub     rsp, 0x20
00014c63  4b8d3402           lea     rsi, [r10+r8]
00014c67  0f114c2448         movups  xmmword [rsp+0x48 {var_30}], xmm1
00014c6c  0f11442458         movups  xmmword [rsp+0x58 {var_20}], xmm0
00014c71  0f11442410         movups  xmmword [rsp+0x10 {var_68}], xmm0
00014c76  0f110c24           movups  xmmword [rsp {var_78}], xmm1
00014c7a  e85efaffff         call    libcrux_ml_kem_vector_portable_arithmetic_add
{ Does not return }

00014c7f                                                                                               0f                                 .
00014c80  10 44 24 28 43 0f 11 04 01 0f 10 44 24 38 48 83 c4 20 43 0f 11 44 01 10 49 83 c0 20 49 81 f8 00  .D$(C......D$8H.. C..D..I.. I...
00014ca0  02 00 00 75 af 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8 56 05 ff ff 48 83 c4 58 e9 46  ...u.H.D$HdH+.%(...t..V...H..X.F
00014cc0  1a ff ff                                                                                         ...

00014cc3    void libcrux_ml_kem_vector_traits_to_unsigned_representative_db(int128_t* arg1, int128_t arg2, int128_t arg3) __noreturn

00014cc3  4881ec98000000     sub     rsp, 0x98
00014cca  64488b0425280000…  mov     rax, qword [fs:0x28]
00014cd3  4889842488000000   mov     qword [rsp+0x88 {var_10}], rax
00014cdb  31c0               xor     eax, eax  {0x0}
00014cdd  0f108c24a0000000   movups  xmm1, xmmword [rsp+0xa0 {arg2}]
00014ce5  488d4c2468         lea     rcx, [rsp+0x68 {var_30}]
00014cea  0f108424b0000000   movups  xmm0, xmmword [rsp+0xb0 {arg3}]
00014cf2  488d842488000000   lea     rax, [rsp+0x88 {var_10}]
00014cfa  4889ca             mov     rdx, rcx {var_30}
00014cfd  0f114c2448         movups  xmmword [rsp+0x48 {var_50}], xmm1
00014d02  0f11442458         movups  xmmword [rsp+0x58 {var_40}], xmm0
00014d07  0f114c2468         movups  xmmword [rsp+0x68 {var_30}], xmm1
00014d0c  0f11442478         movups  xmmword [rsp+0x78 {var_20}], xmm0

00014d11  66c1390f           sar     word [rcx], 0xf
00014d15  4883c102           add     rcx, 0x2
00014d19  4839c1             cmp     rcx, rax {var_10}
00014d1c  75f3               jne     0x14d11

00014d1e  0f105c2468         movups  xmm3, xmmword [rsp+0x68 {var_30}]
00014d23  0f10542478         movups  xmm2, xmmword [rsp+0x78 {var_20}]
00014d28  0f115c2408         movups  xmmword [rsp+0x8 {var_90}], xmm3
00014d2d  0f11542418         movups  xmmword [rsp+0x18 {var_80}], xmm2
00014d32  0f115c2448         movups  xmmword [rsp+0x48 {var_50_1}], xmm3
00014d37  0f11542458         movups  xmmword [rsp+0x58 {var_40_1}], xmm2

00014d3c  668122010d         and     word [rdx], 0xd01
00014d41  4883c202           add     rdx, 0x2
00014d45  4839c2             cmp     rdx, rax {var_10}
00014d48  75f2               jne     0x14d3c

00014d4a  0f10542468         movups  xmm2, xmmword [rsp+0x68 {var_30}]
00014d4f  488d742428         lea     rsi, [rsp+0x28 {var_70}]
00014d54  0f114c2468         movups  xmmword [rsp+0x68 {var_30}], xmm1
00014d59  4883ec20           sub     rsp, 0x20
00014d5d  0f11542448         movups  xmmword [rsp+0x48 {var_70}], xmm2
00014d62  0f10942498000000   movups  xmm2, xmmword [rsp+0x98 {var_20}]
00014d6a  0f11842498000000   movups  xmmword [rsp+0x98 {var_20_1}], xmm0
00014d72  0f11542458         movups  xmmword [rsp+0x58 {var_60}], xmm2
00014d77  0f110c24           movups  xmmword [rsp {var_b8}], xmm1
00014d7b  0f11442410         movups  xmmword [rsp+0x10 {var_a8}], xmm0
00014d80  e858f9ffff         call    libcrux_ml_kem_vector_portable_arithmetic_add
{ Does not return }


00014d85    void sub_14d85(int64_t arg1) __noreturn

00014d85  4883c420           add     rsp, 0x20
00014d89  488b842488000000   mov     rax, qword [rsp+0x88 {arg1}]
00014d91  64482b0425280000…  sub     rax, qword [fs:0x28]
00014d9a  7405               je      0x14da1

00014d9c  e86f04ffff         call    __stack_chk_fail
{ Does not return }

00014da1  4889f8             mov     rax, rdi
00014da4  4881c498000000     add     rsp, 0x98
00014dab  e95919ffff         jmp     __x86_return_thunk
{ Does not return }


00014db0    void libcrux_sha3_portable_keccak_slice_n_5a(int64_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4) __noreturn

00014db0  480337             add     rsi, qword [rdi]
00014db3  48895108           mov     qword [rcx+0x8], rdx
00014db7  488931             mov     qword [rcx], rsi
00014dba  e94a19ffff         jmp     __x86_return_thunk
{ Does not return }


00014dbf    void libcrux_sha3_portable_keccak_store_block_58(int64_t arg1, int64_t* arg2) __noreturn

00014dbf  31c9               xor     ecx, ecx  {0x0}
00014dc1  41b805000000       mov     r8d, 0x5

00014dc7  4889c8             mov     rax, rcx
00014dca  31d2               xor     edx, edx  {0x0}
00014dcc  49f7f0             div     r8  {0x5}
00014dcf  486bc028           imul    rax, rax, 0x28
00014dd3  4801f8             add     rax, rdi
00014dd6  488b14d0           mov     rdx, qword [rax+rdx*8]
00014dda  488b06             mov     rax, qword [rsi]
00014ddd  488914c8           mov     qword [rax+rcx*8], rdx
00014de1  48ffc1             inc     rcx
00014de4  4883f909           cmp     rcx, 0x9
00014de8  75dd               jne     0x14dc7

00014dea  e91a19ffff         jmp     __x86_return_thunk
{ Does not return }


00014def    void libcrux_sha3_portable_keccak_store_block_full_2d(int64_t arg1) __noreturn

00014def  4881ecb8010000     sub     rsp, 0x1b8
00014df6  4889fa             mov     rdx, rdi
00014df9  b932000000         mov     ecx, 0x32
00014dfe  4989f1             mov     r9, rsi
00014e01  64488b0425280000…  mov     rax, qword [fs:0x28]
00014e0a  48898424a8010000   mov     qword [rsp+0x1a8 {var_10}], rax
00014e12  31c0               xor     eax, eax  {0x0}
00014e14  488d7c2418         lea     rdi, [rsp+0x18 {s}]
00014e19  4c8d542418         lea     r10, [rsp+0x18 {s}]
00014e1e  4889e6             mov     rsi, rsp {var_1b8}
00014e21  4c891424           mov     qword [rsp {var_1b8}], r10 {s}
00014e25  f3ab               rep stosd dword [rdi] {var_268} {s}  {0x0}
00014e27  4889d7             mov     rdi, rdx
00014e2a  e890ffffff         call    libcrux_sha3_portable_keccak_store_block_58
{ Does not return }

00014e2f                                               48 8d bc 24 e0 00 00 00 b9 32 00 00 00 4c 89 d6 f3                 H..$.....2...L...
00014e40  a5 48 8d b4 24 e0 00 00 00 b9 32 00 00 00 4c 89 cf f3 a5 48 8b 84 24 a8 01 00 00 64 48 2b 04 25  .H..$.....2...L....H..$....dH+.%
00014e60  28 00 00 00 74 05 e8 a5 03 ff ff 48 81 c4 b8 01 00 00 e9 92 18 ff ff                             (...t......H...........

00014e77    void unwrap_41_ac(int64_t arg1, char arg2, int64_t* arg3) __noreturn

00014e77  4883ec18           sub     rsp, 0x18
00014e7b  48893c24           mov     qword [rsp {var_18}], rdi
00014e7f  4088742408         mov     byte [rsp+0x8 {var_10}], sil
00014e84  4084ff             test    dil, dil
00014e87  7511               jne     0x14e9a

00014e89  488b442401         mov     rax, qword [rsp+0x1 {var_18+0x1}]
00014e8e  488902             mov     qword [rdx], rax
00014e91  4883c418           add     rsp, 0x18
00014e95  e96f18ffff         jmp     __x86_return_thunk
{ Does not return }

00014e9a  488d3db7050200     lea     rdi, [rel data_35458]  {"mlkem"}
00014ea1  31c0               xor     eax, eax  {0x0}
00014ea3  e8290dffff         call    dropbear_exit
{ Does not return }


00014ea8    void libcrux_sha3_generic_keccak_keccakf1600_21(int64_t* arg1) __noreturn

00014ea8  4157               push    r15 {__saved_r15}
00014eaa  4c8d0d6f350200     lea     r9, [rel libcrux_sha3_generic_keccak_ROUNDCONSTANTS]
00014eb1  41bb05000000       mov     r11d, 0x5
00014eb7  4156               push    r14 {__saved_r14}
00014eb9  4155               push    r13 {__saved_r13}
00014ebb  4154               push    r12 {__saved_r12}
00014ebd  55                 push    rbp {__saved_rbp}
00014ebe  53                 push    rbx {__saved_rbx}
00014ebf  498d99c0000000     lea     rbx, [r9+0xc0]  {__PRETTY_FUNCTION__.0, "svr_auth_pubkey"}
00014ec6  4881ecd8000000     sub     rsp, 0xd8
00014ecd  644c8b0425280000…  mov     r8, qword [fs:0x28]
00014ed6  4c898424c8000000   mov     qword [rsp+0xc8 {var_40}], r8
00014ede  4989f8             mov     r8, rdi
00014ee1  4989e2             mov     r10, rsp {var_108}

00014ee4  4d8b7028           mov     r14, qword [r8+0x28]
00014ee8  4d8b38             mov     r15, qword [r8]
00014eeb  498b80a0000000     mov     rax, qword [r8+0xa0]
00014ef2  498bb0b0000000     mov     rsi, qword [r8+0xb0]
00014ef9  49334078           xor     rax, qword [r8+0x78]
00014efd  4933b088000000     xor     rsi, qword [r8+0x88]
00014f04  49334050           xor     rax, qword [r8+0x50]
00014f08  49337060           xor     rsi, qword [r8+0x60]
00014f0c  49337038           xor     rsi, qword [r8+0x38]
00014f10  49337010           xor     rsi, qword [r8+0x10]
00014f14  4c31f0             xor     rax, r14
00014f17  498bb8a8000000     mov     rdi, qword [r8+0xa8]
00014f1e  4989f4             mov     r12, rsi
00014f21  4933b880000000     xor     rdi, qword [r8+0x80]
00014f28  4c31f8             xor     rax, r15
00014f2b  49337858           xor     rdi, qword [r8+0x58]
00014f2f  49337830           xor     rdi, qword [r8+0x30]
00014f33  49d1c4             rol     r12, 0x1
00014f36  49337808           xor     rdi, qword [r8+0x8]
00014f3a  4931c4             xor     r12, rax
00014f3d  498b88b8000000     mov     rcx, qword [r8+0xb8]
00014f44  48d1c0             rol     rax, 0x1
00014f47  4989fd             mov     r13, rdi
00014f4a  49338890000000     xor     rcx, qword [r8+0x90]
00014f51  498b90c0000000     mov     rdx, qword [r8+0xc0]
00014f58  49334868           xor     rcx, qword [r8+0x68]
00014f5c  49339098000000     xor     rdx, qword [r8+0x98]
00014f63  49d1c5             rol     r13, 0x1
00014f66  49334840           xor     rcx, qword [r8+0x40]
00014f6a  49335070           xor     rdx, qword [r8+0x70]
00014f6e  49334818           xor     rcx, qword [r8+0x18]
00014f72  49335048           xor     rdx, qword [r8+0x48]
00014f76  49335020           xor     rdx, qword [r8+0x20]
00014f7a  4831c8             xor     rax, rcx
00014f7d  4889cd             mov     rbp, rcx
00014f80  498b4850           mov     rcx, qword [r8+0x50]
00014f84  4931d5             xor     r13, rdx
00014f87  48d1c5             rol     rbp, 0x1
00014f8a  48d1c2             rol     rdx, 0x1
00014f8d  4d31ee             xor     r14, r13
00014f90  4831fd             xor     rbp, rdi
00014f93  4d31ef             xor     r15, r13
00014f96  4831f2             xor     rdx, rsi
00014f99  49c1ce1c           ror     r14, 0x1c
00014f9d  4c31e9             xor     rcx, r13
00014fa0  4d8938             mov     qword [r8], r15
00014fa3  48c1c103           rol     rcx, 0x3
00014fa7  4d897028           mov     qword [r8+0x28], r14
00014fab  4c89d7             mov     rdi, r10 {var_108}
00014fae  4c89c6             mov     rsi, r8
00014fb1  49894850           mov     qword [r8+0x50], rcx
00014fb5  498b4878           mov     rcx, qword [r8+0x78]
00014fb9  4c31e9             xor     rcx, r13
00014fbc  48c1c917           ror     rcx, 0x17
00014fc0  49894878           mov     qword [r8+0x78], rcx
00014fc4  498b88a0000000     mov     rcx, qword [r8+0xa0]
00014fcb  4c31e9             xor     rcx, r13
00014fce  48c1c112           rol     rcx, 0x12
00014fd2  498988a0000000     mov     qword [r8+0xa0], rcx
00014fd9  498b4808           mov     rcx, qword [r8+0x8]
00014fdd  4c31e1             xor     rcx, r12
00014fe0  48d1c1             rol     rcx, 0x1
00014fe3  49894808           mov     qword [r8+0x8], rcx
00014fe7  498b4830           mov     rcx, qword [r8+0x30]
00014feb  4c31e1             xor     rcx, r12
00014fee  48c1c914           ror     rcx, 0x14
00014ff2  49894830           mov     qword [r8+0x30], rcx
00014ff6  498b4858           mov     rcx, qword [r8+0x58]
00014ffa  4c31e1             xor     rcx, r12
00014ffd  48c1c10a           rol     rcx, 0xa
00015001  49894858           mov     qword [r8+0x58], rcx
00015005  498b8880000000     mov     rcx, qword [r8+0x80]
0001500c  4c31e1             xor     rcx, r12
0001500f  48c1c913           ror     rcx, 0x13
00015013  49898880000000     mov     qword [r8+0x80], rcx
0001501a  498b88a8000000     mov     rcx, qword [r8+0xa8]
00015021  4c31e1             xor     rcx, r12
00015024  48c1c102           rol     rcx, 0x2
00015028  498988a8000000     mov     qword [r8+0xa8], rcx
0001502f  498b4810           mov     rcx, qword [r8+0x10]
00015033  4831e9             xor     rcx, rbp
00015036  48c1c902           ror     rcx, 0x2
0001503a  49894810           mov     qword [r8+0x10], rcx
0001503e  498b4838           mov     rcx, qword [r8+0x38]
00015042  4831e9             xor     rcx, rbp
00015045  48c1c106           rol     rcx, 0x6
00015049  49894838           mov     qword [r8+0x38], rcx
0001504d  498b4860           mov     rcx, qword [r8+0x60]
00015051  4831e9             xor     rcx, rbp
00015054  48c1c915           ror     rcx, 0x15
00015058  49894860           mov     qword [r8+0x60], rcx
0001505c  498b8888000000     mov     rcx, qword [r8+0x88]
00015063  4831e9             xor     rcx, rbp
00015066  48c1c10f           rol     rcx, 0xf
0001506a  49898888000000     mov     qword [r8+0x88], rcx
00015071  498b88b0000000     mov     rcx, qword [r8+0xb0]
00015078  4831e9             xor     rcx, rbp
0001507b  48c1c903           ror     rcx, 0x3
0001507f  498988b0000000     mov     qword [r8+0xb0], rcx
00015086  498b4818           mov     rcx, qword [r8+0x18]
0001508a  4831d1             xor     rcx, rdx
0001508d  48c1c11c           rol     rcx, 0x1c
00015091  49894818           mov     qword [r8+0x18], rcx
00015095  498b4840           mov     rcx, qword [r8+0x40]
00015099  4831d1             xor     rcx, rdx
0001509c  48c1c909           ror     rcx, 0x9
000150a0  49894840           mov     qword [r8+0x40], rcx
000150a4  498b4868           mov     rcx, qword [r8+0x68]
000150a8  4831d1             xor     rcx, rdx
000150ab  48c1c119           rol     rcx, 0x19
000150af  49894868           mov     qword [r8+0x68], rcx
000150b3  498b8890000000     mov     rcx, qword [r8+0x90]
000150ba  4831d1             xor     rcx, rdx
000150bd  493390b8000000     xor     rdx, qword [r8+0xb8]
000150c4  48c1ca08           ror     rdx, 0x8
000150c8  48c1c115           rol     rcx, 0x15
000150cc  498990b8000000     mov     qword [r8+0xb8], rdx
000150d3  498b5020           mov     rdx, qword [r8+0x20]
000150d7  49898890000000     mov     qword [r8+0x90], rcx
000150de  b932000000         mov     ecx, 0x32
000150e3  4831c2             xor     rdx, rax
000150e6  48c1c21b           rol     rdx, 0x1b
000150ea  49895020           mov     qword [r8+0x20], rdx
000150ee  498b5048           mov     rdx, qword [r8+0x48]
000150f2  4831c2             xor     rdx, rax
000150f5  48c1c214           rol     rdx, 0x14
000150f9  49895048           mov     qword [r8+0x48], rdx
000150fd  498b5070           mov     rdx, qword [r8+0x70]
00015101  4831c2             xor     rdx, rax
00015104  48c1ca19           ror     rdx, 0x19
00015108  49895070           mov     qword [r8+0x70], rdx
0001510c  498b9098000000     mov     rdx, qword [r8+0x98]
00015113  4831c2             xor     rdx, rax
00015116  493380c0000000     xor     rax, qword [r8+0xc0]
0001511d  48c1c00e           rol     rax, 0xe
00015121  48c1c208           rol     rdx, 0x8
00015125  498980c0000000     mov     qword [r8+0xc0], rax
0001512c  49899098000000     mov     qword [r8+0x98], rdx
00015133  f3a5               rep movsd dword [rdi], [rsi] {var_1d0} {var_108}  {0x0}
00015135  b932000000         mov     ecx, 0x32
0001513a  4c89d7             mov     rdi, r10 {var_108}
0001513d  4c89c6             mov     rsi, r8
00015140  488b442430         mov     rax, qword [rsp+0x30 {var_d8}]
00015145  49894008           mov     qword [r8+0x8], rax
00015149  488b442460         mov     rax, qword [rsp+0x60 {var_a8}]
0001514e  49894010           mov     qword [r8+0x10], rax
00015152  488b842490000000   mov     rax, qword [rsp+0x90 {var_78}]
0001515a  49894018           mov     qword [r8+0x18], rax
0001515e  488b8424c0000000   mov     rax, qword [rsp+0xc0 {var_48}]
00015166  49894020           mov     qword [r8+0x20], rax
0001516a  488b442418         mov     rax, qword [rsp+0x18 {var_f0}]
0001516f  49894028           mov     qword [r8+0x28], rax
00015173  488b442448         mov     rax, qword [rsp+0x48 {var_c0}]
00015178  49894030           mov     qword [r8+0x30], rax
0001517c  488b442450         mov     rax, qword [rsp+0x50 {var_b8}]
00015181  49894038           mov     qword [r8+0x38], rax
00015185  488b842480000000   mov     rax, qword [rsp+0x80 {var_88}]
0001518d  49894040           mov     qword [r8+0x40], rax
00015191  488b8424b0000000   mov     rax, qword [rsp+0xb0 {var_58}]
00015199  49894048           mov     qword [r8+0x48], rax
0001519d  488b442408         mov     rax, qword [rsp+0x8 {var_100}]
000151a2  49894050           mov     qword [r8+0x50], rax
000151a6  488b442438         mov     rax, qword [rsp+0x38 {var_d0}]
000151ab  49894058           mov     qword [r8+0x58], rax
000151af  488b442468         mov     rax, qword [rsp+0x68 {var_a0}]
000151b4  49894060           mov     qword [r8+0x60], rax
000151b8  488b842498000000   mov     rax, qword [rsp+0x98 {var_70}]
000151c0  49894068           mov     qword [r8+0x68], rax
000151c4  488b8424a0000000   mov     rax, qword [rsp+0xa0 {var_68}]
000151cc  49894070           mov     qword [r8+0x70], rax
000151d0  488b442420         mov     rax, qword [rsp+0x20 {var_e8}]
000151d5  49894078           mov     qword [r8+0x78], rax
000151d9  488b442428         mov     rax, qword [rsp+0x28 {var_e0}]
000151de  49898080000000     mov     qword [r8+0x80], rax
000151e5  488b442458         mov     rax, qword [rsp+0x58 {var_b0}]
000151ea  49898088000000     mov     qword [r8+0x88], rax
000151f1  488b842488000000   mov     rax, qword [rsp+0x88 {var_80}]
000151f9  49898090000000     mov     qword [r8+0x90], rax
00015200  488b8424b8000000   mov     rax, qword [rsp+0xb8 {var_50}]
00015208  49898098000000     mov     qword [r8+0x98], rax
0001520f  488b442410         mov     rax, qword [rsp+0x10 {var_f8}]
00015214  498980a0000000     mov     qword [r8+0xa0], rax
0001521b  488b442440         mov     rax, qword [rsp+0x40 {var_c8}]
00015220  498980a8000000     mov     qword [r8+0xa8], rax
00015227  488b442470         mov     rax, qword [rsp+0x70 {var_98}]
0001522c  498980b0000000     mov     qword [r8+0xb0], rax
00015233  488b442478         mov     rax, qword [rsp+0x78 {var_90}]
00015238  498980b8000000     mov     qword [r8+0xb8], rax
0001523f  488b8424a8000000   mov     rax, qword [rsp+0xa8 {var_60}]
00015247  498980c0000000     mov     qword [r8+0xc0], rax
0001524e  f3a5               rep movsd dword [rdi], [rsi] {var_1d0} {var_108}  {0x0}
00015250  31ff               xor     edi, edi  {0x0}

00015252  486bf728           imul    rsi, rdi, 0x28
00015256  31c9               xor     ecx, ecx  {0x0}
00015258  488d2cbf           lea     rbp, [rdi+rdi*4]
0001525c  4c01c6             add     rsi, r8

0001525f  4889c8             mov     rax, rcx
00015262  31d2               xor     edx, edx  {0x0}
00015264  48ffc1             inc     rcx
00015267  4883c002           add     rax, 0x2
0001526b  49f7f3             div     r11  {0x5}
0001526e  4889c8             mov     rax, rcx
00015271  4c8d641500         lea     r12, [rbp+rdx]
00015276  31d2               xor     edx, edx  {0x0}
00015278  49f7f3             div     r11  {0x5}
0001527b  4801ea             add     rdx, rbp
0001527e  488b04d4           mov     rax, qword [rsp+rdx*8] {var_108}
00015282  48f7d0             not     rax
00015285  4a2304e4           and     rax, qword [rsp+r12*8] {var_108}
00015289  483106             xor     qword [rsi], rax
0001528c  4883c608           add     rsi, 0x8
00015290  4883f905           cmp     rcx, 0x5
00015294  75c9               jne     0x1525f

00015296  48ffc7             inc     rdi
00015299  4883ff05           cmp     rdi, 0x5
0001529d  75b3               jne     0x15252

0001529f  498b01             mov     rax, qword [r9]
000152a2  4983c108           add     r9, 0x8
000152a6  493100             xor     qword [r8], rax
000152a9  4c39cb             cmp     rbx, r9
000152ac  0f8532fcffff       jne     0x14ee4

000152b2  488b8424c8000000   mov     rax, qword [rsp+0xc8 {var_40}]
000152ba  64482b0425280000…  sub     rax, qword [fs:0x28]
000152c3  7405               je      0x152ca

000152c5  e846fffeff         call    __stack_chk_fail
{ Does not return }

000152ca  4881c4d8000000     add     rsp, 0xd8
000152d1  5b                 pop     rbx {__saved_rbx}
000152d2  5d                 pop     rbp {__saved_rbp}
000152d3  415c               pop     r12 {__saved_r12}
000152d5  415d               pop     r13 {__saved_r13}
000152d7  415e               pop     r14 {__saved_r14}
000152d9  415f               pop     r15 {__saved_r15}
000152db  e92914ffff         jmp     __x86_return_thunk
{ Does not return }


000152e0    void libcrux_ml_kem_ntt_ntt_at_layer_1_a2.constprop.0(int64_t* arg1, int128_t* arg2) __noreturn

000152e0  4157               push    r15 {var_8}
000152e2  4989f1             mov     r9, rsi
000152e5  4156               push    r14 {var_10}
000152e7  4c8d3532300200     lea     r14, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
000152ee  4155               push    r13 {var_18}
000152f0  4c8dae00020000     lea     r13, [rsi+0x200]
000152f7  4154               push    r12 {var_20}
000152f9  55                 push    rbp {var_28}
000152fa  53                 push    rbx {var_30}
000152fb  4881ec88000000     sub     rsp, 0x88
00015302  644c8b1c25280000…  mov     r11, qword [fs:0x28]
0001530b  4c895c2478         mov     qword [rsp+0x78 {var_40}], r11
00015310  4989fb             mov     r11, rdi
00015313  498b03             mov     rax, qword [r11]
00015316  4c8d542458         lea     r10, [rsp+0x58 {var_60}]
0001531b  410f104110         movups  xmm0, xmmword [r9+0x10]
00015320  31d2               xor     edx, edx  {0x0}
00015322  410f1009           movups  xmm1, xmmword [r9]
00015326  b902000000         mov     ecx, 0x2
0001532b  4c89d7             mov     rdi, r10 {var_60}
0001532e  4983c120           add     r9, 0x20
00015332  410fbf744602       movsx   esi, word [r14+rax*2+0x2]
00015338  4c8d7804           lea     r15, [rax+0x4]
0001533c  0f11442468         movups  xmmword [rsp+0x68 {var_50}], xmm0
00015341  410fbf6c4606       movsx   ebp, word [r14+rax*2+0x6]
00015347  450fbf644604       movsx   r12d, word [r14+rax*2+0x4]
0001534d  430fbf1c7e         movsx   ebx, word [r14+r15*2]
00015352  0f114c2458         movups  xmmword [rsp+0x58 {var_60}], xmm1
00015357  8974240c           mov     dword [rsp+0xc {var_ac}], esi
0001535b  e837f4ffff         call    libcrux_ml_kem_vector_portable_ntt_ntt_step
{ Does not return }

00015360  8b 74 24 0c b9 03 00 00 00 4c 89 d7 ba 01 00 00 00 e8 21 f4 ff ff b9 06 00 00 00 44 89 e6 4c 89  .t$......L........!........D..L.
00015380  d7 ba 04 00 00 00 e8 0c f4 ff ff b9 07 00 00 00 44 89 e6 4c 89 d7 ba 05 00 00 00 e8 f7 f3 ff ff  ................D..L............
000153a0  b9 0a 00 00 00 89 ee 4c 89 d7 ba 08 00 00 00 e8 e3 f3 ff ff b9 0b 00 00 00 89 ee 4c 89 d7 ba 09  .......L...................L....
000153c0  00 00 00 e8 cf f3 ff ff b9 0e 00 00 00 89 de 4c 89 d7 ba 0c 00 00 00 e8 bb f3 ff ff b9 0f 00 00  ...............L................
000153e0  00 89 de 4c 89 d7 ba 0d 00 00 00 e8 a7 f3 ff ff 0f 10 44 24 58 41 0f 11 41 e0 0f 10 44 24 68 41  ...L..............D$XA..A...D$hA
00015400  0f 11 41 f0 4d 89 3b 4d 39 cd 0f 85 03 ff ff ff 48 8b 44 24 78 64 48 2b 04 25 28 00 00 00 74 05  ..A.M.;M9.......H.D$xdH+.%(...t.
00015420  e8 eb fd fe ff 48 81 c4 88 00 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 ce 12 ff ff                 .....H......[]A\A]A^A_.....

0001543b    void libcrux_ml_kem_ntt_ntt_at_layer_2_ad.constprop.0(int64_t* arg1, int128_t* arg2) __noreturn

0001543b  4156               push    r14 {var_8}
0001543d  4989f1             mov     r9, rsi
00015440  4c8db600020000     lea     r14, [rsi+0x200]
00015447  4155               push    r13 {var_10}
00015449  4c8d2dd02e0200     lea     r13, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
00015450  4154               push    r12 {var_18}
00015452  55                 push    rbp {var_20}
00015453  53                 push    rbx {var_28}
00015454  4883ec70           sub     rsp, 0x70
00015458  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00015461  48895c2468         mov     qword [rsp+0x68 {var_30}], rbx
00015466  4889fb             mov     rbx, rdi
00015469  488b03             mov     rax, qword [rbx]
0001546c  4c8d542448         lea     r10, [rsp+0x48 {var_50}]
00015471  410f104110         movups  xmm0, xmmword [r9+0x10]
00015476  31d2               xor     edx, edx  {0x0}
00015478  410f1009           movups  xmm1, xmmword [r9]
0001547c  b904000000         mov     ecx, 0x4
00015481  4c89d7             mov     rdi, r10 {var_50}
00015484  4983c120           add     r9, 0x20
00015488  410fbf6c4502       movsx   ebp, word [r13+rax*2+0x2]
0001548e  4c8d6002           lea     r12, [rax+0x2]
00015492  0f11442458         movups  xmmword [rsp+0x58 {var_40}], xmm0
00015497  470fbf5c6500       movsx   r11d, word [r13+r12*2]
0001549d  0f114c2448         movups  xmmword [rsp+0x48 {var_50}], xmm1
000154a2  89ee               mov     esi, ebp
000154a4  e8eef2ffff         call    libcrux_ml_kem_vector_portable_ntt_ntt_step
{ Does not return }

000154a9                             b9 05 00 00 00 89 ee 4c 89 d7 ba 01 00 00 00 e8 da f2 ff ff b9 06 00           .......L...............
000154c0  00 00 89 ee 4c 89 d7 ba 02 00 00 00 e8 c6 f2 ff ff b9 07 00 00 00 89 ee 4c 89 d7 ba 03 00 00 00  ....L...................L.......
000154e0  e8 b2 f2 ff ff b9 0c 00 00 00 44 89 de 4c 89 d7 ba 08 00 00 00 e8 9d f2 ff ff b9 0d 00 00 00 44  ..........D..L.................D
00015500  89 de 4c 89 d7 ba 09 00 00 00 e8 88 f2 ff ff b9 0e 00 00 00 44 89 de 4c 89 d7 ba 0a 00 00 00 e8  ..L.................D..L........
00015520  73 f2 ff ff b9 0f 00 00 00 44 89 de 4c 89 d7 ba 0b 00 00 00 e8 5e f2 ff ff 0f 10 44 24 48 41 0f  s........D..L........^.....D$HA.
00015540  11 41 e0 0f 10 44 24 58 41 0f 11 41 f0 4c 89 23 4d 39 f1 0f 85 10 ff ff ff 48 8b 44 24 68 64 48  .A...D$XA..A.L.#M9.......H.D$hdH
00015560  2b 04 25 28 00 00 00 74 05 e8 a2 fc fe ff 48 83 c4 70 5b 5d 41 5c 41 5d 41 5e e9 8a 11 ff ff     +.%(...t......H..p[]A\A]A^.....

0001557f    void libcrux_ml_kem_ntt_ntt_at_layer_3_fd.constprop.0(int64_t* arg1, int128_t* arg2) __noreturn

0001557f  4154               push    r12 {var_8}
00015581  4989f1             mov     r9, rsi
00015584  4c8d25952d0200     lea     r12, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
0001558b  55                 push    rbp {var_10}
0001558c  488dae00020000     lea     rbp, [rsi+0x200]
00015593  53                 push    rbx {var_18}
00015594  4883ec70           sub     rsp, 0x70
00015598  64488b1c25280000…  mov     rbx, qword [fs:0x28]
000155a1  48895c2468         mov     qword [rsp+0x68 {var_20}], rbx
000155a6  4889fb             mov     rbx, rdi
000155a9  488b03             mov     rax, qword [rbx]
000155ac  4c8d542448         lea     r10, [rsp+0x48 {var_40}]
000155b1  410f104110         movups  xmm0, xmmword [r9+0x10]
000155b6  31d2               xor     edx, edx  {0x0}
000155b8  410f1009           movups  xmm1, xmmword [r9]
000155bc  b908000000         mov     ecx, 0x8
000155c1  4c89d7             mov     rdi, r10 {var_40}
000155c4  4983c120           add     r9, 0x20
000155c8  48ffc0             inc     rax
000155cb  0f11442458         movups  xmmword [rsp+0x58 {var_30}], xmm0
000155d0  450fbf1c44         movsx   r11d, word [r12+rax*2]
000155d5  488903             mov     qword [rbx], rax
000155d8  0f114c2448         movups  xmmword [rsp+0x48 {var_40}], xmm1
000155dd  4489de             mov     esi, r11d
000155e0  e8b2f1ffff         call    libcrux_ml_kem_vector_portable_ntt_ntt_step
{ Does not return }

000155e5                 b9 09 00 00 00 44 89 de 4c 89 d7 ba 01 00 00 00 e8 9d f1 ff ff b9 0a 00 00 00 44       .....D..L.................D
00015600  89 de 4c 89 d7 ba 02 00 00 00 e8 88 f1 ff ff b9 0b 00 00 00 44 89 de 4c 89 d7 ba 03 00 00 00 e8  ..L.................D..L........
00015620  73 f1 ff ff b9 0c 00 00 00 44 89 de 4c 89 d7 ba 04 00 00 00 e8 5e f1 ff ff b9 0d 00 00 00 44 89  s........D..L........^........D.
00015640  de 4c 89 d7 ba 05 00 00 00 e8 49 f1 ff ff b9 0e 00 00 00 44 89 de 4c 89 d7 ba 06 00 00 00 e8 34  .L........I........D..L........4
00015660  f1 ff ff b9 0f 00 00 00 44 89 de 4c 89 d7 ba 07 00 00 00 e8 1f f1 ff ff 0f 10 44 24 48 41 0f 11  ........D..L..............D$HA..
00015680  41 e0 0f 10 44 24 58 41 0f 11 41 f0 49 39 e9 0f 85 14 ff ff ff 48 8b 44 24 68 64 48 2b 04 25 28  A...D$XA..A.I9.......H.D$hdH+.%(
000156a0  00 00 00 74 05 e8 66 fb fe ff 48 83 c4 70 5b 5d 41 5c e9 52 10 ff ff                             ...t..f...H..p[]A\.R...

000156b7    void libcrux_ml_kem_utils_into_padded_array_ea.constprop.0(int128_t* arg1, int64_t arg2, int64_t arg3) __noreturn

000156b7  4883ec58           sub     rsp, 0x58
000156bb  4989f8             mov     r8, rdi
000156be  b910000000         mov     ecx, 0x10
000156c3  64488b0425280000…  mov     rax, qword [fs:0x28]
000156cc  4889442448         mov     qword [rsp+0x48 {var_10}], rax
000156d1  31c0               xor     eax, eax  {0x0}
000156d3  410f1000           movups  xmm0, xmmword [r8]
000156d7  488d7c2408         lea     rdi, [rsp+0x8 {s}]
000156dc  488d742408         lea     rsi, [rsp+0x8 {s}]
000156e1  f3ab               rep stosd dword [rdi] {var_90} {s}  {0x0}
000156e3  0f11442408         movups  xmmword [rsp+0x8 {s}], xmm0
000156e8  410f104010         movups  xmm0, xmmword [r8+0x10]
000156ed  4889d7             mov     rdi, rdx
000156f0  b910000000         mov     ecx, 0x10
000156f5  0f11442418         movups  xmmword [rsp+0x18 {var_40}], xmm0
000156fa  f3a5               rep movsd dword [rdi], [rsi] {var_90} {s}  {0x0}
000156fc  488b442448         mov     rax, qword [rsp+0x48 {var_10}]
00015701  64482b0425280000…  sub     rax, qword [fs:0x28]
0001570a  7405               je      0x15711

0001570c  e8fffafeff         call    __stack_chk_fail
{ Does not return }

00015711  4883c458           add     rsp, 0x58
00015715  e9ef0fffff         jmp     __x86_return_thunk
{ Does not return }


0001571a    void libcrux_ml_kem_utils_into_padded_array_ea1.constprop.0(int128_t* arg1, int64_t arg2, int64_t arg3) __noreturn

0001571a  4883ec38           sub     rsp, 0x38
0001571e  4989f8             mov     r8, rdi
00015721  b922000000         mov     ecx, 0x22
00015726  64488b0425280000…  mov     rax, qword [fs:0x28]
0001572f  4889442428         mov     qword [rsp+0x28 {var_10}], rax
00015734  31c0               xor     eax, eax  {0x0}
00015736  410f1000           movups  xmm0, xmmword [r8]
0001573a  488d7c2406         lea     rdi, [rsp+0x6 {s}]
0001573f  488d742406         lea     rsi, [rsp+0x6 {s}]
00015744  f3aa               rep stosb byte [rdi] {var_54} {s}  {0x0}
00015746  0f11442406         movups  xmmword [rsp+0x6 {s}], xmm0
0001574b  410f104010         movups  xmm0, xmmword [r8+0x10]
00015750  4889d7             mov     rdi, rdx
00015753  b922000000         mov     ecx, 0x22
00015758  0f11442416         movups  xmmword [rsp+0x16 {var_22}], xmm0
0001575d  f3a4               rep movsb byte [rdi], [rsi] {var_54} {s}  {0x0}
0001575f  488b442428         mov     rax, qword [rsp+0x28 {var_10}]
00015764  64482b0425280000…  sub     rax, qword [fs:0x28]
0001576d  7405               je      0x15774

0001576f  e89cfafeff         call    __stack_chk_fail
{ Does not return }

00015774  4883c438           add     rsp, 0x38
00015778  e98c0fffff         jmp     __x86_return_thunk
{ Does not return }


0001577d    void libcrux_ml_kem_utils_into_padded_array_ea2.constprop.0(int128_t* arg1, int64_t arg2, int64_t arg3) __noreturn

0001577d  4883ec38           sub     rsp, 0x38
00015781  4989f8             mov     r8, rdi
00015784  b921000000         mov     ecx, 0x21
00015789  64488b0425280000…  mov     rax, qword [fs:0x28]
00015792  4889442428         mov     qword [rsp+0x28 {var_10}], rax
00015797  31c0               xor     eax, eax  {0x0}
00015799  410f1000           movups  xmm0, xmmword [r8]
0001579d  488d7c2407         lea     rdi, [rsp+0x7 {s}]
000157a2  488d742407         lea     rsi, [rsp+0x7 {s}]
000157a7  f3aa               rep stosb byte [rdi] {var_52} {s}  {0x0}
000157a9  0f11442407         movups  xmmword [rsp+0x7 {s}], xmm0
000157ae  410f104010         movups  xmm0, xmmword [r8+0x10]
000157b3  4889d7             mov     rdi, rdx
000157b6  b921000000         mov     ecx, 0x21
000157bb  0f11442417         movups  xmmword [rsp+0x17 {var_21}], xmm0
000157c0  f3a4               rep movsb byte [rdi], [rsi] {var_52} {s}  {0x0}
000157c2  488b442428         mov     rax, qword [rsp+0x28 {var_10}]
000157c7  64482b0425280000…  sub     rax, qword [fs:0x28]
000157d0  7405               je      0x157d7

000157d2  e839fafeff         call    __stack_chk_fail
{ Does not return }

000157d7  4883c438           add     rsp, 0x38
000157db  e9290fffff         jmp     __x86_return_thunk
{ Does not return }


000157e0    void libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time.constprop.0.isra.0(char* arg1, int32_t arg2, char* arg3) __noreturn

000157e0  31c0               xor     eax, eax  {0x0}
000157e2  31c9               xor     ecx, ecx  {0x0}

000157e4  408a340f           mov     sil, byte [rdi+rcx]
000157e8  4032340a           xor     sil, byte [rdx+rcx]
000157ec  48ffc1             inc     rcx
000157ef  09f0               or      eax, esi
000157f1  4881f940040000     cmp     rcx, 0x440
000157f8  75ea               jne     0x157e4

000157fa  0fb6f8             movzx   edi, al
000157fd  e92beeffff         jmp     libcrux_ml_kem_constant_time_ops_is_non_zero
{ Does not return }


00015802    void libcrux_ml_kem_constant_time_ops_select_shared_secret_in_constant_time.constprop.0.isra.0(int64_t arg1, int64_t arg2, char arg3) __noreturn

00015802  4883ec38           sub     rsp, 0x38
00015806  4989f9             mov     r9, rdi
00015809  0f57c0             xorps   xmm0, xmm0
0001580c  0fb6fa             movzx   edi, dl
0001580f  644c8b0425280000…  mov     r8, qword [fs:0x28]
00015818  4c89442428         mov     qword [rsp+0x28 {var_10}], r8
0001581d  4989f0             mov     r8, rsi
00015820  31d2               xor     edx, edx  {0x0}
00015822  e806eeffff         call    libcrux_ml_kem_constant_time_ops_is_non_zero
{ Does not return }

00015827                       0f 11 44 24 08 89 c6 0f 11 44 24 18 44 8d 56 ff 41 8a 04 10 41 8a 3c 11 0f         ..D$.....D$.D.V.A...A.<..
00015840  af c6 44 21 d7 09 c7 40 88 7c 14 08 48 ff c2 48 83 fa 20 75 e2 0f 10 44 24 08 0f 11 01 0f 10 44  ..D!...@.|..H..H.. u...D$......D
00015860  24 18 0f 11 41 10 48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 95 f9 fe ff 48 83 c4 38 e9  $...A.H.D$(dH+.%(...t......H..8.
00015880  85 0e ff ff                                                                                      ....

00015884    void libcrux_ml_kem_vector_portable_serialize_serialize_4_int.constprop.0.isra.0(char* arg1) __noreturn

00015884  8a570e             mov     dl, byte [rdi+0xe]
00015887  448a4702           mov     r8b, byte [rdi+0x2]
0001588b  8a4706             mov     al, byte [rdi+0x6]
0001588e  8a4f0a             mov     cl, byte [rdi+0xa]
00015891  408a770c           mov     sil, byte [rdi+0xc]
00015895  c1e204             shl     edx, 0x4
00015898  41c1e004           shl     r8d, 0x4
0001589c  c1e004             shl     eax, 0x4
0001589f  c1e104             shl     ecx, 0x4
000158a2  0a4704             or      al, byte [rdi+0x4]
000158a5  0a4f08             or      cl, byte [rdi+0x8]
000158a8  09d6               or      esi, edx
000158aa  410fb6d0           movzx   edx, r8b
000158ae  0a17               or      dl, byte [rdi]
000158b0  0fb6c9             movzx   ecx, cl
000158b3  88c6               mov     dh, al
000158b5  c1e110             shl     ecx, 0x10
000158b8  0fb7c2             movzx   eax, dx
000158bb  89f2               mov     edx, esi
000158bd  c1e218             shl     edx, 0x18
000158c0  09c8               or      eax, ecx
000158c2  09d0               or      eax, edx
000158c4  e9400effff         jmp     __x86_return_thunk
{ Does not return }


000158c9    void libcrux_ml_kem_vector_portable_serialize_deserialize_4_int.constprop.0.isra.0(char* arg1) __noreturn

000158c9  448a0f             mov     r9b, byte [rdi]
000158cc  31c0               xor     eax, eax  {0x0}
000158ce  448a4701           mov     r8b, byte [rdi+0x1]
000158d2  31d2               xor     edx, edx  {0x0}
000158d4  408a7702           mov     sil, byte [rdi+0x2]
000158d8  8a4f03             mov     cl, byte [rdi+0x3]
000158db  49baffff0000ffff…  mov     r10, 0xffffffff0000ffff
000158e5  664489c8           mov     ax, r9w
000158e9  41c0e904           shr     r9b, 0x4
000158ed  4d89c3             mov     r11, r8
000158f0  6683e00f           and     ax, 0xf
000158f4  4183e10f           and     r9d, 0xf
000158f8  4183e30f           and     r11d, 0xf
000158fc  41c0e804           shr     r8b, 0x4
00015900  4889c7             mov     rdi, rax
00015903  49c1e110           shl     r9, 0x10
00015907  4183e00f           and     r8d, 0xf
0001590b  6689f2             mov     dx, si
0001590e  49c1e320           shl     r11, 0x20
00015912  4c21d7             and     rdi, r10
00015915  49c1e030           shl     r8, 0x30
00015919  6683e20f           and     dx, 0xf
0001591d  4c09cf             or      rdi, r9
00015920  40c0ee04           shr     sil, 0x4
00015924  49b9ffffffff0000…  mov     r9, 0xffff0000ffffffff
0001592e  4c21cf             and     rdi, r9
00015931  83e60f             and     esi, 0xf
00015934  4c09df             or      rdi, r11
00015937  48c1e610           shl     rsi, 0x10
0001593b  4989fb             mov     r11, rdi
0001593e  48bfffffffffffff…  mov     rdi, 0xffffffffffff
00015948  4921fb             and     r11, rdi
0001594b  4d09d8             or      r8, r11
0001594e  4c89c0             mov     rax, r8
00015951  4989d0             mov     r8, rdx
00015954  4d21d0             and     r8, r10
00015957  4c09c6             or      rsi, r8
0001595a  4989c8             mov     r8, rcx
0001595d  c0e904             shr     cl, 0x4
00015960  4183e00f           and     r8d, 0xf
00015964  4c21ce             and     rsi, r9
00015967  83e10f             and     ecx, 0xf
0001596a  49c1e020           shl     r8, 0x20
0001596e  48c1e130           shl     rcx, 0x30
00015972  4c09c6             or      rsi, r8
00015975  4821fe             and     rsi, rdi
00015978  4809f1             or      rcx, rsi
0001597b  4889ca             mov     rdx, rcx
0001597e  e9860dffff         jmp     __x86_return_thunk
{ Does not return }


00015983    void libcrux_ml_kem_vector_portable_serialize_serialize_10_int.constprop.0.isra.0(int16_t* arg1) __noreturn

00015983  668b37             mov     si, word [rdi]
00015986  668b4f02           mov     cx, word [rdi+0x2]
0001598a  668b5704           mov     dx, word [rdi+0x4]
0001598e  668b4706           mov     ax, word [rdi+0x6]
00015992  40887424fb         mov     byte [rsp-0x5 {var_5}], sil
00015997  66c1fe08           sar     si, 0x8
0001599b  8d3c8d00000000     lea     edi, [rcx*4]
000159a2  66c1f906           sar     cx, 0x6
000159a6  83e603             and     esi, 0x3
000159a9  83e10f             and     ecx, 0xf
000159ac  09fe               or      esi, edi
000159ae  40887424fc         mov     byte [rsp-0x4 {var_4}], sil
000159b3  89d6               mov     esi, edx
000159b5  66c1fa04           sar     dx, 0x4
000159b9  c1e604             shl     esi, 0x4
000159bc  83e23f             and     edx, 0x3f
000159bf  09f1               or      ecx, esi
000159c1  884c24fd           mov     byte [rsp-0x3 {var_3}], cl
000159c5  89c1               mov     ecx, eax
000159c7  66c1f802           sar     ax, 0x2
000159cb  c1e106             shl     ecx, 0x6
000159ce  09ca               or      edx, ecx
000159d0  885424fe           mov     byte [rsp-0x2 {var_2}], dl
000159d4  0fb6d0             movzx   edx, al
000159d7  8b4424fb           mov     eax, dword [rsp-0x5 {var_5}]
000159db  48c1e220           shl     rdx, 0x20
000159df  4809d0             or      rax, rdx
000159e2  e9220dffff         jmp     __x86_return_thunk
{ Does not return }


000159e7    void libcrux_ml_kem_vector_portable_serialize_deserialize_10_int.constprop.0.isra.0(char* arg1) __noreturn

000159e7  4156               push    r14 {__saved_r14}
000159e9  4889f8             mov     rax, rdi
000159ec  4155               push    r13 {__saved_r13}
000159ee  4154               push    r12 {__saved_r12}
000159f0  55                 push    rbp {__saved_rbp}
000159f1  53                 push    rbx {__saved_rbx}
000159f2  8a5f01             mov     bl, byte [rdi+0x1]
000159f5  448a5f02           mov     r11b, byte [rdi+0x2]
000159f9  440fb630           movzx   r14d, byte [rax]
000159fd  31c0               xor     eax, eax  {0x0}
000159ff  4189dd             mov     r13d, ebx
00015a02  408a7703           mov     sil, byte [rdi+0x3]
00015a06  c0eb02             shr     bl, 0x2
00015a09  440fb66704         movzx   r12d, byte [rdi+0x4]
00015a0e  41c1e508           shl     r13d, 0x8
00015a12  0fb6db             movzx   ebx, bl
00015a15  8a4f08             mov     cl, byte [rdi+0x8]
00015a18  448a4f06           mov     r9b, byte [rdi+0x6]
00015a1c  664181e50003       and     r13w, 0x300
00015a22  89f2               mov     edx, esi
00015a24  c1e604             shl     esi, 0x4
00015a27  0fb66f05           movzx   ebp, byte [rdi+0x5]
00015a2b  664489e8           mov     ax, r13w
00015a2f  4589dd             mov     r13d, r11d
00015a32  c0ea06             shr     dl, 0x6
00015a35  6681e6f003         and     si, 0x3f0
00015a3a  41c1e506           shl     r13d, 0x6
00015a3e  664409f0           or      ax, r14w
00015a42  41c0eb04           shr     r11b, 0x4
00015a46  0fb6d2             movzx   edx, dl
00015a49  664181e5c003       and     r13w, 0x3c0
00015a4f  41c1e402           shl     r12d, 0x2
00015a53  4989c6             mov     r14, rax
00015a56  4589ca             mov     r10d, r9d
00015a59  4109dd             or      r13d, ebx
00015a5c  450fb6db           movzx   r11d, r11b
00015a60  4109d4             or      r12d, edx
00015a63  448a4707           mov     r8b, byte [rdi+0x7]
00015a67  450fb7ed           movzx   r13d, r13w
00015a6b  4409de             or      esi, r11d
00015a6e  89ca               mov     edx, ecx
00015a70  0fb67f09           movzx   edi, byte [rdi+0x9]
00015a74  48bbffff0000ffff…  mov     rbx, 0xffffffff0000ffff
00015a7e  c0ea06             shr     dl, 0x6
00015a81  49bbffffffff0000…  mov     r11, 0xffff0000ffffffff
00015a8b  0fb7f6             movzx   esi, si
00015a8e  49c1e510           shl     r13, 0x10
00015a92  4921de             and     r14, rbx
00015a95  41c1e208           shl     r10d, 0x8
00015a99  0fb6d2             movzx   edx, dl
00015a9c  c1e702             shl     edi, 0x2
00015a9f  4d09f5             or      r13, r14
00015aa2  48c1e620           shl     rsi, 0x20
00015aa6  664181e20003       and     r10w, 0x300
00015aac  4d21dd             and     r13, r11
00015aaf  09d7               or      edi, edx
00015ab1  31d2               xor     edx, edx  {0x0}
00015ab3  4c09ee             or      rsi, r13
00015ab6  664489d2           mov     dx, r10w
00015aba  4d89e5             mov     r13, r12
00015abd  4589c2             mov     r10d, r8d
00015ac0  49c1e530           shl     r13, 0x30
00015ac4  4989f4             mov     r12, rsi
00015ac7  41c1e206           shl     r10d, 0x6
00015acb  6609ea             or      dx, bp
00015ace  48beffffffffffff…  mov     rsi, 0xffffffffffff
00015ad8  4921f4             and     r12, rsi
00015adb  4d09ec             or      r12, r13
00015ade  664181e2c003       and     r10w, 0x3c0
00015ae4  41c0e902           shr     r9b, 0x2
00015ae8  c1e104             shl     ecx, 0x4
00015aeb  450fb6c9           movzx   r9d, r9b
00015aef  41c0e804           shr     r8b, 0x4
00015af3  4c89e0             mov     rax, r12
00015af6  4509d1             or      r9d, r10d
00015af9  4989d2             mov     r10, rdx
00015afc  450fb6c0           movzx   r8d, r8b
00015b00  6681e1f003         and     cx, 0x3f0
00015b05  450fb7c9           movzx   r9d, r9w
00015b09  4921da             and     r10, rbx
00015b0c  4409c1             or      ecx, r8d
00015b0f  5b                 pop     rbx {__saved_rbx}
00015b10  49c1e110           shl     r9, 0x10
00015b14  0fb7c9             movzx   ecx, cx
00015b17  5d                 pop     rbp {__saved_rbp}
00015b18  415c               pop     r12 {__saved_r12}
00015b1a  4d09d1             or      r9, r10
00015b1d  48c1e120           shl     rcx, 0x20
00015b21  415d               pop     r13 {__saved_r13}
00015b23  415e               pop     r14 {__saved_r14}
00015b25  4d89c8             mov     r8, r9
00015b28  4d21d8             and     r8, r11
00015b2b  4c09c1             or      rcx, r8
00015b2e  4889ca             mov     rdx, rcx
00015b31  4889f9             mov     rcx, rdi
00015b34  4889d7             mov     rdi, rdx
00015b37  48c1e130           shl     rcx, 0x30
00015b3b  4821f7             and     rdi, rsi
00015b3e  4809cf             or      rdi, rcx
00015b41  4889fa             mov     rdx, rdi
00015b44  e9c00bffff         jmp     __x86_return_thunk
{ Does not return }


00015b49    void libcrux_ml_kem_vector_portable_serialize_serialize_12_int.constprop.0.isra.0(int16_t* arg1) __noreturn

00015b49  668b4702           mov     ax, word [rdi+0x2]
00015b4d  668b17             mov     dx, word [rdi]
00015b50  89c1               mov     ecx, eax
00015b52  66c1f804           sar     ax, 0x4
00015b56  885424fd           mov     byte [rsp-0x3 {var_3}], dl
00015b5a  c1e104             shl     ecx, 0x4
00015b5d  08f1               or      cl, dh
00015b5f  0fb6d0             movzx   edx, al
00015b62  884c24fe           mov     byte [rsp-0x2 {var_2}], cl
00015b66  0fb74424fd         movzx   eax, word [rsp-0x3 {var_3}]
00015b6b  48c1e210           shl     rdx, 0x10
00015b6f  09d0               or      eax, edx
00015b71  e9930bffff         jmp     __x86_return_thunk
{ Does not return }


00015b76    void libcrux_ml_kem_ind_cpa_serialize_secret_key_b5(int64_t arg1) __noreturn

00015b76  4157               push    r15 {var_8}
00015b78  4889fa             mov     rdx, rdi
00015b7b  b920010000         mov     ecx, 0x120
00015b80  4156               push    r14 {var_10}
00015b82  4155               push    r13 {var_18}
00015b84  4154               push    r12 {var_20}
00015b86  55                 push    rbp {var_28}
00015b87  53                 push    rbx {var_30}
00015b88  4881ec980a0000     sub     rsp, 0xa98
00015b8f  4889742478         mov     qword [rsp+0x78 {var_a50}], rsi
00015b94  488dbc2408060000   lea     rdi, [rsp+0x608 {s_1}]
00015b9c  4c8db42408060000   lea     r14, [rsp+0x608 {s_1}]
00015ba4  64488b0425280000…  mov     rax, qword [fs:0x28]
00015bad  48898424880a0000   mov     qword [rsp+0xa88 {var_40}], rax
00015bb5  31c0               xor     eax, eax  {0x0}
00015bb7  4889542408         mov     qword [rsp+0x8 {var_ac0}], rdx
00015bbc  f3ab               rep stosd dword [rdi] {var_940} {s_1}  {0x0}
00015bbe  488d8424880a0000   lea     rax, [rsp+0xa88 {var_40}]
00015bc6  4889442470         mov     qword [rsp+0x70 {var_a58}], rax {var_40}
00015bcb  31c0               xor     eax, eax  {0x0}
00015bcd  488b742408         mov     rsi, qword [rsp+0x8 {var_ac0}]
00015bd2  b980000000         mov     ecx, 0x80
00015bd7  4531ed             xor     r13d, r13d
00015bda  488dbc2408010000   lea     rdi, [rsp+0x108 {var_9c0}]
00015be2  488d9c2488040000   lea     rbx, [rsp+0x488 {s}]
00015bea  f3a5               rep movsd dword [rdi], [rsi] {var_bc0} {var_9c0}  {0x0}
00015bec  488dbc2488040000   lea     rdi, [rsp+0x488 {s}]
00015bf4  b960000000         mov     ecx, 0x60
00015bf9  f3ab               rep stosd dword [rdi] {var_7c0} {s}  {0x0}
00015bfb  488d8424a8000000   lea     rax, [rsp+0xa8 {var_a20}]
00015c03  4889842480000000   mov     qword [rsp+0x80 {var_a48}], rax {var_a20}
00015c0b  4c89e8             mov     rax, r13
00015c0e  4883ec20           sub     rsp, 0x20
00015c12  49ffc5             inc     r13  {0x1}
00015c15  4883c318           add     rbx {var_628}, 0x18
00015c19  48c1e005           shl     rax, 0x5  {0x0}
00015c1d  488bbc24a0000000   mov     rdi, qword [rsp+0xa0 {var_a48}]
00015c25  0f10840428010000   movups  xmm0, xmmword [rsp+rax+0x128 {var_9c0}]
00015c2d  0f110424           movups  xmmword [rsp {var_ae8}], xmm0
00015c31  0f10840438010000   movups  xmm0, xmmword [rsp+rax+0x138 {var_9b0}]
00015c39  0f11442410         movups  xmmword [rsp+0x10 {var_ad8}], xmm0
00015c3e  e880f0ffff         call    libcrux_ml_kem_vector_traits_to_unsigned_representative_db
{ Does not return }

00015c43           0f 10 8c 24 c8 00 00 00 0f 10 84 24 d8 00 00 00 0f 11 8c 24 e8 00 00 00 0f 11 84 24 f8     ...$.......$.......$.......$.
00015c60  00 00 00 0f 11 8c 24 08 01 00 00 0f 11 84 24 18 01 00 00 48 83 c4 20 48 8d bc 24 e8 00 00 00 e8  ......$.......$....H.. H..$.....
00015c80  c5 fe ff ff 48 8d bc 24 ec 00 00 00 4c 63 e0 4c 89 e0 44 88 a4 24 90 00 00 00 0f b6 c4 48 89 44  ....H..$....Lc.L..D..$.......H.D
00015ca0  24 10 8a 44 24 10 88 84 24 91 00 00 00 4c 89 e0 48 c1 e8 10 48 89 44 24 18 8a 44 24 18 88 84 24  $..D$...$....L..H...H.D$..D$...$
00015cc0  92 00 00 00 e8 80 fe ff ff 48 8d bc 24 f0 00 00 00 48 63 e8 48 89 e8 40 88 ac 24 93 00 00 00 0f  .........H..$....Hc.H..@..$.....
00015ce0  b6 c4 48 89 44 24 20 8a 44 24 20 88 84 24 94 00 00 00 48 89 e8 48 c1 e8 10 48 89 44 24 28 8a 44  ..H.D$ .D$ ..$....H..H...H.D$(.D
00015d00  24 28 88 84 24 95 00 00 00 e8 3b fe ff ff 48 8d bc 24 f4 00 00 00 4c 63 d8 4c 89 d8 44 88 9c 24  $(..$.....;...H..$....Lc.L..D..$
00015d20  96 00 00 00 0f b6 c4 48 89 44 24 30 8a 44 24 30 88 84 24 97 00 00 00 4c 89 d8 48 c1 e8 10 48 89  .......H.D$0.D$0..$....L..H...H.
00015d40  44 24 38 8a 44 24 38 88 84 24 98 00 00 00 e8 f6 fd ff ff 48 8d bc 24 f8 00 00 00 4c 63 d0 4c 89  D$8.D$8..$.........H..$....Lc.L.
00015d60  d0 44 88 94 24 99 00 00 00 0f b6 c4 48 89 44 24 40 8a 44 24 40 88 84 24 9a 00 00 00 4c 89 d0 48  .D..$.......H.D$@.D$@..$....L..H
00015d80  c1 e8 10 48 89 44 24 48 8a 44 24 48 88 84 24 9b 00 00 00 e8 b1 fd ff ff 48 8d bc 24 fc 00 00 00  ...H.D$H.D$H..$.........H..$....
00015da0  4c 63 c8 4c 89 c8 44 88 8c 24 9c 00 00 00 0f b6 c4 48 89 44 24 50 8a 44 24 50 88 84 24 9d 00 00  Lc.L..D..$.......H.D$P.D$P..$...
00015dc0  00 4c 89 c8 48 c1 e8 10 48 89 44 24 58 8a 44 24 58 88 84 24 9e 00 00 00 e8 6c fd ff ff 48 8d bc  .L..H...H.D$X.D$X..$.....l...H..
00015de0  24 00 01 00 00 4c 63 c0 4c 89 c0 4d 89 c7 44 88 84 24 9f 00 00 00 0f b6 d4 49 c1 ef 10 88 94 24  $....Lc.L..M..D..$.......I.....$
00015e00  a0 00 00 00 88 94 24 8f 00 00 00 44 88 bc 24 a1 00 00 00 e8 31 fd ff ff 48 8d bc 24 04 01 00 00  ......$....D..$.....1...H..$....
00015e20  48 63 f0 48 89 f0 40 88 b4 24 a2 00 00 00 0f b6 c4 48 89 44 24 60 8a 44 24 60 88 84 24 a3 00 00  Hc.H..@..$.......H.D$`.D$`..$...
00015e40  00 48 89 f0 48 c1 e8 10 48 89 44 24 68 8a 44 24 68 88 84 24 a4 00 00 00 e8 ec fc ff ff 8a 54 24  .H..H...H.D$h.D$h..$..........T$
00015e60  10 44 88 63 e8 48 98 40 88 6b eb 88 53 e9 48 89 c1 8a 54 24 18 0f b6 fc 48 c1 e9 10 88 84 24 a5  .D.c.H.@.k..S.H...T$....H.....$.
00015e80  00 00 00 88 53 ea 40 88 bc 24 a6 00 00 00 88 8c 24 a7 00 00 00 8a 54 24 20 40 88 73 fa 40 8a 74  ....S.@..$......$.....T$ @.s.@.t
00015ea0  24 60 88 53 ec 8a 54 24 28 40 88 73 fb 40 8a 74 24 68 88 53 ed 8a 54 24 30 44 88 5b ee 88 53 ef  $`.S..T$(@.s.@.t$h.S..T$0D.[..S.
00015ec0  8a 54 24 38 44 88 53 f1 88 53 f0 8a 54 24 40 44 88 4b f4 88 53 f2 8a 54 24 48 44 88 43 f7 88 53  .T$8D.S..S..T$@D.K..S..T$HD.C..S
00015ee0  f3 8a 54 24 50 44 88 7b f9 88 53 f5 8a 54 24 58 40 88 73 fc 88 53 f6 8a 94 24 8f 00 00 00 88 43  ..T$PD.{..S..T$X@.s..S...$.....C
00015f00  fd 88 53 f8 40 88 7b fe 88 4b ff 49 83 fd 10 0f 85 f6 fc ff ff 48 8d bc 24 08 03 00 00 b9 60 00  ..S.@.{..K.I.........H..$.....`.
00015f20  00 00 48 8d b4 24 88 04 00 00 48 81 44 24 08 00 02 00 00 f3 a5 4c 89 f7 48 8d b4 24 08 03 00 00  ..H..$....H.D$.......L..H..$....
00015f40  b9 60 00 00 00 49 81 c6 80 01 00 00 f3 a5 4c 39 74 24 70 0f 85 72 fc ff ff 48 8b 7c 24 78 48 8d  .`...I........L9t$p..r...H.|$xH.
00015f60  b4 24 08 06 00 00 b9 20 01 00 00 f3 a5 48 8b 84 24 88 0a 00 00 64 48 2b 04 25 28 00 00 00 74 05  .$..... .....H..$....dH+.%(...t.
00015f80  e8 8b f2 fe ff 48 81 c4 98 0a 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 6e 07 ff ff                 .....H......[]A\A]A^A_.n...

00015f9b    void libcrux_ml_kem_vector_portable_serialize_deserialize_12_int.constprop.0.isra.0(char* arg1) __noreturn

00015f9b  0fb64701           movzx   eax, byte [rdi+0x1]
00015f9f  0fb65702           movzx   edx, byte [rdi+0x2]
00015fa3  0fb637             movzx   esi, byte [rdi]
00015fa6  89c1               mov     ecx, eax
00015fa8  c1e008             shl     eax, 0x8
00015fab  66c1f904           sar     cx, 0x4
00015faf  6625000f           and     ax, 0xf00
00015fb3  c1e204             shl     edx, 0x4
00015fb6  09ca               or      edx, ecx
00015fb8  0fb7c8             movzx   ecx, ax
00015fbb  6609f1             or      cx, si
00015fbe  c1e210             shl     edx, 0x10
00015fc1  89c8               mov     eax, ecx
00015fc3  09d0               or      eax, edx
00015fc5  e93f07ffff         jmp     __x86_return_thunk
{ Does not return }


00015fca    void libcrux_ml_kem_vector_portable_serialize_deserialize_12.constprop.0.isra.0(int64_t arg1, char* arg2) __noreturn

00015fca  4156               push    r14 {var_8}
00015fcc  4989f0             mov     r8, rsi
00015fcf  4989f9             mov     r9, rdi
00015fd2  4889f7             mov     rdi, rsi
00015fd5  4155               push    r13 {var_10}
00015fd7  4154               push    r12 {var_18}
00015fd9  55                 push    rbp {var_20}
00015fda  53                 push    rbx {var_28}
00015fdb  e8bbffffff         call    libcrux_ml_kem_vector_portable_serialize_deserialize_12_int.constprop.0.isra.0
{ Does not return }

00015fe0  49 8d 78 03 41 89 c6 e8 af ff ff ff 49 8d 78 06 41 89 c5 e8 a3 ff ff ff 49 8d 78 09 41 89 c4 e8  I.x.A.......I.x.A.......I.x.A...
00016000  97 ff ff ff 49 8d 78 0c 89 c5 e8 8c ff ff ff 49 8d 78 0f 89 c3 e8 81 ff ff ff 49 8d 78 12 41 89  ....I.x........I.x........I.x.A.
00016020  c3 e8 75 ff ff ff 49 8d 78 15 41 89 c2 e8 69 ff ff ff 45 89 31 45 89 69 04 45 89 61 08 41 89 69  ..u...I.x.A...i...E.1E.i.E.a.A.i
00016040  0c 41 89 59 10 5b 41 89 41 1c 5d 4c 89 c8 41 5c 41 5d 45 89 59 14 45 89 51 18 41 5e e9 a8 06 ff  .A.Y.[A.A.]L..A\A]E.Y.E.Q.A^....
00016060  ff                                                                                               .

00016061    void libcrux_ml_kem_vector_portable_sampling_rej_sample.constprop.0.isra.0(char* arg1, int64_t arg2, uint16_t* arg3) __noreturn

00016061  4887d7             xchg    rdi, rdx
00016064  31c0               xor     eax, eax  {0x0}
00016066  4c8d4a18           lea     r9, [rdx+0x18]

0001606a  440fb64201         movzx   r8d, byte [rdx+0x1]
0001606f  0fb60a             movzx   ecx, byte [rdx]
00016072  4489c6             mov     esi, r8d
00016075  6641c1f804         sar     r8w, 0x4
0001607a  c1e608             shl     esi, 0x8
0001607d  6681e6000f         and     si, 0xf00
00016082  09ce               or      esi, ecx
00016084  0fb64a02           movzx   ecx, byte [rdx+0x2]
00016088  c1e104             shl     ecx, 0x4
0001608b  4409c1             or      ecx, r8d
0001608e  4883f80f           cmp     rax, 0xf
00016092  410f96c0           setbe   r8b
00016096  6681fe000d         cmp     si, 0xd00
0001609b  7f2b               jg      0x160c8

0001609d  4584c0             test    r8b, r8b
000160a0  7426               je      0x160c8

000160a2  4c8d0400           lea     r8, [rax+rax]
000160a6  6642893407         mov     word [rdi+r8], si
000160ab  488d7001           lea     rsi, [rax+0x1]
000160af  6681f9000d         cmp     cx, 0xd00
000160b4  7f27               jg      0x160dd

000160b6  4883fe10           cmp     rsi, 0x10
000160ba  7426               je      0x160e2

000160bc  6642894c0702       mov     word [rdi+r8+0x2], cx
000160c2  4883c002           add     rax, 0x2
000160c6  eb1f               jmp     0x160e7

000160c8  6681f9000d         cmp     cx, 0xd00
000160cd  7f18               jg      0x160e7

000160cf  4584c0             test    r8b, r8b
000160d2  7413               je      0x160e7

000160d4  66890c47           mov     word [rdi+rax*2], cx
000160d8  48ffc0             inc     rax
000160db  eb0a               jmp     0x160e7

000160dd  4889f0             mov     rax, rsi
000160e0  eb05               jmp     0x160e7

000160e2  b810000000         mov     eax, 0x10

000160e7  4883c203           add     rdx, 0x3
000160eb  4939d1             cmp     r9, rdx
000160ee  0f8576ffffff       jne     0x1606a

000160f4  e91006ffff         jmp     __x86_return_thunk
{ Does not return }


000160f9    void libcrux_ml_kem_variant_kdf_d8_41.constprop.0.isra.0(int128_t* arg1, int128_t* arg2) __noreturn

000160f9  4883ec38           sub     rsp, 0x38
000160fd  0f100f             movups  xmm1, xmmword [rdi]
00016100  0f104710           movups  xmm0, xmmword [rdi+0x10]
00016104  64488b0425280000…  mov     rax, qword [fs:0x28]
0001610d  4889442428         mov     qword [rsp+0x28 {var_10}], rax
00016112  31c0               xor     eax, eax  {0x0}
00016114  0f110e             movups  xmmword [rsi], xmm1
00016117  0f114610           movups  xmmword [rsi+0x10], xmm0
0001611b  488b442428         mov     rax, qword [rsp+0x28 {var_10}]
00016120  64482b0425280000…  sub     rax, qword [fs:0x28]
00016129  7405               je      0x16130

0001612b  e8e0f0feff         call    __stack_chk_fail
{ Does not return }

00016130  4883c438           add     rsp, 0x38
00016134  e9d005ffff         jmp     __x86_return_thunk
{ Does not return }


00016139    void libcrux_ml_kem_ntt_ntt_at_layer_4_plus_51.isra.0(int64_t* arg1, int64_t arg2, int16_t arg3) __noreturn

00016139  4157               push    r15 {var_8}
0001613b  41bb01000000       mov     r11d, 0x1
00016141  4c8d3dd8210200     lea     r15, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
00016148  4156               push    r14 {var_10}
0001614a  4155               push    r13 {var_18}
0001614c  4531ed             xor     r13d, r13d
0001614f  4154               push    r12 {var_20}
00016151  4989f4             mov     r12, rsi
00016154  55                 push    rbp {var_28}
00016155  bd80000000         mov     ebp, 0x80
0001615a  53                 push    rbx {var_30}
0001615b  4889fb             mov     rbx, rdi
0001615e  4881ecf8000000     sub     rsp, 0xf8
00016165  64488b0c25280000…  mov     rcx, qword [fs:0x28]
0001616e  48898c24e8000000   mov     qword [rsp+0xe8 {var_40}], rcx
00016176  4889d1             mov     rcx, rdx
00016179  49d3e3             shl     r11, cl
0001617c  894c2410           mov     dword [rsp+0x10 {var_118}], ecx
00016180  48d3ed             shr     rbp, cl
00016183  49c1eb04           shr     r11, 0x4
00016187  4d89de             mov     r14, r11
0001618a  49c1e605           shl     r14, 0x5
0001618e  488b03             mov     rax, qword [rbx]
00016191  8a4c2410           mov     cl, byte [rsp+0x10]
00016195  4d89ea             mov     r10, r13
00016198  488d7001           lea     rsi, [rax+0x1]
0001619c  49d3e2             shl     r10, cl
0001619f  410fbf0477         movsx   eax, word [r15+rsi*2]
000161a4  4d01d2             add     r10, r10
000161a7  488933             mov     qword [rbx], rsi
000161aa  49c1ea04           shr     r10, 0x4  {0x0}
000161ae  4d89d1             mov     r9, r10
000161b1  89442414           mov     dword [rsp+0x14 {var_114}], eax
000161b5  4b8d0c1a           lea     rcx, [r10+r11]
000161b9  49c1e105           shl     r9, 0x5  {0x0}
000161bd  4d01e1             add     r9, r12
000161c0  410f1001           movups  xmm0, xmmword [r9]
000161c4  430f100c31         movups  xmm1, xmmword [r9+r14]
000161c9  49ffc2             inc     r10  {0x1}
000161cc  4983c120           add     r9, 0x20
000161d0  488d442468         lea     rax, [rsp+0x68 {var_c0}]
000161d5  48894c2418         mov     qword [rsp+0x18 {var_110}], rcx
000161da  4883ec20           sub     rsp, 0x20
000161de  0f11442448         movups  xmmword [rsp+0x48 {var_100}], xmm0
000161e3  410f1041f0         movups  xmm0, xmmword [r9-0x10]
000161e8  0f114c2468         movups  xmmword [rsp+0x68 {var_e0}], xmm1
000161ed  0f11442458         movups  xmmword [rsp+0x58 {var_f0}], xmm0
000161f2  430f104431f0       movups  xmm0, xmmword [r9+r14-0x10]
000161f8  0f118c24a8000000   movups  xmmword [rsp+0xa8 {var_a0}], xmm1
00016200  0f11442478         movups  xmmword [rsp+0x78 {var_d0}], xmm0
00016205  0f118424b8000000   movups  xmmword [rsp+0xb8 {var_90}], xmm0
0001620d  0f118c24c8000000   movups  xmmword [rsp+0xc8 {var_80}], xmm1
00016215  0f118424d8000000   movups  xmmword [rsp+0xd8 {var_70}], xmm0
0001621d  4889442428         mov     qword [rsp+0x28 {var_120}], rax {var_c0}
00016222  8b742434           mov     esi, dword [rsp+0x34 {var_114}]
00016226  488b7c2428         mov     rdi, qword [rsp+0x28 {var_120}]
0001622b  0f110c24           movups  xmmword [rsp {var_148}], xmm1
0001622f  0f11442410         movups  xmmword [rsp+0x10 {var_138}], xmm0
00016234  e81be5ffff         call    libcrux_ml_kem_vector_portable_arithmetic_montgomery_multiply_by_constant
{ Does not return }

00016239                                                                             0f 10 4c 24 48 0f 10                           ..L$H..
00016240  44 24 58 48 8d 7c 24 68 48 8b 74 24 28 0f 11 8c 24 c8 00 00 00 0f 11 84 24 d8 00 00 00 0f 11 0c  D$XH.|$hH.t$(...$.......$.......
00016260  24 0f 11 44 24 10 e8 9f e4 ff ff 0f 10 4c 24 48 0f 10 44 24 58 48 8d 7c 24 48 48 8b 74 24 28 0f  $..D$........L$H..D$XH.|$HH.t$(.
00016280  11 8c 24 c8 00 00 00 0f 11 84 24 d8 00 00 00 0f 11 0c 24 0f 11 44 24 10 e8 40 e4 ff ff 0f 10 5c  ..$.......$.......$..D$..@.....\
000162a0  24 48 0f 10 54 24 58 0f 10 4c 24 68 0f 10 44 24 78 0f 11 9c 24 c8 00 00 00 0f 11 94 24 d8 00 00  $H..T$X..L$h..D$x...$.......$...
000162c0  00 0f 11 8c 24 e8 00 00 00 0f 11 84 24 f8 00 00 00 0f 11 9c 24 88 00 00 00 0f 11 94 24 98 00 00  ....$.......$.......$.......$...
000162e0  00 0f 11 8c 24 a8 00 00 00 0f 11 84 24 b8 00 00 00 48 8b 4c 24 38 48 83 c4 20 41 0f 11 59 e0 41  ....$.......$....H.L$8H.. A..Y.A
00016300  0f 11 51 f0 43 0f 11 4c 31 e0 43 0f 11 44 31 f0 49 39 ca 0f 82 a7 fe ff ff 49 ff c5 4c 39 ed 0f  ..Q.C..L1.C..D1.I9.......I..L9..
00016320  85 69 fe ff ff 48 8b 84 24 e8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 d3 ee fe ff 48 81 c4  .i...H..$....dH+.%(...t......H..
00016340  f8 00 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 b6 03 ff ff                                         ....[]A\A]A^A_.....

00016353    void libcrux_sha3_portable_keccak_load_block_2c.constprop.0.isra.0(int64_t arg1, void* arg2) __noreturn

00016353  4155               push    r13 {var_8}
00016355  4154               push    r12 {var_10}
00016357  4989fc             mov     r12, rdi
0001635a  55                 push    rbp {var_18}
0001635b  53                 push    rbx {var_20}
0001635c  31db               xor     ebx, ebx  {0x0}
0001635e  4883ec28           sub     rsp, 0x28
00016362  644c8b2c25280000…  mov     r13, qword [fs:0x28]
0001636b  4c896c2418         mov     qword [rsp+0x18 {var_30}], r13
00016370  4989f5             mov     r13, rsi
00016373  488d6c2410         lea     rbp, [rsp+0x10 {var_38}]
00016378  498b44dd00         mov     rax, qword [r13+rbx*8]
0001637d  c644240700         mov     byte [rsp+0x7 {var_41}], 0x0
00016382  4889ea             mov     rdx, rbp {var_38}
00016385  4889442408         mov     qword [rsp+0x8 {var_40}], rax
0001638a  488b7c2407         mov     rdi, qword [rsp+0x7 {var_41}]
0001638f  408a74240f         mov     sil, byte [rsp+0xf {var_40+0x7}]
00016394  e8deeaffff         call    unwrap_41_ac
{ Does not return }

00016399                                                                             b9 05 00 00 00 48 89                           .....H.
000163a0  d8 31 d2 48 f7 f1 48 8b 4c 24 10 48 ff c3 48 f7 d8 83 e0 28 4c 01 e0 48 31 0c d0 48 83 fb 09 75  .1.H..H.L$.H..H....(L..H1..H...u
000163c0  b7 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 3a ee fe ff 48 83 c4 28 5b 5d 41 5c 41 5d  .H.D$.dH+.%(...t..:...H..([]A\A]
000163e0  e9 24 03 ff ff                                                                                   .$...

000163e5    void libcrux_sha3_generic_keccak_keccak_e9() __noreturn

000163e5  4157               push    r15 {var_8}
000163e7  4531ff             xor     r15d, r15d  {0x0}
000163ea  4156               push    r14 {var_10}
000163ec  41be48000000       mov     r14d, 0x48
000163f2  4155               push    r13 {var_18}
000163f4  4154               push    r12 {var_20}
000163f6  55                 push    rbp {var_28}
000163f7  4889fd             mov     rbp, rdi
000163fa  53                 push    rbx {var_30}
000163fb  4881ec98030000     sub     rsp, 0x398
00016402  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001640b  48899c2488030000   mov     qword [rsp+0x388 {var_40}], rbx
00016413  4889f3             mov     rbx, rsi
00016416  488d442458         lea     rax, [rsp+0x58 {var_370}]
0001641b  4889c7             mov     rdi, rax {var_370}
0001641e  4889442408         mov     qword [rsp+0x8 {var_3c0}], rax {var_370}
00016423  e814e2ffff         call    libcrux_sha3_generic_keccak_new_1e_f4
{ Does not return }

00016428                          48 8b 75 08 31 d2 0f 10 45 00 48 89 f0 49 f7 f6 49 39 c7 48 8d 84 24 c0          H.u.1...E.H..I..I9.H..$.
00016440  02 00 00 48 89 44 24 10 48 8d 84 24 f0 01 00 00 48 89 44 24 18 73 41 49 6b f7 48 48 8b 4c 24 10  ...H.D$.H..$....H.D$.sAIk.HH.L$.
00016460  49 ff c7 48 8b 7c 24 18 ba 48 00 00 00 0f 29 84 24 f0 01 00 00 e8 36 e9 ff ff 48 8b b4 24 c0 02  I..H.|$..H....).$.....6...H..$..
00016480  00 00 48 8b 7c 24 08 e8 c7 fe ff ff 48 8b 7c 24 08 e8 12 ea ff ff eb 90 48 29 d6 48 8d 4c 24 30  ..H.|$......H.|$........H).H.L$0
000164a0  48 8d 7c 24 20 0f 29 44 24 20 e8 01 e9 ff ff 48 8b 6c 24 38 48 8d bc 24 20 01 00 00 48 8d 35 7d  H.|$ .)D$ .....H.l$8H..$ ...H.5}
000164c0  1d 02 00 b9 32 00 00 00 4c 8d 84 24 20 01 00 00 f3 a5 48 85 ed 74 18 48 8b 74 24 30 4c 89 c7 b9  ....2...L..$ .....H..t.H.t$0L...
000164e0  c8 00 00 00 48 89 ea e8 64 ef fe ff 49 89 c0 c6 84 2c 20 01 00 00 06 4c 89 c6 48 8b 7c 24 18 b9  ....H...d...I...., ....L..H.|$..
00016500  32 00 00 00 80 8c 24 67 01 00 00 80 48 8d ac 24 c0 02 00 00 f3 a5 48 8b 7c 24 10 48 8d b4 24 f0  2.....$g....H..$......H.|$.H..$.
00016520  01 00 00 b9 32 00 00 00 f3 a5 48 8b 7c 24 08 48 89 ee e8 1c fe ff ff 48 8b 7c 24 08 e8 67 e9 ff  ....2.....H.|$.H.......H.|$..g..
00016540  ff 4c 8b 63 08 b9 48 00 00 00 31 d2 4c 89 e0 4d 89 e6 48 f7 f1 49 89 c7 49 29 d6 49 83 fc 47 77  .L.c..H...1.L..M..H..I..I).I..Gw
00016560  1f 48 8b 7c 24 08 48 89 ee e8 81 e8 ff ff 48 8b 03 48 8b 4b 08 48 89 ee 48 89 c7 e9 ec 00 00 00  .H.|$.H.......H..H.K.H..H.......
00016580  48 8b 1b 48 8b 7c 24 08 49 8d 6c 24 b8 45 31 ed 48 8d 74 24 40 48 89 ac 24 38 01 00 00 48 89 9c  H..H.|$.I.l$.E1.H.t$@H..$8...H..
000165a0  24 20 01 00 00 48 83 c3 48 48 c7 84 24 28 01 00 00 48 00 00 00 0f 28 84 24 20 01 00 00 48 89 9c  $ ...H..HH..$(...H....(.$ ...H..
000165c0  24 30 01 00 00 0f 29 44 24 40 e8 f0 e7 ff ff 49 ff c5 4d 39 fd 74 57 48 89 9c 24 c0 02 00 00 48  $0....)D$@.....I..M9.tWH..$....H
000165e0  8b 7c 24 08 48 83 ed 48 48 83 c3 48 48 c7 84 24 c8 02 00 00 48 00 00 00 0f 28 84 24 c0 02 00 00  .|$.H..HH..HH..$....H....(.$....
00016600  48 89 9c 24 d0 02 00 00 48 89 ac 24 d8 02 00 00 0f 29 84 24 f0 01 00 00 e8 8b e8 ff ff 48 8b 74  H..$....H..$.....).$.........H.t
00016620  24 18 48 8b 7c 24 08 e8 93 e7 ff ff eb a1 4d 39 e6 73 3b 48 8b 7c 24 18 48 8b 74 24 08 b9 32 00  $.H.|$........M9.s;H.|$.H.t$..2.
00016640  00 00 4c 8d a4 24 f0 01 00 00 f3 a5 4c 89 e7 e8 54 e8 ff ff 48 8b 74 24 10 4c 89 e7 e8 8e e7 ff  ..L..$......L...T...H.t$.L......
00016660  ff 48 8b 74 24 10 48 89 df 48 89 e9 f3 a4 48 8b 84 24 88 03 00 00 64 48 2b 04 25 28 00 00 00 74  .H.t$.H..H....H..$....dH+.%(...t
00016680  05 e8 8a eb fe ff 48 81 c4 98 03 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 6d 00 ff ff              ......H......[]A\A]A^A_.m...

0001669c    void libcrux_ml_kem_hash_functions_portable_G() __noreturn

0001669c  55                 push    rbp {var_8}
0001669d  4989f8             mov     r8, rdi
000166a0  b910000000         mov     ecx, 0x10
000166a5  53                 push    rbx {var_10}
000166a6  4889d3             mov     rbx, rdx
000166a9  4883ec78           sub     rsp, 0x78
000166ad  64488b0425280000…  mov     rax, qword [fs:0x28]
000166b6  4889442468         mov     qword [rsp+0x68 {var_20}], rax
000166bb  31c0               xor     eax, eax  {0x0}
000166bd  488d7c2428         lea     rdi, [rsp+0x28 {s}]
000166c2  4889742418         mov     qword [rsp+0x18 {var_70}], rsi
000166c7  4889e6             mov     rsi, rsp
000166ca  488d6c2428         lea     rbp, [rsp+0x28 {s}]
000166cf  4c89442410         mov     qword [rsp+0x10 {var_78}], r8
000166d4  48892c24           mov     qword [rsp {var_88}], rbp {s}
000166d8  48c7442408400000…  mov     qword [rsp+0x8 {var_80}], 0x40
000166e1  f3ab               rep stosd dword [rdi] {var_a0} {s}  {0x0}
000166e3  488d7c2410         lea     rdi, [rsp+0x10]
000166e8  e8f8fcffff         call    libcrux_sha3_generic_keccak_keccak_e9
{ Does not return }

000166ed                                         b9 10 00 00 00 48 89 df 48 89 ee f3 a5 48 8b 44 24 68 64               .....H..H....H.D$hd
00016700  48 2b 04 25 28 00 00 00 74 05 e8 01 eb fe ff 48 83 c4 78 5b 5d e9 ef ff fe ff                    H+.%(...t......H..x[].....

0001671a    void libcrux_sha3_portable_keccak_load_block_2c0.constprop.0.isra.0(int64_t arg1, void* arg2) __noreturn

0001671a  4155               push    r13 {var_8}
0001671c  4154               push    r12 {var_10}
0001671e  55                 push    rbp {var_18}
0001671f  4889fd             mov     rbp, rdi
00016722  53                 push    rbx {var_20}
00016723  31db               xor     ebx, ebx  {0x0}
00016725  4883ec28           sub     rsp, 0x28
00016729  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00016732  4c896c2418         mov     qword [rsp+0x18 {var_30}], r13
00016737  4989f5             mov     r13, rsi
0001673a  4c8d642410         lea     r12, [rsp+0x10 {var_38}]
0001673f  498b44dd00         mov     rax, qword [r13+rbx*8]
00016744  c644240700         mov     byte [rsp+0x7 {var_41}], 0x0
00016749  4c89e2             mov     rdx, r12 {var_38}
0001674c  4889442408         mov     qword [rsp+0x8 {var_40}], rax
00016751  488b7c2407         mov     rdi, qword [rsp+0x7 {var_41}]
00016756  408a74240f         mov     sil, byte [rsp+0xf {var_40+0x7}]
0001675b  e817e7ffff         call    unwrap_41_ac
{ Does not return }

00016760  b9 05 00 00 00 48 89 d8 31 d2 48 f7 f1 48 8b 4c 24 10 48 ff c3 48 6b c0 28 48 01 e8 48 31 0c d0  .....H..1.H..H.L$.H..Hk.(H..H1..
00016780  48 83 fb 11 75 b9 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 75 ea fe ff 48 83 c4 28 5b  H...u.H.D$.dH+.%(...t..u...H..([
000167a0  5d 41 5c 41 5d e9 5f ff fe ff                                                                    ]A\A]._...

000167aa    void libcrux_ml_kem_polynomial_from_i16_array_89_c1.constprop.0.isra.0() __noreturn

000167aa  55                 push    rbp {var_8}
000167ab  53                 push    rbx {var_10}
000167ac  4889fb             mov     rbx, rdi
000167af  4881ecb8000000     sub     rsp, 0xb8
000167b6  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000167bf  4889ac24a8000000   mov     qword [rsp+0xa8 {var_20}], rbp
000167c7  4889f5             mov     rbp, rsi
000167ca  e89ae0ffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }


000167cf    void sub_167cf(int64_t arg1 @ rbx, void* arg2 @ rbp, int64_t arg3, int64_t arg4, int64_t arg5) __noreturn

000167cf  31c0               xor     eax, eax  {0x0}

000167d1  488d540500         lea     rdx, [rbp+rax]
000167d6  4883c020           add     rax, 0x20
000167da  0f100a             movups  xmm1, xmmword [rdx]
000167dd  0f104210           movups  xmm0, xmmword [rdx+0x10]
000167e1  0f114c18e0         movups  xmmword [rax+rbx-0x20], xmm1
000167e6  0f114418f0         movups  xmmword [rax+rbx-0x10], xmm0
000167eb  0f114c2468         movups  xmmword [rsp+0x68 {arg_68}], xmm1
000167f0  0f11442478         movups  xmmword [rsp+0x78 {arg_78}], xmm0
000167f5  0f118c2488000000   movups  xmmword [rsp+0x88 {arg_88}], xmm1
000167fd  0f11842498000000   movups  xmmword [rsp+0x98 {arg_98}], xmm0
00016805  0f114c2446         movups  xmmword [rsp+0x46 {arg_46}], xmm1
0001680a  0f11442456         movups  xmmword [rsp+0x56 {arg_56}], xmm0
0001680f  0f114c2426         movups  xmmword [rsp+0x26 {arg_26}], xmm1
00016814  0f11442436         movups  xmmword [rsp+0x36 {arg_36}], xmm0
00016819  0f114c2406         movups  xmmword [rsp+0x6 {__return_addr+0x6}], xmm1
0001681e  0f11442416         movups  xmmword [rsp+0x16 {arg_16}], xmm0
00016823  483d00020000       cmp     rax, 0x200
00016829  75a6               jne     0x167d1

0001682b  488b8424a8000000   mov     rax, qword [rsp+0xa8 {arg3}]
00016833  64482b0425280000…  sub     rax, qword [fs:0x28]
0001683c  7405               je      0x16843

0001683e  e8cde9feff         call    __stack_chk_fail
{ Does not return }

00016843  4881c4b8000000     add     rsp, 0xb8
0001684a  4889d8             mov     rax, rbx
0001684d  5b                 pop     rbx {arg4}
0001684e  5d                 pop     rbp {arg5}
0001684f  e9b5fefeff         jmp     __x86_return_thunk
{ Does not return }


00016854    void libcrux_ml_kem_sampling_sample_from_binomial_distribution_2_85.constprop.0(int64_t arg1, int64_t arg2) __noreturn

00016854  53                 push    rbx {var_8}
00016855  b980000000         mov     ecx, 0x80
0001685a  4889fb             mov     rbx, rdi
0001685d  4989f1             mov     r9, rsi
00016860  31f6               xor     esi, esi  {0x0}
00016862  4881ec10020000     sub     rsp, 0x210
00016869  64488b0425280000…  mov     rax, qword [fs:0x28]
00016872  4889842408020000   mov     qword [rsp+0x208 {var_10}], rax
0001687a  31c0               xor     eax, eax  {0x0}
0001687c  488d7c2408         lea     rdi, [rsp+0x8 {s}]
00016881  f3ab               rep stosd dword [rdi] {var_410} {s}  {0x0}

00016883  418b04b1           mov     eax, dword [r9+rsi*4]
00016887  4c8d14f500000000   lea     r10, [rsi*8]
0001688f  89c2               mov     edx, eax
00016891  2555555555         and     eax, 0x55555555
00016896  d1ea               shr     edx, 0x1
00016898  81e255555555       and     edx, 0x55555555
0001689e  01c2               add     edx, eax
000168a0  31c0               xor     eax, eax  {0x0}

000168a2  89c1               mov     ecx, eax
000168a4  4189d0             mov     r8d, edx
000168a7  4189d3             mov     r11d, edx
000168aa  89c7               mov     edi, eax
000168ac  41d3e8             shr     r8d, cl
000168af  8d4802             lea     ecx, [rax+0x2]
000168b2  c1ef02             shr     edi, 0x2
000168b5  83c004             add     eax, 0x4
000168b8  41d3eb             shr     r11d, cl
000168bb  4183e003           and     r8d, 0x3
000168bf  4c01d7             add     rdi, r10
000168c2  4489d9             mov     ecx, r11d
000168c5  83e103             and     ecx, 0x3
000168c8  4129c8             sub     r8d, ecx
000168cb  664489447c08       mov     word [rsp+rdi*2+0x8 {s}], r8w
000168d1  83f820             cmp     eax, 0x20
000168d4  75cc               jne     0x168a2

000168d6  48ffc6             inc     rsi
000168d9  4883fe20           cmp     rsi, 0x20
000168dd  75a4               jne     0x16883

000168df  488d742408         lea     rsi, [rsp+0x8 {s}]
000168e4  4889df             mov     rdi, rbx
000168e7  e8befeffff         call    libcrux_ml_kem_polynomial_from_i16_array_89_c1.constprop.0.isra.0
{ Does not return }

000168ec                                      48 8b 84 24 08 02 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8              H..$....dH+.%(...t..
00016900  0c e9 fe ff 48 81 c4 10 02 00 00 48 89 d8 5b e9 f5 fd fe ff                                      ....H......H..[.....

00016914    void libcrux_ml_kem_vector_portable_arithmetic_barrett_reduce(int128_t* arg1, int128_t arg2) __noreturn

00016914  4889f8             mov     rax, rdi
00016917  488d4c2408         lea     rcx, [rsp+0x8 {arg_8}]
0001691c  488d7c2428         lea     rdi, [rsp+0x28 {arg_28}]

00016921  0fbf11             movsx   edx, word [rcx]
00016924  4883c102           add     rcx, 0x2
00016928  89d6               mov     esi, edx
0001692a  69d2bf4e0000       imul    edx, edx, 0x4ebf
00016930  81c200000002       add     edx, 0x2000000
00016936  c1fa1a             sar     edx, 0x1a
00016939  6669d2fff2         imul    dx, dx, 0xf2ff
0001693e  01f2               add     edx, esi
00016940  668951fe           mov     word [rcx-0x2], dx
00016944  4839cf             cmp     rdi {arg_28}, rcx
00016947  75d8               jne     0x16921

00016949  0f10442408         movups  xmm0, xmmword [rsp+0x8 {arg_8}]
0001694e  0f1100             movups  xmmword [rax], xmm0
00016951  0f10442418         movups  xmm0, xmmword [rsp+0x18 {arg2}]
00016956  0f114010           movups  xmmword [rax+0x10], xmm0
0001695a  e9aafdfeff         jmp     __x86_return_thunk
{ Does not return }


0001695f    void libcrux_ml_kem_polynomial_poly_barrett_reduce_89_8b(int128_t* arg1) __noreturn

0001695f  4883ec58           sub     rsp, 0x58
00016963  644c8b0425280000…  mov     r8, qword [fs:0x28]
0001696c  4c89442448         mov     qword [rsp+0x48 {var_10}], r8
00016971  4989f8             mov     r8, rdi
00016974  4c8d542408         lea     r10, [rsp+0x8 {var_50}]
00016979  4d8d8800020000     lea     r9, [r8+0x200]
00016980  410f104010         movups  xmm0, xmmword [r8+0x10]
00016985  410f1008           movups  xmm1, xmmword [r8]
00016989  4883ec20           sub     rsp, 0x20
0001698d  4c89d7             mov     rdi, r10 {var_50}
00016990  4983c020           add     r8, 0x20
00016994  0f11442410         movups  xmmword [rsp+0x10 {var_68}], xmm0
00016999  0f110c24           movups  xmmword [rsp {var_78}], xmm1
0001699d  e872ffffff         call    libcrux_ml_kem_vector_portable_arithmetic_barrett_reduce
{ Does not return }

000169a2        0f 10 44 24 28 41 0f 11 40 e0 0f 10 44 24 38 48 83 c4 20 41 0f 11 40 f0 4d 39 c8 75 c1 48    ..D$(A..@...D$8H.. A..@.M9.u.H
000169c0  8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8 3c e8 fe ff 48 83 c4 58 e9 2c fd fe ff           .D$HdH+.%(...t..<...H..X.,...

000169dd    void libcrux_ml_kem_invert_ntt_invert_ntt_at_layer_4_plus_6e(int64_t* arg1, int64_t arg2, char arg3) __noreturn

000169dd  4157               push    r15 {var_8}
000169df  41bb01000000       mov     r11d, 0x1
000169e5  4c8d3d34190200     lea     r15, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
000169ec  4156               push    r14 {var_10}
000169ee  4155               push    r13 {var_18}
000169f0  4989f5             mov     r13, rsi
000169f3  4154               push    r12 {var_20}
000169f5  41bc80000000       mov     r12d, 0x80
000169fb  55                 push    rbp {var_28}
000169fc  4889fd             mov     rbp, rdi
000169ff  53                 push    rbx {var_30}
00016a00  31db               xor     ebx, ebx
00016a02  4881ec28010000     sub     rsp, 0x128
00016a09  64488b0c25280000…  mov     rcx, qword [fs:0x28]
00016a12  48898c2418010000   mov     qword [rsp+0x118 {var_40}], rcx
00016a1a  4889d1             mov     rcx, rdx
00016a1d  49d3e3             shl     r11, cl
00016a20  890c24             mov     dword [rsp {var_158}], ecx
00016a23  49d3ec             shr     r12, cl
00016a26  49c1eb04           shr     r11, 0x4
00016a2a  4d89de             mov     r14, r11
00016a2d  49c1e605           shl     r14, 0x5
00016a31  488b4500           mov     rax, qword [rbp]
00016a35  8a0c24             mov     cl, byte [rsp]
00016a38  4989da             mov     r10, rbx
00016a3b  488d50ff           lea     rdx, [rax-0x1]
00016a3f  49d3e2             shl     r10, cl
00016a42  410fbf0457         movsx   eax, word [r15+rdx*2]
00016a47  4d01d2             add     r10, r10
00016a4a  48895500           mov     qword [rbp], rdx
00016a4e  49c1ea04           shr     r10, 0x4  {0x0}
00016a52  4d89d1             mov     r9, r10
00016a55  89442404           mov     dword [rsp+0x4 {var_154}], eax
00016a59  4b8d0c1a           lea     rcx, [r10+r11]
00016a5d  49c1e105           shl     r9, 0x5  {0x0}
00016a61  4d01e9             add     r9, r13
00016a64  410f1001           movups  xmm0, xmmword [r9]
00016a68  430f100c31         movups  xmm1, xmmword [r9+r14]
00016a6d  49ffc2             inc     r10  {0x1}
00016a70  4983c120           add     r9, 0x20
00016a74  48894c2408         mov     qword [rsp+0x8 {var_150}], rcx
00016a79  488d7c2458         lea     rdi, [rsp+0x58 {var_100}]
00016a7e  488d742418         lea     rsi, [rsp+0x18 {var_140}]
00016a83  4883ec20           sub     rsp, 0x20
00016a87  0f11442438         movups  xmmword [rsp+0x38 {var_140}], xmm0
00016a8c  410f1041f0         movups  xmm0, xmmword [r9-0x10]
00016a91  0f114c2458         movups  xmmword [rsp+0x58 {var_120}], xmm1
00016a96  0f11442448         movups  xmmword [rsp+0x48 {var_130}], xmm0
00016a9b  430f104431f0       movups  xmm0, xmmword [r9+r14-0x10]
00016aa1  0f118c24f8000000   movups  xmmword [rsp+0xf8 {var_80}], xmm1
00016aa9  0f11442468         movups  xmmword [rsp+0x68 {var_110}], xmm0
00016aae  0f11842408010000   movups  xmmword [rsp+0x108 {var_70}], xmm0
00016ab6  0f110c24           movups  xmmword [rsp {var_178}], xmm1
00016aba  0f11442410         movups  xmmword [rsp+0x10 {var_168}], xmm0
00016abf  e846dcffff         call    libcrux_ml_kem_vector_portable_arithmetic_sub
{ Does not return }

00016ac4              0f 10 4c 24 38 0f 10 44 24 48 48 8d bc 24 98 00 00 00 0f 11 8c 24 f8 00 00 00 0f 11      ..L$8..D$HH..$.......$......
00016ae0  84 24 08 01 00 00 48 83 c4 20 48 8d 74 24 38 48 83 ec 20 4c 8d 84 24 f8 00 00 00 0f 11 0c 24 0f  .$....H.. H.t$8H.. L..$.......$.
00016b00  11 44 24 10 e8 d4 db ff ff 0f 10 8c 24 98 00 00 00 0f 10 84 24 a8 00 00 00 4c 89 c7 0f 11 8c 24  .D$.........$.......$....L.....$
00016b20  d8 00 00 00 0f 11 84 24 e8 00 00 00 0f 11 0c 24 0f 11 44 24 10 e8 da fd ff ff 0f 10 84 24 f8 00  .......$.......$..D$.........$..
00016b40  00 00 0f 10 4c 24 78 4c 89 c7 8b 74 24 24 0f 11 44 24 38 0f 10 84 24 08 01 00 00 0f 11 8c 24 b8  ....L$xL...t$$..D$8...$.......$.
00016b60  00 00 00 0f 11 44 24 48 0f 10 84 24 88 00 00 00 0f 11 8c 24 d8 00 00 00 0f 11 84 24 c8 00 00 00  .....D$H...$.......$.......$....
00016b80  0f 11 84 24 e8 00 00 00 0f 11 0c 24 0f 11 44 24 10 e8 be db ff ff 0f 10 5c 24 38 0f 10 54 24 48  ...$.......$..D$........\$8..T$H
00016ba0  0f 10 8c 24 f8 00 00 00 0f 10 84 24 08 01 00 00 0f 11 9c 24 f8 00 00 00 0f 11 4c 24 58 0f 11 44  ...$.......$.......$......L$X..D
00016bc0  24 68 0f 11 94 24 08 01 00 00 0f 11 8c 24 18 01 00 00 0f 11 84 24 28 01 00 00 0f 11 9c 24 b8 00  $h...$.......$.......$(......$..
00016be0  00 00 0f 11 94 24 c8 00 00 00 0f 11 8c 24 d8 00 00 00 0f 11 84 24 e8 00 00 00 48 8b 4c 24 28 48  .....$.......$.......$....H.L$(H
00016c00  83 c4 20 41 0f 11 59 e0 41 0f 11 51 f0 43 0f 11 4c 31 e0 43 0f 11 44 31 f0 49 39 ca 0f 82 42 fe  .. A..Y.A..Q.C..L1.C..D1.I9...B.
00016c20  ff ff 48 ff c3 49 39 dc 0f 85 03 fe ff ff 48 8b 84 24 18 01 00 00 64 48 2b 04 25 28 00 00 00 74  ..H..I9.......H..$....dH+.%(...t
00016c40  05 e8 ca e5 fe ff 48 81 c4 28 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 ad fa fe ff              ......H..(...[]A\A]A^A_.....

00016c5c    void libcrux_ml_kem_invert_ntt_invert_ntt_montgomery_f6(int128_t* arg1) __noreturn

00016c5c  4157               push    r15 {var_8}
00016c5e  488d05bb160200     lea     rax, [rel libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R]
00016c65  4156               push    r14 {var_10}
00016c67  4989c6             mov     r14, rax  {libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R}
00016c6a  4155               push    r13 {var_18}
00016c6c  4154               push    r12 {var_20}
00016c6e  55                 push    rbp {var_28}
00016c6f  bd80000000         mov     ebp, 0x80
00016c74  53                 push    rbx {var_30}
00016c75  4881ec98000000     sub     rsp, 0x98
00016c7c  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00016c85  48899c2488000000   mov     qword [rsp+0x88 {var_40}], rbx
00016c8d  4889fb             mov     rbx, rdi
00016c90  488d4c2468         lea     rcx, [rsp+0x68 {var_60}]
00016c95  48890c24           mov     qword [rsp {var_c8}], rcx {var_60}
00016c99  4989db             mov     r11, rbx
00016c9c  4989d9             mov     r9, rbx
00016c9f  410f1009           movups  xmm1, xmmword [r9]
00016ca3  410f104110         movups  xmm0, xmmword [r9+0x10]
00016ca8  b902000000         mov     ecx, 0x2
00016cad  31d2               xor     edx, edx  {0x0}
00016caf  0fbfb0fe000000     movsx   esi, word [rax+0xfe]  {0x65c}  {data_3841e}
00016cb6  488b3c24           mov     rdi, qword [rsp {var_c8}]
00016cba  4c894c2418         mov     qword [rsp+0x18 {var_b0}], r9
00016cbf  4883ed04           sub     rbp, 0x4  {0x7c}
00016cc3  440fbfa0f8000000   movsx   r12d, word [rax+0xf8]  {0x3be}  {data_38418}
00016ccb  440fbfa8fa000000   movsx   r13d, word [rax+0xfa]  {data_3841a}  {0xfffffa4c}
00016cd3  4889442410         mov     qword [rsp+0x10 {var_b8}], rax  {libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R}
00016cd8  440fbfb8fc000000   movsx   r15d, word [rax+0xfc]  {0x5f2}  {data_3841c}
00016ce0  8974240c           mov     dword [rsp+0xc {var_bc}], esi  {0x65c}
00016ce4  0f114c2428         movups  xmmword [rsp+0x28 {var_a0}], xmm1
00016ce9  0f11442438         movups  xmmword [rsp+0x38 {var_90}], xmm0
00016cee  0f114c2468         movups  xmmword [rsp+0x68 {var_60}], xmm1
00016cf3  0f11442478         movups  xmmword [rsp+0x78 {var_50}], xmm0
00016cf8  e8c4daffff         call    libcrux_ml_kem_vector_portable_ntt_inv_ntt_step
{ Does not return }

00016cfd                                                                                         8b 74 24                               .t$
00016d00  0c 48 8b 3c 24 b9 03 00 00 00 ba 01 00 00 00 e8 ad da ff ff 48 8b 3c 24 b9 06 00 00 00 44 89 fe  .H.<$...............H.<$.....D..
00016d20  ba 04 00 00 00 e8 97 da ff ff 48 8b 3c 24 b9 07 00 00 00 44 89 fe ba 05 00 00 00 e8 81 da ff ff  ..........H.<$.....D............
00016d40  48 8b 3c 24 b9 0a 00 00 00 44 89 ee ba 08 00 00 00 e8 6b da ff ff 48 8b 3c 24 b9 0b 00 00 00 44  H.<$.....D........k...H.<$.....D
00016d60  89 ee ba 09 00 00 00 e8 55 da ff ff 48 8b 3c 24 b9 0e 00 00 00 44 89 e6 ba 0c 00 00 00 e8 3f da  ........U...H.<$.....D........?.
00016d80  ff ff 48 8b 3c 24 b9 0f 00 00 00 44 89 e6 ba 0d 00 00 00 e8 29 da ff ff 4c 8b 4c 24 18 0f 10 4c  ..H.<$.....D........)...L.L$...L
00016da0  24 68 48 89 6c 24 20 0f 10 44 24 78 48 8b 44 24 10 41 0f 11 09 49 83 c1 20 41 0f 11 41 f0 48 83  $hH.l$ ..D$xH.D$.A...I.. A..A.H.
00016dc0  e8 08 0f 11 4c 24 48 0f 11 44 24 58 48 83 fd 40 0f 85 c9 fe ff ff 49 89 df 4c 8d 2d 42 15 02 00  ....L$H..D$XH..@......I..L.-B...
00016de0  48 83 ed 02 41 0f 10 0f 41 0f 10 47 10 31 d2 41 0f bf 44 6d 00 48 8b 3c 24 b9 04 00 00 00 49 83  H...A...A..G.1.A..Dm.H.<$.....I.
00016e00  c7 20 45 0f bf 24 6e 0f 11 4c 24 28 89 c6 89 44 24 0c 0f 11 44 24 38 0f 11 4c 24 68 0f 11 44 24  . E..$n..L$(...D$...D$8..L$h..D$
00016e20  78 e8 9b d9 ff ff 8b 74 24 0c 48 8b 3c 24 b9 05 00 00 00 ba 01 00 00 00 e8 84 d9 ff ff 8b 74 24  x......t$.H.<$................t$
00016e40  0c 48 8b 3c 24 b9 06 00 00 00 ba 02 00 00 00 e8 6d d9 ff ff 8b 74 24 0c 48 8b 3c 24 b9 07 00 00  .H.<$...........m....t$.H.<$....
00016e60  00 ba 03 00 00 00 e8 56 d9 ff ff 48 8b 3c 24 b9 0c 00 00 00 44 89 e6 ba 08 00 00 00 e8 40 d9 ff  .......V...H.<$.....D........@..
00016e80  ff 48 8b 3c 24 b9 0d 00 00 00 44 89 e6 ba 09 00 00 00 e8 2a d9 ff ff 48 8b 3c 24 b9 0e 00 00 00  .H.<$.....D........*...H.<$.....
00016ea0  44 89 e6 ba 0a 00 00 00 e8 14 d9 ff ff 48 8b 3c 24 b9 0f 00 00 00 44 89 e6 ba 0b 00 00 00 e8 fe  D............H.<$.....D.........
00016ec0  d8 ff ff 0f 10 4c 24 68 0f 10 44 24 78 48 89 6c 24 20 41 0f 11 4f e0 41 0f 11 47 f0 0f 11 4c 24  .....L$h..D$xH.l$ A..O.A..G...L$
00016ee0  48 0f 11 44 24 58 48 83 fd 20 0f 85 f0 fe ff ff 41 bc 1f 00 00 00 43 0f bf 2c 66 41 0f 10 0b b9  H..D$XH.. ......A.....C..,fA....
00016f00  08 00 00 00 31 d2 41 0f 10 43 10 48 8b 3c 24 4c 89 64 24 20 49 ff cc 89 ee 0f 11 4c 24 48 49 83  ....1.A..C.H.<$L.d$ I......L$HI.
00016f20  c3 20 0f 11 44 24 58 0f 11 4c 24 68 0f 11 44 24 78 e8 8b d8 ff ff 48 8b 3c 24 b9 09 00 00 00 89  . ..D$X..L$h..D$x.....H.<$......
00016f40  ee ba 01 00 00 00 e8 76 d8 ff ff 48 8b 3c 24 b9 0a 00 00 00 89 ee ba 02 00 00 00 e8 61 d8 ff ff  .......v...H.<$.............a...
00016f60  48 8b 3c 24 b9 0b 00 00 00 89 ee ba 03 00 00 00 e8 4c d8 ff ff 48 8b 3c 24 b9 0c 00 00 00 89 ee  H.<$.............L...H.<$.......
00016f80  ba 04 00 00 00 e8 37 d8 ff ff 48 8b 3c 24 b9 0d 00 00 00 89 ee ba 05 00 00 00 e8 22 d8 ff ff 48  ......7...H.<$............."...H
00016fa0  8b 3c 24 b9 0e 00 00 00 89 ee ba 06 00 00 00 e8 0d d8 ff ff 48 8b 3c 24 b9 0f 00 00 00 89 ee ba  .<$.................H.<$........
00016fc0  07 00 00 00 e8 f8 d7 ff ff 0f 10 4c 24 68 0f 10 44 24 78 41 0f 11 4b e0 41 0f 11 43 f0 0f 11 4c  ...........L$h..D$xA..K.A..C...L
00016fe0  24 28 0f 11 44 24 38 49 83 fc 0f 0f 85 05 ff ff ff 48 8d 6c 24 20 ba 04 00 00 00 48 89 de 48 89  $(..D$8I.........H.l$ .....H..H.
00017000  ef e8 d7 f9 ff ff ba 05 00 00 00 48 89 de 48 89 ef e8 c7 f9 ff ff ba 06 00 00 00 48 89 de 48 89  ...........H..H............H..H.
00017020  ef e8 b7 f9 ff ff ba 07 00 00 00 48 89 de 48 89 ef e8 a7 f9 ff ff 48 8b 84 24 88 00 00 00 64 48  ...........H..H.......H..$....dH
00017040  2b 04 25 28 00 00 00 74 05 e8 c2 e1 fe ff 48 81 c4 98 00 00 00 48 89 df 5b 5d 41 5c 41 5d 41 5e  +.%(...t......H......H..[]A\A]A^
00017060  41 5f e9 f8 f8 ff ff                                                                             A_.....

00017067    void libcrux_sha3_portable_keccak_store_block_580(int64_t arg1, int64_t* arg2) __noreturn

00017067  31c9               xor     ecx, ecx  {0x0}
00017069  41b805000000       mov     r8d, 0x5

0001706f  4889c8             mov     rax, rcx
00017072  31d2               xor     edx, edx  {0x0}
00017074  49f7f0             div     r8  {0x5}
00017077  486bc028           imul    rax, rax, 0x28
0001707b  4801f8             add     rax, rdi
0001707e  488b14d0           mov     rdx, qword [rax+rdx*8]
00017082  488b06             mov     rax, qword [rsi]
00017085  488914c8           mov     qword [rax+rcx*8], rdx
00017089  48ffc1             inc     rcx
0001708c  4883f911           cmp     rcx, 0x11
00017090  75dd               jne     0x1706f

00017092  e972f6feff         jmp     __x86_return_thunk
{ Does not return }


00017097    void libcrux_sha3_portable_keccak_store_block_full_2d0(int64_t arg1) __noreturn

00017097  4881ecb8010000     sub     rsp, 0x1b8
0001709e  4889fa             mov     rdx, rdi
000170a1  b932000000         mov     ecx, 0x32
000170a6  4989f1             mov     r9, rsi
000170a9  64488b0425280000…  mov     rax, qword [fs:0x28]
000170b2  48898424a8010000   mov     qword [rsp+0x1a8 {var_10}], rax
000170ba  31c0               xor     eax, eax  {0x0}
000170bc  488d7c2418         lea     rdi, [rsp+0x18 {s}]
000170c1  4c8d542418         lea     r10, [rsp+0x18 {s}]
000170c6  4889e6             mov     rsi, rsp {var_1b8}
000170c9  4c891424           mov     qword [rsp {var_1b8}], r10 {s}
000170cd  f3ab               rep stosd dword [rdi] {var_268} {s}  {0x0}
000170cf  4889d7             mov     rdi, rdx
000170d2  e890ffffff         call    libcrux_sha3_portable_keccak_store_block_580
{ Does not return }

000170d7                                                                       48 8d bc 24 e0 00 00 00 b9                         H..$.....
000170e0  32 00 00 00 4c 89 d6 f3 a5 48 8d b4 24 e0 00 00 00 b9 32 00 00 00 4c 89 cf f3 a5 48 8b 84 24 a8  2...L....H..$.....2...L....H..$.
00017100  01 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 fd e0 fe ff 48 81 c4 b8 01 00 00 e9 ea f5 fe ff     ...dH+.%(...t......H...........

0001711f    void libcrux_sha3_generic_keccak_squeeze_first_and_last_c50(int64_t arg1) __noreturn

0001711f  55                 push    rbp {var_8}
00017120  53                 push    rbx {var_10}
00017121  4881ecd8000000     sub     rsp, 0xd8
00017128  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00017131  4889ac24c8000000   mov     qword [rsp+0xc8 {var_20}], rbp
00017139  4889f5             mov     rbp, rsi
0001713c  4889e6             mov     rsi, rsp {var_e8}
0001713f  e853ffffff         call    libcrux_sha3_portable_keccak_store_block_full_2d0
{ Does not return }

00017144              48 89 e6 48 8b 45 00 48 8b 4d 08 48 89 c7 f3 a4 48 8b 84 24 c8 00 00 00 64 48 2b 04      H..H.E.H.M.H....H..$....dH+.
00017160  25 28 00 00 00 74 05 e8 a4 e0 fe ff 48 81 c4 d8 00 00 00 5b 5d e9 8f f5 fe ff                    %(...t......H......[].....

0001717a    void libcrux_sha3_generic_keccak_keccak_e90() __noreturn

0001717a  4157               push    r15 {var_8}
0001717c  4531ff             xor     r15d, r15d  {0x0}
0001717f  4156               push    r14 {var_10}
00017181  41be88000000       mov     r14d, 0x88
00017187  4155               push    r13 {var_18}
00017189  4154               push    r12 {var_20}
0001718b  55                 push    rbp {var_28}
0001718c  4889fd             mov     rbp, rdi
0001718f  53                 push    rbx {var_30}
00017190  4881ec98030000     sub     rsp, 0x398
00017197  64488b1c25280000…  mov     rbx, qword [fs:0x28]
000171a0  48899c2488030000   mov     qword [rsp+0x388 {var_40}], rbx
000171a8  4889f3             mov     rbx, rsi
000171ab  488d442458         lea     rax, [rsp+0x58 {var_370}]
000171b0  4889c7             mov     rdi, rax {var_370}
000171b3  4889442408         mov     qword [rsp+0x8 {var_3c0}], rax {var_370}
000171b8  e87fd4ffff         call    libcrux_sha3_generic_keccak_new_1e_f4
{ Does not return }

000171bd                                                                                         48 8b 75                               H.u
000171c0  08 31 d2 0f 10 45 00 48 89 f0 49 f7 f6 49 39 c7 48 8d 84 24 c0 02 00 00 48 89 44 24 10 48 8d 84  .1...E.H..I..I9.H..$....H.D$.H..
000171e0  24 f0 01 00 00 48 89 44 24 18 73 44 48 8b 4c 24 10 48 8b 7c 24 18 49 69 f7 88 00 00 00 49 ff c7  $....H.D$.sDH.L$.H.|$.Ii.....I..
00017200  ba 88 00 00 00 0f 29 84 24 f0 01 00 00 e8 9e db ff ff 48 8b b4 24 c0 02 00 00 48 8b 7c 24 08 e8  ......).$.........H..$....H.|$..
00017220  f6 f4 ff ff 48 8b 7c 24 08 e8 7a dc ff ff eb 8d 48 29 d6 48 8d 4c 24 30 48 8d 7c 24 20 0f 29 44  ....H.|$..z.....H).H.L$0H.|$ .)D
00017240  24 20 e8 69 db ff ff 48 8b 6c 24 38 48 8d bc 24 20 01 00 00 48 8d 35 e5 0f 02 00 b9 32 00 00 00  $ .i...H.l$8H..$ ...H.5.....2...
00017260  4c 8d 84 24 20 01 00 00 f3 a5 48 85 ed 74 18 48 8b 74 24 30 4c 89 c7 b9 c8 00 00 00 48 89 ea e8  L..$ .....H..t.H.t$0L.......H...
00017280  cc e1 fe ff 49 89 c0 c6 84 2c 20 01 00 00 06 4c 89 c6 48 8b 7c 24 18 b9 32 00 00 00 80 8c 24 a7  ....I...., ....L..H.|$..2.....$.
000172a0  01 00 00 80 f3 a5 48 8b 7c 24 10 48 8d b4 24 f0 01 00 00 b9 32 00 00 00 f3 a5 48 8b 7c 24 08 48  ......H.|$.H..$.....2.....H.|$.H
000172c0  8d b4 24 c0 02 00 00 e8 4e f4 ff ff 48 8b 7c 24 08 e8 d2 db ff ff 4c 8b 63 08 b9 88 00 00 00 31  ..$.....N...H.|$......L.c......1
000172e0  d2 4c 89 e0 4d 89 e6 48 f7 f1 49 89 c7 49 29 d6 49 81 fc 87 00 00 00 77 12 48 8b 7c 24 08 48 89  .L..M..H..I..I).I......w.H.|$.H.
00017300  de e8 19 fe ff ff e9 fa 00 00 00 48 8b 1b 48 8b 7c 24 08 48 8d 74 24 40 45 31 ed 48 c7 84 24 28  ...........H..H.|$.H.t$@E1.H..$(
00017320  01 00 00 88 00 00 00 49 8d ac 24 78 ff ff ff 48 89 9c 24 20 01 00 00 0f 28 84 24 20 01 00 00 48  .......I..$x...H..$ ....(.$ ...H
00017340  81 c3 88 00 00 00 48 89 9c 24 30 01 00 00 48 89 ac 24 38 01 00 00 0f 29 44 24 40 e8 07 fd ff ff  ......H..$0...H..$8....)D$@.....
00017360  49 ff c5 4d 39 fd 74 5d 48 89 9c 24 c0 02 00 00 48 8b 7c 24 08 48 81 ed 88 00 00 00 48 81 c3 88  I..M9.t]H..$....H.|$.H......H...
00017380  00 00 00 48 c7 84 24 c8 02 00 00 88 00 00 00 0f 28 84 24 c0 02 00 00 48 89 9c 24 d0 02 00 00 48  ...H..$.........(.$....H..$....H
000173a0  89 ac 24 d8 02 00 00 0f 29 84 24 f0 01 00 00 e8 f4 da ff ff 48 8b 74 24 18 48 8b 7c 24 08 e8 a4  ..$.....).$.........H.t$.H.|$...
000173c0  fc ff ff eb 9b 4d 39 e6 73 3b 48 8b 7c 24 18 48 8b 74 24 08 b9 32 00 00 00 4c 8d a4 24 f0 01 00  .....M9.s;H.|$.H.t$..2...L..$...
000173e0  00 f3 a5 4c 89 e7 e8 bd da ff ff 48 8b 74 24 10 4c 89 e7 e8 9f fc ff ff 48 8b 74 24 10 48 89 df  ...L.......H.t$.L.......H.t$.H..
00017400  48 89 e9 f3 a4 48 8b 84 24 88 03 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 f3 dd fe ff 48 81 c4  H....H..$....dH+.%(...t......H..
00017420  98 03 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 d6 f2 fe ff                                         ....[]A\A]A^A_.....

00017433    void libcrux_ml_kem_hash_functions_portable_H.constprop.0() __noreturn

00017433  53                 push    rbx {var_8}
00017434  0f57c0             xorps   xmm0, xmm0
00017437  4883ec50           sub     rsp, 0x50
0001743b  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00017444  48895c2448         mov     qword [rsp+0x48 {var_10}], rbx
00017449  4889d3             mov     rbx, rdx
0001744c  488d442428         lea     rax, [rsp+0x28 {s}]
00017451  48897c2410         mov     qword [rsp+0x10 {var_48}], rdi
00017456  4889e6             mov     rsi, rsp
00017459  488d7c2410         lea     rdi, [rsp+0x10]
0001745e  0f11442428         movups  xmmword [rsp+0x28 {s}], xmm0
00017463  0f11442438         movups  xmmword [rsp+0x38 {var_20}], xmm0
00017468  48890424           mov     qword [rsp {var_58}], rax {s}
0001746c  48c7442408200000…  mov     qword [rsp+0x8 {var_50}], 0x20
00017475  48c7442418a00400…  mov     qword [rsp+0x18 {var_40}], 0x4a0
0001747e  e8f7fcffff         call    libcrux_sha3_generic_keccak_keccak_e90
{ Does not return }

00017483           0f 10 44 24 28 0f 11 03 0f 10 44 24 38 0f 11 43 10 48 8b 44 24 48 64 48 2b 04 25 28 00     ..D$(.....D$8..C.H.D$HdH+.%(.
000174a0  00 00 74 05 e8 67 dd fe ff 48 83 c4 50 5b e9 56 f2 fe ff                                         ..t..g...H..P[.V...

000174b3    void libcrux_sha3_generic_keccak_keccak_e91() __noreturn

000174b3  4157               push    r15 {var_8}
000174b5  4531ff             xor     r15d, r15d  {0x0}
000174b8  4156               push    r14 {var_10}
000174ba  41be88000000       mov     r14d, 0x88
000174c0  4155               push    r13 {var_18}
000174c2  4154               push    r12 {var_20}
000174c4  55                 push    rbp {var_28}
000174c5  4889fd             mov     rbp, rdi
000174c8  53                 push    rbx {var_30}
000174c9  4881ec98030000     sub     rsp, 0x398
000174d0  64488b1c25280000…  mov     rbx, qword [fs:0x28]
000174d9  48899c2488030000   mov     qword [rsp+0x388 {var_40}], rbx
000174e1  4889f3             mov     rbx, rsi
000174e4  488d442458         lea     rax, [rsp+0x58 {var_370}]
000174e9  4889c7             mov     rdi, rax {var_370}
000174ec  4889442408         mov     qword [rsp+0x8 {var_3c0}], rax {var_370}
000174f1  e846d1ffff         call    libcrux_sha3_generic_keccak_new_1e_f4
{ Does not return }

000174f6                                                                    48 8b 75 08 31 d2 0f 10 45 00                        H.u.1...E.
00017500  48 89 f0 49 f7 f6 49 39 c7 48 8d 84 24 c0 02 00 00 48 89 44 24 10 48 8d 84 24 f0 01 00 00 48 89  H..I..I9.H..$....H.D$.H..$....H.
00017520  44 24 18 73 44 48 8b 4c 24 10 48 8b 7c 24 18 49 69 f7 88 00 00 00 49 ff c7 ba 88 00 00 00 0f 29  D$.sDH.L$.H.|$.Ii.....I........)
00017540  84 24 f0 01 00 00 e8 65 d8 ff ff 48 8b b4 24 c0 02 00 00 48 8b 7c 24 08 e8 bd f1 ff ff 48 8b 7c  .$.....e...H..$....H.|$......H.|
00017560  24 08 e8 41 d9 ff ff eb 8d 48 29 d6 48 8d 4c 24 30 48 8d 7c 24 20 0f 29 44 24 20 e8 30 d8 ff ff  $..A.....H).H.L$0H.|$ .)D$ .0...
00017580  48 8b 6c 24 38 48 8d bc 24 20 01 00 00 48 8d 35 ac 0c 02 00 b9 32 00 00 00 4c 8d 84 24 20 01 00  H.l$8H..$ ...H.5.....2...L..$ ..
000175a0  00 f3 a5 48 85 ed 74 18 48 8b 74 24 30 4c 89 c7 b9 c8 00 00 00 48 89 ea e8 93 de fe ff 49 89 c0  ...H..t.H.t$0L.......H.......I..
000175c0  c6 84 2c 20 01 00 00 1f 4c 89 c6 48 8b 7c 24 18 b9 32 00 00 00 80 8c 24 a7 01 00 00 80 f3 a5 48  .., ....L..H.|$..2.....$.......H
000175e0  8b 7c 24 10 48 8d b4 24 f0 01 00 00 b9 32 00 00 00 f3 a5 48 8b 7c 24 08 48 8d b4 24 c0 02 00 00  .|$.H..$.....2.....H.|$.H..$....
00017600  e8 15 f1 ff ff 48 8b 7c 24 08 e8 99 d8 ff ff 4c 8b 63 08 b9 88 00 00 00 31 d2 4c 89 e0 4d 89 e6  .....H.|$......L.c......1.L..M..
00017620  48 f7 f1 49 89 c7 49 29 d6 49 81 fc 87 00 00 00 77 12 48 8b 7c 24 08 48 89 de e8 e0 fa ff ff e9  H..I..I).I......w.H.|$.H........
00017640  fa 00 00 00 48 8b 1b 48 8b 7c 24 08 48 8d 74 24 40 45 31 ed 48 c7 84 24 28 01 00 00 88 00 00 00  ....H..H.|$.H.t$@E1.H..$(.......
00017660  49 8d ac 24 78 ff ff ff 48 89 9c 24 20 01 00 00 0f 28 84 24 20 01 00 00 48 81 c3 88 00 00 00 48  I..$x...H..$ ....(.$ ...H......H
00017680  89 9c 24 30 01 00 00 48 89 ac 24 38 01 00 00 0f 29 44 24 40 e8 ce f9 ff ff 49 ff c5 4d 39 fd 74  ..$0...H..$8....)D$@.....I..M9.t
000176a0  5d 48 89 9c 24 c0 02 00 00 48 8b 7c 24 08 48 81 ed 88 00 00 00 48 81 c3 88 00 00 00 48 c7 84 24  ]H..$....H.|$.H......H......H..$
000176c0  c8 02 00 00 88 00 00 00 0f 28 84 24 c0 02 00 00 48 89 9c 24 d0 02 00 00 48 89 ac 24 d8 02 00 00  .........(.$....H..$....H..$....
000176e0  0f 29 84 24 f0 01 00 00 e8 bb d7 ff ff 48 8b 74 24 18 48 8b 7c 24 08 e8 6b f9 ff ff eb 9b 4d 39  .).$.........H.t$.H.|$..k.....M9
00017700  e6 73 3b 48 8b 7c 24 18 48 8b 74 24 08 b9 32 00 00 00 4c 8d a4 24 f0 01 00 00 f3 a5 4c 89 e7 e8  .s;H.|$.H.t$..2...L..$......L...
00017720  84 d7 ff ff 48 8b 74 24 10 4c 89 e7 e8 66 f9 ff ff 48 8b 74 24 10 48 89 df 48 89 e9 f3 a4 48 8b  ....H.t$.L...f...H.t$.H..H....H.
00017740  84 24 88 03 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 ba da fe ff 48 81 c4 98 03 00 00 5b 5d 41  .$....dH+.%(...t......H......[]A
00017760  5c 41 5d 41 5e 41 5f e9 9d ef fe ff                                                              \A]A^A_.....

0001776c    void libcrux_sha3_portable_shake256() __noreturn

0001776c  4883ec38           sub     rsp, 0x38
00017770  4889d0             mov     rax, rdx
00017773  64488b1425280000…  mov     rdx, qword [fs:0x28]
0001777c  4889542428         mov     qword [rsp+0x28 {var_10}], rdx
00017781  4889ca             mov     rdx, rcx
00017784  48893c24           mov     qword [rsp {var_38}], rdi
00017788  488d7c2410         lea     rdi, [rsp+0x10]
0001778d  4889742408         mov     qword [rsp+0x8 {var_30}], rsi
00017792  4889e6             mov     rsi, rsp
00017795  4889442410         mov     qword [rsp+0x10 {var_28}], rax
0001779a  4889542418         mov     qword [rsp+0x18 {var_20}], rdx
0001779f  e80ffdffff         call    libcrux_sha3_generic_keccak_keccak_e91
{ Does not return }

000177a4              48 8b 44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 57 da fe ff 48 83 c4 38 e9 47 ef      H.D$(dH+.%(...t..W...H..8.G.
000177c0  fe ff                                                                                            ..

000177c2    void libcrux_ml_kem_hash_functions_portable_PRFxN_c5(int64_t arg1) __noreturn

000177c2  4156               push    r14 {var_8}
000177c4  b960000000         mov     ecx, 0x60
000177c9  4155               push    r13 {var_10}
000177cb  4989fd             mov     r13, rdi
000177ce  4154               push    r12 {var_18}
000177d0  55                 push    rbp {var_20}
000177d1  4889f5             mov     rbp, rsi
000177d4  53                 push    rbx {var_28}
000177d5  4881ec90010000     sub     rsp, 0x190
000177dc  64488b0425280000…  mov     rax, qword [fs:0x28]
000177e5  4889842488010000   mov     qword [rsp+0x188 {var_30}], rax
000177ed  31c0               xor     eax, eax  {0x0}
000177ef  488d7c2408         lea     rdi, [rsp+0x8 {s}]
000177f4  488d5c2408         lea     rbx, [rsp+0x8 {s}]
000177f9  4c8db42488010000   lea     r14, [rsp+0x188]
00017801  4989dc             mov     r12, rbx {s}
00017804  f3ab               rep stosd dword [rdi] {var_330} {s}  {0x0}
00017806  41bb21000000       mov     r11d, 0x21
0001780c  4889df             mov     rdi, rbx {s}
0001780f  4c89ea             mov     rdx, r13
00017812  be80000000         mov     esi, 0x80
00017817  4c89d9             mov     rcx, r11  {0x21}
0001781a  4883eb80           sub     rbx {var_130}, 0xffffffffffffff80
0001781e  4983c521           add     r13, 0x21
00017822  e845ffffff         call    libcrux_sha3_portable_shake256
{ Does not return }

00017827                       4c 39 f3 75 da b9 60 00 00 00 48 89 ef 4c 89 e6 f3 a5 48 8b 84 24 88 01 00         L9.u..`...H..L....H..$...
00017840  00 64 48 2b 04 25 28 00 00 00 74 05 e8 bf d9 fe ff 48 81 c4 90 01 00 00 5b 5d 41 5c 41 5d 41 5e  .dH+.%(...t......H......[]A\A]A^
00017860  e9 a4 ee fe ff                                                                                   .....

00017865    void libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt_fc(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00017865  4157               push    r15 {var_8}
00017867  4531ff             xor     r15d, r15d
0001786a  4156               push    r14 {var_10}
0001786c  4989fe             mov     r14, rdi
0001786f  4155               push    r13 {var_18}
00017871  4154               push    r12 {var_20}
00017873  55                 push    rbp {var_28}
00017874  53                 push    rbx {var_30}
00017875  4881ec880e0000     sub     rsp, 0xe88
0001787c  64488b1c25280000…  mov     rbx, qword [fs:0x28]
00017885  48899c24780e0000   mov     qword [rsp+0xe78 {var_40}], rbx
0001788d  89d3               mov     ebx, edx
0001788f  4c89f8             mov     rax, r15
00017892  49ffc7             inc     r15  {0x1}
00017895  4889742408         mov     qword [rsp+0x8 {var_eb0}], rsi
0001789a  48c1e009           shl     rax, 0x9  {0x0}
0001789e  488dbc0456020000   lea     rdi, [rsp+rax+0x256 {var_c62}]
000178a6  e8becfffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }

000178ab                                   49 83 ff 03 48 8b 74 24 08 75 d9 48 8d bc 24 57 0e 00 00 b9 21             I...H.t$.u.H..$W....!
000178c0  00 00 00 48 8d 44 24 73 f3 a4 48 8d ac 24 d6 00 00 00 48 8d 94 24 57 0e 00 00 49 89 c0 48 89 c7  ...H.D$s..H..$....H..$W...I..H..
000178e0  b9 21 00 00 00 48 89 d6 f3 a4 48 89 f8 48 39 ef 75 eb 8d 43 01 48 89 ee 4c 89 c7 88 9c 24 93 00  .!...H....H..H9.u..C.H..L....$..
00017900  00 00 88 84 24 b4 00 00 00 8d 43 02 4c 8d bc 24 56 08 00 00 88 84 24 d5 00 00 00 8d 43 03 48 8d  ....$.....C.L..$V.....$.....C.H.
00017920  9c 24 56 02 00 00 88 44 24 1f e8 93 fe ff ff 48 8d 84 24 56 08 00 00 48 89 ee ba 80 00 00 00 48  .$V....D$......H..$V...H.......H
00017940  89 c7 48 89 44 24 08 e8 08 ef ff ff 48 8b 74 24 08 48 89 df 49 89 d8 b9 80 00 00 00 45 31 c9 4c  ..H.D$......H.t$.H..I.......E1.L
00017960  8d 94 24 76 08 00 00 f3 a5 41 0f 10 88 00 01 00 00 41 0f 10 80 10 01 00 00 48 8d 84 24 56 08 00  ..$v.....A.......A.......H..$V..
00017980  00 0f 11 4c 24 52 0f 11 44 24 62 0f 11 8c 24 56 08 00 00 0f 11 84 24 66 08 00 00 66 69 10 c0 f9  ...L$R..D$b...$V......$f...fi...
000179a0  48 83 c0 02 66 89 50 fe 4c 39 d0 75 ee 41 0f 10 08 48 8d 74 24 32 49 ff c1 49 83 c0 20 0f 10 84  H...f.P.L9.u.A...H.t$2I..I.. ...
000179c0  24 56 08 00 00 48 8d 84 24 56 08 00 00 48 83 ec 20 0f 11 4c 24 72 0f 11 44 24 52 0f 10 84 24 86  $V...H..$V...H.. ..L$r..D$R...$.
000179e0  08 00 00 48 89 44 24 30 0f 11 44 24 62 41 0f 10 40 f0 0f 11 84 24 82 00 00 00 48 8b 7c 24 30 0f  ...H.D$0..D$bA..@....$....H.|$0.
00017a00  11 0c 24 0f 11 44 24 10 e8 fd cc ff ff 41 0f 10 48 e0 48 8d 7c 24 72 0f 10 84 24 76 08 00 00 41  ..$..D$......A..H.H.|$r...$v...A
00017a20  0f 11 80 e0 00 00 00 0f 10 84 24 86 08 00 00 0f 11 8c 24 76 08 00 00 41 0f 11 80 f0 00 00 00 41  ..........$.......$v...A.......A
00017a40  0f 10 40 f0 0f 11 0c 24 0f 11 84 24 86 08 00 00 0f 11 44 24 10 e8 83 cc ff ff 0f 10 44 24 72 41  ..@....$...$......D$........D$rA
00017a60  0f 11 40 e0 0f 10 84 24 82 00 00 00 48 83 c4 20 41 0f 11 40 f0 49 83 f9 08 0f 85 ea fe ff ff 48  ..@....$....H.. A..@.I.........H
00017a80  8d 44 24 28 48 89 de ba 06 00 00 00 48 c7 44 24 28 01 00 00 00 48 89 c7 48 89 44 24 08 48 83 ed  .D$(H.......H.D$(....H..H.D$.H..
00017aa0  80 e8 93 e6 ff ff 48 8b 7c 24 08 48 89 de ba 05 00 00 00 e8 81 e6 ff ff 48 8b 7c 24 08 ba 04 00  ......H.|$.H............H.|$....
00017ac0  00 00 48 89 de e8 6f e6 ff ff 48 8b 7c 24 08 48 89 de e8 a8 da ff ff 48 8b 7c 24 08 48 89 de e8  ..H...o...H.|$.H.......H.|$.H...
00017ae0  57 d9 ff ff 48 8b 7c 24 08 48 89 de e8 ef d7 ff ff 48 89 df 48 81 c3 00 02 00 00 e8 5f ee ff ff  W...H.|$.H.......H..H......._...
00017b00  4c 39 fb 0f 85 26 fe ff ff 48 8b 7c 24 10 48 8d b4 24 56 02 00 00 b9 80 01 00 00 8a 44 24 1f f3  L9...&...H.|$.H..$V.........D$..
00017b20  a5 48 8b 74 24 10 b9 80 01 00 00 4c 89 f7 41 88 86 00 06 00 00 f3 a5 48 8b 84 24 78 0e 00 00 64  .H.t$......L..A........H..$x...d
00017b40  48 2b 04 25 28 00 00 00 74 05 e8 c1 d6 fe ff 48 81 c4 88 0e 00 00 4c 89 f0 5b 5d 41 5c 41 5d 41  H+.%(...t......H......L..[]A\A]A
00017b60  5e 41 5f e9 a1 eb fe ff                                                                          ^A_.....

00017b68    void libcrux_sha3_portable_keccak_store_block_581(int64_t arg1, int64_t* arg2) __noreturn

00017b68  31c9               xor     ecx, ecx  {0x0}
00017b6a  41b805000000       mov     r8d, 0x5

00017b70  4889c8             mov     rax, rcx
00017b73  31d2               xor     edx, edx  {0x0}
00017b75  49f7f0             div     r8  {0x5}
00017b78  486bc028           imul    rax, rax, 0x28
00017b7c  4801f8             add     rax, rdi
00017b7f  488b14d0           mov     rdx, qword [rax+rdx*8]
00017b83  488b06             mov     rax, qword [rsi]
00017b86  488914c8           mov     qword [rax+rcx*8], rdx
00017b8a  48ffc1             inc     rcx
00017b8d  4883f915           cmp     rcx, 0x15
00017b91  75dd               jne     0x17b70

00017b93  e971ebfeff         jmp     __x86_return_thunk
{ Does not return }


00017b98    void libcrux_ml_kem_matrix_sample_matrix_A_38() __noreturn

00017b98  4157               push    r15 {var_8}
00017b9a  4156               push    r14 {var_10}
00017b9c  4155               push    r13 {var_18}
00017b9e  4154               push    r12 {var_20}
00017ba0  55                 push    rbp {var_28}
00017ba1  53                 push    rbx {var_30}
00017ba2  4881ec083b0000     sub     rsp, 0x3b08
00017ba9  48897c2440         mov     qword [rsp+0x40 {var_3af8}], rdi
00017bae  488d9c24ce3a0000   lea     rbx, [rsp+0x3ace {var_6a}]
00017bb6  4889542450         mov     qword [rsp+0x50 {var_3ae8}], rdx
00017bbb  408874244f         mov     byte [rsp+0x4f {var_3ae9}], sil
00017bc0  64488b0425280000…  mov     rax, qword [fs:0x28]
00017bc9  48898424f83a0000   mov     qword [rsp+0x3af8 {var_40}], rax
00017bd1  488d8424ce280000   lea     rax, [rsp+0x28ce {var_126a}]
00017bd9  4889442430         mov     qword [rsp+0x30 {var_3b08}], rax {var_126a}
00017bde  4889c5             mov     rbp, rax {var_126a}
00017be1  4c8da500060000     lea     r12, [rbp+0x600 {var_c6a}]
00017be8  4889ef             mov     rdi, rbp {var_126a}
00017beb  4881c500020000     add     rbp {var_106a}, 0x200
00017bf2  e872ccffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }

00017bf7                                                                       4c 39 e5 75 ec 48 39 eb 75                         L9.u.H9.u
00017c00  e0 48 8d 84 24 68 22 00 00 31 db 48 89 44 24 08 48 8b 74 24 40 48 8d bc 24 d6 3a 00 00 b9 22 00  .H..$h"..1.H.D$.H.t$@H..$.:...".
00017c20  00 00 48 8d 84 24 96 00 00 00 f3 a4 48 8d 94 24 fc 00 00 00 4c 8d 8c 24 d6 3a 00 00 49 89 c0 48  ..H..$......H..$....L..$.:..I..H
00017c40  89 c7 b9 22 00 00 00 4c 89 ce f3 a4 48 89 f8 48 39 d7 75 eb 4c 89 c6 31 c0 88 9c 24 b6 00 00 00  ..."...L....H..H9.u.L..1...$....
00017c60  48 89 d7 c6 84 24 b7 00 00 00 00 b9 66 00 00 00 4c 8d a4 24 00 10 00 00 4c 8d 8c 24 58 12 00 00  H....$......f...L..$....L..$X...
00017c80  88 9c 24 d8 00 00 00 4d 89 e0 c6 84 24 d9 00 00 00 01 88 9c 24 fa 00 00 00 c6 84 24 fb 00 00 00  ..$....M....$.......$......$....
00017ca0  02 f3 a4 48 8d 7c 24 78 b9 06 00 00 00 48 8d b4 24 fc 00 00 00 f3 ab 48 8d bc 24 08 1c 00 00 b9  ...H.|$x.....H..$......H..$.....
00017cc0  98 01 00 00 f3 ab 48 8d bc 24 62 01 00 00 b9 66 00 00 00 f3 a4 48 8d bc 24 20 04 00 00 48 8d b4  ......H..$b....f.....H..$ ...H..
00017ce0  24 62 01 00 00 b9 66 00 00 00 f3 a4 48 8b 7c 24 08 b9 32 00 00 00 e8 41 c9 ff ff 4c 89 c7 49 81  $b....f.....H.|$..2....A...L..I.
00017d00  c0 c8 00 00 00 48 8b 74 24 08 f3 a5 4d 39 c8 75 db 48 8d 84 24 10 0a 00 00 48 8d ac 24 20 04 00  .....H.t$...M9.u.H..$....H..$ ..
00017d20  00 48 89 44 24 38 4c 8d b4 24 86 04 00 00 48 8d bc 24 10 0a 00 00 b9 32 00 00 00 45 31 ed 48 8d  .H.D$8L..$....H..$.....2...E1.H.
00017d40  35 fb 04 02 00 48 8d 84 24 00 16 00 00 f3 a5 48 8b 7c 24 38 b9 22 00 00 00 48 89 ee f3 a4 c6 84  5....H..$......H.|$8."...H......
00017d60  24 32 0a 00 00 1f 48 8b 74 24 38 48 8d bc 24 00 16 00 00 c6 84 24 b7 0a 00 00 80 b9 32 00 00 00  $2....H.t$8H..$......$......2...
00017d80  4c 8d bc 24 ce 3a 00 00 f3 a5 48 8d bc 24 68 22 00 00 48 8d b4 24 00 16 00 00 b9 32 00 00 00 48  L..$.:....H..$h"..H..$.....2...H
00017da0  89 44 24 58 f3 a5 48 8b 44 24 08 c6 84 24 c8 01 00 00 00 4c 89 fa 4a 8b 04 e8 48 89 84 24 c9 01  .D$X..H.D$...$.....L..J...H..$..
00017dc0  00 00 40 8a b4 24 d0 01 00 00 48 8b bc 24 c8 01 00 00 e8 a0 d0 ff ff be 05 00 00 00 4c 89 e8 31  ..@..$....H..$..............L..1
00017de0  d2 48 f7 f6 48 8b b4 24 ce 3a 00 00 49 ff c5 48 6b c0 28 4c 01 e0 48 31 34 d0 49 83 fd 15 75 a6  .H..H..$.:..I..Hk.(L..H14.I...u.
00017e00  4c 89 e7 48 83 c5 22 49 81 c4 c8 00 00 00 e8 95 d0 ff ff 4c 39 f5 0f 85 12 ff ff ff 48 8b 7c 24  L..H.."I...........L9.......H.|$
00017e20  58 b9 96 00 00 00 31 c0 4c 8b 74 24 08 48 8d b4 24 00 10 00 00 4c 8d bc 24 50 28 00 00 f3 a5 48  X.....1.L.t$.H..$....L..$P(....H
00017e40  8b 7c 24 08 48 8d b4 24 00 16 00 00 b9 96 00 00 00 4c 8d 6c 24 60 f3 a5 48 8b 74 24 08 48 8d bc  .|$.H..$.........L.l$`..H.t$.H..
00017e60  24 c8 01 00 00 b9 96 00 00 00 f3 a5 48 8b 7c 24 08 b9 7a 01 00 00 f3 ab 48 8d 84 24 c8 01 00 00  $...........H.|$..z.....H..$....
00017e80  48 89 44 24 38 48 89 c5 4c 89 b4 24 00 10 00 00 4d 8d 8e a8 00 00 00 48 89 ef 4c 89 ee 4c 89 8c  H.D$8H..L..$....M......H..L..L..
00017ea0  24 10 10 00 00 4c 8d a4 24 20 04 00 00 48 c7 84 24 08 10 00 00 a8 00 00 00 0f 28 84 24 00 10 00  $....L..$ ...H..$.........(.$...
00017ec0  00 48 c7 84 24 18 10 00 00 50 01 00 00 0f 29 44 24 60 e8 91 fc ff ff 4c 89 8c 24 00 16 00 00 49  .H..$....P....)D$`.....L..$....I
00017ee0  8d 86 50 01 00 00 49 81 c6 f8 01 00 00 48 c7 84 24 08 16 00 00 a8 00 00 00 0f 28 84 24 00 16 00  ..P...I......H..$.........(.$...
00017f00  00 48 89 84 24 10 16 00 00 48 c7 84 24 18 16 00 00 a8 00 00 00 0f 29 84 24 20 04 00 00 0f 28 84  .H..$....H..$.........).$ ....(.
00017f20  24 10 16 00 00 0f 29 84 24 10 0a 00 00 e8 76 cf ff ff 48 89 ef 4c 89 e6 e8 2b fc ff ff e8 66 cf  $.....).$.....v...H..L...+....f.
00017f40  ff ff 4c 8d 94 24 10 0a 00 00 48 89 ef 48 81 c5 c8 00 00 00 4c 89 d6 e8 0c fc ff ff 4d 39 fe 0f  ..L..$....H..H......L.......M9..
00017f60  85 23 ff ff ff 48 8d b4 24 68 22 00 00 b9 7a 01 00 00 4c 89 e7 45 31 db f3 a5 b9 7a 01 00 00 4c  .#...H..$h"...z...L..E1....z...L
00017f80  89 d7 4c 89 e6 f3 a5 48 8d 8c 24 08 1c 00 00 4d 69 fb 10 01 00 00 4d 89 d5 45 31 e4 4c 8d 74 24  ..L....H..$....Mi.....M..E1.L.t$
00017fa0  78 4b 8b 2c de 48 81 fd ff 00 00 00 77 3a 48 8b 54 24 18 4c 89 6c 24 10 be 18 00 00 00 48 8b 7c  xK.,.H......w:H.T$.L.l$......H.|
00017fc0  24 10 48 89 4c 24 58 48 89 54 24 18 4a 8d 54 3d 00 48 01 d2 48 01 ca e8 85 e0 ff ff 48 8b 4c 24  $.H.L$XH.T$.J.T=.H..H.......H.L$
00017fe0  58 48 01 c5 4b 89 2c de 49 ff c4 49 83 c5 18 49 83 fc 15 75 a7 49 ff c3 49 81 c2 f8 01 00 00 49  XH..K.,.I..I...I...u.I..I......I
00018000  83 fb 03 75 8a 31 c0 48 81 7c 24 78 ff 00 00 00 76 0b 48 c7 44 24 78 00 01 00 00 b0 01 48 81 bc  ...u.1.H.|$x....v.H.D$x......H..
00018020  24 80 00 00 00 ff 00 00 00 76 0e 48 c7 84 24 80 00 00 00 00 01 00 00 eb 02 31 c0 48 81 bc 24 88  $........v.H..$..........1.H..$.
00018040  00 00 00 ff 00 00 00 0f 87 57 01 00 00 31 c0 84 c0 0f 85 5e 01 00 00 48 8d bc 24 68 22 00 00 b9  .........W...1.....^...H..$h"...
00018060  7e 00 00 00 31 c0 4c 8b 64 24 38 f3 ab 4c 8d b4 24 68 22 00 00 4c 8d bc 24 60 24 00 00 4d 89 f5  ~...1.L.d$8..L..$h"..L..$`$..M..
00018080  48 8d ac 24 00 16 00 00 4c 89 e7 4c 89 b4 24 00 16 00 00 49 81 c6 a8 00 00 00 e8 09 ce ff ff 4c  H..$....L..L..$....I...........L
000180a0  89 e7 48 89 ee 49 81 c4 c8 00 00 00 e8 b7 fa ff ff 4d 39 fe 75 d2 4c 89 ee b9 7e 00 00 00 48 89  ..H..I...........M9.u.L...~...H.
000180c0  ef 45 31 d2 f3 a5 4c 8d ac 24 68 22 00 00 48 8d bc 24 68 22 00 00 48 89 ee b9 7e 00 00 00 f3 a5  .E1...L..$h"..H..$h"..H...~.....
000180e0  48 8d 8c 24 08 1c 00 00 4d 69 fa 10 01 00 00 4d 89 ec 31 ed 4c 8d 74 24 78 4f 8b 1c d6 49 81 fb  H..$....Mi.....M..1.L.t$xO...I..
00018100  ff 00 00 00 77 39 48 8b 54 24 28 4c 89 64 24 20 be 18 00 00 00 48 8b 7c 24 20 48 89 4c 24 58 48  ....w9H.T$(L.d$ .....H.|$ H.L$XH
00018120  89 54 24 28 4b 8d 14 1f 48 01 d2 48 01 ca e8 2e df ff ff 48 8b 4c 24 58 49 01 c3 4f 89 1c d6 48  .T$(K...H..H.......H.L$XI..O...H
00018140  ff c5 49 83 c4 18 48 83 fd 07 75 a8 49 ff c2 49 81 c5 a8 00 00 00 49 83 fa 03 75 8c 31 c0 48 81  ..I...H...u.I..I......I...u.1.H.
00018160  7c 24 78 ff 00 00 00 76 0b 48 c7 44 24 78 00 01 00 00 b0 01 48 81 bc 24 80 00 00 00 ff 00 00 00  |$x....v.H.D$x......H..$........
00018180  76 0e 48 c7 84 24 80 00 00 00 00 01 00 00 eb 02 31 c0 48 81 bc 24 88 00 00 00 ff 00 00 00 0f 86  v.H..$..........1.H..$..........
000181a0  b3 fe ff ff 48 c7 84 24 88 00 00 00 00 01 00 00 e9 9a fe ff ff 48 8d bc 24 68 22 00 00 48 8d b4  ....H..$.............H..$h"..H..
000181c0  24 08 1c 00 00 b9 98 01 00 00 f3 a5 4c 8d ac 24 00 16 00 00 4c 8d b4 24 68 22 00 00 4c 8d bc 24  $...........L..$....L..$h"..L..$
000181e0  c8 28 00 00 4d 89 ec 48 8d ac 24 00 10 00 00 4c 89 f6 48 89 ef 49 81 c6 20 02 00 00 e8 a9 e5 ff  .(..M..H..$....L..H..I.. .......
00018200  ff 4c 89 ef b9 80 00 00 00 48 89 ee f3 a5 49 81 c5 00 02 00 00 4d 39 fe 75 d5 b9 80 01 00 00 48  .L.......H....I......M9.u......H
00018220  89 ef 4c 89 e6 48 8b 54 24 30 f3 a5 4c 69 c3 00 06 00 00 48 89 d8 4c 8d 8c 24 00 10 00 00 48 c1  ..L..H.T$0..Li.....H..L..$....H.
00018240  e0 09 48 01 d0 49 01 d0 31 d2 80 7c 24 4f 00 4a 8d 34 0a b9 80 00 00 00 48 8d bc 24 68 22 00 00  ..H..I..1..|$O.J.4......H..$h"..
00018260  f3 a5 74 0a b9 80 00 00 00 48 89 c7 eb 09 49 8d 3c 10 b9 80 00 00 00 48 81 c2 00 02 00 00 48 8b  ..t......H....I.<......H......H.
00018280  74 24 08 48 05 00 06 00 00 f3 a5 48 81 fa 00 06 00 00 75 b6 48 ff c3 48 83 fb 03 0f 85 6f f9 ff  t$.H.......H......u.H..H.....o..
000182a0  ff 48 8b 7c 24 50 48 8d b4 24 ce 28 00 00 b9 80 04 00 00 f3 a5 48 8b 84 24 f8 3a 00 00 64 48 2b  .H.|$PH..$.(.........H..$.:..dH+
000182c0  04 25 28 00 00 00 74 05 e8 43 cf fe ff 48 81 c4 08 3b 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 26  .%(...t..C...H...;..[]A\A]A^A_.&
000182e0  e4 fe ff                                                                                         ...

000182e3    void libcrux_ml_kem_ind_cpa_encrypt_60.constprop.0() __noreturn

000182e3  4157               push    r15 {var_8}
000182e5  4156               push    r14 {var_10}
000182e7  4155               push    r13 {var_18}
000182e9  4154               push    r12 {var_20}
000182eb  55                 push    rbp {var_28}
000182ec  53                 push    rbx {var_30}
000182ed  4889fb             mov     rbx, rdi
000182f0  4881ec68510000     sub     rsp, 0x5168
000182f7  4889542418         mov     qword [rsp+0x18 {var_5180}], rdx
000182fc  48894c2428         mov     qword [rsp+0x28 {var_5170}], rcx
00018301  4c89442430         mov     qword [rsp+0x30 {var_5168}], r8
00018306  4c894c2460         mov     qword [rsp+0x60 {var_5138}], r9
0001830b  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00018314  4889ac2458510000   mov     qword [rsp+0x5158 {var_40}], rbp
0001831c  31ed               xor     ebp, ebp
0001831e  4889e8             mov     rax, rbp
00018321  48ffc5             inc     rbp  {0x1}
00018324  48c1e009           shl     rax, 0x9  {0x0}
00018328  488dbc0472370000   lea     rdi, [rsp+rax+0x3772 {var_1a26}]
00018330  e834c5ffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }

00018335                                                                 48 83 fd 03 75 e3 4c 8d a4 24 72                       H...u.L..$r
00018340  37 00 00 48 8d 84 24 70 31 00 00 45 31 ed 4c 89 64 24 20 48 89 44 24 08 48 8b 7c 24 08 4a 8d 2c  7..H..$p1..E1.L.d$ H.D$.H.|$.J.,
00018360  2b e8 03 c5 ff ff 48 8d 84 24 6c 19 00 00 48 8b 54 24 08 4c 8d 84 24 70 33 00 00 48 89 44 24 10  +.....H..$l...H.T$.L..$p3..H.D$.
00018380  48 8b 7c 24 10 48 89 ee 4c 89 44 24 40 48 89 54 24 38 e8 33 dc ff ff 48 8b 54 24 38 4c 8b 44 24  H.|$.H..L.D$@H.T$8.3...H.T$8L.D$
000183a0  40 48 8d 84 24 6e 2b 00 00 0f 10 8c 24 6c 19 00 00 0f 10 84 24 7c 19 00 00 48 8d bc 24 8e 2b 00  @H..$n+.....$l......$|...H..$.+.
000183c0  00 0f 11 8c 24 6c 25 00 00 0f 11 84 24 7c 25 00 00 0f 11 8c 24 6e 2b 00 00 0f 11 84 24 7e 2b 00  ....$l%.....$|%.....$n+.....$~+.
000183e0  00 66 8b 08 66 81 f9 00 0d 7f 44 48 83 c0 02 48 39 f8 75 ed 0f 10 8c 24 6e 2b 00 00 0f 10 84 24  .f..f.....DH...H9.u....$n+.....$
00018400  7e 2b 00 00 48 83 c2 20 48 83 c5 18 0f 11 4a e0 0f 11 42 f0 0f 11 8c 24 6c 1f 00 00 0f 11 84 24  ~+..H.. H.....J...B....$l......$
00018420  7c 1f 00 00 4c 39 c2 0f 85 53 ff ff ff eb 0a 66 81 e9 01 0d 66 89 08 eb b2 48 8d bc 24 6e 2b 00  |...L9...S.....f....f....H..$n+.
00018440  00 48 8d b4 24 70 31 00 00 b9 80 00 00 00 49 81 c5 80 01 00 00 f3 a5 4c 89 e7 48 8d b4 24 6e 2b  .H..$p1.......I........L..H..$n+
00018460  00 00 b9 80 00 00 00 49 81 c4 00 02 00 00 f3 a5 49 81 fd 80 04 00 00 0f 85 db fe ff ff 4c 8d a4  .......I........I............L..
00018480  24 f6 49 00 00 48 8b 74 24 20 45 31 ed 48 81 c3 80 04 00 00 4c 89 e2 48 8d bc 24 6c 0d 00 00 b9  $.I..H.t$ E1.H......L..H..$l....
000184a0  80 01 00 00 f3 a5 48 89 df be 20 00 00 00 48 8d 9c 24 93 49 00 00 e8 5f d2 ff ff 4c 89 e7 48 8d  ......H... ...H..$.I..._...L..H.
000184c0  94 24 72 37 00 00 31 f6 e8 cb f6 ff ff 48 8b 7c 24 28 48 8b 74 24 30 48 89 da 4c 8d a4 24 6c 25  .$r7..1......H.|$(H.t$0H..L..$l%
000184e0  00 00 e8 96 d2 ff ff 48 89 de b9 21 00 00 00 31 d2 48 8d bc 24 b4 49 00 00 f3 a4 4c 89 e7 48 8d  .......H...!...1.H..$.I....L..H.
00018500  b4 24 b4 49 00 00 e8 5a f3 ff ff 4c 89 e6 b9 80 01 00 00 48 8d bc 24 6c 13 00 00 f3 a5 48 89 de  .$.I...Z...L.......H..$l.....H..
00018520  b9 21 00 00 00 48 8d bc 24 d5 49 00 00 f3 a4 44 8a a4 24 6c 2b 00 00 48 8d 9c 24 d5 49 00 00 4c  .!...H..$.I....D..$l+..H..$.I..L
00018540  89 e8 49 ff c5 48 c1 e0 09 48 8d bc 04 6c 19 00 00 e8 13 c3 ff ff 49 83 fd 03 75 e3 48 8d bc 24  ..I..H...H...l........I...u.H..$
00018560  18 4d 00 00 b9 21 00 00 00 48 89 de f3 a4 48 8d 84 24 6c 09 00 00 4c 8d 8c 24 cf 09 00 00 48 8d  .M...!...H....H..$l...L..$....H.
00018580  94 24 18 4d 00 00 49 89 c0 48 89 c7 b9 21 00 00 00 48 89 d6 f3 a4 48 89 f8 4c 39 cf 75 eb 41 8d  .$.M..I..H...!...H....H..L9.u.A.
000185a0  44 24 01 48 8d 9c 24 6c 0b 00 00 4c 89 c7 44 88 a4 24 8c 09 00 00 88 84 24 ad 09 00 00 48 89 de  D$.H..$l...L..D..$......$....H..
000185c0  41 8d 44 24 02 48 89 dd 88 84 24 ce 09 00 00 41 83 c4 03 4c 8d ac 24 ec 0c 00 00 e8 e2 f1 ff ff  A.D$.H....$....A...L..$.........
000185e0  4c 8d 84 24 6c 19 00 00 48 8b 7c 24 08 48 89 ee ba 80 00 00 00 4c 89 44 24 28 48 83 ed 80 e8 51  L..$l...H.|$.H.......L.D$(H....Q
00018600  e2 ff ff 4c 8b 44 24 28 48 8b 74 24 08 b9 80 00 00 00 4c 89 c7 49 81 c0 00 02 00 00 f3 a5 4c 39  ...L.D$(H.t$......L..I........L9
00018620  ed 75 c5 48 8b 74 24 10 b9 80 01 00 00 31 c0 41 b9 21 00 00 00 48 8d bc 24 6c 1f 00 00 4c 8d 84  .u.H.t$......1.A.!...H..$l...L..
00018640  24 93 49 00 00 44 88 a4 24 b3 49 00 00 f3 a5 48 8b 7c 24 08 48 8d b4 24 6c 1f 00 00 b9 80 01 00  $.I..D..$.I....H.|$.H..$l.......
00018660  00 48 8d ac 24 18 4d 00 00 4c 89 c2 4c 8d ac 24 6c 01 00 00 f3 a5 44 88 a4 24 70 37 00 00 48 8b  .H..$.M..L..L..$l.....D..$p7..H.
00018680  74 24 08 48 8d bc 24 6e 2b 00 00 b9 02 06 00 00 f3 a4 48 8d bc 24 6c 19 00 00 48 8d b4 24 6e 2b  t$.H..$n+.........H..$l...H..$n+
000186a0  00 00 b9 80 01 00 00 f3 a5 48 8d bc 24 18 4d 00 00 b9 20 00 00 00 be 80 00 00 00 f3 ab 48 89 ef  .........H..$.M... ..........H..
000186c0  4c 89 c9 e8 a4 f0 ff ff 48 89 ee b9 20 00 00 00 31 ed 48 8d bc 24 18 4a 00 00 ba 80 00 00 00 f3  L.......H... ...1.H..$.J........
000186e0  a5 48 8d b4 24 18 4a 00 00 4c 89 ef e8 63 e1 ff ff 48 89 e8 48 ff c5 48 c1 e0 09 48 8d bc 04 70  .H..$.J..L...c...H..H..H...H...p
00018700  31 00 00 e8 61 c1 ff ff 48 83 fd 03 75 e3 48 8d 84 24 70 31 00 00 4c 8d b4 24 6c 19 00 00 45 31  1...a...H...u.H..$p1..L..$l...E1
00018720  e4 48 89 44 24 10 4c 8d bc 24 6c 13 00 00 31 ed 48 8d 84 24 6c 1f 00 00 4a 8d 54 3d 00 48 89 44  .H.D$.L..$l...1.H..$l...J.T=.H.D
00018740  24 08 48 8b 44 24 20 48 8b 7c 24 08 4a 8d 34 20 48 01 ee 48 81 c5 00 02 00 00 e8 fc c2 ff ff 48  $.H.D$ H.|$.J.4 H..H...........H
00018760  8b 74 24 08 48 8b 7c 24 10 e8 c6 c4 ff ff 48 81 fd 00 06 00 00 75 b9 48 8b 7c 24 10 e8 db e4 ff  .t$.H.|$......H......u.H.|$.....
00018780  ff 48 8d 84 24 6c 09 00 00 4c 8b 4c 24 10 4d 89 f2 48 89 44 24 08 41 0f 10 09 41 0f 10 41 10 48  .H..$l...L.L$.M..H.D$.A...A..A.H
000187a0  83 ec 20 be a1 05 00 00 49 83 c1 20 0f 11 8c 24 8c 1f 00 00 0f 11 84 24 9c 1f 00 00 48 8b 7c 24  .. .....I.. ...$.......$....H.|$
000187c0  28 0f 11 0c 24 0f 11 44 24 10 e8 85 bf ff ff 0f 10 8c 24 8c 09 00 00 0f 10 84 24 9c 09 00 00 4c  (...$..D$.........$.......$....L
000187e0  89 d6 48 8d bc 24 0c 01 00 00 48 8d ac 24 8c 0b 00 00 49 83 c2 20 0f 11 8c 24 8c 1f 00 00 0f 11  ..H..$....H..$....I.. ...$......
00018800  84 24 9c 1f 00 00 0f 11 0c 24 0f 11 44 24 10 e8 c9 be ff ff 0f 10 84 24 1c 01 00 00 0f 10 8c 24  .$.......$..D$.........$.......$
00018820  0c 01 00 00 48 89 ef 0f 11 84 24 9c 1f 00 00 0f 11 44 24 10 0f 11 8c 24 8c 1f 00 00 0f 11 0c 24  ....H.....$......D$....$.......$
00018840  e8 cf e0 ff ff 0f 10 84 24 8c 0b 00 00 49 8d 86 00 02 00 00 41 0f 11 41 e0 0f 10 84 24 9c 0b 00  ........$....I......A..A....$...
00018860  00 48 83 c4 20 41 0f 11 41 f0 49 39 c2 0f 85 23 ff ff ff 48 81 44 24 10 00 02 00 00 49 81 c4 00  .H.. A..A.I9...#...H.D$.....I...
00018880  06 00 00 49 81 fc 00 12 00 00 74 08 4d 89 d6 e9 9a fe ff ff 48 8b 44 24 18 48 8d bc 24 6c 1f 00  ...I......t.M.......H.D$.H..$l..
000188a0  00 48 8d b4 24 70 31 00 00 b9 80 01 00 00 f3 a5 4c 8d a4 24 70 31 00 00 0f 10 00 4c 89 e7 0f 11  .H..$p1.........L..$p1.....L....
000188c0  84 24 73 49 00 00 0f 10 40 10 0f 11 84 24 83 49 00 00 e8 92 bf ff ff 4c 8d 94 24 73 49 00 00 4c  .$sI....@....$.I.......L..$sI..L
000188e0  8d 8c 24 70 33 00 00 48 89 ef 31 c9 e8 d3 bd ff ff 41 0f b6 12 89 d0 d3 e8 83 e0 01 66 89 44 4d  ..$p3..H..1......A..........f.DM
00018900  00 48 ff c1 48 83 f9 08 75 eb 41 0f b6 52 01 31 c9 89 d0 d3 e8 83 e0 01 66 89 44 4d 10 48 ff c1  .H..H...u.A..R.1........f.DM.H..
00018920  48 83 f9 08 75 eb 0f 10 8c 24 6c 0b 00 00 0f 10 84 24 7c 0b 00 00 48 8d 84 24 6c 07 00 00 4c 8d  H...u....$l......$|...H..$l...L.
00018940  b4 24 6c 05 00 00 48 89 c7 48 89 44 24 18 4c 89 f6 0f 11 8c 24 4c 01 00 00 0f 11 84 24 5c 01 00  .$l...H..H.D$.L.....$L......$\..
00018960  00 0f 11 8c 24 6c 05 00 00 0f 11 84 24 7c 05 00 00 e8 4e bd ff ff 0f 10 8c 24 6c 07 00 00 0f 10  ....$l......$|....N......$l.....
00018980  84 24 7c 07 00 00 48 8d bc 24 0c 01 00 00 48 83 ec 20 0f 11 8c 24 8c 0b 00 00 0f 11 84 24 9c 0b  .$|...H..$....H.. ...$.......$..
000189a0  00 00 0f 11 0c 24 0f 11 44 24 10 e8 5a bd ff ff 0f 10 8c 24 2c 01 00 00 0f 10 84 24 3c 01 00 00  .....$..D$..Z......$,......$<...
000189c0  48 89 e8 48 8d 94 24 ac 0b 00 00 0f 11 8c 24 8c 09 00 00 0f 11 84 24 9c 09 00 00 0f 11 8c 24 8c  H..H..$.......$.......$.......$.
000189e0  0b 00 00 0f 11 84 24 9c 0b 00 00 48 83 c4 20 66 81 20 81 06 48 83 c0 02 48 39 d0 75 f2 0f 10 8c  ......$....H.. f. ..H...H9.u....
00018a00  24 6c 0b 00 00 0f 10 84 24 7c 0b 00 00 49 83 c4 20 49 83 c2 02 41 0f 11 4c 24 e0 41 0f 11 44 24  $l......$|...I.. I...A..L$.A..D$
00018a20  f0 0f 11 8c 24 6c 03 00 00 0f 11 84 24 7c 03 00 00 4d 39 cc 0f 85 ad fe ff ff 48 8d bc 24 6c 03  ....$l......$|...M9.......H..$l.
00018a40  00 00 48 8d b4 24 70 31 00 00 b9 80 00 00 00 31 ed f3 a5 48 8b 7c 24 08 4c 8d a4 24 6c 0d 00 00  ..H..$p1.......1...H.|$.L..$l...
00018a60  e8 04 be ff ff 48 8d 84 24 70 31 00 00 48 89 44 24 10 48 8b 7c 24 10 4a 8d 54 3d 00 49 8d 34 2c  .....H..$p1..H.D$.H.|$.J.T=.I.4,
00018a80  48 81 c5 00 02 00 00 e8 cf bf ff ff 48 8b 74 24 10 48 8b 7c 24 08 e8 99 c1 ff ff 48 81 fd 00 06  H...........H.t$.H.|$......H....
00018aa0  00 00 75 ce 48 8b 7c 24 08 e8 ae e1 ff ff 48 8b 74 24 08 b9 80 00 00 00 45 31 c9 48 8d bc 24 6c  ..u.H.|$......H.t$......E1.H..$l
00018ac0  0b 00 00 4c 8d 94 24 2c 01 00 00 f3 a5 42 0f 10 0c 0b 42 0f 10 44 0b 10 48 83 ec 20 4c 89 d7 be  ...L..$,.....B....B..D..H.. L...
00018ae0  a1 05 00 00 0f 11 8c 24 90 31 00 00 0f 11 84 24 a0 31 00 00 0f 11 0c 24 0f 11 44 24 10 e8 52 bc  .......$.1.....$.1.....$..D$..R.
00018b00  ff ff 43 0f 10 4c 0d 00 43 0f 10 44 0d 10 48 8d bc 24 6c 01 00 00 0f 11 8c 24 90 31 00 00 0f 11  ..C..L..C..D..H..$l......$.1....
00018b20  84 24 a0 31 00 00 48 83 c4 20 4a 8d b4 0c 6c 03 00 00 48 83 ec 20 0f 11 0c 24 0f 11 44 24 10 e8  .$.1..H.. J...l...H.. ...$..D$..
00018b40  99 bb ff ff 0f 10 8c 24 4c 01 00 00 0f 10 84 24 5c 01 00 00 48 89 fe 4c 89 f7 0f 11 84 24 a0 31  .......$L......$\...H..L.....$.1
00018b60  00 00 0f 11 8c 24 90 31 00 00 0f 11 0c 24 0f 11 44 24 10 e8 65 bb ff ff 0f 10 84 24 9c 05 00 00  .....$.1.....$..D$..e......$....
00018b80  48 8b 7c 24 38 0f 10 8c 24 8c 05 00 00 0f 11 84 24 a0 31 00 00 0f 11 44 24 10 0f 11 8c 24 90 31  H.|$8...$.......$.1....D$....$.1
00018ba0  00 00 0f 11 0c 24 e8 69 dd ff ff 0f 10 84 24 8c 07 00 00 42 0f 11 04 0b 0f 10 84 24 9c 07 00 00  .....$.i......$....B.......$....
00018bc0  48 83 c4 20 42 0f 11 44 0b 10 49 83 c1 20 49 81 f9 00 02 00 00 0f 85 f2 fe ff ff 48 8b 7c 24 10  H.. B..D..I.. I............H.|$.
00018be0  b9 80 00 00 00 48 89 de 31 c0 f3 a5 48 8b 7c 24 08 b9 80 00 00 00 48 8d b4 24 70 31 00 00 4c 8d  .....H..1...H.|$......H..$p1..L.
00018c00  ac 24 70 31 00 00 f3 a5 48 8d b4 24 6c 09 00 00 b9 80 00 00 00 4c 89 f7 f3 a5 48 8d bc 24 18 4d  .$p1....H..$l........L....H..$.M
00018c20  00 00 b9 10 01 00 00 48 8d b4 24 6c 1f 00 00 f3 ab 48 8d bc 24 70 31 00 00 b9 80 01 00 00 48 8d  .......H..$l.....H..$p1.......H.
00018c40  84 24 18 4d 00 00 f3 a5 48 89 44 24 10 48 8d 84 24 70 37 00 00 48 89 44 24 58 31 c0 48 8d bc 24  .$.M....H.D$.H..$p7..H.D$X1.H..$
00018c60  6c 0b 00 00 4c 89 ee 45 31 f6 b9 80 00 00 00 48 8d 9c 24 d8 4b 00 00 f3 a5 48 8d bc 24 d8 4b 00  l...L..E1......H..$.K....H..$.K.
00018c80  00 b9 50 00 00 00 f3 ab 48 8d 84 24 2c 01 00 00 48 89 44 24 68 4c 89 f0 48 83 ec 20 48 c1 e0 05  ..P.....H..$,...H.D$hL..H.. H...
00018ca0  48 8b bc 24 88 00 00 00 0f 10 84 04 8c 0b 00 00 0f 11 04 24 0f 10 84 04 9c 0b 00 00 0f 11 44 24  H..$...............$..........D$
00018cc0  10 e8 fd bf ff ff 0f 10 8c 24 4c 01 00 00 0f 10 84 24 5c 01 00 00 48 8d 94 24 8c 09 00 00 48 8d  .........$L......$\...H..$....H.
00018ce0  8c 24 ac 09 00 00 0f 11 8c 24 8c 07 00 00 0f 11 84 24 9c 07 00 00 0f 11 8c 24 8c 09 00 00 0f 11  .$.......$.......$.......$......
00018d00  84 24 9c 09 00 00 48 83 c4 20 0f b7 02 48 83 c2 02 48 c1 e0 0a 48 05 80 06 00 00 48 69 c0 bc 7d  .$....H.. ...H...H...H.....Hi..}
00018d20  9d 00 48 c1 e8 23 25 ff 03 00 00 66 89 42 fe 48 39 d1 75 d6 0f 10 8c 24 6c 09 00 00 0f 10 84 24  ..H..#%....f.B.H9.u....$l......$
00018d40  7c 09 00 00 49 ff c6 48 83 c3 14 48 8d 84 24 6c 09 00 00 48 89 c7 48 89 44 24 08 0f 11 8c 24 4c  |...I..H...H..$l...H..H.D$....$L
00018d60  01 00 00 0f 11 84 24 5c 01 00 00 0f 11 8c 24 6c 07 00 00 0f 11 84 24 7c 07 00 00 e8 03 cc ff ff  ......$\......$l......$|........
00018d80  48 8d bc 24 74 09 00 00 49 89 c2 88 44 24 78 0f b6 c4 48 89 44 24 18 8a 44 24 18 88 44 24 79 4c  H..$t...I...D$x...H.D$..D$..D$yL
00018da0  89 d0 48 c1 e8 10 48 89 44 24 20 8a 44 24 20 88 44 24 7a 4c 89 d0 48 c1 e8 18 48 89 44 24 28 8a  ..H...H.D$ .D$ .D$zL..H...H.D$(.
00018dc0  44 24 28 88 44 24 7b 4c 89 d0 48 c1 e8 20 48 89 44 24 30 8a 44 24 30 88 44 24 7c e8 a3 cb ff ff  D$(.D${L..H.. H.D$0.D$0.D$|.....
00018de0  48 8d bc 24 7c 09 00 00 49 89 c1 88 44 24 7d 0f b6 c4 48 89 44 24 38 8a 44 24 38 4d 89 cf 49 c1  H..$|...I...D$}...H.D$8.D$8M..I.
00018e00  ef 20 88 44 24 7e 4c 89 c8 48 c1 e8 10 44 88 bc 24 81 00 00 00 48 89 44 24 40 8a 44 24 40 88 44  . .D$~L..H...D..$....H.D$@.D$@.D
00018e20  24 7f 4c 89 c8 48 c1 e8 18 48 89 44 24 48 8a 44 24 48 88 84 24 80 00 00 00 e8 45 cb ff ff 48 8d  $.L..H...H.D$H.D$H..$.....E...H.
00018e40  bc 24 84 09 00 00 49 89 c0 0f b6 ec 88 84 24 82 00 00 00 49 89 c4 48 c1 e8 18 4d 89 c3 49 c1 ec  .$....I.......$....I..H...M..I..
00018e60  10 40 88 ac 24 83 00 00 00 48 89 44 24 50 8a 44 24 50 49 c1 eb 20 44 88 a4 24 84 00 00 00 88 84  .@..$....H.D$P.D$PI.. D..$......
00018e80  24 85 00 00 00 44 88 9c 24 86 00 00 00 e8 f1 ca ff ff 44 88 53 ec 44 8a 54 24 18 48 89 c6 48 89  $....D..$.........D.S.D.T$.H..H.
00018ea0  c1 48 89 c2 0f b6 fc 44 88 53 ed 44 8a 54 24 20 48 c1 ee 10 48 c1 e9 18 48 c1 ea 20 44 88 4b f1  .H.....D.S.D.T$ H...H...H.. D.K.
00018ec0  44 88 53 ee 44 8a 54 24 28 88 84 24 87 00 00 00 44 88 53 ef 44 8a 54 24 30 40 88 bc 24 88 00 00  D.S.D.T$(..$....D.S.D.T$0@..$...
00018ee0  00 44 88 53 f0 44 8a 54 24 38 40 88 b4 24 89 00 00 00 44 88 53 f2 44 8a 54 24 40 88 8c 24 8a 00  .D.S.D.T$8@..$....D.S.D.T$@..$..
00018f00  00 00 88 94 24 8b 00 00 00 44 88 53 f3 44 8a 54 24 48 44 88 7b f5 44 8a 7c 24 50 44 88 53 f4 44  ....$....D.S.D.T$HD.{.D.|$PD.S.D
00018f20  88 43 f6 40 88 6b f7 44 88 63 f8 44 88 7b f9 44 88 5b fa 88 43 fb 40 88 7b fc 40 88 73 fd 88 4b  .C.@.k.D.c.D.{.D.[..C.@.{.@.s..K
00018f40  fe 88 53 ff 49 83 fe 10 0f 85 47 fd ff ff 48 8d bc 24 98 4a 00 00 b9 50 00 00 00 48 8d b4 24 d8  ..S.I.....G...H..$.J...P...H..$.
00018f60  4b 00 00 48 8b 44 24 58 f3 a5 48 8d bc 24 d8 4b 00 00 b9 50 00 00 00 48 8d b4 24 98 4a 00 00 49  K..H.D$X..H..$.K...P...H..$.J..I
00018f80  81 c5 00 02 00 00 f3 a5 48 8b 7c 24 10 48 8d b4 24 d8 4b 00 00 b9 50 00 00 00 48 81 44 24 10 40  ........H.|$.H..$.K...P...H.D$.@
00018fa0  01 00 00 f3 a5 49 39 c5 0f 85 ac fc ff ff 48 8d bc 24 6c 07 00 00 48 8d b4 24 6c 05 00 00 b9 80  .....I9.......H..$l...H..$l.....
00018fc0  00 00 00 31 db f3 a5 48 8b 7c 24 08 48 8d b4 24 6c 07 00 00 b9 80 00 00 00 f3 a5 48 8b 74 24 08  ...1...H.|$.H..$l..........H.t$.
00018fe0  48 8d bc 24 6c 0b 00 00 b9 80 00 00 00 f3 a5 48 89 d8 48 8d bc 24 cc 00 00 00 48 83 ec 20 48 c1  H..$l..........H..H..$....H.. H.
00019000  e0 05 0f 10 84 04 8c 0b 00 00 0f 11 04 24 0f 10 84 04 9c 0b 00 00 0f 11 44 24 10 e8 a3 bc ff ff  .............$..........D$......
00019020  0f 10 8c 24 ec 00 00 00 0f 10 84 24 fc 00 00 00 48 8d 94 24 6c 01 00 00 48 8d 8c 24 8c 01 00 00  ...$.......$....H..$l...H..$....
00019040  48 89 d7 0f 11 8c 24 cc 00 00 00 0f 11 84 24 dc 00 00 00 0f 11 8c 24 6c 01 00 00 0f 11 84 24 7c  H.....$.......$.......$l......$|
00019060  01 00 00 48 83 c4 20 0f b7 02 48 83 c2 02 48 c1 e0 04 48 05 80 06 00 00 48 69 c0 bc 7d 9d 00 48  ...H.. ...H...H...H.....Hi..}..H
00019080  c1 e8 23 83 e0 0f 66 89 42 fe 48 39 d1 75 d8 0f 10 8c 24 4c 01 00 00 0f 10 84 24 5c 01 00 00 0f  ..#...f.B.H9.u....$L......$\....
000190a0  11 8c 24 8c 00 00 00 0f 11 84 24 9c 00 00 00 0f 11 8c 24 ac 00 00 00 0f 11 84 24 bc 00 00 00 e8  ..$.......$.......$.......$.....
000190c0  c0 c7 ff ff 48 8d bc 24 5c 01 00 00 41 89 c1 e8 b0 c7 ff ff 48 8d b4 24 18 4d 00 00 48 c1 e0 20  ....H..$\...A.......H..$.M..H.. 
000190e0  49 09 c1 4c 89 8c dc d8 50 00 00 48 ff c3 48 83 fb 10 0f 85 f7 fe ff ff 48 8b 7c 24 60 b9 10 01  I..L....P..H..H.........H.|$`...
00019100  00 00 f3 a5 48 8b 84 24 58 51 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 f4 c0 fe ff 48 81 c4 68  ....H..$XQ..dH+.%(...t......H..h
00019120  51 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 d7 d5 fe ff                                            Q..[]A\A]A^A_.....

00019132    void libcrux_ml_kem_ind_cca_generate_keypair_8c(int64_t arg1, int128_t* arg2) __noreturn

00019132  4157               push    r15 {var_8}
00019134  4156               push    r14 {var_10}
00019136  4155               push    r13 {var_18}
00019138  4154               push    r12 {var_20}
0001913a  55                 push    rbp {var_28}
0001913b  53                 push    rbx {var_30}
0001913c  4881ecd8700000     sub     rsp, 0x70d8
00019143  48897c2410         mov     qword [rsp+0x10 {var_70f8}], rdi
00019148  488d9c2468670000   lea     rbx, [rsp+0x6768 {var_9a0}]
00019150  488d8424085e0000   lea     rax, [rsp+0x5e08 {var_1300}]
00019158  4889c7             mov     rdi, rax {var_1300}
0001915b  488dac24e8460000   lea     rbp, [rsp+0x46e8 {var_2a20}]
00019163  4c8da424a4210000   lea     r12, [rsp+0x21a4 {var_4f64}]
0001916b  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00019174  4c89ac24c8700000   mov     qword [rsp+0x70c8 {var_40}], r13
0001917c  4989f5             mov     r13, rsi
0001917f  48895c2418         mov     qword [rsp+0x18 {var_70f0}], rbx {var_9a0}
00019184  488b542418         mov     rdx, qword [rsp+0x18 {var_70f0}]
00019189  be21000000         mov     esi, 0x21
0001918e  4889442420         mov     qword [rsp+0x20 {var_70e8}], rax {var_1300}
00019193  bb21000000         mov     ebx, 0x21
00019198  c68424285e000003   mov     byte [rsp+0x5e28 {var_12e0}], 0x3
000191a0  410f104500         movups  xmm0, xmmword [r13]
000191a5  4d8d7d20           lea     r15, [r13+0x20]
000191a9  0f118424085e0000   movups  xmmword [rsp+0x5e08 {var_1300}], xmm0
000191b1  410f104510         movups  xmm0, xmmword [r13+0x10]
000191b6  0f118424185e0000   movups  xmmword [rsp+0x5e18 {var_12f0}], xmm0
000191be  e8d9d4ffff         call    libcrux_ml_kem_hash_functions_portable_G
{ Does not return }

000191c3           48 8b 74 24 18 31 d2 48 8d bc 24 68 4b 00 00 b9 10 00 00 00 48 8d 84 24 68 4b 00 00 48     H.t$.1.H..$hK.......H..$hK..H
000191e0  89 54 24 08 48 89 ea f3 a5 48 89 c6 48 89 44 24 28 48 8d 84 24 88 4b 00 00 48 89 f7 be 20 00 00  .T$.H....H..H.D$(H..$.K..H... ..
00019200  00 48 89 04 24 e8 10 c5 ff ff 48 89 ef be 01 00 00 00 48 8d 94 24 64 34 00 00 e8 79 e9 ff ff 48  .H..$.....H.......H..$d4...y...H
00019220  8b 3c 24 be 20 00 00 00 48 8d ac 24 85 46 00 00 48 89 ea e8 45 c5 ff ff 48 89 d9 31 d2 48 89 ee  .<$. ...H..$.F..H...E...H..1.H..
00019240  48 8d bc 24 a6 46 00 00 f3 a4 48 8d b4 24 a6 46 00 00 4c 89 e7 e8 0b e6 ff ff 0f b6 94 24 a4 27  H..$.F....H..$.F..L..........$.'
00019260  00 00 b9 80 01 00 00 4c 89 e6 48 8d bc 24 82 00 00 00 f3 a5 48 89 d9 48 8d 9c 24 82 12 00 00 48  .......L..H..$......H..H..$....H
00019280  89 ee 48 8d bc 24 c7 46 00 00 f3 a4 48 89 df 48 8d b4 24 c7 46 00 00 e8 c9 e5 ff ff 48 89 de b9  ..H..$.F....H..H..$.F.......H...
000192a0  80 01 00 00 31 db 48 8d bc 24 82 06 00 00 f3 a5 48 89 d8 48 ff c3 48 c1 e0 09 48 8d bc 04 04 2b  ....1.H..$......H..H..H...H....+
000192c0  00 00 e8 a2 b5 ff ff 48 83 fb 03 75 e3 48 8d ac 24 04 2b 00 00 4c 8d a4 24 82 06 00 00 31 db 4c  .......H...u.H..$.+..L..$....1.L
000192e0  8d b4 24 64 34 00 00 31 c0 49 8d 0c 1e 48 8d 94 24 84 18 00 00 48 8d 34 01 48 89 44 24 38 48 89  ..$d4..1.I...H..$....H.4.H.D$8H.
00019300  14 24 48 8b 3c 24 48 8d 94 04 82 00 00 00 48 89 4c 24 30 e8 43 b7 ff ff 48 8b 34 24 48 89 ef e8  .$H.<$H.......H.L$0.C...H.4$H...
00019320  10 b9 ff ff 48 8b 44 24 38 48 8b 4c 24 30 48 05 00 02 00 00 48 3d 00 06 00 00 75 b1 4d 89 e2 49  ....H.D$8H.L$0H.....H=....u.M..I
00019340  89 e9 4c 8d 5c 24 60 41 0f 10 09 41 0f 10 41 10 48 83 ec 20 4c 89 df be 49 05 00 00 49 83 c1 20  ..L.\$`A...A..A.H.. L...I...I.. 
00019360  0f 11 8c 24 a2 0c 00 00 0f 11 84 24 b2 0c 00 00 0f 11 8c 24 a4 18 00 00 0f 11 84 24 b4 18 00 00  ...$.......$.......$.......$....
00019380  0f 11 0c 24 0f 11 44 24 10 e8 c6 b3 ff ff 0f 10 8c 24 80 00 00 00 48 8d 7c 24 60 4c 89 d6 0f 10  ...$..D$.........$....H.|$`L....
000193a0  84 24 90 00 00 00 49 83 c2 20 0f 11 8c 24 a4 18 00 00 0f 11 84 24 b4 18 00 00 0f 11 0c 24 0f 11  .$....I.. ...$.......$.......$..
000193c0  44 24 10 e8 15 b3 ff ff 0f 10 44 24 70 0f 10 4c 24 60 48 8d 84 24 a2 0c 00 00 48 89 44 24 20 48  D$........D$p..L$`H..$....H.D$ H
000193e0  8b 7c 24 20 0f 11 84 24 b4 18 00 00 0f 11 44 24 10 0f 11 8c 24 a4 18 00 00 0f 11 0c 24 e8 12 d5  .|$ ...$......D$....$.......$...
00019400  ff ff 0f 10 84 24 a2 0c 00 00 49 8d 84 24 00 02 00 00 41 0f 11 41 e0 0f 10 84 24 b2 0c 00 00 48  .....$....I..$....A..A....$....H
00019420  83 c4 20 41 0f 11 41 f0 4c 39 d0 0f 85 16 ff ff ff 48 81 c3 00 06 00 00 48 81 c5 00 02 00 00 48  .. A..A.L9.......H......H......H
00019440  81 fb 00 12 00 00 74 08 4d 89 d4 e9 97 fe ff ff c6 44 24 60 00 48 8b 3c 24 b9 80 01 00 00 31 c0  ......t.M........D$`.H.<$.....1.
00019460  0f 10 84 24 68 4b 00 00 48 8d b4 24 04 2b 00 00 48 8d 9c 24 a8 54 00 00 f3 a5 4c 89 de 48 8d bc  ...$hK..H..$.+..H..$.T....L..H..
00019480  24 04 2b 00 00 b9 21 00 00 00 0f 11 44 24 61 0f 10 84 24 78 4b 00 00 48 8d ac 24 08 50 00 00 4c  $.+...!.....D$a...$xK..H..$.P..L
000194a0  8d a4 24 08 5e 00 00 4c 8d b4 24 68 4b 00 00 0f 11 44 24 71 f3 a4 48 8b 7c 24 18 b9 28 01 00 00  ..$.^..L..$hK....D$q..H.|$..(...
000194c0  48 89 de f3 ab 0f 10 84 24 05 2b 00 00 48 8b 3c 24 0f 11 84 24 65 46 00 00 0f 10 84 24 15 2b 00  H.......$.+..H.<$...$eF.....$.+.
000194e0  00 0f 11 84 24 75 46 00 00 e8 88 c6 ff ff 0f 10 84 24 65 46 00 00 b9 20 01 00 00 48 89 de 48 8d  ....$uF..........$eF... ...H..H.
00019500  bc 24 68 67 00 00 f3 a5 0f 11 84 24 e8 6b 00 00 0f 10 84 24 75 46 00 00 48 8b 7c 24 20 48 8d b4  .$hg.......$.k.....$uF..H.|$ H..
00019520  24 68 67 00 00 b9 28 01 00 00 0f 11 84 24 f8 6b 00 00 f3 a5 48 8d bc 24 82 00 00 00 48 89 ee e8  $hg...(......$.k....H..$....H...
00019540  32 c6 ff ff b9 20 01 00 00 48 89 df 48 89 ee f3 a5 48 8d bc 24 68 67 00 00 31 c0 4c 89 e2 48 8d  2.... ...H..H....H..$hg..1.L..H.
00019560  b4 24 08 5e 00 00 b9 28 01 00 00 f3 a5 48 8d bc 24 04 2b 00 00 b9 20 01 00 00 48 89 de f3 a5 48  .$.^...(.....H..$.+... ...H....H
00019580  8d bc 24 84 2f 00 00 48 8d b4 24 68 67 00 00 b9 28 01 00 00 f3 a5 48 8d bc 24 84 18 00 00 48 8d  ..$./..H..$hg...(.....H..$....H.
000195a0  b4 24 04 2b 00 00 b9 48 02 00 00 f3 a5 48 8d bc 24 e8 46 00 00 48 8d b4 24 84 18 00 00 b9 20 01  .$.+...H.....H..$.F..H..$..... .
000195c0  00 00 f3 a5 48 8b 7c 24 28 48 8d b4 24 04 1d 00 00 b9 28 01 00 00 f3 a5 48 8d bc 24 68 67 00 00  ....H.|$(H..$.....(.....H..$hg..
000195e0  b9 58 02 00 00 48 8d b4 24 e8 46 00 00 f3 ab 48 8d bc 24 68 67 00 00 b9 20 01 00 00 f3 a5 48 8d  .X...H..$.F....H..$hg... .....H.
00019600  bc 24 e8 6b 00 00 48 8d b4 24 68 4b 00 00 b9 28 01 00 00 f3 a5 4c 89 f7 be a0 04 00 00 e8 11 de  .$.k..H..$hK...(.....L..........
00019620  ff ff 0f 10 84 24 08 5e 00 00 b9 58 02 00 00 48 89 df 48 8d 84 24 68 67 00 00 0f 11 84 24 88 70  .....$.^...X...H..H..$hg.....$.p
00019640  00 00 0f 10 84 24 18 5e 00 00 48 89 c6 0f 11 84 24 98 70 00 00 41 0f 10 45 20 0f 11 84 24 a8 70  .....$.^..H.....$.p..A..E ...$.p
00019660  00 00 41 0f 10 47 10 0f 11 84 24 b8 70 00 00 f3 a5 b9 58 02 00 00 4c 89 e7 48 89 de f3 a5 48 89  ..A..G....$.p.....X...L..H....H.
00019680  c7 b9 58 02 00 00 4c 89 e6 f3 a5 48 89 c6 48 8d bc 24 64 34 00 00 b9 58 02 00 00 f3 a5 48 8d bc  ..X...L....H..H..$d4...X.....H..
000196a0  24 a4 21 00 00 48 8d b4 24 64 34 00 00 b9 58 02 00 00 f3 a5 48 8d bc 24 04 2b 00 00 48 8d b4 24  $.!..H..$d4...X.....H..$.+..H..$
000196c0  a4 21 00 00 b9 58 02 00 00 f3 a5 b9 28 01 00 00 48 89 ef 4c 89 f6 f3 a5 48 89 c7 b9 28 01 00 00  .!...X......(...H..L....H...(...
000196e0  48 89 ee f3 a5 48 89 c6 48 8d bc 24 64 34 00 00 b9 28 01 00 00 f3 a5 48 8d bc 24 82 06 00 00 48  H....H..H..$d4...(.....H..$....H
00019700  8d b4 24 64 34 00 00 b9 28 01 00 00 f3 a5 48 8d bc 24 64 34 00 00 48 8d b4 24 04 2b 00 00 b9 58  ..$d4...(.....H..$d4..H..$.+...X
00019720  02 00 00 f3 a5 48 8b 3c 24 48 8d b4 24 82 06 00 00 b9 28 01 00 00 f3 a5 48 8b 44 24 10 48 8b 7c  .....H.<$H..$.....(.....H.D$.H.|
00019740  24 10 48 8d b4 24 64 34 00 00 b9 58 02 00 00 f3 a5 48 8b 34 24 48 8d b8 60 09 00 00 b9 28 01 00  $.H..$d4...X.....H.4$H..`....(..
00019760  00 f3 a5 48 8b 84 24 c8 70 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 95 ba fe ff 48 8b 44 24 10  ...H..$.p..dH+.%(...t......H.D$.
00019780  48 81 c4 d8 70 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 73 cf fe ff                                H...p..[]A\A]A^A_.s...

00019796    void crypto_kem_mlkem768_keypair() __noreturn

00019796  4155               push    r13 {var_8}
00019798  4154               push    r12 {var_10}
0001979a  4989fc             mov     r12, rdi
0001979d  55                 push    rbp {var_18}
0001979e  53                 push    rbx {var_20}
0001979f  4881ecd81c0000     sub     rsp, 0x1cd8
000197a6  488d9c24081c0000   lea     rbx, [rsp+0x1c08 {var_f0}]
000197ae  4c8dac24080e0000   lea     r13, [rsp+0xe08 {var_ef0}]
000197b6  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000197bf  4889ac24c81c0000   mov     qword [rsp+0x1cc8 {var_30}], rbp
000197c7  4889f5             mov     rbp, rsi
000197ca  4889df             mov     rdi, rbx {var_f0}
000197cd  be40000000         mov     esi, 0x40
000197d2  e813ecfeff         call    genrandom
{ Does not return }

000197d7                                                                       48 8d bc 24 48 1c 00 00 b9                         H..$H....
000197e0  10 00 00 00 48 89 de f3 a5 48 8d bc 24 88 1c 00 00 48 8d b4 24 48 1c 00 00 b9 10 00 00 00 f3 a5  ....H....H..$....H..$H..........
00019800  48 8d b4 24 88 1c 00 00 4c 89 ef e8 22 f9 ff ff 48 8d 7c 24 08 b9 80 03 00 00 4c 89 ee f3 a5 48  H..$....L..."...H.|$......L....H
00019820  8d b4 24 68 09 00 00 b9 28 01 00 00 4c 89 e7 f3 a5 48 8d 74 24 08 b9 58 02 00 00 48 89 ef f3 a5  ..$h....(...L....H.t$..X...H....
00019840  be 40 00 00 00 48 89 df e8 e2 d4 fe ff 48 8d 7c 24 08 be 00 0e 00 00 e8 d3 d4 fe ff 48 8b 84 24  .@...H.......H.|$...........H..$
00019860  c8 1c 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 9c b9 fe ff 48 81 c4 d8 1c 00 00 31 c0 5b 5d 41  ....dH+.%(...t......H......1.[]A
00019880  5c 41 5d e9 81 ce fe ff                                                                          \A].....

00019888    void crypto_kem_mlkem768_enc(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00019888  4156               push    r14 {var_8}
0001988a  4989f6             mov     r14, rsi
0001988d  b928010000         mov     ecx, 0x128
00019892  4155               push    r13 {var_10}
00019894  4154               push    r12 {var_18}
00019896  55                 push    rbp {var_20}
00019897  4889fd             mov     rbp, rdi
0001989a  53                 push    rbx {var_28}
0001989b  4881ec10240000     sub     rsp, 0x2410
000198a2  64488b3425280000…  mov     rsi, qword [fs:0x28]
000198ab  4889b42408240000   mov     qword [rsp+0x2408 {var_30}], rsi
000198b3  4889d6             mov     rsi, rdx
000198b6  4c8da424e8150000   lea     r12, [rsp+0x15e8 {var_e50}]
000198be  488dbc2448110000   lea     rdi, [rsp+0x1148 {var_12f0}]
000198c6  4c8dac24c8160000   lea     r13, [rsp+0x16c8 {var_d70}]
000198ce  488d9c2448110000   lea     rbx, [rsp+0x1148 {var_12f0}]
000198d6  f3a5               rep movsd dword [rdi], [rsi] {var_1790} {var_12f0}  {0x0}
000198d8  be20000000         mov     esi, 0x20
000198dd  4c89e7             mov     rdi, r12 {var_e50}
000198e0  e805ebfeff         call    genrandom
{ Does not return }

000198e5                 0f 10 8c 24 e8 15 00 00 4c 89 ea be 20 00 00 00 0f 10 84 24 f8 15 00 00 48 8d 84       ...$....L... ......$....H..
00019900  24 48 16 00 00 48 89 c7 0f 11 8c 24 08 16 00 00 0f 11 8c 24 28 16 00 00 0f 11 8c 24 c8 1f 00 00  $H...H.....$.......$(......$....
00019920  0f 11 8c 24 48 16 00 00 0f 11 84 24 18 16 00 00 0f 11 84 24 38 16 00 00 0f 11 84 24 d8 1f 00 00  ...$H......$.......$8......$....
00019940  0f 11 84 24 58 16 00 00 e8 6a bd ff ff 48 89 df be a0 04 00 00 48 8d 94 24 68 16 00 00 e8 d1 da  ...$X....j...H.......H..$h......
00019960  ff ff 0f 10 84 24 68 16 00 00 4c 89 e8 4c 8d ac 24 08 17 00 00 48 89 c7 4c 89 ea be 40 00 00 00  .....$h...L..L..$....H..L...@...
00019980  0f 11 84 24 e8 16 00 00 0f 10 84 24 78 16 00 00 0f 11 84 24 f8 16 00 00 e8 ff cc ff ff 0f 10 84  ...$.......$x......$............
000199a0  24 48 16 00 00 49 89 da 48 8d b4 24 28 17 00 00 48 8d 9c 24 48 17 00 00 4c 89 d7 48 89 f1 41 b8  $H...I..H..$(...H..$H...L..H..A.
000199c0  20 00 00 00 0f 11 84 24 88 16 00 00 0f 10 84 24 58 16 00 00 49 89 d9 48 8d 94 24 88 16 00 00 be   ......$.......$X...I..H..$.....
000199e0  a0 04 00 00 0f 11 84 24 98 16 00 00 e8 f2 e8 ff ff 48 8d bc 24 88 1b 00 00 b9 10 01 00 00 48 89  .......$.........H..$.........H.
00019a00  de f3 a5 48 8d bc 24 c8 1f 00 00 48 8d b4 24 88 1b 00 00 b9 10 01 00 00 f3 a5 48 8d bc 24 e8 0c  ...H..$....H..$...........H..$..
00019a20  00 00 48 8d b4 24 c8 1f 00 00 b9 10 01 00 00 f3 a5 48 8d 7c 24 08 48 8d b4 24 e8 0c 00 00 b9 10  ..H..$...........H.|$.H..$......
00019a40  01 00 00 f3 a5 48 8d b4 24 a8 16 00 00 4c 89 ef e8 a4 c6 ff ff 48 8d 74 24 08 48 8d bc 24 48 04  .....H..$....L.......H.t$.H..$H.
00019a60  00 00 b9 10 01 00 00 f3 a5 0f 10 84 24 b8 16 00 00 0f 10 8c 24 a8 16 00 00 48 8d bc 24 e8 0c 00  ............$.......$....H..$...
00019a80  00 48 8d b4 24 48 04 00 00 b9 10 01 00 00 f3 a5 0f 11 84 24 38 11 00 00 48 8d bc 24 88 08 00 00  .H..$H.............$8...H..$....
00019aa0  48 8d b4 24 e8 0c 00 00 0f 11 8c 24 28 11 00 00 b9 18 01 00 00 f3 a5 48 8d bc 24 e8 0c 00 00 48  H..$.......$(..........H..$....H
00019ac0  8d b4 24 88 08 00 00 b9 18 01 00 00 0f 11 84 24 d8 1f 00 00 f3 a5 48 8d b4 24 e8 0c 00 00 b9 10  ..$............$......H..$......
00019ae0  01 00 00 48 89 ef 0f 11 8c 24 c8 1f 00 00 f3 a5 0f 10 84 24 28 11 00 00 be 20 00 00 00 4c 89 e7  ...H.....$.........$(.... ...L..
00019b00  41 0f 11 06 0f 10 84 24 38 11 00 00 41 0f 11 46 10 e8 19 d2 fe ff 48 8d bc 24 e8 0c 00 00 be 60  A......$8...A..F......H..$.....`
00019b20  04 00 00 e8 07 d2 fe ff 48 8b 84 24 08 24 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 d0 b6 fe ff  ........H..$.$..dH+.%(...t......
00019b40  48 81 c4 10 24 00 00 31 c0 5b 5d 41 5c 41 5d 41 5e e9 b3 cb fe ff                                H...$..1.[]A\A]A^.....

00019b56    void crypto_kem_mlkem768_dec(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00019b56  4157               push    r15 {var_8}
00019b58  4889f0             mov     rax, rsi
00019b5b  b958020000         mov     ecx, 0x258
00019b60  4156               push    r14 {var_10}
00019b62  4155               push    r13 {var_18}
00019b64  4154               push    r12 {var_20}
00019b66  55                 push    rbp {var_28}
00019b67  53                 push    rbx {var_30}
00019b68  31db               xor     ebx, ebx
00019b6a  4881ec983c0000     sub     rsp, 0x3c98
00019b71  48897c2420         mov     qword [rsp+0x20 {var_3ca8}], rdi
00019b76  488dbc2408290000   lea     rdi, [rsp+0x2908 {var_13c0}]
00019b7e  4c8db42408290000   lea     r14, [rsp+0x2908 {var_13c0}]
00019b86  4c8dbc24c8060000   lea     r15, [rsp+0x6c8 {var_3600}]
00019b8e  64488b3425280000…  mov     rsi, qword [fs:0x28]
00019b97  4889b424883c0000   mov     qword [rsp+0x3c88 {var_40}], rsi
00019b9f  4889d6             mov     rsi, rdx
00019ba2  f3a5               rep movsd dword [rdi], [rsi] {var_1d20} {var_13c0}  {0x0}
00019ba4  488dbc24c8060000   lea     rdi, [rsp+0x6c8 {var_3600}]
00019bac  b910010000         mov     ecx, 0x110
00019bb1  4889c6             mov     rsi, rax
00019bb4  f3a5               rep movsd dword [rdi], [rsi] {var_3a40} {var_3600}  {0x0}
00019bb6  4889d8             mov     rax, rbx
00019bb9  48ffc3             inc     rbx  {0x1}
00019bbc  48c1e009           shl     rax, 0x9  {0x0}
00019bc0  488dbc0408230000   lea     rdi, [rsp+rax+0x2308 {var_19c0}]
00019bc8  e89cacffff         call    libcrux_ml_kem_polynomial_ZERO_89_ea
{ Does not return }

00019bcd                                         48 83 fb 03 75 e3 48 8d 84 24 08 1d 00 00 48 8d 9c 24 08               H...u.H..$....H..$.
00019be0  23 00 00 45 31 e4 48 89 44 24 08 48 89 dd 48 8b 7c 24 08 e8 71 ac ff ff 48 8b 44 24 08 4b 8d 14  #..E1.H.D$.H..H.|$..q...H.D$.K..
00019c00  26 48 8d b4 24 08 1f 00 00 48 8d 8c 24 08 17 00 00 48 89 74 24 18 48 89 4c 24 10 48 8b 7c 24 10  &H..$....H..$....H.t$.H.L$.H.|$.
00019c20  48 89 d6 48 89 44 24 28 48 89 14 24 e8 99 c3 ff ff 48 8b 44 24 28 48 8b 14 24 0f 10 84 24 08 17  H..H.D$(H..$.....H.D$(H..$...$..
00019c40  00 00 48 83 c2 18 48 83 c0 20 0f 11 40 e0 0f 10 84 24 18 17 00 00 0f 11 40 f0 48 39 44 24 18 75  ..H...H.. ..@....$......@.H9D$.u
00019c60  ba 48 8b 7c 24 10 48 8b 74 24 08 b9 80 00 00 00 49 81 c4 80 01 00 00 f3 a5 48 89 df 48 8b 74 24  .H.|$.H.t$......I........H..H.t$
00019c80  10 b9 80 00 00 00 48 81 c3 00 02 00 00 f3 a5 49 81 fc 80 04 00 00 0f 85 52 ff ff ff 48 8d bc 24  ......H........I........R...H..$
00019ca0  08 0b 00 00 b9 80 01 00 00 48 89 ee 31 db f3 a5 48 8d bc 24 08 11 00 00 48 8d b4 24 08 0b 00 00  .........H..1...H..$....H..$....
00019cc0  b9 80 01 00 00 f3 a5 48 8b 7c 24 10 48 8d b4 24 08 11 00 00 b9 80 01 00 00 f3 a5 48 89 d8 48 ff  .......H.|$.H..$...........H..H.
00019ce0  c3 48 c1 e0 09 48 8d bc 04 08 23 00 00 e8 77 ab ff ff 48 83 fb 03 75 e3 48 8d 84 24 e8 04 00 00  .H...H....#...w...H...u.H..$....
00019d00  48 89 2c 24 45 31 f6 48 89 44 24 28 48 8b 7c 24 08 4f 8d 24 37 e8 4f ab ff ff 48 8b 4c 24 08 4c  H.,$E1.H.D$(H.|$.O.$7.O...H.L$.L
00019d20  89 e7 48 89 4c 24 38 e8 bb bc ff ff 49 8d 7c 24 0a 48 89 d3 48 89 44 24 30 e8 a9 bc ff ff 48 8b  ..H.L$8.....I.|$.H..H.D$0.....H.
00019d40  74 24 30 48 8b 4c 24 38 48 89 9c 24 d0 04 00 00 48 89 94 24 e0 04 00 00 48 89 b4 24 c8 04 00 00  t$0H.L$8H..$....H..$....H..$....
00019d60  48 89 84 24 d8 04 00 00 48 8d 84 24 c8 04 00 00 48 89 c3 0f bf 10 48 83 c0 02 69 d2 01 0d 00 00  H..$....H..$....H.....H...i.....
00019d80  8d 94 12 00 04 00 00 c1 fa 0b 66 89 50 fe 48 39 44 24 28 75 de 0f 10 8c 24 c8 04 00 00 0f 10 84  ..........f.P.H9D$(u....$.......
00019da0  24 d8 04 00 00 49 83 c4 14 48 83 c1 20 0f 11 49 e0 0f 11 41 f0 0f 11 8c 24 c8 02 00 00 0f 11 84  $....I...H.. ..I...A....$.......
00019dc0  24 d8 02 00 00 48 39 4c 24 18 0f 85 4f ff ff ff 48 8b 74 24 08 b9 80 00 00 00 48 89 df 31 c0 f3  $....H9L$...O...H.t$......H..1..
00019de0  a5 48 8b 3c 24 b9 80 00 00 00 48 8d b4 24 c8 04 00 00 4c 8d 64 24 40 ba 07 00 00 00 48 89 44 24  .H.<$.....H..$....L.d$@.....H.D$
00019e00  40 49 81 c6 40 01 00 00 f3 a5 48 8b 34 24 4c 89 e7 e8 23 c3 ff ff 48 8b 34 24 ba 06 00 00 00 4c  @I..@.....H.4$L...#...H.4$.....L
00019e20  89 e7 e8 12 c3 ff ff 48 8b 34 24 ba 05 00 00 00 4c 89 e7 e8 01 c3 ff ff 48 8b 34 24 ba 04 00 00  .......H.4$.....L.......H.4$....
00019e40  00 4c 89 e7 e8 f0 c2 ff ff 48 8b 34 24 4c 89 e7 e8 2a b7 ff ff 48 8b 34 24 4c 89 e7 e8 da b5 ff  .L.......H.4$L...*...H.4$L......
00019e60  ff 48 8b 34 24 4c 89 e7 e8 73 b4 ff ff 48 8b 3c 24 e8 e9 ca ff ff 48 81 04 24 00 02 00 00 49 81  .H.4$L...s...H.<$.....H..$....I.
00019e80  fe c0 03 00 00 0f 85 81 fe ff ff 48 8b 7c 24 08 b9 80 01 00 00 48 89 ee 4c 8d a4 24 88 0a 00 00  ...........H.|$......H..L..$....
00019ea0  f3 a5 48 8d bc 24 08 23 00 00 e8 ba a9 ff ff 48 8d 84 24 e8 04 00 00 31 c9 48 89 04 24 4c 89 e7  ..H..$.#.......H..$....1.H..$L..
00019ec0  48 89 4c 24 28 e8 ff b9 ff ff 49 8d 7c 24 04 49 89 c7 49 89 d6 e8 ef b9 ff ff 4c 89 bc 24 c8 04  H.L$(.....I.|$.I..I.......L..$..
00019ee0  00 00 48 8b 4c 24 28 48 89 84 24 d8 04 00 00 48 8d 84 24 c8 04 00 00 4c 89 b4 24 d0 04 00 00 48  ..H.L$(H..$....H..$....L..$....H
00019f00  89 94 24 e0 04 00 00 48 89 44 24 18 0f bf 10 48 83 c0 02 69 d2 01 0d 00 00 8d 54 12 10 c1 fa 05  ..$....H.D$....H...i......T.....
00019f20  66 89 50 fe 48 39 04 24 75 e2 0f 10 8c 24 c8 04 00 00 0f 10 84 24 d8 04 00 00 49 83 c4 08 0f 11  f.P.H9.$u....$.......$....I.....
00019f40  4c 8d 00 0f 11 44 8d 10 48 83 c1 08 0f 11 8c 24 c8 02 00 00 0f 11 84 24 d8 02 00 00 48 81 f9 80  L....D..H......$.......$....H...
00019f60  00 00 00 0f 85 54 ff ff ff 4c 8d a4 24 c8 02 00 00 48 8d bc 24 c8 00 00 00 48 89 ee 45 31 f6 f3  .....T...L..$....H..$....H..E1..
00019f80  a5 4c 89 e7 4c 8d bc 24 c8 00 00 00 e8 d8 a8 ff ff 48 8b 44 24 08 48 89 ef 4a 8d 14 30 48 8b 44  .L..L..$.........H.D$.H..J..0H.D
00019fa0  24 10 4a 8d 34 30 49 81 c6 00 02 00 00 e8 a9 aa ff ff 48 89 ee 4c 89 e7 e8 77 ac ff ff 49 81 fe  $.J.40I...........H..L...w...I..
00019fc0  00 06 00 00 75 cb 4c 89 e7 e8 8e cc ff ff 48 8b 7c 24 18 4c 89 e6 45 31 c9 b9 80 00 00 00 4c 8d  ....u.L.......H.|$.L..E1......L.
00019fe0  54 24 68 f3 a5 42 0f 10 0c 0b 42 0f 10 44 0b 10 48 83 ec 20 4c 89 d7 be a1 05 00 00 0f 11 8c 24  T$h..B....B..D..H.. L..........$
0001a000  28 23 00 00 0f 11 84 24 38 23 00 00 0f 11 0c 24 0f 11 44 24 10 e8 3a a7 ff ff 43 0f 10 0c 0f 43  (#.....$8#.....$..D$..:...C....C
0001a020  0f 10 44 0f 10 4c 89 d6 48 8d bc 24 c8 00 00 00 0f 11 8c 24 28 23 00 00 0f 11 84 24 38 23 00 00  ..D..L..H..$.......$(#.....$8#..
0001a040  0f 11 0c 24 0f 11 44 24 10 e8 bc a6 ff ff 0f 10 84 24 d8 00 00 00 0f 10 8c 24 c8 00 00 00 48 8d  ...$..D$.........$.......$....H.
0001a060  bc 24 a8 00 00 00 0f 11 84 24 38 23 00 00 0f 11 44 24 10 0f 11 8c 24 28 23 00 00 0f 11 0c 24 e8  .$.......$8#....D$....$(#.....$.
0001a080  90 c8 ff ff 0f 10 84 24 a8 00 00 00 42 0f 11 04 0b 0f 10 84 24 b8 00 00 00 48 83 c4 20 42 0f 11  .......$....B.......$....H.. B..
0001a0a0  44 0b 10 49 83 c1 20 49 81 f9 00 02 00 00 0f 85 31 ff ff ff 48 89 ef b9 80 00 00 00 48 89 de 45  D..I.. I........1...H.......H..E
0001a0c0  31 f6 f3 a5 48 8d b4 24 08 23 00 00 4c 89 e7 0f 57 c0 b9 80 00 00 00 0f 11 84 24 28 38 00 00 48  1...H..$.#..L...W.........$(8..H
0001a0e0  8d 6c 24 48 f3 a5 48 8d b4 24 c8 02 00 00 b9 80 00 00 00 48 89 df 0f 11 84 24 38 38 00 00 f3 a5  .l$H..H..$.........H.....$88....
0001a100  48 8d bc 24 08 23 00 00 b9 80 00 00 00 48 89 de f3 a5 4c 89 f0 48 83 ec 20 48 89 ef 48 c1 e0 05  H..$.#.......H....L..H.. H..H...
0001a120  0f 10 84 04 28 23 00 00 0f 11 04 24 0f 10 84 04 38 23 00 00 0f 11 44 24 10 e8 85 ab ff ff 0f 10  ....(#.....$....8#....D$........
0001a140  4c 24 68 0f 10 44 24 78 4c 89 e2 48 8d b4 24 08 03 00 00 bf 80 06 00 00 0f 11 8c 24 a8 00 00 00  L$h..D$xL..H..$............$....
0001a160  0f 11 84 24 b8 00 00 00 0f 11 8c 24 e8 02 00 00 0f 11 84 24 f8 02 00 00 48 83 c4 20 89 f9 66 2b  ...$.......$.......$....H.. ..f+
0001a180  0a 48 83 c2 02 89 c8 66 c1 f8 0f 31 c8 66 2d 40 03 66 c1 e8 0f 66 89 42 fe 48 39 d6 75 de 0f 10  .H.....f...1.f-@.f...f.B.H9.u...
0001a1a0  8c 24 c8 02 00 00 0f 10 84 24 d8 02 00 00 31 c0 31 c9 0f 11 4c 24 68 0f 11 44 24 78 0f 11 8c 24  .$.......$....1.1...L$h..D$x...$
0001a1c0  88 00 00 00 0f 11 84 24 98 00 00 00 41 0f b6 14 4c d3 e2 48 ff c1 09 d0 48 83 f9 08 75 ee 41 88  .......$....A...L..H....H...u.A.
0001a1e0  c5 31 c9 31 c0 41 0f b6 54 4c 10 d3 e2 48 ff c1 09 d0 48 83 f9 08 75 ed 44 89 eb 88 c7 41 89 dd  .1.1.A..TL...H....H...u.D....A..
0001a200  48 8d 9c 24 28 38 00 00 66 46 89 2c 73 49 ff c6 49 83 fe 10 0f 85 f8 fe ff ff 0f 10 8c 24 28 38  H..$(8..fF.,sI..I............$(8
0001a220  00 00 0f 10 84 24 38 38 00 00 48 8d 84 24 68 32 00 00 48 8d ac 24 48 33 00 00 48 89 c7 48 89 ea  .....$88..H..$h2..H..$H3..H..H..
0001a240  be 20 00 00 00 0f 11 8c 24 c8 33 00 00 4c 8d a4 24 a8 33 00 00 4c 8d ac 24 c8 32 00 00 0f 11 8c  . ......$.3..L..$.3..L..$.2.....
0001a260  24 68 32 00 00 4c 8d b4 24 08 29 00 00 0f 11 84 24 d8 33 00 00 0f 11 84 24 78 32 00 00 e8 35 b4  $h2..L..$.).....$.3.....$x2...5.
0001a280  ff ff 0f 10 84 24 28 32 00 00 48 89 e8 48 8d ac 24 88 33 00 00 48 89 c7 48 89 ea be 40 00 00 00  .....$(2..H..H..$.3..H..H...@...
0001a2a0  0f 11 84 24 68 33 00 00 0f 10 84 24 38 32 00 00 0f 11 84 24 78 33 00 00 e8 df c3 ff ff 31 c0 b9  ...$h3.....$82.....$x3.......1..
0001a2c0  18 01 00 00 48 89 df 0f 10 84 24 48 32 00 00 48 89 de ba 60 04 00 00 f3 ab 48 8d bc 24 c8 33 00  ....H.....$H2..H...`.....H..$.3.
0001a2e0  00 b9 18 01 00 00 48 8d 84 24 c8 33 00 00 0f 11 84 24 28 38 00 00 0f 10 84 24 58 32 00 00 0f 11  ......H..$.3.....$(8.....$X2....
0001a300  84 24 38 38 00 00 0f 57 c0 f3 a5 48 8d bc 24 e8 33 00 00 b9 10 01 00 00 48 8d b4 24 c8 06 00 00  .$88...W...H..$.3.......H..$....
0001a320  f3 a5 48 89 d1 48 89 df 48 89 c2 be 20 00 00 00 0f 11 84 24 28 38 00 00 0f 11 84 24 38 38 00 00  ..H..H..H... ......$(8.....$88..
0001a340  e8 27 d4 ff ff 4c 89 e1 49 89 d9 be a0 04 00 00 0f 10 84 24 28 38 00 00 48 8d 84 24 88 2d 00 00  .'...L..I..........$(8..H..$.-..
0001a360  41 b8 20 00 00 00 48 8d 94 24 a8 32 00 00 48 89 c7 4c 8d a4 24 e8 32 00 00 0f 11 84 24 88 32 00  A. ...H..$.2..H..L..$.2.....$.2.
0001a380  00 0f 10 84 24 38 38 00 00 0f 11 84 24 98 32 00 00 0f 10 84 24 68 32 00 00 0f 11 84 24 a8 32 00  ....$88.....$.2.....$h2.....$.2.
0001a3a0  00 0f 10 84 24 78 32 00 00 0f 11 84 24 b8 32 00 00 e8 2d df ff ff 48 8d bc 24 88 32 00 00 4c 89  ....$x2.....$.2...-...H..$.2..L.
0001a3c0  ee e8 33 bd ff ff 48 89 ef 4c 89 e6 48 8d ac 24 c8 06 00 00 e8 20 bd ff ff 48 89 ef 48 89 da be  ..3...H..L..H..$..... ...H..H...
0001a3e0  40 04 00 00 e8 f7 b3 ff ff 48 8d 8c 24 28 33 00 00 4c 89 ee 4c 89 e7 0f b6 d0 e8 03 b4 ff ff 48  @........H..$(3..L..L..........H
0001a400  8b 44 24 20 be 60 09 00 00 4c 89 f7 0f 10 84 24 28 33 00 00 0f 11 00 0f 10 84 24 38 33 00 00 0f  .D$ .`...L.....$(3........$83...
0001a420  11 40 10 e8 07 c9 fe ff be 40 04 00 00 48 89 ef e8 fa c8 fe ff 48 8b 84 24 88 3c 00 00 64 48 2b  .@.......@...H.......H..$.<..dH+
0001a440  04 25 28 00 00 00 74 05 e8 c3 ad fe ff 48 81 c4 98 3c 00 00 31 c0 5b 5d 41 5c 41 5d 41 5e 41 5f  .%(...t......H...<..1.[]A\A]A^A_
0001a460  e9 a4 c2 fe ff                                                                                   .....

0001a465    void recv_msg_kexdh_init() __noreturn

0001a465  4156               push    r14 {var_8}
0001a467  b906000000         mov     ecx, 0x6
0001a46c  4155               push    r13 {var_10}
0001a46e  4154               push    r12 {var_18}
0001a470  55                 push    rbp {var_20}
0001a471  53                 push    rbx {var_28}
0001a472  4883ec30           sub     rsp, 0x30
0001a476  64488b0425280000…  mov     rax, qword [fs:0x28]
0001a47f  4889442428         mov     qword [rsp+0x28 {var_30}], rax
0001a484  31c0               xor     eax, eax  {0x0}
0001a486  488d7c2410         lea     rdi, [rsp+0x10 {s}]
0001a48b  f3ab               rep stosd dword [rdi] {var_60} {s}  {0x0}
0001a48d  488d3d3cb00100     lea     rdi, [rel data_354d0]  {"Premature kexdh_init message rec…"}
0001a494  f605bdc3020002     test    byte [rel data_46858], 0x2
0001a49b  7468               je      0x1a505  {data_46858}

0001a49d  488b05e4c30200     mov     rax, qword [rel data_46888]
0001a4a4  4c8d6c2410         lea     r13, [rsp+0x10 {s}]
0001a4a9  488b80a0060000     mov     rax, qword [rax+0x6a0]
0001a4b0  8b00               mov     eax, dword [rax]
0001a4b2  85c0               test    eax, eax
0001a4b4  7409               je      0x1a4bf

0001a4b6  ffc8               dec     eax
0001a4b8  83f802             cmp     eax, 0x2
0001a4bb  7621               jbe     0x1a4de

0001a4bd  eb1b               jmp     0x1a4da

0001a4bf  4c89ef             mov     rdi, r13 {s}
0001a4c2  e873c8feff         call    m_mp_init
{ Does not return }

0001a4c7                       48 8b 3d 2a c3 02 00 4c 89 ee e8 ec c7 fe ff 85 c0 75 22                           H.=*...L.........u"

0001a4da  31db               xor     ebx, ebx  {0x0}
0001a4dc  eb0f               jmp     0x1a4ed

0001a4de  488b3d13c30200     mov     rdi, qword [rel data_467f8]
0001a4e5  e840c6feff         call    buf_getstringbuf
{ Does not return }

0001a4ea                                48 89 c3                                                                     H..

0001a4ed  488b0504c30200     mov     rax, qword [rel data_467f8]
0001a4f4  8b4808             mov     ecx, dword [rax+0x8]
0001a4f7  39480c             cmp     dword [rax+0xc], ecx
0001a4fa  740e               je      0x1a50a

0001a4fc  488d3df3af0100     lea     rdi, [rel data_354f6]  {"Bad kex value"}
0001a503  31c0               xor     eax, eax  {0x0}

0001a505  e8c7b6feff         call    dropbear_exit
{ Does not return }

0001a50a  833d27c6020000     cmp     dword [rel data_46b38], 0x0
0001a511  0f8464010000       je      0x1a67b  {data_46b38}

0001a517  488b056ac30200     mov     rax, qword [rel data_46888]
0001a51e  488b3d0bc60200     mov     rdi, qword [rel data_46b30]
0001a525  8bb0a8060000       mov     esi, dword [rax+0x6a8]
0001a52b  8974240c           mov     dword [rsp+0xc {var_4c}], esi
0001a52f  e818cdfeff         call    signkey_key_ptr
{ Does not return }

0001a534                                                              48 85 c0 74 0a 48 83 38 00 0f 85 38                      H..t.H.8...8
0001a540  01 00 00 8b 44 24 0c 83 f8 03 77 14 48 8d 3d 2f af 01 00 85 c0 75 2d 48 8d 3d 00 af 01 00 eb 24  ....D$....w.H.=/.....u-H.=.....$
0001a560  48 8d 3d 41 af 01 00 83 f8 05 74 18 ba 92 00 00 00 48 8d 35 8c af 01 00 48 8d 3d bf d0 01 00 e8  H.=A......t......H.5....H.=.....
0001a580  f5 b6 fe ff e8 87 be fe ff 4c 8d 74 24 0c 48 8b 35 9b c5 02 00 4c 89 f2 48 89 c7 48 89 c5 e8 a5  .........L.t$.H.5....L..H..H....
0001a5a0  69 ff ff 41 89 c4 85 c0 0f 84 c5 00 00 00 8b 7c 24 0c 31 f6 b9 01 00 00 00 48 89 ea e8 52 12 ff  i..A...........|$.1......H...R..
0001a5c0  ff ff c0 0f 84 94 00 00 00 48 8b 35 60 c5 02 00 4c 89 f2 48 89 ef e8 6d 69 ff ff 41 89 c4 85 c0  .........H.5`...L..H...mi..A....
0001a5e0  75 7b bf 58 02 00 00 e8 51 c1 fe ff 8b 54 24 0c 48 8b 35 39 c5 02 00 49 89 c4 48 89 c7 e8 7d cf  u{.X....Q....T$.H.59...I..H...}.
0001a600  fe ff 4c 89 e7 be 04 00 00 00 e8 3b c2 fe ff 45 8b 74 24 08 45 2b 74 24 0c 4c 89 e7 44 89 f6 e8  ..L........;...E.t$.E+t$.L..D...
0001a620  20 c3 fe ff 44 89 f6 48 89 c7 e8 f1 d0 fe ff 48 89 ea bf 06 00 00 00 48 8d 35 d4 ae 01 00 48 89   ...D..H.......H.......H.5....H.
0001a640  c1 49 89 c6 31 c0 e8 40 b6 fe ff 4c 89 f7 e8 0d aa fe ff 4c 89 e7 e8 16 c1 fe ff eb 16 41 ff c4  .I..1..@...L.......L.........A..
0001a660  75 11 48 89 ee 48 8d 3d ce ae 01 00 31 c0 e8 5e b5 fe ff 48 89 ef e8 e5 a9 fe ff                 u.H..H.=....1..^...H.......

0001a67b  488b3d46c10200     mov     rdi, qword [rel data_467c8]
0001a682  be1f000000         mov     esi, 0x1f
0001a687  e889c2feff         call    buf_putbyte
{ Does not return }

0001a68c                                      48 8b 05 f5 c1 02 00 48 8b 35 96 c4 02 00 48 8b 3d 27 c1 02              H......H.5....H.='..
0001a6a0  00 8b 90 a8 06 00 00 e8 d3 ce fe ff 48 8b 05 d5 c1 02 00 48 8b 80 a0 06 00 00 8b 00 83 f8 02 0f  ............H......H............
0001a6c0  84 ac 00 00 00 77 3a 85 c0 75 73 e8 2e 82 ff ff 48 8b 15 59 c4 02 00 4c 89 ee 48 89 c7 48 89 c5  .....w:..us.....H..Y...L..H..H..
0001a6e0  e8 50 83 ff ff 48 8b 3d dc c0 02 00 48 89 ee e8 e3 c4 fe ff 48 89 ef e8 15 83 ff ff e9 a7 00 00  .P...H.=....H.......H...........
0001a700  00 83 f8 03 0f 85 9e 00 00 00 e8 ba 85 ff ff                                                     ...............

0001a70f    void sub_1a70f(int64_t arg1 @ rax, void* arg2 @ rbx) __noreturn

0001a70f  488b151ac40200     mov     rdx, qword [rel data_46b30]
0001a716  4889de             mov     rsi, rbx
0001a719  4889c5             mov     rbp, rax
0001a71c  4889c7             mov     rdi, rax
0001a71f  e89a86ffff         call    kexpqhybrid_comb_key
{ Does not return }

0001a724              48 8b 75 08 48 8b 3d 99 c0 02 00 e8 9b c4 fe ff 48 89 ef e8 50 86 ff ff eb 6a e8 51      H.u.H.=.........H...P....j.Q
0001a740  84 ff ff 48 8b 15 e6 c3 02 00 48 89 de 48 89 c7 48 89 c5 e8 a7 84 ff ff 48 8b 3d 69 c0 02 00 48  ...H......H..H..H.......H.=i...H
0001a760  89 ee e8 64 e3 fe ff 48 89 ef e8 74 84 ff ff eb 37 e8 5e 7f ff ff 48 8b 15 b3 c3 02 00 48 89 de  ...d...H...t....7.^...H......H..
0001a780  48 89 c7 48 89 c5 e8 5e 80 ff ff 48 8b 3d 36 c0 02 00 48 8d 75 20 ba 20 00 00 00 e8 01 c4 fe ff  H..H...^...H.=6...H.u . ........
0001a7a0  48 89 ef e8 a4 7f ff ff 48 8b 05 d9 c0 02 00 48 8b 3d 12 c0 02 00 48 8b 0d eb c0 02 00 48 8b 35  H.......H......H.=....H......H.5
0001a7c0  6c c3 02 00 8b 90 ac 06 00 00 e8 56 cf fe ff e8 86 29 ff ff 4c 89 ef e8 44 bf 00 00 48 85 db 74  l..........V.....)..L...D...H..t
0001a7e0  08 48 89 df e8 88 bf fe ff e8 47 42 ff ff 83 3d 6b c0 02 00 00 75 60 83 3d d2 c0 02 00 00 74 57  .H........GB...=k....u`.=.....tW
0001a800  48 8b 3d c1 bf 02 00 be 07 00 00 00 e8 04 c1 fe ff 48 8b 3d b0 bf 02 00 be 01 00 00 00 e8 48 c2  H.=..............H.=..........H.
0001a820  fe ff 48 8b 3d 9f bf 02 00 ba 0f 00 00 00 48 8d 35 2a ad 01 00 e8 67 c3 fe ff 48 8b 3d 87 bf 02  ..H.=.........H.5*....g...H.=...
0001a840  00 ba 01 00 00 00 48 8d 35 b3 ba 02 00 e8 c2 2e ff ff e8 03 29 ff ff c6 05 bb bf 02 00 15 48 8b  ......H.5...........).........H.
0001a860  44 24 28 64 48 2b 04 25 28 00 00 00 74 05 e8 9d a9 fe ff 48 83 c4 30 5b 5d 41 5c 41 5d 41 5e e9  D$(dH+.%(...t......H..0[]A\A]A^.
0001a880  85 be fe ff                                                                                      ....

0001a884    void svr_authinitialise() __noreturn

0001a884  488d1575c00200     lea     rdx, [rel data_46900]
0001a88b  31c0               xor     eax, eax  {0x0}
0001a88d  b91a000000         mov     ecx, 0x1a
0001a892  833d7bc2020000     cmp     dword [rel data_46b14], 0x0
0001a899  4889d7             mov     rdi, rdx  {data_46900}
0001a89c  f3ab               rep stosd dword [rdi]  {0x0}
0001a89e  b002               mov     al, 0x2
0001a8a0  7502               jne     0x1a8a4

0001a8a2  b006               mov     al, 0x6

0001a8a4  88055ec00200       mov     byte [rel data_46908], al
0001a8aa  e95abefeff         jmp     __x86_return_thunk
{ Does not return }


0001a8af    void send_msg_userauth_banner() __noreturn

0001a8af  53                 push    rbx {var_8}
0001a8b0  4889fb             mov     rbx, rdi
0001a8b3  488b3d0ebf0200     mov     rdi, qword [rel data_467c8]
0001a8ba  be35000000         mov     esi, 0x35
0001a8bf  e851c0feff         call    buf_putbyte
{ Does not return }

0001a8c4              48 8b 3d fd be 02 00 48 89 de e8 fc c2 fe ff 48 8b 3d ee be 02 00 ba 02 00 00 00 48      H.=....H.......H.=.........H
0001a8e0  8d 35 ba a9 01 00 e8 b6 c2 fe ff 5b e9 69 28 ff ff                                               .5.........[.i(..

0001a8f1    void send_msg_userauth_failure(int32_t arg1, int32_t arg2) __noreturn

0001a8f1  4154               push    r12 {var_8}
0001a8f3  4189fc             mov     r12d, edi
0001a8f6  55                 push    rbp {var_10}
0001a8f7  53                 push    rbx {var_18}
0001a8f8  4883ec20           sub     rsp, 0x20
0001a8fc  488b3dc5be0200     mov     rdi, qword [rel data_467c8]
0001a903  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0001a90c  48896c2418         mov     qword [rsp+0x18 {var_20}], rbp
0001a911  89f5               mov     ebp, esi
0001a913  be33000000         mov     esi, 0x33
0001a918  e8f8bffeff         call    buf_putbyte
{ Does not return }

0001a91d                                                                                         bf 1e 00                               ...
0001a920  00 00 e8 16 be fe ff 48 89 c3 f6 05 d7 bf 02 00 02 74 2a ba 09 00 00 00 48 8d 35 3b ac 01 00 48  .......H.........t*.....H.5;...H
0001a940  89 c7 e8 f4 c1 fe ff f6 05 ba bf 02 00 04 74 2a be 2c 00 00 00 48 89 df e8 b8 bf fe ff f6 05 a4  ..............t*.,...H..........
0001a960  bf 02 00 04 74 14 ba 08 00 00 00 48 8d 35 12 ac 01 00 48 89 df e8 c1 c1 fe ff 48 8b 3d 47 be 02  ....t......H.5....H.......H.=G..
0001a980  00 48 89 de e8 46 c2 fe ff 48 89 df e8 e0 bd fe ff 31 f6 48 8b 3d 2e be 02 00 45 85 e4 40 0f 95  .H...F...H.......1.H.=....E..@..
0001a9a0  c6 e8 6f bf fe ff e8 af 27 ff ff 85 ed 0f 84 b1 00 00 00 48 8d 5c 24 08 48 89 df e8 a7 ba fe ff  ..o.....'..........H.\$.H.......
0001a9c0  48 8b 54 24 08 48 8b 44 24 10 48 2b 15 4f bf 02 00 48 89 54 24 08 48 2b 05 4b bf 02 00 78 07 48  H.T$.H.D$.H+.O...H.T$.H+.K...x.H
0001a9e0  89 44 24 10 eb 13 48 05 00 ca 9a 3b 48 ff ca 48 89 44 24 10 48 89 54 24 08 48 89 e7 be 08 00 00  .D$...H....;H..H.D$.H.T$.H......
0001aa00  00 e8 e4 d9 fe ff 48 8b 04 24 b9 00 e1 f5 05 48 99 48 f7 f9 48 81 c2 80 b2 e6 0e 48 83 7c 24 08  ......H..$.....H.H..H......H.|$.
0001aa20  00 48 89 14 24 75 12 48 8b 44 24 10 48 3d 80 b2 e6 0e 7f 05 48 29 c2 eb 07 31 c0 48 89 44 24 08  .H..$u.H.D$.H=......H)...1.H.D$.
0001aa40  48 89 54 24 10 48 89 de 48 89 df e8 10 a8 fe ff ff c0 75 0a e8 37 a6 fe ff 83 38 04 74 e7 ff 05  H.T$.H..H.........u..7....8.t...
0001aa60  a8 be 02 00 8b 05 ba c0 02 00 39 05 9c be 02 00 72 21 48 8b 35 cf be 02 00 48 85 f6 75 07 48 8d  ..........9.....r!H.5....H..u.H.
0001aa80  35 ea aa 01 00 48 8d 3d 01 ab 01 00 31 c0 e8 3e b1 fe ff 48 8b 44 24 18 64 48 2b 04 25 28 00 00  5....H.=....1..>...H.D$.dH+.%(..
0001aaa0  00 74 05 e8 68 a7 fe ff 48 83 c4 20 5b 5d 41 5c e9 54 bc fe ff                                   .t..h...H.. []A\.T...

0001aab5    void send_msg_userauth_success() __noreturn

0001aab5  52                 push    rdx {var_8}
0001aab6  488b3d0bbd0200     mov     rdi, qword [rel data_467c8]
0001aabd  be34000000         mov     esi, 0x34
0001aac2  e84ebefeff         call    buf_putbyte
{ Does not return }

0001aac7                       e8 8e 26 ff ff 31 c9 83 3d 5b be 02 00 00 c7 05 31 be 02 00 01 00 00 00 48         ..&..1..=[......1.......H
0001aae0  89 0d c2 bc 02 00 75 0a c7 05 a2 be 02 00 01 00 00 00 8b 3d 08 bf 02 00 58 e9 23 b3 fe ff        ......u............=....X.#...

0001aafe    void recv_msg_userauth_request() __noreturn

0001aafe  4157               push    r15 {var_8}
0001ab00  4156               push    r14 {var_10}
0001ab02  4155               push    r13 {var_18}
0001ab04  4154               push    r12 {var_20}
0001ab06  55                 push    rbp {var_28}
0001ab07  53                 push    rbx {var_30}
0001ab08  4883ec38           sub     rsp, 0x38
0001ab0c  64488b3c25280000…  mov     rdi, qword [fs:0x28]
0001ab15  48897c2428         mov     qword [rsp+0x28 {var_40}], rdi
0001ab1a  488d3dffbd0200     lea     rdi, [rel data_46920]
0001ab21  e841b9feff         call    gettime_wrapper
{ Does not return }

0001ab26                    83 3d e3 bd 02 00 01 0f 84 88 04 00 00 48 8b 3d 2e c0 02 00 48 85 ff 74 1a e8        .=...........H.=....H..t..
0001ab40  6b fd ff ff 48 8b 3d 1d c0 02 00 e8 21 bc fe ff 31 c0 48 89 05 0f c0 02 00 48 8b 3d 98 bc 02 00  k...H.=.....!...1.H......H.=....
0001ab60  48 8d 74 24 18 e8 5f be fe ff 48 8b 3d 87 bc 02 00 48 8d 74 24 1c 48 89 04 24 e8 4a be fe ff 48  H.t$.._...H.=....H.t$.H..$.J...H
0001ab80  8b 3d 72 bc 02 00 48 8d 74 24 20 48 89 c5 e8 36 be fe ff 83 7c 24 1c 0e 48 89 44 24 08 74 3f ba  .=r...H.t$ H...6....|$..H.D$.t?.
0001aba0  0e 00 00 00 48 8d 35 05 aa 01 00 48 89 ef e8 0d a5 fe ff 85 c0 74 27 48 8b 3c 24 e8 a0 a4 fe ff  ....H.5....H.........t'H.<$.....
0001abc0  48 89 ef e8 98 a4 fe ff 48 8b 7c 24 08 e8 8e a4 fe ff 48 8d 3d e6 a9 01 00 e9 a7 00 00 00 48 8b  H.......H.|$......H.=.........H.
0001abe0  3c 24 48 8d 35 ee a9 01 00 e8 22 a8 fe ff 85 c0 75 6f 48 8d 35 e9 a9 01 00 bf 05 00 00 00 e8 88  <$H.5.....".....uoH.5...........
0001ac00  b0 fe ff 48 8d 3d f1 a9 01 00 e8 49 0a ff ff 48 8d 3d df a9 01 00 48 89 05 2b bd 02 00 e8 36 0a  ...H.=.....I...H.=....H..+....6.
0001ac20  ff ff 48 8d 3d d6 a9 01 00 48 89 05 08 bd 02 00 e8 23 0a ff ff 48 89 05 04 bd 02 00 48 b8 e9 03  ..H.=....H.......#...H......H...
0001ac40  00 00 e9 03 00 00 48 89 05 e3 bc 02 00 e8 63 fe ff ff c7 05 b4 bc 02 00 01 00 00 00 e9 38 02 00  ......H.......c..............8..
0001ac60  00 44 8b 64 24 18 41 83 fc 64 0f 87 8a 00 00 00 48 8b 3c 24 e8 77 a5 fe ff 4c 39 e0 74 0e 48 8d  .D.d$.A..d......H.<$.w...L9.t.H.
0001ac80  3d 84 a9 01 00 31 c0 e8 45 af fe ff 48 8b 35 6d bc 02 00 48 8b 3c 24 48 85 f6 75 17 e8 9e 19 ff  =....1..E...H.5m...H.<$H..u.....
0001aca0  ff 48 8b 3c 24 e8 ae 09 ff ff 48 89 05 4f bc 02 00 eb 10 e8 58 a7 fe ff 48 8d 3d 6e a9 01 00 85  .H.<$.....H..O......X...H.=n....
0001acc0  c0 75 c2 83 3d 4e bc 02 00 00 75 2e 48 83 3d 74 bc 02 00 00 75 2c 48 8b 15 4b bd 02 00 48 8d 35  .u..=N....u.H.=t....u,H..K...H.5
0001ace0  6a a9 01 00 bf 04 00 00 00 31 c0 e8 9b af fe ff c7 05 1e bc 02 00 01 00 00 00 45 31 e4 e9 9d 01  j........1................E1....
0001ad00  00 00 e8 f9 a5 fe ff 85 c0 74 22 3b 05 1f bc 02 00 74 1a 48 8b 0d 0e bd 02 00 48 8b 15 27 bc 02  .........t";.....t.H......H..'..
0001ad20  00 48 8d 35 51 a9 01 00 e9 f3 00 00 00 83 3d d0 bd 02 00 00 74 1e 83 3d f3 bb 02 00 00 75 15 48  .H.5Q.........=.....t..=.....u.H
0001ad40  8d 35 5c a9 01 00 bf 04 00 00 00 31 c0 e8 39 af fe ff eb 9c 48 83 3d ac bd 02 00 00 0f 84 cf 00  .5\........1..9.....H.=.........
0001ad60  00 00 44 8b 35 cb bb 02 00 bf 20 00 00 00 4c 8d 7c 24 24 4c 8b 25 ce bb 02 00 44 8b 2d 8f bd 02  ..D.5..... ...L.|$$L.%....D.-...
0001ad80  00 89 7c 24 24 81 ff 00 04 00 00 7f 42 48 63 ff 48 c1 e7 02 e8 77 08 ff ff 4c 89 f9 44 89 f6 4c  ..|$$.......BHc.H....w...L..D..L
0001ada0  89 e7 48 89 c2 48 89 c3 e8 c3 a8 fe ff 85 c0 79 11 48 89 df e8 a7 a2 fe ff 8b 44 24 24 8d 3c 00  ..H..H.........y.H........D$$.<.
0001adc0  eb bf 48 85 db 74 08 8b 4c 24 24 31 c0 eb 18 4c 89 e2 48 8d 35 dd a8 01 00 bf 03 00 00 00 31 c0  ..H..t..L$$1...L..H.5.........1.
0001ade0  e8 a6 ae fe ff eb 24 39 c1 7e 0f 48 ff c0 44 3b 6c 83 fc 75 f2 45 31 e4 eb 04 41 83 cc ff 48 89  ......$9.~.H..D;l..u.E1...A...H.
0001ae00  df e8 5a a2 fe ff 41 ff c4 75 26 48 8b 0d 36 bb 02 00 48 8b 15 ef bc 02 00 48 8d 35 b4 a8 01 00  ..Z...A..u&H..6...H......H.5....
0001ae20  bf 04 00 00 00 31 c0 e8 5f ae fe ff e9 bf fe ff ff 4c 8b 25 08 bb 02 00 41 80 3c 24 00 75 07 4c  .....1.._........L.%....A.<$.u.L
0001ae40  8d 25 2f 9a 01 00 e8 c5 a4 fe ff e8 30 a5 fe ff 48 89 c7 48 85 c0 74 13 4c 89 e6 e8 b0 a5 fe ff  .%/.........0...H..H..t.L.......
0001ae60  85 c0 75 e7 e8 97 a9 fe ff eb 2e e8 90 a9 fe ff 48 8b 15 d1 ba 02 00 48 8d 35 9a a8 01 00 31 c0  ..u.............H......H.5....1.
0001ae80  c7 05 8e ba 02 00 01 00 00 00 bf 04 00 00 00 e8 f7 ad fe ff e9 61 fe ff ff 41 bc 01 00 00 00 44  .....................a...A.....D
0001aea0  8b 6c 24 20 41 83 fd 04 75 7b 48 8b 7c 24 08 ba 04 00 00 00 48 8d 35 c5 9c 01 00 e8 00 a2 fe ff  .l$ A...u{H.|$......H.5.........
0001aec0  85 c0 75 61 45 85 e4 74 58 83 3d 4c bc 02 00 00 74 4f 83 3d 3b bc 02 00 00 75 46 83 3d 36 bc 02  ..uaE..tX.=L....tO.=;....uF.=6..
0001aee0  00 00 74 09 83 3d 45 ba 02 00 00 74 34 48 8b 05 5c ba 02 00 80 38 00 75 28 48 8b 0d 28 bb 02 00  ..t..=E....t4H..\....8.u(H..(...
0001af00  48 8b 15 41 ba 02 00 48 8d 35 30 a8 01 00 31 c0 bf 05 00 00 00 e8 71 ad fe ff e8 96 fb ff ff eb  H..A...H.50...1.......q.........
0001af20  7f 31 f6 eb 74 83 3d e8 bb 02 00 00 75 3c 83 3d e3 bb 02 00 00 74 09 83 3d f2 b9 02 00 00 74 2a  .1..t.=.....u<.=.....t..=.....t*
0001af40  41 83 fd 08 75 24 48 8b 7c 24 08 ba 08 00 00 00 48 8d 35 2d a6 01 00 e8 64 a1 fe ff 85 c0 75 34  A...u$H.|$......H.5-....d.....u4
0001af60  44 89 e7 e8 d1 04 00 00 eb 36 41 83 fd 09 75 24 48 8b 7c 24 08 ba 09 00 00 00 48 8d 35 f9 a5 01  D........6A...u$H.|$......H.5...
0001af80  00 e8 3a a1 fe ff 85 c0 75 0a 44 89 e7 e8 d1 06 00 00 eb 0c be 01 00 00 00 31 ff e8 51 f9 ff ff  ..:.....u.D..............1..Q...
0001afa0  48 8b 3c 24 e8 b7 a0 fe ff 48 89 ef e8 af a0 fe ff 48 8b 7c 24 08 e8 a5 a0 fe ff 48 8b 44 24 28  H.<$.....H.......H.|$......H.D$(
0001afc0  64 48 2b 04 25 28 00 00 00 74 05 e8 40 a2 fe ff 48 83 c4 38 5b 5d 41 5c 41 5d 41 5e 41 5f e9 26  dH+.%(...t..@...H..8[]A\A]A^A_.&
0001afe0  b7 fe ff                                                                                         ...

0001afe3    void pty_allocate(int64_t arg1, int32_t* arg2, int64_t arg3, int32_t arg4) __noreturn

0001afe3  4154               push    r12 {__saved_r12}
0001afe5  4531c0             xor     r8d, r8d  {0x0}
0001afe8  4989d4             mov     r12, rdx
0001afeb  31d2               xor     edx, edx  {0x0}
0001afed  55                 push    rbp {__saved_rbp}
0001afee  4889f5             mov     rbp, rsi
0001aff1  53                 push    rbx {__saved_rbx}
0001aff2  89cb               mov     ebx, ecx
0001aff4  31c9               xor     ecx, ecx  {0x0}
0001aff6  e855a5feff         call    openpty
0001affb  85c0               test    eax, eax
0001affd  7926               jns     0x1b025

0001afff  e88ca0feff         call    __errno_location
0001b004  8b38               mov     edi, dword [rax]
0001b006  e8c5a7feff         call    strerror
0001b00b  488d3560a70100     lea     rsi, [rel data_35772]  {"pty_allocate: openpty: %.100s"}
0001b012  bf04000000         mov     edi, 0x4
0001b017  4889c2             mov     rdx, rax
0001b01a  31c0               xor     eax, eax  {0x0}
0001b01c  e86aacfeff         call    dropbear_log
{ Does not return }

0001b021     31 c0 eb 2e                                                                                    1...

0001b025  8b7d00             mov     edi, dword [rbp]
0001b028  e8a3a5feff         call    ttyname
0001b02d  4889c6             mov     rsi, rax
0001b030  4885c0             test    rax, rax
0001b033  750e               jne     0x1b043

0001b035  488d3d54a70100     lea     rdi, [rel data_35790]  {"ttyname fails for openpty device"}
0001b03c  31c0               xor     eax, eax  {0x0}
0001b03e  e88eabfeff         call    dropbear_exit
{ Does not return }

0001b043  4863d3             movsxd  rdx, ebx
0001b046  4c89e7             mov     rdi, r12
0001b049  e832a5feff         call    strlcpy
0001b04e  b801000000         mov     eax, 0x1
0001b053  5b                 pop     rbx {__saved_rbx}
0001b054  5d                 pop     rbp {__saved_rbp}
0001b055  415c               pop     r12 {__saved_r12}
0001b057  e9adb6feff         jmp     __x86_return_thunk
{ Does not return }


0001b05c    void pty_release(int64_t arg1) __noreturn

0001b05c  53                 push    rbx {__saved_rbx}
0001b05d  31d2               xor     edx, edx  {0x0}
0001b05f  31f6               xor     esi, esi  {0x0}
0001b061  4889fb             mov     rbx, rdi
0001b064  e857a5feff         call    chown
0001b069  85c0               test    eax, eax
0001b06b  792a               jns     0x1b097

0001b06d  e81ea0feff         call    __errno_location
0001b072  8b38               mov     edi, dword [rax]
0001b074  83ff02             cmp     edi, 0x2
0001b077  741e               je      0x1b097

0001b079  e852a7feff         call    strerror
0001b07e  4889da             mov     rdx, rbx
0001b081  bf03000000         mov     edi, 0x3
0001b086  488d3524a70100     lea     rsi, [rel data_357b1]  {"chown %.100s 0 0 failed: %.100s"}
0001b08d  4889c1             mov     rcx, rax
0001b090  31c0               xor     eax, eax  {0x0}
0001b092  e8f4abfeff         call    dropbear_log
{ Does not return }

0001b097  beb6010000         mov     esi, 0x1b6
0001b09c  4889df             mov     rdi, rbx
0001b09f  e85ca5feff         call    chmod
0001b0a4  85c0               test    eax, eax
0001b0a6  792b               jns     0x1b0d3

0001b0a8  e8e39ffeff         call    __errno_location
0001b0ad  8b38               mov     edi, dword [rax]
0001b0af  83ff02             cmp     edi, 0x2
0001b0b2  741f               je      0x1b0d3

0001b0b4  e817a7feff         call    strerror
0001b0b9  4889da             mov     rdx, rbx
0001b0bc  bf03000000         mov     edi, 0x3
0001b0c1  5b                 pop     rbx {__saved_rbx}
0001b0c2  4889c1             mov     rcx, rax
0001b0c5  488d3505a70100     lea     rsi, [rel data_357d1]  {"chmod %.100s 0666 failed: %.100s"}
0001b0cc  31c0               xor     eax, eax  {0x0}
0001b0ce  e9b8abfeff         jmp     dropbear_log
{ Does not return }

0001b0d3  5b                 pop     rbx {__saved_rbx}
0001b0d4  e930b6feff         jmp     __x86_return_thunk
{ Does not return }


0001b0d9    int64_t pty_make_controlling_tty(int32_t* arg1, char* arg2)

0001b0d9  4155               push    r13 {__saved_r13}
0001b0db  4989fd             mov     r13, rdi
0001b0de  bf16000000         mov     edi, 0x16
0001b0e3  4154               push    r12 {__saved_r12}
0001b0e5  4c8d2506a70100     lea     r12, [rel data_357f2]
0001b0ec  55                 push    rbp {__saved_rbp}
0001b0ed  4889f5             mov     rbp, rsi
0001b0f0  be01000000         mov     esi, 0x1
0001b0f5  53                 push    rbx {__saved_rbx}
0001b0f6  4150               push    r8 {var_28}
0001b0f8  e823a3feff         call    signal
0001b0fd  31c0               xor     eax, eax  {0x0}
0001b0ff  be02010000         mov     esi, 0x102
0001b104  4c89e7             mov     rdi, r12  {data_357f2, "/dev/tty"}
0001b107  e8d4a5feff         call    open
0001b10c  85c0               test    eax, eax
0001b10e  7819               js      0x1b129

0001b110  89c7               mov     edi, eax
0001b112  89c3               mov     ebx, eax
0001b114  31d2               xor     edx, edx  {0x0}
0001b116  be22540000         mov     esi, 0x5422
0001b11b  31c0               xor     eax, eax  {0x0}
0001b11d  e8fea1feff         call    ioctl
0001b122  89df               mov     edi, ebx
0001b124  e817a2feff         call    close

0001b129  e842a2feff         call    setsid
0001b12e  85c0               test    eax, eax
0001b130  7922               jns     0x1b154

0001b132  e8599ffeff         call    __errno_location
0001b137  8b38               mov     edi, dword [rax]
0001b139  e892a6feff         call    strerror
0001b13e  488d35b6a60100     lea     rsi, [rel data_357fb]  {"setsid: %.100s"}
0001b145  bf03000000         mov     edi, 0x3
0001b14a  4889c2             mov     rdx, rax
0001b14d  31c0               xor     eax, eax  {0x0}
0001b14f  e837abfeff         call    dropbear_log
{ Does not return }

0001b154  be02010000         mov     esi, 0x102
0001b159  4c89e7             mov     rdi, r12  {data_357f2, "/dev/tty"}
0001b15c  31c0               xor     eax, eax  {0x0}
0001b15e  e87da5feff         call    open
0001b163  89c3               mov     ebx, eax
0001b165  85c0               test    eax, eax
0001b167  781a               js      0x1b183

0001b169  bf03000000         mov     edi, 0x3
0001b16e  488d3595a60100     lea     rsi, [rel data_3580a]  {"Failed to disconnect from contro…"}
0001b175  31c0               xor     eax, eax  {0x0}
0001b177  e80fabfeff         call    dropbear_log
{ Does not return }

0001b17c                                                                                      89 df e8 bd                              ....
0001b180  a1 fe ff                                                                                         ...

0001b183  418b7d00           mov     edi, dword [r13]
0001b187  31d2               xor     edx, edx  {0x0}
0001b189  31c0               xor     eax, eax  {0x0}
0001b18b  be0e540000         mov     esi, 0x540e
0001b190  e88ba1feff         call    ioctl
0001b195  85c0               test    eax, eax
0001b197  7922               jns     0x1b1bb

0001b199  e8f29efeff         call    __errno_location
0001b19e  8b38               mov     edi, dword [rax]
0001b1a0  e82ba6feff         call    strerror
0001b1a5  488d358aa60100     lea     rsi, [rel data_35836]  {"ioctl(TIOCSCTTY): %.100s"}
0001b1ac  bf03000000         mov     edi, 0x3
0001b1b1  4889c2             mov     rdx, rax
0001b1b4  31c0               xor     eax, eax  {0x0}
0001b1b6  e8d0aafeff         call    dropbear_log
{ Does not return }

0001b1bb  4889ef             mov     rdi, rbp
0001b1be  be02000000         mov     esi, 0x2
0001b1c3  31c0               xor     eax, eax  {0x0}
0001b1c5  e816a5feff         call    open
0001b1ca  89c7               mov     edi, eax
0001b1cc  85c0               test    eax, eax
0001b1ce  7927               jns     0x1b1f7

0001b1d0  e8bb9efeff         call    __errno_location
0001b1d5  8b38               mov     edi, dword [rax]
0001b1d7  e8f4a5feff         call    strerror
0001b1dc  4889ea             mov     rdx, rbp
0001b1df  bf03000000         mov     edi, 0x3
0001b1e4  488d3564a60100     lea     rsi, [rel data_3584f]  {"%.100s: %.100s"}
0001b1eb  4889c1             mov     rcx, rax
0001b1ee  31c0               xor     eax, eax  {0x0}
0001b1f0  e896aafeff         call    dropbear_log
{ Does not return }

0001b1f5                                                                 eb 05                                                  ..

0001b1f7  e844a1feff         call    close
0001b1fc  4c89e7             mov     rdi, r12  {data_357f2, "/dev/tty"}
0001b1ff  be01000000         mov     esi, 0x1
0001b204  31c0               xor     eax, eax  {0x0}
0001b206  e8d5a4feff         call    open
0001b20b  89c7               mov     edi, eax
0001b20d  85c0               test    eax, eax
0001b20f  7929               jns     0x1b23a

0001b211  e87a9efeff         call    __errno_location
0001b216  8b38               mov     edi, dword [rax]
0001b218  e8b3a5feff         call    strerror
0001b21d  59                 pop     rcx {var_28}
0001b21e  bf03000000         mov     edi, 0x3
0001b223  5b                 pop     rbx {__saved_rbx}
0001b224  4889c2             mov     rdx, rax
0001b227  5d                 pop     rbp {__saved_rbp}
0001b228  488d352fa60100     lea     rsi, [rel data_3585e]  {"open /dev/tty failed - could not…"}
0001b22f  415c               pop     r12 {__saved_r12}
0001b231  31c0               xor     eax, eax  {0x0}
0001b233  415d               pop     r13 {__saved_r13}
0001b235  e951aafeff         jmp     dropbear_log
{ Does not return }

0001b23a  58                 pop     rax {var_28}
0001b23b  5b                 pop     rbx {__saved_rbx}
0001b23c  5d                 pop     rbp {__saved_rbp}
0001b23d  415c               pop     r12 {__saved_r12}
0001b23f  415d               pop     r13 {__saved_r13}
0001b241  e9faa0feff         jmp     close


0001b246    void pty_change_window_size(int64_t arg1, int16_t arg2) __noreturn

0001b246  4883ec18           sub     rsp, 0x18
0001b24a  64488b0425280000…  mov     rax, qword [fs:0x28]
0001b253  4889442408         mov     qword [rsp+0x8 {var_10}], rax
0001b258  31c0               xor     eax, eax  {0x0}
0001b25a  66893424           mov     word [rsp {var_18}], si
0001b25e  be14540000         mov     esi, 0x5414
0001b263  6689542402         mov     word [rsp+0x2 {var_16}], dx
0001b268  4889e2             mov     rdx, rsp {var_18}
0001b26b  66894c2404         mov     word [rsp+0x4 {var_14}], cx
0001b270  664489442406       mov     word [rsp+0x6 {var_12}], r8w
0001b276  e8a5a0feff         call    ioctl
0001b27b  488b442408         mov     rax, qword [rsp+0x8 {var_10}]
0001b280  64482b0425280000…  sub     rax, qword [fs:0x28]
0001b289  7405               je      0x1b290

0001b28b  e8809ffeff         call    __stack_chk_fail
{ Does not return }

0001b290  4883c418           add     rsp, 0x18
0001b294  e970b4feff         jmp     __x86_return_thunk
{ Does not return }


0001b299    void pty_setowner(void* arg1, int64_t arg2) __noreturn

0001b299  4156               push    r14 {__saved_r14}
0001b29b  4155               push    r13 {__saved_r13}
0001b29d  4154               push    r12 {__saved_r12}
0001b29f  55                 push    rbp {__saved_rbp}
0001b2a0  4889fd             mov     rbp, rdi
0001b2a3  488d3d4da50100     lea     rdi, [rel data_357f2[5]]  {"tty"}
0001b2aa  53                 push    rbx {__saved_rbx}
0001b2ab  4881eca0000000     sub     rsp, 0xa0
0001b2b2  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001b2bb  48899c2498000000   mov     qword [rsp+0x98 {var_30}], rbx
0001b2c3  4889f3             mov     rbx, rsi
0001b2c6  e8d5a1feff         call    getgrnam
0001b2cb  4885c0             test    rax, rax
0001b2ce  740c               je      0x1b2dc

0001b2d0  448b6810           mov     r13d, dword [rax+0x10 {group::short_end.d}]
0001b2d4  41bc90010000       mov     r12d, 0x190
0001b2da  eb0a               jmp     0x1b2e6

0001b2dc  448b6d14           mov     r13d, dword [rbp+0x14]
0001b2e0  41bc92010000       mov     r12d, 0x192

0001b2e6  488d742408         lea     rsi, [rsp+0x8 {var_c0}]
0001b2eb  4889df             mov     rdi, rbx
0001b2ee  e88da1feff         call    stat
0001b2f3  85c0               test    eax, eax
0001b2f5  7420               je      0x1b317

0001b2f7  e8949dfeff         call    __errno_location
0001b2fc  8b38               mov     edi, dword [rax]
0001b2fe  e8cda4feff         call    strerror
0001b303  4889de             mov     rsi, rbx
0001b306  488d3d8ea50100     lea     rdi, [rel data_3589b]  {"pty_setowner: stat(%.101s) faile…"}
0001b30d  4889c2             mov     rdx, rax
0001b310  31c0               xor     eax, eax  {0x0}
0001b312  e8baa8feff         call    dropbear_exit
{ Does not return }

0001b317  8b7510             mov     esi, dword [rbp+0x10]
0001b31a  39742424           cmp     dword [rsp+0x24 {var_a4}], esi
0001b31e  750e               jne     0x1b32e

0001b320  8b442428           mov     eax, dword [rsp+0x28 {var_a0}]
0001b324  4439e8             cmp     eax, r13d
0001b327  7476               je      0x1b39f

0001b329  3b4514             cmp     eax, dword [rbp+0x14]
0001b32c  7471               je      0x1b39f

0001b32e  4489ea             mov     edx, r13d
0001b331  4889df             mov     rdi, rbx
0001b334  e887a2feff         call    chown
0001b339  85c0               test    eax, eax
0001b33b  7962               jns     0x1b39f

0001b33d  e84e9dfeff         call    __errno_location
0001b342  4c8d357ca50100     lea     r14, [rel data_358c5]
0001b349  8b38               mov     edi, dword [rax]
0001b34b  83ff1e             cmp     edi, 0x1e
0001b34e  7534               jne     0x1b384

0001b350  8b442424           mov     eax, dword [rsp+0x24 {var_a4}]
0001b354  394510             cmp     dword [rbp+0x10], eax
0001b357  7404               je      0x1b35d

0001b359  85c0               test    eax, eax
0001b35b  7527               jne     0x1b384

0001b35d  bf1e000000         mov     edi, 0x1e
0001b362  e869a4feff         call    strerror
0001b367  8b4d10             mov     ecx, dword [rbp+0x10]
0001b36a  4589e8             mov     r8d, r13d
0001b36d  4889da             mov     rdx, rbx
0001b370  4989c1             mov     r9, rax
0001b373  4c89f6             mov     rsi, r14  {data_358c5, "chown(%.100s, %u, %u) failed: %.…"}
0001b376  bf03000000         mov     edi, 0x3
0001b37b  31c0               xor     eax, eax  {0x0}
0001b37d  e809a9feff         call    dropbear_log
{ Does not return }

0001b382        eb 1b                                                                                        ..

0001b384  e847a4feff         call    strerror
0001b389  8b5510             mov     edx, dword [rbp+0x10]
0001b38c  4489e9             mov     ecx, r13d
0001b38f  4889de             mov     rsi, rbx
0001b392  4989c0             mov     r8, rax
0001b395  4c89f7             mov     rdi, r14  {data_358c5, "chown(%.100s, %u, %u) failed: %.…"}
0001b398  31c0               xor     eax, eax  {0x0}
0001b39a  e832a8feff         call    dropbear_exit
{ Does not return }

0001b39f  8b442420           mov     eax, dword [rsp+0x20 {var_a8}]
0001b3a3  25ff010000         and     eax, 0x1ff
0001b3a8  4439e0             cmp     eax, r12d
0001b3ab  7460               je      0x1b40d

0001b3ad  4489e6             mov     esi, r12d
0001b3b0  4889df             mov     rdi, rbx
0001b3b3  e848a2feff         call    chmod
0001b3b8  85c0               test    eax, eax
0001b3ba  7951               jns     0x1b40d

0001b3bc  e8cf9cfeff         call    __errno_location
0001b3c1  488d2d22a50100     lea     rbp, [rel data_358ea]
0001b3c8  8b38               mov     edi, dword [rax]
0001b3ca  83ff1e             cmp     edi, 0x1e
0001b3cd  7526               jne     0x1b3f5

0001b3cf  f644242024         test    byte [rsp+0x20 {var_a8}], 0x24
0001b3d4  751f               jne     0x1b3f5

0001b3d6  e8f5a3feff         call    strerror
0001b3db  4489e1             mov     ecx, r12d
0001b3de  4889da             mov     rdx, rbx
0001b3e1  4889ee             mov     rsi, rbp  {data_358ea, "chmod(%.100s, 0%o) failed: %.100…"}
0001b3e4  4989c0             mov     r8, rax
0001b3e7  bf03000000         mov     edi, 0x3
0001b3ec  31c0               xor     eax, eax  {0x0}
0001b3ee  e898a8feff         call    dropbear_log
{ Does not return }

0001b3f3                                                           eb 18                                                      ..

0001b3f5  e8d6a3feff         call    strerror
0001b3fa  4489e2             mov     edx, r12d
0001b3fd  4889de             mov     rsi, rbx
0001b400  4889ef             mov     rdi, rbp  {data_358ea, "chmod(%.100s, 0%o) failed: %.100…"}
0001b403  4889c1             mov     rcx, rax
0001b406  31c0               xor     eax, eax  {0x0}
0001b408  e8c4a7feff         call    dropbear_exit
{ Does not return }

0001b40d  488b842498000000   mov     rax, qword [rsp+0x98 {var_30}]
0001b415  64482b0425280000…  sub     rax, qword [fs:0x28]
0001b41e  7405               je      0x1b425

0001b420  e8eb9dfeff         call    __stack_chk_fail
{ Does not return }

0001b425  4881c4a0000000     add     rsp, 0xa0
0001b42c  5b                 pop     rbx {__saved_rbx}
0001b42d  5d                 pop     rbp {__saved_rbp}
0001b42e  415c               pop     r12 {__saved_r12}
0001b430  415d               pop     r13 {__saved_r13}
0001b432  415e               pop     r14 {__saved_r14}
0001b434  e9d0b2feff         jmp     __x86_return_thunk
{ Does not return }


0001b439    void svr_auth_password(int32_t arg1) __noreturn

0001b439  4155               push    r13 {var_8}
0001b43b  4154               push    r12 {var_10}
0001b43d  55                 push    rbp {var_18}
0001b43e  53                 push    rbx {var_20}
0001b43f  4883ec18           sub     rsp, 0x18
0001b443  644c8b2c25280000…  mov     r13, qword [fs:0x28]
0001b44c  4c896c2408         mov     qword [rsp+0x8 {var_30}], r13
0001b451  4189fd             mov     r13d, edi
0001b454  488b3d9db30200     mov     rdi, qword [rel data_467f8]
0001b45b  e8a4b4feff         call    buf_getbool
{ Does not return }

0001b460  84 c0 0f 85 5b 01 00 00 48 8b 3d 89 b3 02 00 48 8d 74 24 04 e8 50 b5 fe ff 49 89 c4 45 85 ed 74  ....[...H.=....H.t$..P...I..E..t
0001b480  1e 83 7c 24 04 64 77 17 48 8b 2d c1 b4 02 00 48 89 c7 48 89 ee e8 56 a3 fe ff 48 89 c3 eb 04 31  ..|$.dw.H.-....H..H...V...H....1
0001b4a0  db 31 ed 8b 74 24 04 4c 89 e7 e8 80 b8 fe ff 4c 89 e7 e8 a9 9b fe ff 45 85 ed 0f 84 03 01 00 00  .1..t$.L.......L.......E........
0001b4c0  83 7c 24 04 64 76 1a 48 8b 0d 5a b5 02 00 48 8b 15 73 b4 02 00 48 8d 35 30 a4 01 00 e9 d6 00 00  .|$.dv.H..Z...H..s...H.50.......
0001b4e0  00 48 8b 15 60 b4 02 00 48 8d 35 48 a4 01 00 48 85 db 74 14 80 7d 00 00 75 1f 48 8b 15 47 b4 02  .H..`...H.5H...H..t..}..u.H..G..
0001b500  00 48 8d 35 4b a4 01 00 bf 04 00 00 00 31 c0 e8 77 a7 fe ff e9 aa 00 00 00 48 89 df e8 cf 9c fe  .H.5K........1..w........H......
0001b520  ff 48 89 ef 49 89 c4 e8 c4 9c fe ff 49 39 c4 75 71 4c 89 e2 48 89 ee 48 89 df e8 07 af fe ff 48  .H..I.......I9.uqL..H..H.......H
0001b540  8b 0d e2 b4 02 00 48 8b 15 fb b3 02 00 85 c0 75 51 83 3d c8 b5 02 00 00 74 2e 0f b6 05 a7 b3 02  ......H........uQ.=.....t.......
0001b560  00 a8 fb 74 23 48 8d 35 0e a4 01 00 bf 05 00 00 00 31 c0 e8 13 a7 fe ff 80 25 89 b3 02 00 fb 31  ...t#H.5.........1.......%.....1
0001b580  f6 bf 01 00 00 00 eb 42 48 8d 35 29 a4 01 00 bf 05 00 00 00 31 c0 e8 f0 a6 fe ff e8 15 f5 ff ff  .......BH.5)........1...........
0001b5a0  eb 2d 48 8b 0d 7f b4 02 00 48 8b 15 98 b3 02 00 48 8d 35 2a a4 01 00 bf 04 00 00 00 31 c0 e8 c8  .-H......H......H.5*........1...
0001b5c0  a6 fe ff be 01 00 00 00 31 ff e8 22 f3 ff ff 48 8b 44 24 08 64 48 2b 04 25 28 00 00 00 74 05 e8  ........1.."...H.D$.dH+.%(...t..
0001b5e0  2c 9c fe ff 48 83 c4 18 5b 5d 41 5c 41 5d e9 16 b1 fe ff                                         ,...H...[]A\A].....

0001b5f3    void authorized_keys_filepath() __noreturn

0001b5f3  488b353eb30200     mov     rsi, qword [rel data_46938]
0001b5fa  488b3d77b50200     mov     rdi, qword [rel data_46b78]
0001b601  4154               push    r12 {var_8}
0001b603  55                 push    rbp {var_10}
0001b604  53                 push    rbx {var_18}
0001b605  e877adfeff         call    expand_homedir_path_home
{ Does not return }

0001b60a                                48 89 c7 48 89 c3 e8 db 9b fe ff 4c 8d 60 11 4c 89 e7 e8 ef ff fe            H..H.......L.`.L......
0001b620  ff 49 89 d9 48 83 c9 ff 4c 89 e6 48 89 c5 50 48 8d 05 d1 a3 01 00 ba 01 00 00 00 50 48 89 ef 4c  .I..H...L..H..PH...........PH..L
0001b640  8d 05 40 8a 01 00 31 c0 e8 03 9a fe ff 48 89 df e8 0b 9a fe ff 5a 48 89 e8 59 5b 5d 41 5c e9 a6  ..@...1......H.......ZH..Y[]A\..
0001b660  b0 fe ff                                                                                         ...

0001b663    void svr_auth_pubkey(int32_t arg1) __noreturn

0001b663  4157               push    r15 {var_8}
0001b665  4156               push    r14 {var_10}
0001b667  4155               push    r13 {var_18}
0001b669  4154               push    r12 {var_20}
0001b66b  55                 push    rbp {var_28}
0001b66c  53                 push    rbx {var_30}
0001b66d  4881ec08010000     sub     rsp, 0x108
0001b674  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001b67d  48899c24f8000000   mov     qword [rsp+0xf8 {var_40}], rbx
0001b685  89fb               mov     ebx, edi
0001b687  488b3d6ab10200     mov     rdi, qword [rel data_467f8]
0001b68e  e871b2feff         call    buf_getbool
{ Does not return }

0001b693                                                           48 8b 3d 5e b1 02 00 48 8d 74 24 5c 88                     H.=^...H.t$\.
0001b6a0  44 24 47 e8 21 b3 fe ff 48 8b 3d 49 b1 02 00 48 89 44 24 08 e8 dd b2 fe ff 48 8b 3d 38 b1 02 00  D$G.!...H.=I...H.D$......H.=8...
0001b6c0  89 c6 89 44 24 28 e8 79 b2 fe ff 48 89 44 24 20 85 db 75 0e 31 f6 31 ff e8 14 f2 ff ff e9 28 07  ...D$(.y...H.D$ ..u.1.1.......(.
0001b6e0  00 00 8b 74 24 5c 48 8b 7c 24 08 e8 96 ba fe ff 89 44 24 2c 83 f8 5a 74 db 89 c7 e8 19 bb fe ff  ...t$\H.|$.......D$,..Zt........
0001b700  48 8d 74 24 60 89 c7 89 44 24 64 e8 b9 b9 fe ff 48 89 44 24 30 8b 44 24 60 89 04 24 e8 ff 9a fe  H.t$`...D$d.....H.D$0.D$`..$....
0001b720  ff 41 89 c4 e8 e7 9d fe ff 8b 3d 05 b2 02 00 89 c5 e8 ea a0 fe ff 85 c0 79 0c 48 8d 3d d6 a2 01  .A........=.............y.H.=...
0001b740  00 e9 16 01 00 00 8b 3d e4 b1 02 00 e8 1f a1 fe ff 85 c0 78 e5 e8 99 fe ff ff 45 31 ed 4c 8d 35  .......=...........x......E1.L.5
0001b760  e0 b5 01 00 48 89 c3 be 2f 00 00 00 48 89 df e8 0c 9b fe ff 48 85 c0 0f 84 93 00 00 00 48 39 c3  ....H.../...H.......H........H9.
0001b780  75 04 48 8d 43 01 c6 00 00 48 8d 74 24 68 48 89 df e8 ea 9c fe ff 85 c0 75 4c 8b 84 24 84 00 00  u.H.C....H.t$hH.........uL..$...
0001b7a0  00 39 05 89 b1 02 00 0f 95 c2 85 c0 0f 95 c0 84 c2 75 0a f6 84 24 80 00 00 00 12 74 2d 83 3d 50  .9...............u...$.....t-.=P
0001b7c0  b1 02 00 00 75 20 48 89 da 48 8d 35 5a a2 01 00 bf 06 00 00 00 31 c0 c7 05 33 b1 02 00 01 00 00  ....u H..H.5Z........1...3......
0001b7e0  00 e8 a5 a4 fe ff 41 83 cd ff 48 8b 35 47 b1 02 00 48 89 df e8 17 9c fe ff 85 c0 74 13 4c 89 f6  ......A...H.5G...H.........t.L..
0001b800  48 89 df e8 08 9c fe ff 85 c0 0f 85 57 ff ff ff 48 89 df e8 48 98 fe ff 41 ff c5 74 20 e8 d1 fd  H...........W...H...H...A..t ...
0001b820  ff ff 48 8d 35 5c b1 01 00 48 89 c7 48 89 44 24 10 e8 ba 9e fe ff 48 89 44 24 18 eb 0c 31 c9 48  ..H.5\...H..H.D$......H.D$...1.H
0001b840  89 4c 24 10 48 89 4c 24 18 44 89 e7 e8 1f a0 fe ff 85 c0 79 0e 48 8d 3d 14 a2 01 00 31 c0 e8 6e  .L$.H.L$.D.........y.H.=....1..n
0001b860  a3 fe ff 89 ef e8 b6 9f fe ff 85 c0 78 e7 41 83 cd ff 48 83 7c 24 18 00 0f 84 fc 02 00 00 bf 68  ............x.A...H.|$.........h
0001b880  10 00 00 e8 b5 ae fe ff 31 d2 89 54 24 40 48 89 c3 48 8b 74 24 18 48 89 df e8 0b a5 fe ff ff c0  ........1..T$@H..H.t$.H.........
0001b8a0  0f 84 bd 02 00 00 8b 6b 08 ff 44 24 40 8d 45 f6 3d 5e 10 00 00 76 06 41 83 cd ff eb d4 48 8b 3b  .......k..D$@.E.=^...v.A.....H.;
0001b8c0  89 ea 31 f6 e8 d7 9a fe ff 49 89 c7 48 85 c0 75 e6 8b 04 24 44 8d 68 03 8b 43 0c 44 01 e8 39 c5  ..1......I..H..u...$D.h..C.D..9.
0001b8e0  72 d5 8b 04 24 8b 34 24 48 89 df 45 31 e4 48 89 44 24 38 e8 4c b0 fe ff 48 8b 54 24 38 48 8b 74  r...$.4$H..E1.H.D$8.L...H.T$8H.t
0001b900  24 30 48 89 c7 e8 b6 97 fe ff 85 c0 0f 84 d3 00 00 00 8b 43 08 39 43 0c 73 21 48 89 df e8 ba af  $0H................C.9C.s!H.....
0001b920  fe ff 3c 20 74 ec 3c 09 74 e8 3c 23 74 89 be 01 00 00 00 48 89 df e8 81 af fe ff be 01 00 00 00  ..< t.<.t.<#t......H............
0001b940  48 89 df 45 31 e4 45 31 f6 e8 f6 af fe ff 31 ed 48 89 44 24 48 8b 43 08 39 43 0c 73 15 48 89 df  H..E1.E1......1.H.D$H.C.9C.s.H..
0001b960  e8 77 af fe ff 45 85 e4 75 31 3c 20 74 04 3c 09 75 29 89 ef e8 c4 ad fe ff 48 8b 74 24 48 89 ea  .w...E..u1< t.<.u).......H.t$H..
0001b980  48 89 c7 49 89 c4 e8 b0 b1 fe ff 44 03 6b 0c 44 39 6b 08 0f 82 7d 04 00 00 eb 25 44 89 f2 83 f2  H..I.......D.k.D9k...}....%D....
0001b9a0  01 3c 5c 0f 94 c1 21 ca 44 0f b6 f2 83 f2 01 3c 22 0f 94 c0 ff c5 0f b6 c0 21 d0 41 31 c4 eb 95  .<\...!.D......<"........!.A1...
0001b9c0  8b 34 24 48 89 df e8 79 af fe ff 48 8b 54 24 38 48 8b 74 24 30 48 89 c7 e8 e3 96 fe ff 85 c0 0f  .4$H...y...H.T$8H.t$0H..........
0001b9e0  85 31 04 00 00 8b 34 24 48 89 df e8 a5 ae fe ff 48 89 df e8 e4 ae fe ff 3c 20 0f 85 16 04 00 00  .1....4$H.......H.......< ......
0001ba00  8b 43 0c 45 31 f6 89 44 24 38 8b 43 08 39 43 0c 73 0c 48 89 df e8 c2 ae fe ff 3c 20 75 0c 8b 43  .C.E1..D$8.C.9C.s.H.......< u..C
0001ba20  0c 45 31 ed 89 44 24 48 eb 2b 41 ff c6 eb db 48 89 df e8 a5 ae fe ff 89 c5 3c 20 74 39 e8 fe 9d  .E1..D$H.+A....H.........< t9...
0001ba40  fe ff 48 89 c2 48 0f be c5 48 8b 12 f6 04 42 08 74 0d 41 ff c5 8b 43 08 39 43 0c 72 d2 eb 17 40  ..H..H...H....B.t.A...C.9C.r...@
0001ba60  0f be f5 48 8d 3d 1c a0 01 00 e8 d1 97 fe ff 48 85 c0 75 de eb 05 45 85 ed 75 04 31 ed eb 31 41  ...H.=.........H..u...E..u.1..1A
0001ba80  8d 7d 01 e8 88 fb fe ff 8b 74 24 48 48 89 df 48 89 c5 e8 b3 ad fe ff 44 89 ee 48 89 df e8 a2 ae  .}.......t$HH..H.......D..H.....
0001baa0  fe ff 44 89 ea 48 89 ef 48 89 c6 e8 00 96 fe ff 8b 74 24 38 48 89 df e8 8e ad fe ff 8b 73 0c 48  ..D..H..H........t$8H........s.H
0001bac0  89 df 44 01 f6 e8 32 ad fe ff 48 8b 7c 24 20 8b 0c 24 45 31 c9 48 8b 54 24 30 8b 74 24 28 49 89  ..D...2...H.|$ ..$E1.H.T$0.t$(I.
0001bae0  d8 e8 86 be fe ff 48 8b 3d 73 ae 02 00 41 89 c5 48 85 ff 74 0e e8 66 95 fe ff 31 c0 48 89 05 5d  ......H.=s...A..H..t..f...1.H..]
0001bb00  ae 02 00 45 85 ed 75 2b 4d 85 e4 74 1d 48 8b 54 24 10 8b 74 24 40 4c 89 e7 e8 8c 05 00 00 48 89  ...E..u+M..t.H.T$..t$@L.......H.
0001bb20  2d 3b ae 02 00 41 89 c5 eb 11 48 89 2d 2f ae 02 00 eb 2d 4d 85 e4 74 0e 49 89 ef 4c 89 e7 4c 89  -;...A....H.-/....-M..t.I..L..L.
0001bb40  fd e8 2b ac fe ff 48 85 ed 75 0b 45 85 ed 0f 85 3d fd ff ff eb 0a 48 89 ef e8 02 95 fe ff eb eb  ..+...H..u.E....=.....H.........
0001bb60  45 31 ed 48 8b 7c 24 18 e8 33 96 fe ff 48 85 db 74 08 48 89 df e8 f7 ab fe ff 48 8b 7c 24 10 e8  E1.H.|$..3...H..t.H.......H.|$..
0001bb80  dc 94 fe ff 41 ff c5 0f 84 47 fb ff ff 80 7c 24 47 00 75 47 48 8b 3d 2d ac 02 00 8b 5c 24 5c be  ....A....G....|$G.uGH.=-....\$\.
0001bba0  3c 00 00 00 e8 6c ad fe ff 48 8b 74 24 08 48 8b 3d 13 ac 02 00 89 da e8 e5 af fe ff 8b 54 24 28  <....l...H.t$.H.=............T$(
0001bbc0  48 8b 74 24 20 48 8b 3d fc ab 02 00 e8 d0 af fe ff e8 84 15 ff ff e9 2f 02 00 00 e8 cb b4 fe ff  H.t$ H.=.............../........
0001bbe0  48 8b 3d 11 ac 02 00 48 8d 54 24 64 48 89 c6 48 89 c3 e8 9d b6 fe ff ff c0 75 11 be 01 00 00 00  H.=....H.T$dH..H.........u......
0001bc00  31 ff e8 ea ec ff ff e9 cf 01 00 00 c6 43 44 01 48 8b 15 41 ad 02 00 48 85 d2 74 16 83 7a 20 00  1............CD.H..A...H..t..z .
0001bc20  0f 94 c0 88 43 44 83 7a 24 00 74 06 83 c8 04 88 43 44 48 8b 15 bf ab 02 00 8b 05 c1 ab 02 00 8b  ....CD.z$.t.....CDH.............
0001bc40  7a 0c 39 c7 73 1f 48 8d 0d 93 c8 01 00 ba c7 00 00 00 48 8d 35 34 9e 01 00 48 8d 3d 42 9e 01 00  z.9.s.H...........H.54...H.=B...
0001bc60  e8 5b 96 fe ff 41 89 fc 41 29 c4 48 8b 05 1e ac 02 00 03 78 08 83 c7 04 e8 c0 aa fe ff 48 8b 35  .[...A..A).H.......x.........H.5
0001bc80  0c ac 02 00 48 89 c7 48 89 c5 e8 40 af fe ff 8b 35 6b ab 02 00 48 8b 3d 5c ab 02 00 e8 a9 ab fe  ....H..H...@....5k...H.=\.......
0001bca0  ff 48 8b 3d 50 ab 02 00 44 89 e6 e8 94 ac fe ff 44 89 e2 48 89 ef 48 89 c6 e8 7d ae fe ff 48 8b  .H.=P...D.......D..H..H...}...H.
0001bcc0  3d 33 ab 02 00 44 89 e6 e8 c8 ab fe ff 31 f6 48 89 ef e8 73 ab fe ff 8b 74 24 28 48 8b 7c 24 20  =3...D.......1.H...s....t$(H.|$ 
0001bce0  e8 3b ba fe ff 8b 54 24 2c 48 89 e9 48 89 de 48 8b 3d 02 ab 02 00 49 89 c4 e8 df ba fe ff 4c 8b  .;....T$,H..H..H.=....I.......L.
0001bd00  0d 23 ad 02 00 85 c0 0f 85 8d 00 00 00 83 3d 0c ae 02 00 00 8b 7c 24 64 74 4a 0f b6 05 e7 ab 02  .#............=......|$dtJ......
0001bd20  00 a8 fd 74 3f 31 f6 4c 89 0c 24 e8 99 b3 fe ff 4c 8b 0c 24 bf 05 00 00 00 4d 89 e0 48 8b 15 05  ...t?1.L..$.....L..$.....M..H...
0001bd40  ac 02 00 48 89 c1 31 c0 48 8d 35 7d 9d 01 00 e8 37 9f fe ff 80 25 ad ab 02 00 fd 31 f6 bf 01 00  ...H..1.H.5}....7....%.....1....
0001bd60  00 00 eb 5d 31 f6 4c 89 0c 24 e8 5a b3 fe ff 4c 8b 0c 24 4d 89 e0 48 8b 15 cb ab 02 00 48 89 c1  ...]1.L..$.Z...L..$M..H......H..
0001bd80  48 8d 35 90 9d 01 00 bf 05 00 00 00 31 c0 e8 f8 9e fe ff e8 1d ed ff ff eb 2c 48 8b 15 a7 ab 02  H.5.........1............,H.....
0001bda0  00 4d 89 c8 4c 89 e1 31 c0 48 8d 35 9d 9d 01 00 bf 04 00 00 00 e8 d1 9e fe ff                    .M..L..1.H.5..............

0001bdba    void sub_1bdba() __noreturn

0001bdba  be01000000         mov     esi, 0x1
0001bdbf  31ff               xor     edi, edi  {0x0}
0001bdc1  e82bebffff         call    send_msg_userauth_failure
{ Does not return }

0001bdc6                    4c 89 e7 e8 92 92 fe ff 48 85 ed 74 08 48 89 ef e8 96 a9 fe ff 48 83 7c 24 08        L.......H..t.H.......H.|$.
0001bde0  00 74 0a 48 8b 7c 24 08 e8 73 92 fe ff 48 85 db 74 08 48 89 df e8 93 b8 fe ff 83 3d 0f ab 02 00  .t.H.|$..s...H..t.H........=....
0001be00  00 75 25 e8 f6 01 00 00 eb 1e 31 db 48 83 7c 24 08 00 75 cf eb e4 41 83 cd ff 4d 85 e4 0f 85 18  .u%.......1.H.|$..u...A...M.....
0001be20  fd ff ff e9 8f fa ff ff 48 8b 84 24 f8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 d0 93 fe ff  ........H..$....dH+.%(...t......
0001be40  48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 b3 a8 fe ff                                H......[]A\A]A^A_.....

0001be56    void match_option(void* arg1, char* arg2) __noreturn

0001be56  4155               push    r13 {__saved_r13}
0001be58  4989f5             mov     r13, rsi
0001be5b  4154               push    r12 {__saved_r12}
0001be5d  55                 push    rbp {__saved_rbp}
0001be5e  4889fd             mov     rbp, rdi
0001be61  4889f7             mov     rdi, rsi
0001be64  53                 push    rbx {__saved_rbx}
0001be65  4883ec18           sub     rsp, 0x18
0001be69  e88293feff         call    strlen
0001be6e  4889c3             mov     rbx, rax
0001be71  8b4508             mov     eax, dword [rbp+0x8]
0001be74  2b450c             sub     eax, dword [rbp+0xc]
0001be77  39d8               cmp     eax, ebx
0001be79  7305               jae     0x1be80

0001be7b  83c8ff             or      eax, 0xffffffff  {0xffffffff}
0001be7e  eb2d               jmp     0x1bead

0001be80  89de               mov     esi, ebx
0001be82  4889ef             mov     rdi, rbp
0001be85  e8baaafeff         call    buf_getptr
{ Does not return }

0001be8a                                89 da 4c 89 ee 48 89 c7 e8 a9 96 fe ff 85 c0 89 44 24 0c 75 dc 89            ..L..H..........D$.u..
0001bea0  de 48 89 ef e8 ec a9 fe ff 8b 44 24 0c                                                           .H........D$.

0001bead  4883c418           add     rsp, 0x18
0001beb1  5b                 pop     rbx {__saved_rbx}
0001beb2  5d                 pop     rbp {__saved_rbp}
0001beb3  415c               pop     r12 {__saved_r12}
0001beb5  415d               pop     r13 {__saved_r13}
0001beb7  e94da8feff         jmp     __x86_return_thunk
{ Does not return }


0001bebc    void svr_pubkey_allows_agentfwd() __noreturn

0001bebc  488b1595aa0200     mov     rdx, qword [rel data_46958]
0001bec3  b801000000         mov     eax, 0x1
0001bec8  4885d2             test    rdx, rdx
0001becb  7409               je      0x1bed6

0001becd  31c0               xor     eax, eax  {0x0}
0001becf  837a0400           cmp     dword [rdx+0x4], 0x0
0001bed3  0f94c0             sete    al

0001bed6  e92ea8feff         jmp     __x86_return_thunk
{ Does not return }


0001bedb    void svr_pubkey_allows_tcpfwd() __noreturn

0001bedb  488b1576aa0200     mov     rdx, qword [rel data_46958]
0001bee2  b801000000         mov     eax, 0x1
0001bee7  4885d2             test    rdx, rdx
0001beea  7408               je      0x1bef4

0001beec  31c0               xor     eax, eax  {0x0}
0001beee  833a00             cmp     dword [rdx], 0x0
0001bef1  0f94c0             sete    al

0001bef4  e910a8feff         jmp     __x86_return_thunk
{ Does not return }


0001bef9    void svr_pubkey_allows_x11fwd() __noreturn

0001bef9  488b1558aa0200     mov     rdx, qword [rel data_46958]
0001bf00  b801000000         mov     eax, 0x1
0001bf05  4885d2             test    rdx, rdx
0001bf08  7409               je      0x1bf13

0001bf0a  31c0               xor     eax, eax  {0x0}
0001bf0c  837a0800           cmp     dword [rdx+0x8], 0x0
0001bf10  0f94c0             sete    al

0001bf13  e9f1a7feff         jmp     __x86_return_thunk
{ Does not return }


0001bf18    void svr_pubkey_allows_pty() __noreturn

0001bf18  488b1539aa0200     mov     rdx, qword [rel data_46958]
0001bf1f  b801000000         mov     eax, 0x1
0001bf24  4885d2             test    rdx, rdx
0001bf27  7409               je      0x1bf32

0001bf29  31c0               xor     eax, eax  {0x0}
0001bf2b  837a0c00           cmp     dword [rdx+0xc], 0x0
0001bf2f  0f94c0             sete    al

0001bf32  e9d2a7feff         jmp     __x86_return_thunk
{ Does not return }


0001bf37    void svr_pubkey_allows_local_tcpfwd(char* arg1, int32_t arg2) __noreturn

0001bf37  488b151aaa0200     mov     rdx, qword [rel data_46958]
0001bf3e  b801000000         mov     eax, 0x1
0001bf43  4885d2             test    rdx, rdx
0001bf46  7459               je      0x1bfa1

0001bf48  488b5218           mov     rdx, qword [rdx+0x18]
0001bf4c  4885d2             test    rdx, rdx
0001bf4f  7450               je      0x1bfa1

0001bf51  4155               push    r13 {__saved_r13}
0001bf53  4154               push    r12 {__saved_r12}
0001bf55  4189f4             mov     r12d, esi
0001bf58  55                 push    rbp {__saved_rbp}
0001bf59  4889fd             mov     rbp, rdi
0001bf5c  53                 push    rbx {__saved_rbx}
0001bf5d  51                 push    rcx {var_28}
0001bf5e  488b1a             mov     rbx, qword [rdx]

0001bf61  4885db             test    rbx, rbx
0001bf64  7426               je      0x1bf8c

0001bf66  4c8b2b             mov     r13, qword [rbx]
0001bf69  4889ee             mov     rsi, rbp
0001bf6c  498b7d00           mov     rdi, qword [r13]
0001bf70  e89b94feff         call    strcmp
0001bf75  85c0               test    eax, eax
0001bf77  750d               jne     0x1bf86

0001bf79  418b4508           mov     eax, dword [r13+0x8]
0001bf7d  4439e0             cmp     eax, r12d
0001bf80  740e               je      0x1bf90

0001bf82  ffc0               inc     eax
0001bf84  740a               je      0x1bf90

0001bf86  488b5b08           mov     rbx, qword [rbx+0x8]
0001bf8a  ebd5               jmp     0x1bf61

0001bf8c  31c0               xor     eax, eax  {0x0}
0001bf8e  eb05               jmp     0x1bf95

0001bf90  b801000000         mov     eax, 0x1

0001bf95  5a                 pop     rdx {var_28}
0001bf96  5b                 pop     rbx {__saved_rbx}
0001bf97  5d                 pop     rbp {__saved_rbp}
0001bf98  415c               pop     r12 {__saved_r12}
0001bf9a  415d               pop     r13 {__saved_r13}
0001bf9c  e968a7feff         jmp     __x86_return_thunk
{ Does not return }

0001bfa1  e963a7feff         jmp     __x86_return_thunk
{ Does not return }


0001bfa6    void svr_pubkey_set_forced_command(int64_t* arg1) __noreturn

0001bfa6  488b05aba90200     mov     rax, qword [rel data_46958]
0001bfad  4885c0             test    rax, rax
0001bfb0  7447               je      0x1bff9

0001bfb2  4883781000         cmp     qword [rax+0x10], 0x0
0001bfb7  7440               je      0x1bff9

0001bfb9  53                 push    rbx {var_8}
0001bfba  488b07             mov     rax, qword [rdi]
0001bfbd  4889fb             mov     rbx, rdi
0001bfc0  4885c0             test    rax, rax
0001bfc3  740b               je      0x1bfd0

0001bfc5  48894710           mov     qword [rdi+0x10], rax
0001bfc9  31c0               xor     eax, eax  {0x0}
0001bfcb  488907             mov     qword [rdi], rax  {0x0}
0001bfce  eb10               jmp     0x1bfe0

0001bfd0  488d3d9d880100     lea     rdi, [rel data_3485a[0x1a]]
0001bfd7  e87cf6feff         call    m_strdup
{ Does not return }

0001bfdc                                                                                      48 89 43 10                              H.C.

0001bfe0  488b0571a90200     mov     rax, qword [rel data_46958]
0001bfe7  488b7810           mov     rdi, qword [rax+0x10]
0001bfeb  e868f6feff         call    m_strdup
{ Does not return }

0001bff0                                                  48 89 03 5b e9 10 a7 fe ff                                       H..[.....

0001bff9  e90ba7feff         jmp     __x86_return_thunk
{ Does not return }


0001bffe    void svr_pubkey_options_cleanup() __noreturn

0001bffe  488b3d53a90200     mov     rdi, qword [rel data_46958]
0001c005  53                 push    rbx {__saved_rbx}
0001c006  4885ff             test    rdi, rdi
0001c009  747f               je      0x1c08a

0001c00b  488b4710           mov     rax, qword [rdi+0x10]
0001c00f  4885c0             test    rax, rax
0001c012  7415               je      0x1c029

0001c014  4889c7             mov     rdi, rax
0001c017  e84490feff         call    free
0001c01c  488b3d35a90200     mov     rdi, qword [rel data_46958]
0001c023  31f6               xor     esi, esi  {0x0}
0001c025  48897710           mov     qword [rdi+0x10], rsi  {0x0}

0001c029  488b4718           mov     rax, qword [rdi+0x18]
0001c02d  4885c0             test    rax, rax
0001c030  744a               je      0x1c07c

0001c032  488b38             mov     rdi, qword [rax]
0001c035  4885ff             test    rdi, rdi
0001c038  7425               je      0x1c05f

0001c03a  e87754ffff         call    list_remove
{ Does not return }

0001c03f                                                                                               48                                 H
0001c040  8b 38 48 89 c3 e8 16 90 fe ff 48 89 df e8 0e 90 fe ff 48 8b 05 ff a8 02 00 48 8b 40 18 eb d3     .8H.......H.......H......H.@...

0001c05f  488b05f2a80200     mov     rax, qword [rel data_46958]
0001c066  488b7818           mov     rdi, qword [rax+0x18]
0001c06a  e8f18ffeff         call    free
0001c06f  488b3de2a80200     mov     rdi, qword [rel data_46958]
0001c076  31c9               xor     ecx, ecx  {0x0}
0001c078  48894f18           mov     qword [rdi+0x18], rcx  {0x0}

0001c07c  e8df8ffeff         call    free
0001c081  31d2               xor     edx, edx  {0x0}
0001c083  488915cea80200     mov     qword [rel data_46958], rdx  {0x0}

0001c08a  488b3dcfa80200     mov     rdi, qword [rel data_46960]
0001c091  4885ff             test    rdi, rdi
0001c094  740e               je      0x1c0a4

0001c096  e8c58ffeff         call    free
0001c09b  31c0               xor     eax, eax  {0x0}
0001c09d  488905bca80200     mov     qword [rel data_46960], rax  {0x0}

0001c0a4  5b                 pop     rbx {__saved_rbx}
0001c0a5  e95fa6feff         jmp     __x86_return_thunk
{ Does not return }


0001c0aa    void svr_add_pubkey_options() __noreturn

0001c0aa  4157               push    r15 {var_8}
0001c0ac  4c8d3dd19a0100     lea     r15, [rel data_35b84]  {"no-port-forwarding"}
0001c0b3  4156               push    r14 {var_10}
0001c0b5  4155               push    r13 {var_18}
0001c0b7  4154               push    r12 {var_20}
0001c0b9  55                 push    rbp {var_28}
0001c0ba  53                 push    rbx {var_30}
0001c0bb  4889fb             mov     rbx, rdi
0001c0be  4883ec28           sub     rsp, 0x28
0001c0c2  89742404           mov     dword [rsp+0x4 {var_54}], esi
0001c0c6  4889542408         mov     qword [rsp+0x8 {var_50}], rdx
0001c0cb  64488b3c25280000…  mov     rdi, qword [fs:0x28]
0001c0d4  48897c2418         mov     qword [rsp+0x18 {var_40}], rdi
0001c0d9  bf28000000         mov     edi, 0x28
0001c0de  e82df5feff         call    m_malloc
{ Does not return }

0001c0e3           31 f6 48 89 df 48 89 05 69 a8 02 00 e8 56 a7 fe ff 8b 43 08 39 43 0c 0f 83 7a 03 00 00     1.H..H..i....V....C.9C...z...
0001c100  4c 89 fe 48 89 df e8 4b fd ff ff 85 c0 75 23 48 8d 35 81 9a 01 00 bf 04 00 00 00 e8 6b 9b fe ff  L..H...K.....u#H.5..........k...
0001c120  48 8b 05 31 a8 02 00 c7 00 01 00 00 00 e9 2a 03 00 00 48 8d 35 78 9a 01 00 48 89 df e8 15 fd ff  H..1..........*...H.5x...H......
0001c140  ff 85 c0 75 24 48 8d 35 79 9a 01 00 bf 04 00 00 00 e8 35 9b fe ff 48 8b 05 fb a7 02 00 c7 40 04  ...u$H.5y.........5...H.......@.
0001c160  01 00 00 00 e9 f3 02 00 00 48 8d 35 70 9a 01 00 48 89 df e8 de fc ff ff 85 c0 0f 84 dc 02 00 00  .........H.5p...H...............
0001c180  48 8d 35 6b 9a 01 00 48 89 df e8 c7 fc ff ff 85 c0 75 1a 48 8d 35 5f 9a 01 00 bf 04 00 00 00 e8  H.5k...H.........u.H.5_.........
0001c1a0  e7 9a fe ff 48 8b 05 ad a7 02 00 eb 38 48 8d 35 5e 9a 01 00 48 89 df e8 9a fc ff ff 85 c0 75 31  ....H.......8H.5^...H.........u1
0001c1c0  48 8d 35 54 9a 01 00 bf 04 00 00 00 e8 ba 9a fe ff 48 8b 05 80 a7 02 00 48 b9 01 00 00 00 01 00  H.5T.............H......H.......
0001c1e0  00 00 48 89 08 c7 40 0c 01 00 00 00 e9 6b 02 00 00 48 8d 35 37 9a 01 00 48 89 df e8 56 fc ff ff  ..H...@......k...H.57...H...V...
0001c200  41 89 c4 85 c0 0f 85 ab 00 00 00 31 f6 48 89 df e8 2f a7 fe ff 48 89 c5 48 8b 05 39 a7 02 00 48  A..........1.H.../...H..H..9...H
0001c220  83 78 10 00 0f 85 54 02 00 00 8b 43 08 39 43 0c 73 78 48 89 df e8 a2 a6 fe ff 44 89 e2 83 f2 01  .x....T....C.9C.sxH.......D.....
0001c240  83 e2 01 3c 22 75 55 84 d2 74 51 31 f6 48 89 df e8 ef a6 fe ff 4c 8b 2d fc a6 02 00 48 29 e8 48  ...<"uU..tQ1.H.......L.-....H).H
0001c260  63 f8 49 89 c4 e8 a6 f3 fe ff 48 8b 15 e7 a6 02 00 48 89 ee 49 89 45 10 41 8d 44 24 ff 48 98 48  c.I.......H......H..I.E.A.D$.H.H
0001c280  8b 7a 10 48 89 c1 f3 a4 48 8b 15 c9 a6 02 00 48 8b 52 10 c6 04 02 00 e9 c0 01 00 00 45 31 e4 3c  .z.H....H......H.R..........E1.<
0001c2a0  5c 41 0f 94 c4 41 21 d4 eb 80 48 8d 35 88 99 01 00 e9 e7 00 00 00 48 8d 35 ac 99 01 00 48 89 df  \A...A!...H.5.........H.5....H..
0001c2c0  e8 91 fb ff ff 85 c0 0f 85 29 01 00 00 31 f6 48 89 df e8 6d a6 fe ff 48 8b 2d 7a a6 02 00 49 89  .........)...1.H...m...H.-z...I.
0001c2e0  c6 48 83 7d 18 00 75 09 e8 af 51 ff ff 48 89 45 18 8b 43 08 39 43 0c 0f 83 99 00 00 00 48 89 df  .H.}..u...Q..H.E..C.9C.......H..
0001c300  e8 d7 a5 fe ff 3c 22 75 e8 31 f6 31 c0 48 89 df 48 89 44 24 10 e8 2a a6 fe ff bf 10 00 00 00 4c  .....<"u.1.1.H..H.D$..*........L
0001c320  29 f0 48 89 c5 e8 e6 f2 fe ff 49 89 c4 48 8b 05 24 a6 02 00 4c 89 e6 48 8b 78 18 e8 13 51 ff ff  ).H.......I..H..$...L..H.x...Q..
0001c340  48 63 fd ff cd e8 c6 f2 fe ff 48 63 ed 4c 89 f6 48 8d 54 24 10 48 89 c7 48 89 e9 49 89 c5 f3 a4  Hc........Hc.L..H.T$.H..H..I....
0001c360  c6 04 28 00 4c 89 e6 48 89 c7 e8 fd 4d ff ff 89 c5 85 c0 75 7d 49 83 3c 24 00 75 32 4c 89 ef e8  ..(.L..H....M......u}I.<$.u2L...
0001c380  dc 8c fe ff 48 8b 7c 24 10 e8 d2 8c fe ff 85 ed 0f 85 c6 00 00 00 48 8d 35 db 98 01 00 bf 04 00  ....H.|$..............H.5.......
0001c3a0  00 00 31 c0 e8 e2 98 fe ff e9 d0 00 00 00 4c 8b 74 24 10 4d 85 f6 74 c4 48 8d 35 b7 98 01 00 4c  ..1...........L.t$.M..t.H.5....L
0001c3c0  89 f7 e8 49 90 fe ff 85 c0 75 10 41 c7 44 24 08 ff ff ff ff bd 01 00 00 00 eb a1 49 8d 74 24 08  ...I.....u.A.D$............I.t$.
0001c3e0  4c 89 f7 31 ed e8 0e 9f fe ff 85 c0 40 0f 94 c5 eb 8a 31 ed eb 86 48 8d 35 ae 98 01 00 48 89 df  L..1........@.....1...H.5....H..
0001c400  e8 51 fa ff ff 85 c0 75 21 48 8d 35 ad 98 01 00 bf 04 00 00 00 e8 71 98 fe ff 48 8b 05 37 a5 02  .Q.....u!H.5..........q...H..7..
0001c420  00 c7 40 20 01 00 00 00 eb 32 48 8d 35 be 98 01 00 48 89 df e8 1d fa ff ff 85 c0 75 1f 48 8d 35  ..@ .....2H.5....H.........u.H.5
0001c440  bb 98 01 00 bf 04 00 00 00 e8 3d 98 fe ff 48 8b 05 03 a5 02 00 c7 40 24 01 00 00 00 8b 43 08 39  ..........=...H.......@$.....C.9
0001c460  43 0c 0f 83 8c fc ff ff 48 89 df e8 6c a4 fe ff 3c 2c 0f 84 7c fc ff ff eb 04 31 c0 eb 24 e8 7b  C.......H...l...<,..|.....1..$.{
0001c480  fb ff ff 8b 4c 24 04 48 8b 54 24 08 31 c0 48 8d 35 97 98 01 00 bf 04 00 00 00 e8 ec 97 fe ff 83  ....L$.H.T$.1.H.5...............
0001c4a0  c8 ff 48 8b 54 24 18 64 48 2b 14 25 28 00 00 00 74 05 e8 59 8d fe ff 48 83 c4 28 5b 5d 41 5c 41  ..H.T$.dH+.%(...t..Y...H..([]A\A
0001c4c0  5d 41 5e 41 5f e9 3f a2 fe ff                                                                    ]A^A_.?...

0001c4ca    void svr_session_cleanup() __noreturn

0001c4ca  50                 push    rax {var_8}
0001c4cb  e82efbffff         call    svr_pubkey_options_cleanup
{ Does not return }

0001c4d0                                                  48 8b 3d 51 a5 02 00 e8 84 8b fe ff 48 8b 3d 4d                  H.=Q........H.=M
0001c4e0  a5 02 00 31 d2 48 89 15 3c a5 02 00 e8 6f 8b fe ff 48 8b 3d 10 a5 02 00 31 c9 48 89 0d 2f a5 02  ...1.H..<....o...H.=....1.H../..
0001c500  00 e8 5a 8b fe ff 31 f6 31 ff 48 89 35 f7 a4 02 00 89 3d f9 a4 02 00 41 58 e9 eb a1 fe ff        ..Z...1.1.H.5.....=....AX.....

0001c51e    void svr_remoteclosed() __noreturn

0001c51e  51                 push    rcx {var_8}
0001c51f  8b3d8ba20200       mov     edi, dword [rel data_467b0]
0001c525  e8f798feff         call    m_close
{ Does not return }

0001c52a                                8b 3d 84 a2 02 00 39 3d 7a a2 02 00 74 05 e8 e4 98 fe ff 48 c7 05            .=....9=z...t......H..
0001c540  68 a2 02 00 ff ff ff ff 48 8d 3d fd 97 01 00 31 c0 5a e9 d5 95 fe ff                             h.......H.=....1.Z.....

0001c557    void svr_session(int32_t arg1, int32_t arg2) __noreturn

0001c557  4155               push    r13 {var_8}
0001c559  4c8d2de6850100     lea     r13, [rel data_34b46]  {"kex-strict-c-v00@openssh.com"}
0001c560  4154               push    r12 {var_10}
0001c562  4c8d25d2850100     lea     r12, [rel data_34b3b]  {"ext-info-c"}
0001c569  55                 push    rbp {var_18}
0001c56a  53                 push    rbx {var_20}
0001c56b  4883ec28           sub     rsp, 0x28
0001c56f  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001c578  48895c2418         mov     qword [rsp+0x18 {var_30}], rbx
0001c57d  89f3               mov     ebx, esi
0001c57f  89fe               mov     esi, edi
0001c581  e83302ffff         call    common_session_init
{ Does not return }

0001c586                    8b 3d 24 a2 02 00 45 31 c9 31 d2 48 8d 4c 24 08 4c 8d 44 24 10 31 f6 89 1d 5d        .=$...E1.1.H.L$.L.D$.1...]
0001c5a0  a4 02 00 e8 82 5d ff ff 48 8b 7c 24 08 e8 3e 8c fe ff 48 8b 7c 24 10 48 89 c3 e8 31 8c fe ff 48  .....]..H.|$..>...H.|$.H...1...H
0001c5c0  8d 5c 03 02 48 89 df e8 44 f0 fe ff 48 89 de 48 83 c9 ff 4c 8d 05 c3 a3 01 00 48 89 c7 48 89 05  .\..H...D...H..H...L......H..H..
0001c5e0  44 a4 02 00 ba 01 00 00 00 48 8d 1d d0 9a 02 00 50 31 c0 ff 74 24 18 4c 8b 4c 24 18 e8 4f 8a fe  D........H......P1..t$.L.L$..O..
0001c600  ff 48 8b 7c 24 18 e8 55 8a fe ff 48 8b 7c 24 20 31 d2 48 89 54 24 18 e8 44 8a fe ff 31 c9 48 89  .H.|$..U...H.|$ 1.H.T$..D...1.H.
0001c620  4c 24 20 e8 5c e2 ff ff 48 8d 3d 91 a0 02 00 e8 c4 31 ff ff e8 87 09 00 00 5e 5f 48 8b 2b 48 85  L$ .\...H.=......1.......^_H.+H.
0001c640  ed 74 2c 4c 89 e6 48 89 ef e8 c2 8d fe ff 85 c0 75 04 c6 43 18 00 4c 89 ee 48 89 ef e8 af 8d fe  .t,L..H.........u..C..L..H......
0001c660  ff 85 c0 75 04 c6 43 18 00 48 83 c3 28 eb cc 8b 3d 3b a1 02 00 41 b9 01 00 00 00 31 d2 31 f6 45  ...u..C..H..(...=;...A.....1.1.E
0001c680  31 c0 48 8d 0d a7 a3 02 00 e8 9c 5c ff ff 48 8d 05 89 fe ff ff c6 05 04 a1 02 00 01 48 89 05 45  1.H........\..H.............H..E
0001c6a0  a2 02 00 48 8d 05 20 fe ff ff 48 89 05 3f a2 02 00 48 8d 05 e8 8e 02 00 48 89 05 51 a1 02 00 c7  ...H.. ...H..?...H......H..Q....
0001c6c0  05 d3 a2 02 00 01 00 00 00 e8 29 ff fe ff e8 ed 23 ff ff e8 94 21 ff ff 48 8d 3d 16 08 00 00 e8  ..........).....#....!..H.=.....
0001c6e0  b2 f7 fe ff                                                                                      ....

0001c6e4    void svr_dropbear_exit(int32_t arg1, char* arg2, struct __va_list_tag* arg3) __noreturn

0001c6e4  4155               push    r13 {var_8}
0001c6e6  4989f0             mov     r8, rsi
0001c6e9  4189fd             mov     r13d, edi
0001c6ec  b996000000         mov     ecx, 0x96
0001c6f1  4154               push    r12 {var_10}
0001c6f3  be96000000         mov     esi, 0x96
0001c6f8  55                 push    rbp {var_18}
0001c6f9  53                 push    rbx {var_20}
0001c6fa  4881ec18020000     sub     rsp, 0x218
0001c701  644c8b0c25280000…  mov     r9, qword [fs:0x28]
0001c70a  4c898c2408020000   mov     qword [rsp+0x208 {var_30}], r9
0001c712  4989d1             mov     r9, rdx
0001c715  4c8d642446         lea     r12, [rsp+0x46 {s_1}]
0001c71a  ba01000000         mov     edx, 0x1
0001c71f  488d6c240a         lea     rbp, [rsp+0xa {s}]
0001c724  4c89e7             mov     rdi, r12 {s_1}
0001c727  e8748efeff         call    __vsnprintf_chk
0001c72c  4c8b0df5a20200     mov     r9, qword [rel data_46a28]
0001c733  c644240a00         mov     byte [rsp+0xa {s}], 0x0
0001c738  4d85c9             test    r9, r9
0001c73b  7420               je      0x1c75d

0001c73d  b93c000000         mov     ecx, 0x3c
0001c742  ba01000000         mov     edx, 0x1
0001c747  4889ef             mov     rdi, rbp {s}
0001c74a  31c0               xor     eax, eax  {0x0}
0001c74c  4c8d0509960100     lea     r8, [rel data_35d5c]  {" from <%s>"}
0001c753  be3c000000         mov     esi, 0x3c
0001c758  e8f388feff         call    __snprintf_chk

0001c75d  833d38a2020000     cmp     dword [rel data_4699c], 0x0
0001c764  488d9c24dc000000   lea     rbx, [rsp+0xdc {s_2}]
0001c76c  7510               jne     0x1c77e

0001c76e  4989e9             mov     r9, rbp {s}
0001c771  4153               push    r11 {var_240}
0001c773  4c8d05ed950100     lea     r8, [rel data_35d67]  {"Early exit%s: %s"}
0001c77a  4154               push    r12 {s_1} {var_248}
0001c77c  eb65               jmp     0x1c7e3

0001c77e  833d8ba1020000     cmp     dword [rel data_46910], 0x0
0001c785  4c8b0dbca10200     mov     r9, qword [rel data_46948]
0001c78c  740c               je      0x1c79a

0001c78e  4154               push    r12 {s_1} {var_240}
0001c790  4c8d05e1950100     lea     r8, [rel data_35d78]  {"Exit (%s)%s: %s"}
0001c797  55                 push    rbp {s} {var_248}
0001c798  eb49               jmp     0x1c7e3

0001c79a  4d85c9             test    r9, r9
0001c79d  7436               je      0x1c7d5

0001c79f  8b0567a10200       mov     eax, dword [rel data_4690c]
0001c7a5  4152               push    r10 {var_240_1}
0001c7a7  b92c010000         mov     ecx, 0x12c
0001c7ac  4889df             mov     rdi, rbx {s_2}
0001c7af  4154               push    r12 {s_1} {var_248_1}
0001c7b1  ba01000000         mov     edx, 0x1
0001c7b6  be2c010000         mov     esi, 0x12c
0001c7bb  4c8d05c6950100     lea     r8, [rel data_35d88]  {"Exit before auth%s: (user '%s', …"}
0001c7c2  50                 push    rax {var_250_1}
0001c7c3  31c0               xor     eax, eax  {0x0}
0001c7c5  4151               push    r9 {var_258_1}
0001c7c7  4989e9             mov     r9, rbp {s}
0001c7ca  e88188feff         call    __snprintf_chk
0001c7cf  4883c420           add     rsp, 0x20
0001c7d3  eb29               jmp     0x1c7fe

0001c7d5  4150               push    r8 {var_240}
0001c7d7  4989e9             mov     r9, rbp {s}
0001c7da  4c8d05d5950100     lea     r8, [rel data_35db6]  {"Exit before auth%s: %s"}
0001c7e1  4154               push    r12 {s_1} {var_248}

0001c7e3  be2c010000         mov     esi, 0x12c
0001c7e8  4889df             mov     rdi, rbx {s_2}
0001c7eb  b92c010000         mov     ecx, 0x12c
0001c7f0  31c0               xor     eax, eax  {0x0}
0001c7f2  ba01000000         mov     edx, 0x1
0001c7f7  e85488feff         call    __snprintf_chk
0001c7fc  5e                 pop     rsi {var_248}
0001c7fd  5f                 pop     rdi {var_240}

0001c7fe  bf06000000         mov     edi, 0x6
0001c803  4889da             mov     rdx, rbx {s_2}
0001c806  488d3536780100     lea     rsi, [rel data_3402e[0x15]]  {"%s"}
0001c80d  31c0               xor     eax, eax  {0x0}
0001c80f  e87794feff         call    dropbear_log
{ Does not return }

0001c814                                                              e8 ba fb fe ff 48 8b 3d 10 a3 02 00                      .....H.=....
0001c820  48 85 ff 74 0e e8 63 ae fe ff 31 c9 48 89 0d fd a2 02 00 48 8d 1d 06 a2 02 00 48 8d 6b 50 48 8b  H..t..c...1.H......H......H.kPH.
0001c840  7b 68 48 83 c3 08 e8 15 88 fe ff 31 c0 48 8b 7b 08 48 89 43 60 e8 06 88 fe ff 31 d2 48 89 53 08  {hH........1.H.{.H.C`.....1.H.S.
0001c860  48 39 eb 75 d9 44 89 ef e8 e3 8e fe ff                                                           H9.u.D.......

0001c86d    void svr_dropbear_log(int32_t arg1, char* arg2, struct __va_list_tag* arg3) __noreturn

0001c86d  55                 push    rbp {__saved_rbp}
0001c86e  4989f0             mov     r8, rsi
0001c871  b900040000         mov     ecx, 0x400
0001c876  be00040000         mov     esi, 0x400
0001c87b  53                 push    rbx {__saved_rbx}
0001c87c  89fb               mov     ebx, edi
0001c87e  4881ec38040000     sub     rsp, 0x438
0001c885  644c8b0c25280000…  mov     r9, qword [fs:0x28]
0001c88e  4c898c2428040000   mov     qword [rsp+0x428 {var_20}], r9
0001c896  4989d1             mov     r9, rdx
0001c899  488d6c2428         lea     rbp, [rsp+0x28 {s_1}]
0001c89e  ba01000000         mov     edx, 0x1
0001c8a3  4889ef             mov     rdi, rbp {s_1}
0001c8a6  e8f58cfeff         call    __vsnprintf_chk
0001c8ab  833d2ea1020000     cmp     dword [rel data_469e0], 0x0
0001c8b2  7525               jne     0x1c8d9  {data_469e0}

0001c8b4  31ff               xor     edi, edi  {0x0}
0001c8b6  488d5c2414         lea     rbx, [rsp+0x14 {s}]
0001c8bb  e8308cfeff         call    time
0001c8c0  488d7c2408         lea     rdi, [rsp+0x8 {t}]
0001c8c5  4889442408         mov     qword [rsp+0x8 {t}], rax
0001c8ca  e8a187feff         call    localtime
0001c8cf  4885c0             test    rax, rax
0001c8d2  4889c1             mov     rcx, rax
0001c8d5  7525               jne     0x1c8fc

0001c8d7  eb3c               jmp     0x1c915

0001c8d9  31c0               xor     eax, eax  {0x0}
0001c8db  4889e9             mov     rcx, rbp {s_1}
0001c8de  488d155e770100     lea     rdx, [rel data_3402e[0x15]]  {"%s"}
0001c8e5  89df               mov     edi, ebx
0001c8e7  be01000000         mov     esi, 0x1
0001c8ec  e84f8dfeff         call    __syslog_chk
0001c8f1  833de8a0020000     cmp     dword [rel data_469e0], 0x0
0001c8f8  7567               jne     0x1c961  {data_469e0}

0001c8fa  ebb8               jmp     0x1c8b4

0001c8fc  488d15ca940100     lea     rdx, [rel data_35dcd]  {"%b %d %H:%M:%S"}
0001c903  be14000000         mov     esi, 0x14
0001c908  4889df             mov     rdi, rbx {s}
0001c90b  e8108dfeff         call    strftime
0001c910  4885c0             test    rax, rax
0001c913  7525               jne     0x1c93a

0001c915  448b4c2408         mov     r9d, dword [rsp+0x8 {t}]
0001c91a  b914000000         mov     ecx, 0x14
0001c91f  4889df             mov     rdi, rbx {s}
0001c922  31c0               xor     eax, eax  {0x0}
0001c924  4c8d058b870100     lea     r8, [rel data_350b6]  {"%d"}
0001c92b  ba01000000         mov     edx, 0x1
0001c930  be14000000         mov     esi, 0x14
0001c935  e81687feff         call    __snprintf_chk

0001c93a  e83188feff         call    getpid
0001c93f  4989e9             mov     r9, rbp {s_1}
0001c942  4989d8             mov     r8, rbx {s}
0001c945  be01000000         mov     esi, 0x1
0001c94a  488b3dcf9d0200     mov     rdi, qword [rel stderr]
0001c951  89c1               mov     ecx, eax
0001c953  488d1582940100     lea     rdx, [rel data_35ddc]  {"[%d] %s %s\n"}
0001c95a  31c0               xor     eax, eax  {0x0}
0001c95c  e81f8efeff         call    __fprintf_chk

0001c961  488b842428040000   mov     rax, qword [rsp+0x428 {var_20}]
0001c969  64482b0425280000…  sub     rax, qword [fs:0x28]
0001c972  7405               je      0x1c979

0001c974  e89788feff         call    __stack_chk_fail
{ Does not return }

0001c979  4881c438040000     add     rsp, 0x438
0001c980  5b                 pop     rbx {__saved_rbx}
0001c981  5d                 pop     rbp {__saved_rbp}
0001c982  e9829dfeff         jmp     __x86_return_thunk
{ Does not return }


0001c987    void send_msg_service_accept(int64_t arg1, int32_t arg2) __noreturn

0001c987  55                 push    rbp {var_8}
0001c988  89f5               mov     ebp, esi
0001c98a  be06000000         mov     esi, 0x6
0001c98f  53                 push    rbx {var_10}
0001c990  4889fb             mov     rbx, rdi
0001c993  50                 push    rax {var_18}
0001c994  488b3d2d9e0200     mov     rdi, qword [rel data_467c8]
0001c99b  e8759ffeff         call    buf_putbyte
{ Does not return }

0001c9a0  48 8b 3d 21 9e 02 00 89 ea 48 89 de e8 f0 a1 fe ff 5a 5b 5d e9 a1 07 ff ff                       H.=!.....H.......Z[].....

0001c9b9    void recv_msg_service_request() __noreturn

0001c9b9  53                 push    rbx {var_8}
0001c9ba  4883ec10           sub     rsp, 0x10
0001c9be  488b3d339e0200     mov     rdi, qword [rel data_467f8]
0001c9c5  64488b3425280000…  mov     rsi, qword [fs:0x28]
0001c9ce  4889742408         mov     qword [rsp+0x8 {var_10}], rsi
0001c9d3  488d742404         lea     rsi, [rsp+0x4 {var_14}]
0001c9d8  e8ec9ffeff         call    buf_getstring
{ Does not return }

0001c9dd                                                                                         48 89 c3                               H..
0001c9e0  8b 44 24 04 83 f8 0c 75 1f 48 89 de ba 0c 00 00 00 48 8d 3d f0 93 01 00 e8 c3 86 fe ff be 0c 00  .D$....u.H.......H.=............
0001ca00  00 00 85 c0 75 59 eb 32 83 f8 0e 75 52 ba 0e 00 00 00 48 89 de 48 8d 3d 94 8b 01 00 e8 9f 86 fe  ....uY.2...uR.....H..H.=........
0001ca20  ff 85 c0 75 3a 83 3d e4 9e 02 00 01 48 8d 3d c2 93 01 00 75 3b be 0e 00 00 00 48 89 df e8 45 ff  ...u:.=.....H.=....u;.....H...E.
0001ca40  ff ff 48 89 df e8 16 86 fe ff 48 8b 44 24 08 64 48 2b 04 25 28 00 00 00 74 1b e8 b1 87 fe ff 48  ..H.......H.D$.dH+.%(...t......H
0001ca60  89 df e8 f9 85 fe ff 48 8d 3d aa 93 01 00 31 c0 e8 5c 91 fe ff 48 83 c4 10 5b e9 8a 9c fe ff     .......H.=....1..\...H...[.....

0001ca7f    void sesscheckclose(void* arg1) __noreturn

0001ca7f  488b4720           mov     rax, qword [rdi+0x20]
0001ca83  8b5030             mov     edx, dword [rax+0x30]
0001ca86  83faff             cmp     edx, 0xffffffff
0001ca89  7407               je      0x1ca92

0001ca8b  c7475801000000     mov     dword [rdi+0x58], 0x1

0001ca92  83780800           cmp     dword [rax+0x8], 0x0
0001ca96  0f94c0             sete    al
0001ca99  ffc2               inc     edx
0001ca9b  0f95c2             setne   dl
0001ca9e  09d0               or      eax, edx
0001caa0  0fb6c0             movzx   eax, al
0001caa3  e9619cfeff         jmp     __x86_return_thunk
{ Does not return }


0001caa8    void cleanupchansess(void* arg1) __noreturn

0001caa8  55                 push    rbp {__saved_rbp}
0001caa9  53                 push    rbx {__saved_rbx}
0001caaa  4153               push    r11 {var_18}
0001caac  488b5f20           mov     rbx, qword [rdi+0x20]
0001cab0  4885db             test    rbx, rbx
0001cab3  0f84d5000000       je      0x1cb8e

0001cab9  488b3b             mov     rdi, qword [rbx]
0001cabc  e89f85feff         call    free
0001cac1  4531c0             xor     r8d, r8d  {0x0}
0001cac4  488b7b28           mov     rdi, qword [rbx+0x28]
0001cac8  4c8903             mov     qword [rbx], r8  {0x0}
0001cacb  e89085feff         call    free
0001cad0  4531c9             xor     r9d, r9d  {0x0}
0001cad3  488b7b10           mov     rdi, qword [rbx+0x10]
0001cad7  4c894b28           mov     qword [rbx+0x28], r9  {0x0}
0001cadb  e88085feff         call    free
0001cae0  488b4b20           mov     rcx, qword [rbx+0x20]
0001cae4  4531d2             xor     r10d, r10d  {0x0}
0001cae7  4c895310           mov     qword [rbx+0x10], r10  {0x0}
0001caeb  4885c9             test    rcx, rcx
0001caee  7441               je      0x1cb31

0001caf0  488b15399f0200     mov     rdx, qword [rel data_46a30]
0001caf7  488b35029e0200     mov     rsi, qword [rel data_46900]
0001cafe  8b7b08             mov     edi, dword [rbx+0x8]
0001cb01  e88437ffff         call    login_alloc_entry
{ Does not return }

0001cb06                    48 89 c5 48 89 c7 e8 17 3d ff ff 48 89 ef e8 fa 35 ff ff 48 8b 7b 20 e8 3a e5        H..H....=..H....5..H.{ .:.
0001cb20  ff ff 48 8b 7b 20 e8 35 85 fe ff 31 ff 48 89 7b 20                                               ..H.{ .5...1.H.{ 

0001cb31  4889df             mov     rdi, rbx
0001cb34  e8cd1d0000         call    svr_agentcleanup
{ Does not return }

0001cb39                                                                             8b 0d d1 9e 02 00 48                           ......H
0001cb40  8b 05 c2 9e 02 00 31 d2 39 d1 74 37 48 39 58 08 75 29 83 38 00 7f 18 ba 5b 01 00 00 48 8d 35 da  ......1.9.t7H9X.u).8....[...H.5.
0001cb60  92 01 00 48 8d 3d e9 92 01 00 e8 0a 91 fe ff 31 f6 c7 00 ff ff ff ff 48 89 70 08 ff c2 48 83 c0  ...H.=.........1.......H.p...H..
0001cb80  10 eb c5 5a 48 89 df 5b 5d e9 d2 84 fe ff                                                        ...ZH..[].....

0001cb8e  58                 pop     rax {var_18}
0001cb8f  5b                 pop     rbx {__saved_rbx}
0001cb90  5d                 pop     rbp {__saved_rbp}
0001cb91  e9739bfeff         jmp     __x86_return_thunk
{ Does not return }


0001cb96    void closechansess(void* arg1) __noreturn

0001cb96  4154               push    r12 {__saved_r12}
0001cb98  55                 push    rbp {__saved_rbp}
0001cb99  53                 push    rbx {__saved_rbx}
0001cb9a  488b5f20           mov     rbx, qword [rdi+0x20]
0001cb9e  4885db             test    rbx, rbx
0001cba1  0f8454010000       je      0x1ccfb

0001cba7  837b3000           cmp     dword [rbx+0x30], 0x0
0001cbab  0f884a010000       js      0x1ccfb

0001cbb1  8b5338             mov     edx, dword [rbx+0x38]
0001cbb4  4889fd             mov     rbp, rdi
0001cbb7  31c9               xor     ecx, ecx  {0x0}
0001cbb9  488d3500810200     lea     rsi, [rel signames]
0001cbc0  85d2               test    edx, edx
0001cbc2  0f8eb9000000       jle     0x1cc81

0001cbc8  4863c1             movsxd  rax, ecx
0001cbcb  48c1e004           shl     rax, 0x4
0001cbcf  4801f0             add     rax, rsi
0001cbd2  4c8b6008           mov     r12, qword [rax+0x8]
0001cbd6  4d85e4             test    r12, r12
0001cbd9  0f841c010000       je      0x1ccfb

0001cbdf  3b10               cmp     edx, dword [rax]
0001cbe1  7404               je      0x1cbe7

0001cbe3  ffc1               inc     ecx
0001cbe5  ebe1               jmp     0x1cbc8

0001cbe7  488b3dda9b0200     mov     rdi, qword [rel data_467c8]
0001cbee  be62000000         mov     esi, 0x62
0001cbf3  e81d9dfeff         call    buf_putbyte
{ Does not return }

0001cbf8                                                                          8b 75 04 48 8b 3d c6 9b                          .u.H.=..
0001cc00  02 00 e8 63 9e fe ff 48 8b 3d ba 9b 02 00 ba 0b 00 00 00 48 8d 35 56 92 01 00 e8 82 9f fe ff 48  ...c...H.=.........H.5V........H
0001cc20  8b 3d a2 9b 02 00 31 f6 e8 e8 9c fe ff 4c 89 e7 e8 bb 85 fe ff 48 8b 3d 8c 9b 02 00 4c 89 e6 89  .=....1......L.......H.=....L...
0001cc40  c2 e8 5b 9f fe ff 0f b6 73 3c 48 8b 3d 77 9b 02 00 48 8d 1d 1c 7c 01 00 e8 b8 9c fe ff 48 8b 3d  ..[.....s<H.=w...H...|.......H.=
0001cc60  64 9b 02 00 31 d2 48 89 de e8 33 9f fe ff                                                        d...1.H...3...

0001cc6e    void sub_1cc6e(int64_t arg1 @ rbx) __noreturn

0001cc6e  488b3d539b0200     mov     rdi, qword [rel data_467c8]
0001cc75  31d2               xor     edx, edx  {0x0}
0001cc77  4889de             mov     rsi, rbx
0001cc7a  e8229ffeff         call    buf_putstring
{ Does not return }

0001cc7f                                                                                               eb                                 .
0001cc80  71                                                                                               q

{ Continuation of function closechansess }

0001cc81  ffc2               inc     edx
0001cc83  7418               je      0x1cc9d

0001cc85  bab9000000         mov     edx, 0xb9
0001cc8a  488d35ac910100     lea     rsi, [rel data_35e3d]  {"src/svr-chansession.c"}
0001cc91  488d3de4910100     lea     rdi, [rel data_35e7c]  {"chansess->exit.exitsignal == -1"}
0001cc98  e8dc8ffeff         call    fail_assert
{ Does not return }

0001cc9d  488b3d249b0200     mov     rdi, qword [rel data_467c8]
0001cca4  be62000000         mov     esi, 0x62
0001cca9  e8679cfeff         call    buf_putbyte
{ Does not return }

0001ccae                                            8b 75 04 48 8b 3d 10 9b 02 00 e8 ad 9d fe ff 48 8b 3d                .u.H.=.........H.=
0001ccc0  04 9b 02 00 ba 0b 00 00 00 48 8d 35 cc 91 01 00 e8 cc 9e fe ff 48 8b 3d ec 9a 02 00 31 f6 e8 32  .........H.5.........H.=....1..2
0001cce0  9c fe ff 8b 73 34 48 8b 3d db 9a 02 00 e8 78 9d fe ff 5b 5d 41 5c e9 5f 04 ff ff                 ....s4H.=.....x...[]A\._...

0001ccfb  5b                 pop     rbx {__saved_rbx}
0001ccfc  5d                 pop     rbp {__saved_rbp}
0001ccfd  415c               pop     r12 {__saved_r12}
0001ccff  e9059afeff         jmp     __x86_return_thunk
{ Does not return }


0001cd04    void sessionwinchange(void* arg1) __noreturn

0001cd04  837f1800           cmp     dword [rdi+0x18], 0x0
0001cd08  7863               js      0x1cd6d

0001cd0a  4155               push    r13 {var_8}
0001cd0c  4154               push    r12 {var_10}
0001cd0e  55                 push    rbp {var_18}
0001cd0f  53                 push    rbx {var_20}
0001cd10  4889fb             mov     rbx, rdi
0001cd13  50                 push    rax {var_28}
0001cd14  488b3ddd9a0200     mov     rdi, qword [rel data_467f8]
0001cd1b  e8769cfeff         call    buf_getint
{ Does not return }

0001cd20  48 8b 3d d1 9a 02 00 41 89 c4 e8 67 9c fe ff 48 8b 3d c2 9a 02 00 89 c5 e8 59 9c fe ff 48 8b 3d  H.=....A...g...H.=.......Y...H.=
0001cd40  b4 9a 02 00 41 89 c5 e8 4a 9c fe ff 8b 7b 18 44 89 e2 44 89 e9 41 89 c0 89 ee e8 e7 e4 ff ff 5a  ....A...J....{.D..D..A.........Z
0001cd60  31 c0 5b 5d 41 5c 41 5d e9 9c 99 fe ff                                                           1.[]A\A].....

0001cd6d  83c8ff             or      eax, 0xffffffff  {0xffffffff}
0001cd70  e99499feff         jmp     __x86_return_thunk
{ Does not return }


0001cd75    void addchildpid(int64_t arg1, int32_t arg2) __noreturn

0001cd75  4154               push    r12 {__saved_r12}
0001cd77  8b15939c0200       mov     edx, dword [rel data_46a10]
0001cd7d  4189f4             mov     r12d, esi
0001cd80  31c0               xor     eax, eax  {0x0}
0001cd82  55                 push    rbp {__saved_rbp}
0001cd83  4889fd             mov     rbp, rdi
0001cd86  488b3d7b9c0200     mov     rdi, qword [rel data_46a08]
0001cd8d  53                 push    rbx {__saved_rbx}
0001cd8e  31db               xor     ebx, ebx  {0x0}

0001cd90  39c2               cmp     edx, eax
0001cd92  7411               je      0x1cda5

0001cd94  833c1fff           cmp     dword [rdi+rbx], 0xffffffff
0001cd98  488d4b10           lea     rcx, [rbx+0x10]
0001cd9c  7423               je      0x1cdc1

0001cd9e  ffc0               inc     eax
0001cda0  4889cb             mov     rbx, rcx
0001cda3  ebeb               jmp     0x1cd90

0001cda5  8d7201             lea     esi, [rdx+0x1]
0001cda8  48c1e604           shl     rsi, 0x4
0001cdac  e8d0e8feff         call    m_realloc
{ Does not return }

0001cdb1                                                     ff 05 59 9c 02 00 48 89 05 4a 9c 02 00 48 89                   ..Y...H..J...H.
0001cdc0  c7                                                                                               .

0001cdc1  4801df             add     rdi, rbx
0001cdc4  448927             mov     dword [rdi], r12d
0001cdc7  48896f08           mov     qword [rdi+0x8], rbp
0001cdcb  5b                 pop     rbx {__saved_rbx}
0001cdcc  5d                 pop     rbp {__saved_rbp}
0001cdcd  415c               pop     r12 {__saved_r12}
0001cdcf  e93599feff         jmp     __x86_return_thunk
{ Does not return }


0001cdd4    void sesssigchild_handler() __noreturn

0001cdd4  4154               push    r12 {__saved_r12}
0001cdd6  4c8d25c3990200     lea     r12, [rel ses]
0001cddd  55                 push    rbp {__saved_rbp}
0001cdde  53                 push    rbx {__saved_rbx}
0001cddf  4881eca0000000     sub     rsp, 0xa0
0001cde6  64488b0425280000…  mov     rax, qword [fs:0x28]
0001cdef  4889842498000000   mov     qword [rsp+0x98 {var_20}], rax
0001cdf7  31c0               xor     eax, eax  {0x0}
0001cdf9  e89282feff         call    __errno_location
0001cdfe  8b28               mov     ebp, dword [rax]
0001ce00  4889c3             mov     rbx, rax

0001ce03  8b3d179a0200       mov     edi, dword [rel data_46820]
0001ce09  ba01000000         mov     edx, 0x1
0001ce0e  4c89e6             mov     rsi, r12  {ses}
0001ce11  e86a8afeff         call    write
0001ce16  48ffc8             dec     rax
0001ce19  7405               je      0x1ce20

0001ce1b  833b04             cmp     dword [rbx], 0x4
0001ce1e  74e3               je      0x1ce03

0001ce20  488d05adffffff     lea     rax, [rel sesssigchild_handler]
0001ce27  488d7c2408         lea     rdi, [rsp+0x8 {set}]
0001ce2c  c784248800000001…  mov     dword [rsp+0x88 {var_30}], 0x1
0001ce37  48890424           mov     qword [rsp {act}], rax  {sesssigchild_handler}
0001ce3b  e83086feff         call    sigemptyset
0001ce40  31d2               xor     edx, edx  {0x0}
0001ce42  4889e6             mov     rsi, rsp {act}
0001ce45  bf11000000         mov     edi, 0x11
0001ce4a  e8d182feff         call    sigaction
0001ce4f  892b               mov     dword [rbx], ebp
0001ce51  488b842498000000   mov     rax, qword [rsp+0x98 {var_20}]
0001ce59  64482b0425280000…  sub     rax, qword [fs:0x28]
0001ce62  7405               je      0x1ce69

0001ce64  e8a783feff         call    __stack_chk_fail
{ Does not return }

0001ce69  4881c4a0000000     add     rsp, 0xa0
0001ce70  5b                 pop     rbx {__saved_rbx}
0001ce71  5d                 pop     rbp {__saved_rbp}
0001ce72  415c               pop     r12 {__saved_r12}
0001ce74  e99098feff         jmp     __x86_return_thunk
{ Does not return }


0001ce79    void newchansess(void* arg1) __noreturn

0001ce79  53                 push    rbx {var_8}
0001ce7a  48837f2000         cmp     qword [rdi+0x20], 0x0
0001ce7f  7418               je      0x1ce99

0001ce81  baf4000000         mov     edx, 0xf4
0001ce86  488d35b08f0100     lea     rsi, [rel data_35e3d]  {"src/svr-chansession.c"}
0001ce8d  488d3d14900100     lea     rdi, [rel data_35ea8]  {"channel->typedata == NULL"}
0001ce94  e8e08dfeff         call    fail_assert
{ Does not return }

0001ce99  4889fb             mov     rbx, rdi
0001ce9c  bf68000000         mov     edi, 0x68
0001cea1  e86ae7feff         call    m_malloc
{ Does not return }

0001cea6                    31 d2 31 ff 31 f6 31 c9 48 89 10 48 89 50 40 48 89 50 48 89 48 08 48 c7 40 18        1.1.1.1.H..H.P@H.PH.H.H.@.
0001cec0  ff ff ff ff 48 89 70 20 48 89 70 28 c7 40 30 ff ff ff ff 48 89 43 20 48 89 78 50 48 89 78 58 48  ....H.p H.p(.@0....H.C H.xPH.xXH
0001cee0  89 78 60 31 c0 c7 83 80 00 00 00 01 00 00 00 5b e9 14 98 fe ff                                   .x`1...........[.....

0001cef5    void svr_chansess_checksignal() __noreturn

0001cef5  53                 push    rbx {__saved_rbx}
0001cef6  4883ec10           sub     rsp, 0x10
0001cefa  833d2399020000     cmp     dword [rel data_46824], 0x0
0001cf01  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001cf0a  48895c2408         mov     qword [rsp+0x8 {var_10}], rbx
0001cf0f  488d1dfe9a0200     lea     rbx, [rel data_46a14]
0001cf16  0f8485000000       je      0x1cfa1

0001cf1c  83cfff             or      edi, 0xffffffff  {0xffffffff}
0001cf1f  488d742404         lea     rsi, [rsp+0x4 {stat_loc}]
0001cf24  ba01000000         mov     edx, 0x1
0001cf29  e85287feff         call    waitpid
0001cf2e  85c0               test    eax, eax
0001cf30  7e6f               jle     0x1cfa1

0001cf32  8b35d89a0200       mov     esi, dword [rel data_46a10]
0001cf38  488b15c99a0200     mov     rdx, qword [rel data_46a08]
0001cf3f  31c9               xor     ecx, ecx  {0x0}

0001cf41  39ce               cmp     esi, ecx
0001cf43  7422               je      0x1cf67

0001cf45  488d7a10           lea     rdi, [rdx+0x10]
0001cf49  3902               cmp     dword [rdx], eax
0001cf4b  7513               jne     0x1cf60

0001cf4d  488b5208           mov     rdx, qword [rdx+0x8]
0001cf51  4883c230           add     rdx, 0x30
0001cf55  7513               jne     0x1cf6a

0001cf57  488d15b69a0200     lea     rdx, [rel data_46a14]
0001cf5e  eb0a               jmp     0x1cf6a

0001cf60  ffc1               inc     ecx
0001cf62  4889fa             mov     rdx, rdi
0001cf65  ebda               jmp     0x1cf41

0001cf67  4889da             mov     rdx, rbx  {data_46a14}

0001cf6a  8902               mov     dword [rdx], eax
0001cf6c  8b442404           mov     eax, dword [rsp+0x4 {stat_loc}]
0001cf70  89c6               mov     esi, eax
0001cf72  83e67f             and     esi, 0x7f
0001cf75  7506               jne     0x1cf7d

0001cf77  0fb6cc             movzx   ecx, ah
0001cf7a  894a04             mov     dword [rdx+0x4], ecx

0001cf7d  89c1               mov     ecx, eax
0001cf7f  83e17f             and     ecx, 0x7f
0001cf82  ffc1               inc     ecx
0001cf84  fec9               dec     cl
0001cf86  7e0d               jle     0x1cf95

0001cf88  2580000000         and     eax, 0x80
0001cf8d  897208             mov     dword [rdx+0x8], esi
0001cf90  89420c             mov     dword [rdx+0xc], eax
0001cf93  eb87               jmp     0x1cf1c

0001cf95  c74208ffffffff     mov     dword [rdx+0x8], 0xffffffff  {0xffffffff}
0001cf9c  e97bffffff         jmp     0x1cf1c

0001cfa1  488b442408         mov     rax, qword [rsp+0x8 {var_10}]
0001cfa6  64482b0425280000…  sub     rax, qword [fs:0x28]
0001cfaf  7405               je      0x1cfb6

0001cfb1  e85a82feff         call    __stack_chk_fail
{ Does not return }

0001cfb6  4883c410           add     rsp, 0x10
0001cfba  5b                 pop     rbx {__saved_rbx}
0001cfbb  e94997feff         jmp     __x86_return_thunk
{ Does not return }


0001cfc0    void svr_chansessinitialise() __noreturn

0001cfc0  53                 push    rbx {var_8}
0001cfc1  4881eca0000000     sub     rsp, 0xa0
0001cfc8  64488b3c25280000…  mov     rdi, qword [fs:0x28]
0001cfd1  4889bc2498000000   mov     qword [rsp+0x98 {var_10}], rdi
0001cfd9  bf10000000         mov     edi, 0x10
0001cfde  e82de6feff         call    m_malloc
{ Does not return }


0001cfe3    void sub_1cfe3(int32_t* arg1 @ rax, int64_t arg2, int64_t arg3) __noreturn

0001cfe3  31d2               xor     edx, edx  {0x0}
0001cfe5  488d7c2408         lea     rdi, [rsp+0x8 {set}]
0001cfea  488905179a0200     mov     qword [rel data_46a08], rax
0001cff1  c700ffffffff       mov     dword [rax], 0xffffffff  {0xffffffff}
0001cff7  48895008           mov     qword [rax+0x8], rdx  {0x0}
0001cffb  48b801000000ffff…  mov     rax, 0xffffffff00000001
0001d005  488905049a0200     mov     qword [rel data_46a10], rax  {-0xffffffff}
0001d00c  488d05c1fdffff     lea     rax, [rel sesssigchild_handler]
0001d013  48890424           mov     qword [rsp {__return_addr}], rax  {sesssigchild_handler}
0001d017  c784248800000001…  mov     dword [rsp+0x88 {arg_88}], 0x1
0001d022  e84984feff         call    sigemptyset
0001d027  31d2               xor     edx, edx  {0x0}
0001d029  4889e6             mov     rsi, rsp {__return_addr}
0001d02c  bf11000000         mov     edi, 0x11
0001d031  e8ea80feff         call    sigaction
0001d036  85c0               test    eax, eax
0001d038  790e               jns     0x1d048

0001d03a  488d3d05700100     lea     rdi, [rel data_34046]  {"signal() error"}
0001d041  31c0               xor     eax, eax  {0x0}
0001d043  e8898bfeff         call    dropbear_exit
{ Does not return }

0001d048  488b842498000000   mov     rax, qword [rsp+0x98 {arg2}]
0001d050  64482b0425280000…  sub     rax, qword [fs:0x28]
0001d059  7405               je      0x1d060

0001d05b  e8b081feff         call    __stack_chk_fail
{ Does not return }

0001d060  4881c4a0000000     add     rsp, 0xa0
0001d067  5b                 pop     rbx {arg3}
0001d068  e99c96feff         jmp     __x86_return_thunk
{ Does not return }


0001d06d    void addnewvar(char* arg1, char* arg2) __noreturn

0001d06d  4156               push    r14 {var_8}
0001d06f  4989fe             mov     r14, rdi
0001d072  4155               push    r13 {var_10}
0001d074  4154               push    r12 {var_18}
0001d076  55                 push    rbp {var_20}
0001d077  4889f5             mov     rbp, rsi
0001d07a  53                 push    rbx {var_28}
0001d07b  e87081feff         call    strlen
0001d080  4889ef             mov     rdi, rbp
0001d083  4889c3             mov     rbx, rax
0001d086  e86581feff         call    strlen
0001d08b  448d2c18           lea     r13d, [rax+rbx]
0001d08f  4989c4             mov     r12, rax
0001d092  418d7d02           lea     edi, [r13+0x2]
0001d096  41ffc5             inc     r13d
0001d099  4863ff             movsxd  rdi, edi
0001d09c  4d63ed             movsxd  r13, r13d
0001d09f  e86ce5feff         call    m_malloc
{ Does not return }

0001d0a4              48 63 d3 ff c3 4c 89 f6 48 89 c7 48 89 d1 48 63 db f3 a4 48 01 c3 c6 04 10 3d 49 63      Hc...L..H..H..Hc...H.....=Ic
0001d0c0  cc 48 89 df 48 89 ee f3 a4 42 c6 04 28 00 48 89 c7 e8 2a 83 fe ff 85 c0 79 0e 48 8d 3d e1 8d 01  .H..H....B..(.H...*.....y.H.=...
0001d0e0  00 31 c0 e8 e9 8a fe ff 5b 5d 41 5c 41 5d 41 5e e9 14 96 fe ff                                   .1......[]A\A]A^.....

0001d0f5    void execchild() __noreturn

0001d0f5  4154               push    r12 {var_8}
0001d0f7  4c8d25d28d0100     lea     r12, [rel data_35ed0]
0001d0fe  55                 push    rbp {var_10}
0001d0ff  4889fd             mov     rbp, rdi
0001d102  4c89e7             mov     rdi, r12  {data_35ed0, "LANG"}
0001d105  53                 push    rbx {var_18}
0001d106  e8257ffeff         call    getenv
0001d10b  4889c3             mov     rbx, rax
0001d10e  4885c0             test    rax, rax
0001d111  740b               je      0x1d11e

0001d113  4889c7             mov     rdi, rax
0001d116  e83de5feff         call    m_strdup
{ Does not return }

0001d11b                                                                                   48 89 c3                                   H..

0001d11e  488b3d0b9a0200     mov     rdi, qword [rel data_46b30]
0001d125  e863a5feff         call    sign_key_free
{ Does not return }


0001d12a    void sub_1d12a() __noreturn

0001d12a  31c0               xor     eax, eax  {0x0}
0001d12c  488905fd990200     mov     qword [rel data_46b30], rax  {0x0}
0001d133  e8abb3feff         call    seedrandom
{ Does not return }

0001d138                                                                          83 3d 51 9a 02 00 00 75                          .=Q....u
0001d140  05 e8 7a 80 fe ff e8 d5 80 fe ff 85 c0 75 4b 8b 3d df 97 02 00 e8 06 85 fe ff 85 c0 79 09 48 8d  ..z..........uK.=...........y.H.
0001d160  3d 70 8d 01 00 eb 2c 8b 35 c7 97 02 00 48 8b 3d d4 97 02 00 e8 67 86 fe ff 85 c0 78 e1 8b 3d ad  =p....,.5....H.=.....g.....x..=.
0001d180  97 02 00 e8 28 86 fe ff 85 c0 79 22 48 8d 3d 5c 8d 01 00 31 c0 e8 37 8a fe ff e8 81 80 fe ff 3b  ....(.....y"H.=\...1..7........;
0001d1a0  05 8b 97 02 00 48 8d 3d 57 8d 01 00 75 e5 48 8b 35 93 97 02 00 48 8d 3d 68 8d 01 00 e8 ac fe ff  .....H.=W...u.H.5....H.=h.......
0001d1c0  ff 48 8b 35 80 97 02 00 48 8d 3d 5a 8d 01 00 e8 99 fe ff ff 48 8b 35 5d 97 02 00 48 8d 3d aa 6e  .H.5....H.=Z........H.5]...H.=.n
0001d1e0  01 00 e8 86 fe ff ff e8 3b f4 fe ff 48 8d 3d 3e 8d 01 00 48 89 c6 e8 72 fe ff ff e8 20 80 fe ff  ........;...H.=>...H...r.... ...
0001d200  48 8d 35 30 8d 01 00 48 8d 3d 47 8d 01 00 85 c0 74 07 48 8d 35 41 8d 01 00 e8 4f fe ff ff 48 85  H.50...H.=G.....t.H.5A....O...H.
0001d220  db 74 13 4c 89 e7 48 89 de e8 3f fe ff ff 48 89 df e8 2a 7e fe ff 48 8b 75 28 48 85 f6 74 0c 48  .t.L..H...?...H...*~..H.u(H..t.H
0001d240  8d 3d 0a 7c 01 00 e8 22 fe ff ff 48 8b 75 20 48 85 f6 74 0c 48 8d 3d 0d 8d 01 00 e8 0d fe ff ff  .=.|..."...H.u H..t.H.=.........
0001d260  48 8b 75 40 48 85 f6 74 0c 48 8d 3d 00 8d 01 00 e8 f8 fd ff ff 48 8b 75 48 48 85 f6 74 0c 48 8d  H.u@H..t.H.=.........H.uHH..t.H.
0001d280  3d fa 8c 01 00 e8 e3 fd ff ff 48 8b 75 10 48 85 f6 74 0c 48 8d 3d f0 8c 01 00 e8 ce fd ff ff 48  =.........H.u.H..t.H.=.........H
0001d2a0  8b 35 ba 96 02 00 48 85 f6 74 0c 48 8d 3d ed 8c 01 00 e8 b6 fd ff ff 48 8b 3d 7a 96 02 00 e8 3d  .5....H..t.H.=.........H.=z....=
0001d2c0  7f fe ff 85 c0 79 4d e8 c4 7d fe ff 48 8d 3d 71 9a 01 00 8b 18 e8 26 7f fe ff 48 8d 3d cd 8c 01  .....yM..}..H.=q......&...H.=...
0001d2e0  00 85 c0 0f 88 aa fe ff ff 89 df e8 e0 84 fe ff 48 8b 0d 41 96 02 00 be 01 00 00 00 48 8b 3d 1d  ................H..A........H.=.
0001d300  94 02 00 49 89 c0 48 8d 15 b3 8c 01 00 31 c0 e8 6c 84 fe ff 48 89 ef e8 6d 15 00 00 e8 06 f3 fe  ...I..H......1..l...H...m.......
0001d320  ff 48 89 c7 e8 2f e3 fe ff 48 8b 7d 00 8b 35 8d 94 02 00 48 89 c2 e8 c9 8b fe ff 48 8d 3d 95 8c  .H.../...H.}..5....H.......H.=..
0001d340  01 00 e9 4c fe ff ff                                                                             ...L...

0001d347    void sessioncommand(int64_t arg1, int64_t* arg2, int32_t arg3, int32_t arg4) __noreturn

0001d347  4156               push    r14 {__saved_r14}
0001d349  4155               push    r13 {__saved_r13}
0001d34b  4154               push    r12 {__saved_r12}
0001d34d  4531e4             xor     r12d, r12d  {0x0}
0001d350  55                 push    rbp {__saved_rbp}
0001d351  53                 push    rbx {__saved_rbx}
0001d352  4881ecd0000000     sub     rsp, 0xd0
0001d359  64488b0425280000…  mov     rax, qword [fs:0x28]
0001d362  48898424c8000000   mov     qword [rsp+0xc8 {var_30}], rax
0001d36a  31c0               xor     eax, eax  {0x0}
0001d36c  4489642414         mov     dword [rsp+0x14 {var_e4}], r12d  {0x0}
0001d371  448b6608           mov     r12d, dword [rsi+0x8]
0001d375  4585e4             test    r12d, r12d
0001d378  7549               jne     0x1d3c3

0001d37a  4889fd             mov     rbp, rdi
0001d37d  4889f3             mov     rbx, rsi
0001d380  85d2               test    edx, edx
0001d382  0f849d000000       je      0x1d425

0001d388  488b3e             mov     rdi, qword [rsi]
0001d38b  4189cd             mov     r13d, ecx
0001d38e  4885ff             test    rdi, rdi
0001d391  0f85c5040000       jne     0x1d85c

0001d397  488b3d5a940200     mov     rdi, qword [rel data_467f8]
0001d39e  488d742414         lea     rsi, [rsp+0x14]
0001d3a3  e82196feff         call    buf_getstring
{ Does not return }

0001d3a8                          48 89 03 48 89 c7 8b 44 24 14 3d 28 23 00 00 76 13                               H..H...D$.=(#..v.

0001d3b9  e8a27cfeff         call    free
0001d3be  31ed               xor     ebp, ebp  {0x0}
0001d3c0  48892b             mov     qword [rbx], rbp  {0x0}

0001d3c3  4183ccff           or      r12d, 0xffffffff
0001d3c7  e99d040000         jmp     0x1d869

0001d3cc                                      45 85 ed 74 54 83 f8 04 75 e3 ba 04 00 00 00 48 8d 35 02 8c              E..tT...u......H.5..
0001d3e0  01 00 48 89 7c 24 08 e8 d4 7c fe ff 48 8b 7c 24 08 85 c0 75 c4 48 8d 3d ed 8b 01 00 e8 0f 90 fe  ..H.|$...|..H.|$...u.H.=........
0001d400  ff                                                                                               .

0001d401    void sub_1d401(char* arg1 @ rax, int64_t* arg2 @ rbx) __noreturn

0001d401  488b3b             mov     rdi, qword [rbx]
0001d404  4989c5             mov     r13, rax
0001d407  e8547cfeff         call    free
0001d40c  4531db             xor     r11d, r11d  {0x0}
0001d40f  4c89ef             mov     rdi, r13
0001d412  4c891b             mov     qword [rbx], r11  {0x0}
0001d415  e83ee2feff         call    m_strdup
{ Does not return }

0001d41a                                                                                4c 89 ef 48 89 03                            L..H..
0001d420  e8 3b 7c fe ff                                                                                   .;|..

{ Continuation of function sessioncommand }

0001d425  48833d5397020000   cmp     qword [rel data_46b80], 0x0
0001d42d  7429               je      0x1d458  {data_46b80}

0001d42f  488b03             mov     rax, qword [rbx]
0001d432  4885c0             test    rax, rax
0001d435  750c               jne     0x1d443

0001d437  488d3d36740100     lea     rdi, [rel data_3485a[0x1a]]
0001d43e  e815e2feff         call    m_strdup
{ Does not return }

0001d443  48894310           mov     qword [rbx+0x10], rax
0001d447  488b3d32970200     mov     rdi, qword [rel data_46b80]
0001d44e  e805e2feff         call    m_strdup
{ Does not return }

0001d453                                                           48 89 03 eb 08                                             H....

0001d458  4889df             mov     rdi, rbx
0001d45b  e846ebffff         call    svr_pubkey_set_forced_command
{ Does not return }

0001d460  8b 3d 4a 93 02 00 4c 8d 44 24 30 48 8d 4c 24 28 45 31 c9 48 8d 54 24 20 48 8d 74 24 18 e8 a8 4e  .=J...L.D$0H.L$(E1.H.T$ H.t$...N
0001d480  ff ff 48 8b 7c 24 18 e8 64 7d fe ff 48 8b 7c 24 28 49 89 c5 e8 57 7d fe ff 4d 8d 6c 05 14 4c 89  ..H.|$..d}..H.|$(I...W}..M.l..L.
0001d4a0  ef e8 6a e1 fe ff 48 83 c9 ff 4c 89 ee ba 01 00 00 00 48 89 43 40 48 89 c7 31 c0 41 50 4c 8d 05  ..j...H...L.......H.C@H..1.APL..
0001d4c0  3e 8b 01 00 ff 74 24 28 ff 74 24 28 ff 74 24 48 4c 8b 4c 24 48 e8 76 7b fe ff 48 8b 7c 24 48 48  >....t$(.t$(.t$HL.L$H.v{..H.|$HH
0001d4e0  83 c4 20 e8 08 7d fe ff 4c 8d 68 14 4c 89 ef e8 1c e1 fe ff 48 83 c9 ff ba 01 00 00 00 4c 89 ee  .. ..}..L.h.L.......H........L..
0001d500  48 89 43 48 4c 8d 05 fa 8a 01 00 48 89 c7 31 c0 ff 74 24 20 ff 74 24 38 4c 8b 4c 24 38 e8 2e 7b  H.CHL......H..1..t$ .t$8L.L$8..{
0001d520  fe ff 48 8b 7c 24 28 e8 34 7b fe ff 48 8b 7c 24 30 e8 2a 7b fe ff 48 8b 7c 24 38 e8 20 7b fe ff  ..H.|$(.4{..H.|$0.*{..H.|$8. {..
0001d540  48 8b 7c 24 40 e8 16 7b fe ff 48 83 7b 28 00 41 59 41 5a 0f 85 b9 00 00 00 48 8d 4d 2c 48 8d 55  H.|$@..{..H.{(.AYAZ......H.M,H.U
0001d560  28 48 89 de 4c 8d 4b 08 4c 8d 45 30 48 8d 3d 82 fb ff ff e8 66 8b fe ff 41 89 c5 83 f8 ff 0f 84  (H..L.K.L.E0H.=.....f...A.......
0001d580  ad 02 00 00 8b 55 2c 8b 45 28 8b 73 08 39 d0 0f 4c c2 8b 15 28 92 02 00 39 d0 0f 4c c2 8b 55 30  .....U,.E(.s.9..L...(...9..L..U0
0001d5a0  39 d0 0f 4c c2 31 ff 89 7d 34 48 89 df 89 05 0d 92 02 00 e8 bd f7 ff ff 8b 0d 56 94 02 00 83 f9  9..L.1..}4H...............V.....
0001d5c0  ff 74 3d 8b 35 47 94 02 00 48 8b 05 38 94 02 00 31 d2 39 f2 74 2a 48 8d 78 10 3b 08 75 1b 48 8b  .t=.5G...H..8...1.9.t*H.x.;.u.H.
0001d5e0  40 08 0f 10 05 2b 94 02 00 c7 05 21 94 02 00 ff ff ff ff 0f 11 40 30 eb 07 ff c2 48 89 f8 eb d2  @....+.....!.........@0....H....
0001d600  31 f6 89 b5 80 00 00 00 e8 47 f1 fe ff e9 1c 02 00 00 83 7b 18 ff 74 07 48 83 7b 20 00 75 15 48  1........G.........{..t.H.{ .u.H
0001d620  8d 35 e8 89 01 00 bf 04 00 00 00 31 c0 e8 59 86 fe ff eb 0b e8 f7 81 fe ff 89 c6 85 c0 79 09 41  .5.........1..Y..............y.A
0001d640  83 cd ff e9 e9 01 00 00 0f 85 a9 01 00 00 31 f6 bf 11 00 00 00 e8 c6 7d fe ff 48 ff c0 75 0e 48  ..............1........}..H..u.H
0001d660  8d 3d e0 69 01 00 31 c0 e8 64 85 fe ff 8b 7b 18 e8 cb 7c fe ff 48 8b 73 20 48 8d 7b 1c e8 57 da  .=.i..1..d....{...|..H.s H.{..W.
0001d680  ff ff 8b 7b 1c 31 f6 e8 a4 7b fe ff 85 c0 78 af 8b 7b 1c be 01 00 00 00 e8 93 7b fe ff 85 c0 78  ...{.1...{....x..{........{....x
0001d6a0  9e 48 8b 35 58 92 02 00 48 8b 4b 20 48 8b 15 7d 93 02 00 8b 7b 08 e8 cf 2b ff ff 48 89 c5 48 89  .H.5X...H.K H..}....{...+..H..H.
0001d6c0  c7 e8 5a 31 ff ff 48 89 ef e8 45 2a ff ff 8b 7b 1c be 02 00 00 00 e8 55 7b fe ff 85 c0 0f 88 5c  ..Z1..H...E*...{.......U{......\
0001d6e0  ff ff ff 8b 7b 1c e8 55 7c fe ff 83 3d 0e 94 02 00 00 0f 84 f7 00 00 00 48 83 3b 00 0f 85 ed 00  ....{..U|...=...........H.;.....
0001d700  00 00 48 8b 3d 2f 92 02 00 e8 e2 7a fe ff 8d 68 0c 48 63 ed 48 89 ef e8 f4 de fe ff 4c 8b 0d 15  ..H.=/.....z...h.Hc.H.......L...
0001d720  92 02 00 48 83 c9 ff 48 89 ee 48 89 c7 49 89 c5 ba 01 00 00 00 31 c0 4c 8d 05 f7 88 01 00 e8 0d  ...H...H..H..I.......1.L........
0001d740  79 fe ff 48 8d 74 24 38 4c 89 ef e8 30 7d fe ff 85 c0 0f 89 8f 00 00 00 bf d0 07 00 00 e8 db 8f  y..H.t$8L...0}..................
0001d760  fe ff 48 8d 3d da 88 01 00 48 89 c5 e8 9f 8c fe ff 48 89 ef 48 89 c6 49 89 c6 e8 7c 88 fe ff 85  ..H.=....H.......H..H..I...|....
0001d780  c0 74 12 4c 89 f7 e8 d5 78 fe ff 48 89 ef e8 de 8f fe ff eb 52 8b 45 08 3b 45 10 75 0a 48 8b 55  .t.L....x..H........R.E.;E.u.H.U
0001d7a0  00 ff c8 c6 04 02 0a 31 f6 48 89 ef e8 99 90 fe ff 8b 45 0c 44 8b 65 08 41 39 c4 74 c6 41 29 c4  .......1.H........E.D.e.A9.t.A).
0001d7c0  48 89 ef 44 89 e6 e8 79 91 fe ff 49 63 d4 bf 01 00 00 00 48 89 c6 e8 a5 80 fe ff 48 89 ef 89 c6  H..D...y...Ic......H.......H....
0001d7e0  e8 b0 90 fe ff eb ca 4c 89 ef e8 71 78 fe ff 48 89 df e8 fe f8 ff ff 89 43 08 48 89 df e8 73 f5  .......L...qx..H........C.H...s.
0001d800  ff ff 8b 7b 1c e8 36 7b fe ff 8b 7b 18 8b 05 ad 8f 02 00 39 f8 89 7d 28 0f 4c c7 31 c9 89 7d 2c  ...{..6{...{.......9..}(.L.1..},
0001d820  89 4d 34 89 05 97 8f 02 00 e8 5b 88 fe ff 45 31 ed 48 8b 7b 40 e8 26 78 fe ff 31 c0 48 8b 7b 48  .M4.......[...E1.H.{@.&x..1.H.{H
0001d840  48 89 43 40 e8 17 78 fe ff 31 d2 41 ff c5 48 89 53 48 75 15 48 8b 3b e9 5d fb ff ff              H.C@..x..1.A..H.SHu.H.;.]...

0001d85c  85c9               test    ecx, ecx
0001d85e  0f84c1fbffff       je      0x1d425

0001d864  e950fbffff         jmp     0x1d3b9

0001d869  488b8424c8000000   mov     rax, qword [rsp+0xc8 {var_30}]
0001d871  64482b0425280000…  sub     rax, qword [fs:0x28]
0001d87a  7405               je      0x1d881

0001d87c  e88f79feff         call    __stack_chk_fail
{ Does not return }

0001d881  4881c4d0000000     add     rsp, 0xd0
0001d888  4489e0             mov     eax, r12d  {0xffffffff}
0001d88b  5b                 pop     rbx {__saved_rbx}
0001d88c  5d                 pop     rbp {__saved_rbp}
0001d88d  415c               pop     r12 {__saved_r12}
0001d88f  415d               pop     r13 {__saved_r13}
0001d891  415e               pop     r14 {__saved_r14}
0001d893  e9718efeff         jmp     __x86_return_thunk
{ Does not return }


0001d898    void chansessionrequest() __noreturn

0001d898  4157               push    r15 {var_8}
0001d89a  4156               push    r14 {var_10}
0001d89c  4155               push    r13 {var_18}
0001d89e  4154               push    r12 {var_20}
0001d8a0  55                 push    rbp {var_28}
0001d8a1  53                 push    rbx {var_30}
0001d8a2  4881ecb8000000     sub     rsp, 0xb8
0001d8a9  644c8b2c25280000…  mov     r13, qword [fs:0x28]
0001d8b2  4c89ac24a8000000   mov     qword [rsp+0xa8 {var_40}], r13
0001d8ba  4989fd             mov     r13, rdi
0001d8bd  488b3d348f0200     mov     rdi, qword [rel data_467f8]
0001d8c4  488d742420         lea     rsi, [rsp+0x20 {var_c8}]
0001d8c9  e8fb90feff         call    buf_getstring
{ Does not return }

0001d8ce                                            48 8b 3d 23 8f 02 00 48 89 44 24 08 e8 25 90 fe ff 83                H.=#...H.D$..%....
0001d8e0  7c 24 20 40 41 89 c6 0f 87 84 03 00 00 49 8b 6d 20 48 85 ed 75 18 ba 7d 01 00 00 48 8d 35 3b 85  |$ @A........I.m H..u..}...H.5;.
0001d900  01 00 48 8d 3d 44 87 01 00 e8 6b 83 fe ff 48 8b 7c 24 08 48 8d 35 44 87 01 00 e8 f1 7a fe ff 85  ..H.=D....k...H.|$.H.5D.....z...
0001d920  c0 75 0d 48 89 ef e8 d9 f3 ff ff e9 2c 03 00 00 48 8b 7c 24 08 48 8d 35 30 87 01 00 e8 cf 7a fe  .u.H........,...H.|$.H.50.....z.
0001d940  ff 85 c0 75 09 31 c9 31 d2 e9 4b 02 00 00 48 8b 7c 24 08 48 8d 35 18 87 01 00 e8 b1 7a fe ff 89  ...u.1.1..K...H.|$.H.5......z...
0001d960  c3 85 c0 0f 85 fa 01 00 00 e8 aa e5 ff ff 85 c0 75 08 83 cb ff e9 e4 02 00 00 48 8b 3d 77 8e 02  ................u.........H.=w..
0001d980  00 48 8d 74 24 24 e8 3e 90 fe ff 81 7c 24 24 c8 00 00 00 48 89 45 28 77 d9 83 7d 18 ff 48 8d 3d  .H.t$$.>....|$$....H.E(w..}..H.=
0001d9a0  d6 86 01 00 75 56 4c 8d 7c 24 67 48 8d 75 1c b9 40 00 00 00 48 8d 7d 18 4c 89 fa e8 23 d6 ff ff  ....uVL.|$gH.u..@...H.}.L...#...
0001d9c0  85 c0 74 ae 4c 89 ff e8 8c dc fe ff 48 89 45 20 48 85 c0 75 0c 48 8d 3d b4 86 01 00 e8 f0 81 fe  ..t.L.......H.E H..u.H.=........
0001d9e0  ff 48 8b 3d 60 8f 02 00 e8 43 7a fe ff 48 89 c7 48 85 c0 75 0b 48 8d 3d a2 86 01 00 31 c0 eb dc  .H.=`....Cz..H..H..u.H.=....1...
0001da00  48 8b 75 20 e8 90 d8 ff ff 48 89 ef e8 f3 f2 ff ff 48 8d 44 24 28 8b 7d 18 48 89 c6 48 89 44 24  H.u .....H.......H.D$(.}.H..H.D$
0001da20  10 e8 6a 7c fe ff ff c0 0f 84 30 02 00 00 48 8b 3d c3 8d 02 00 e8 5c 8f fe ff 48 8b 0d b7 8d 02  ..j|......0...H.=.....\...H.....
0001da40  00 48 8d 3d 82 86 01 00 8b 51 08 2b 51 0c 39 d0 75 aa 4c 8d 3d c7 a2 01 00 85 c0 0f 84 fd 01 00  .H.=.....Q.+Q.9.u.L.=...........
0001da60  00 48 8b 3d 90 8d 02 00 e8 6f 8e fe ff 41 89 c4 41 8d 44 24 ff 3c 9e 0f 87 b7 00 00 00 48 8b 3d  .H.=.....o...A..A.D$.<.......H.=
0001da80  74 8d 02 00 e8 0d 8f fe ff 89 c1 41 80 fc 5d 77 d0 41 0f b6 c4 41 8a 54 c7 04 80 fa 03 74 3b 77  t..........A..]w.A...A.T.....t;w
0001daa0  25 80 fa 01 74 70 80 fa 02 75 b6 41 8b 04 c7 8b 7c 24 28 89 c2 09 f8 f7 d2 21 fa 85 c9 0f 44 c2  %...tp...u.A....|$(......!....D.
0001dac0  89 44 24 28 eb 9b 80 fa 04 74 2d 80 fa 05 75 91 41 8b 04 c7 88 4c 04 39 eb 87 41 8b 3c c7 8b 54  .D$(.....t-...u.A....L.9..A.<..T
0001dae0  24 2c 89 f8 f7 d0 21 d0 09 fa 85 c9 0f 44 d0 89 54 24 2c e9 69 ff ff ff 41 8b 3c c7 8b 54 24 34  $,....!......D..T$,.i...A.<..T$4
0001db00  89 f8 f7 d0 21 d0 09 fa 85 c9 0f 44 d0 89 54 24 34 e9 4b ff ff ff 41 8b 3c c7 8b 44 24 30 89 fa  ....!......D..T$4.K...A.<..D$0..
0001db20  f7 d2 21 c2 09 f8 85 c9 0f 44 c2 89 44 24 30 e9 2d ff ff ff 8b 7d 18 48 8b 54 24 10 31 f6 e8 5d  ..!......D..D$0.-....}.H.T$.1..]
0001db40  7b fe ff 85 c0 0f 89 13 01 00 00 48 8d 35 8d 85 01 00 bf 06 00 00 00 31 c0 e8 2d 81 fe ff e9 fb  {..........H.5.........1..-.....
0001db60  00 00 00 48 8b 7c 24 08 48 8d 35 92 85 01 00 e8 9c 78 fe ff 31 c9 85 c0 74 1a 48 8b 7c 24 08 48  ...H.|$.H.5......x..1...t.H.|$.H
0001db80  8d 35 80 85 01 00 e8 85 78 fe ff 85 c0 75 1a b9 01 00 00 00 ba 01 00 00 00 48 89 ee 4c 89 ef e8  .5......x....u...........H..L...
0001dba0  a3 f7 ff ff e9 b3 00 00 00 48 8b 7c 24 08 48 8d 35 5b 85 01 00 e8 56 78 fe ff 85 c0 75 0d 48 89  .........H.|$.H.5[....Vx....u.H.
0001dbc0  ef e8 69 0e 00 00 e9 91 00 00 00 48 8b 7c 24 08 48 8d 35 28 6c 01 00 e8 34 78 fe ff 89 c3 85 c0  ..i........H.|$.H.5(l...4x......
0001dbe0  0f 85 8b 00 00 00 83 7d 08 00 0f 84 81 00 00 00 48 8b 3d 01 8c 02 00 31 f6 4c 8d 3d c0 70 02 00  .......}........H.=....1.L.=.p..
0001dc00  e8 c4 8d fe ff 31 c9 48 89 44 24 10 48 63 d1 48 c1 e2 04 4d 8d 24 17 49 8b 7c 24 08 48 85 ff 74  .....1.H.D$.Hc.H...M.$.I.|$.H..t
0001dc20  20 48 8b 74 24 10 89 4c 24 1c e8 e1 77 fe ff 8b 4c 24 1c 85 c0 75 06 41 8b 1c 24 eb 04 ff c1 eb   H.t$..L$...w...L$...u.A..$.....
0001dc40  cb 48 8b 7c 24 10 e8 15 74 fe ff 85 db 74 22 8b 7d 08 89 de e8 77 78 fe ff c1 f8 1f 89 c3 45 84  .H.|$...t....t".}....wx.......E.
0001dc60  f6 74 1b 85 db 75 0f 4c 89 ef e8 50 22 ff ff eb 0d 45 84 f6 74 08 4c 89 ef e8 c5 21 ff ff 48 8b  .t...u.L...P"....E..t.L....!..H.
0001dc80  7c 24 08 e8 d8 73 fe ff 48 8b 84 24 a8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 70 75 fe ff  |$...s..H..$....dH+.%(...t..pu..
0001dca0  48 81 c4 b8 00 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 53 8a fe ff                                H......[]A\A]A^A_.S...

0001dcb6    void disablekey(int32_t arg1) __noreturn

0001dcb6  31d2               xor     edx, edx  {0x0}
0001dcb8  488d0d41860200     lea     rcx, [rel sigalgs]

0001dcbf  4863c2             movsxd  rax, edx
0001dcc2  486bc028           imul    rax, rax, 0x28
0001dcc6  4801c8             add     rax, rcx
0001dcc9  48833800           cmp     qword [rax], 0x0
0001dccd  7415               je      0x1dce4

0001dccf  0fbe7008           movsx   esi, byte [rax+0x8]
0001dcd3  39fe               cmp     esi, edi
0001dcd5  7509               jne     0x1dce0

0001dcd7  c6401800           mov     byte [rax+0x18], 0x0
0001dcdb  e9298afeff         jmp     __x86_return_thunk
{ Does not return }

0001dce0  ffc2               inc     edx
0001dce2  ebdb               jmp     0x1dcbf

0001dce4  e9208afeff         jmp     __x86_return_thunk
{ Does not return }


0001dce9    void printhelp(int64_t arg1) __noreturn

0001dce9  4883ec10           sub     rsp, 0x10
0001dced  4989f8             mov     r8, rdi
0001dcf0  488d05cf890100     lea     rax, [rel data_366c6]  {"/var/run/dropbear.pid"}
0001dcf7  488b3d228a0200     mov     rdi, qword [rel stderr]
0001dcfe  6a00               push    0x0 {var_18}
0001dd00  4c8d0d57770100     lea     r9, [rel data_3545e]  {"/etc/dropbear/dropbear_rsa_host_…"}
0001dd07  488d0d6c6f0100     lea     rcx, [rel data_34c69[0x11]]  {"2025.87"}
0001dd0e  be01000000         mov     esi, 0x1
0001dd13  6a00               push    0x0 {var_20}
0001dd15  488d1517840100     lea     rdx, [rel data_36133]  {"Dropbear server v%s https://matt…"}
0001dd1c  6800600000         push    0x6000 {var_28}
0001dd21  50                 push    rax {var_30}  {data_366c6, "/var/run/dropbear.pid"}
0001dd22  488d05b3890100     lea     rax, [rel data_366dc]
0001dd29  50                 push    rax {var_38}  {data_366dc}
0001dd2a  488d0577770100     lea     rax, [rel data_354a8]  {"/etc/dropbear/dropbear_ed25519_h…"}
0001dd31  6a0a               push    0xa {var_40}
0001dd33  6a0a               push    0xa {var_48}
0001dd35  50                 push    rax {var_50}  {data_354a8, "/etc/dropbear/dropbear_ed25519_h…"}
0001dd36  488d0545770100     lea     rax, [rel data_35482]  {"/etc/dropbear/dropbear_ecdsa_hos…"}
0001dd3d  50                 push    rax {var_58}  {data_35482, "/etc/dropbear/dropbear_ecdsa_hos…"}
0001dd3e  31c0               xor     eax, eax  {0x0}
0001dd40  e83b7afeff         call    __fprintf_chk
0001dd45  4883c458           add     rsp, 0x58
0001dd49  e9bb89feff         jmp     __x86_return_thunk
{ Does not return }


0001dd4e    void loadhostkey_helper(int64_t arg1, int64_t* arg2, int64_t* arg3, int32_t arg4) __noreturn

0001dd4e  48833a00           cmp     qword [rdx], 0x0
0001dd52  7416               je      0x1dd6a

0001dd54  85c9               test    ecx, ecx
0001dd56  741d               je      0x1dd75

0001dd58  52                 push    rdx {var_8}
0001dd59  4889fe             mov     rsi, rdi
0001dd5c  31c0               xor     eax, eax  {0x0}
0001dd5e  488d3d7a890100     lea     rdi, [rel data_366df]  {"Only one %s key can be specified"}
0001dd65  e8677efeff         call    dropbear_exit
{ Does not return }

0001dd6a  488b06             mov     rax, qword [rsi]
0001dd6d  488902             mov     qword [rdx], rax
0001dd70  31c0               xor     eax, eax  {0x0}
0001dd72  488906             mov     qword [rsi], rax  {0x0}

0001dd75  e98f89feff         jmp     __x86_return_thunk
{ Does not return }


0001dd7a    void loadhostkey() __noreturn

0001dd7a  55                 push    rbp {var_8}
0001dd7b  53                 push    rbx {var_10}
0001dd7c  4883ec28           sub     rsp, 0x28
0001dd80  89742404           mov     dword [rsp+0x4 {var_34}], esi
0001dd84  48897c2408         mov     qword [rsp+0x8 {var_30}], rdi
0001dd89  64488b0425280000…  mov     rax, qword [fs:0x28]
0001dd92  4889442418         mov     qword [rsp+0x18 {var_20}], rax
0001dd97  31c0               xor     eax, eax  {0x0}
0001dd99  e80d93feff         call    new_sign_key
{ Does not return }

0001dd9e                                                                                            48 8b                                H.
0001dda0  7c 24 08 48 89 c3 e8 65 86 fe ff 48 8d 54 24 14 48 89 de c7 44 24 14 50 00 00 00 48 89 c7 48 89  |$.H...e...H.T$.H...D$.P...H..H.
0001ddc0  c5 e8 82 31 ff ff 8b 4c 24 04 ff c0 75 23 83 3d 63 8d 02 00 00 75 1a 48 89 ea 48 8d 35 1f 89 01  ...1...L$...u#.=c....u.H..H.5...
0001dde0  00 bf 04 00 00 00 31 c0 e8 9e 7e fe ff 8b 4c 24 04 48 89 ef 89 4c 24 04 e8 63 72 fe ff 8b 44 24  ......1...~...L$.H...L$..cr...D$
0001de00  14 8b 4c 24 04 85 c0 75 18 48 8b 05 20 8d 02 00 48 8d 73 10 48 8d 3d d7 63 01 00 48 8d 50 10 eb  ..L$...u.H.. ...H.s.H.=.c..H.P..
0001de20  72 83 f8 01 75 18 48 8b 05 03 8d 02 00 48 8d 73 18 48 8d 3d da 88 01 00 48 8d 50 18 eb 55 83 f8  r...u.H......H.s.H.=....H.P..U..
0001de40  02 75 18 48 8b 05 e6 8c 02 00 48 8d 73 20 48 8d 3d c6 88 01 00 48 8d 50 20 eb 38 83 f8 03 75 18  .u.H......H.s H.=....H.P .8...u.
0001de60  48 8b 05 c9 8c 02 00 48 8d 73 28 48 8d 3d b2 88 01 00 48 8d 50 28 eb 1b 83 f8 05 75 1b 48 8b 05  H......H.s(H.=....H.P(.....u.H..
0001de80  ac 8c 02 00 48 8d 73 30 48 8d 3d c0 64 01 00 48 8d 50 30 e8 b6 fe ff ff 48 89 df e8 ed 97 fe ff  ....H.s0H.=.d..H.P0.....H.......
0001dea0  48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 5b 73 fe ff 48 83 c4 28 5b 5d e9 49 88 fe ff  H.D$.dH+.%(...t..[s..H..([].I...

0001dec0    void svr_getopts(int32_t arg1) __noreturn

0001dec0  4155               push    r13 {var_8}
0001dec2  31c0               xor     eax, eax  {0x0}
0001dec4  4189fd             mov     r13d, edi
0001dec7  488d3df8870100     lea     rdi, [rel data_366c6]  {"/var/run/dropbear.pid"}
0001dece  4154               push    r12 {var_10}
0001ded0  55                 push    rbp {var_18}
0001ded1  31ed               xor     ebp, ebp  {0x0}
0001ded3  53                 push    rbx {var_20}
0001ded4  31db               xor     ebx, ebx  {0x0}
0001ded6  4881ece8000000     sub     rsp, 0xe8
0001dedd  644c8b2425280000…  mov     r12, qword [fs:0x28]
0001dee6  4c89a424d8000000   mov     qword [rsp+0xd8 {var_30}], r12
0001deee  4989f4             mov     r12, rsi
0001def1  488905108c0200     mov     qword [rel data_46b08], rax  {0x0}
0001def8  488905118c0200     mov     qword [rel data_46b10], rax  {0x0}
0001deff  488905128c0200     mov     qword [rel data_46b18], rax  {0x0}
0001df06  b805000000         mov     eax, 0x5
0001df0b  48c1e021           shl     rax, 0x21  {0xa00000000}
0001df0f  48895c2408         mov     qword [rsp+0x8], rbx  {0x0}
0001df14  488905058c0200     mov     qword [rel data_46b20], rax  {0xa00000000}
0001df1b  31c0               xor     eax, eax  {0x0}
0001df1d  8905d58b0200       mov     dword [rel data_46af8], eax  {0x0}
0001df23  8905778b0200       mov     dword [rel data_46aa0], eax  {0x0}
0001df29  31c0               xor     eax, eax  {0x0}
0001df2b  488905fe8b0200     mov     qword [rel data_46b30], rax  {0x0}
0001df32  31c0               xor     eax, eax  {0x0}
0001df34  48895c2410         mov     qword [rsp+0x10 {var_f8}], rbx  {0x0}
0001df39  48895c2418         mov     qword [rsp+0x18 {var_f0}], rbx  {0x0}
0001df3e  48895c2420         mov     qword [rsp+0x20 {var_e8}], rbx  {0x0}
0001df43  48895c2428         mov     qword [rsp+0x28 {var_e0}], rbx  {0x0}
0001df48  48895c2430         mov     qword [rsp+0x30 {var_d8}], rbx  {0x0}
0001df4d  48891dec8a0200     mov     qword [rel svr_opts], rbx  {0x0}
0001df54  48891d0d8c0200     mov     qword [rel data_46b68], rbx  {0x0}
0001df5b  48891d1e8c0200     mov     qword [rel data_46b80], rbx  {0x0}
0001df62  31db               xor     ebx, ebx  {0x0}
0001df64  892d9a8b0200       mov     dword [rel data_46b04], ebp  {0x0}
0001df6a  bd01000000         mov     ebp, 0x1
0001df6f  c705cf8a02000100…  mov     dword [rel data_46a48], 0x1
0001df79  8905b98b0200       mov     dword [rel data_46b38], eax  {0x0}
0001df7f  e88c84feff         call    expand_homedir_path
{ Does not return }

0001df84              31 c9 31 d2 31 f6 48 89 05 df 8b 02 00 48 8d 05 95 87 01 00 48 89 05 d9 8b 02 00 31      1.1.1.H......H......H......1
0001dfa0  c0 48 89 05 80 8b 02 00 48 b8 ff ff ff ff 01 00 00 00 48 89 05 43 8b 02 00 48 b8 01 00 00 00 01  .H......H.........H..C...H......
0001dfc0  00 00 00 89 15 c7 8b 02 00 48 89 0d 00 8a 02 00 48 89 0d 01 8a 02 00 48 89 05 02 8a 02 00 48 89  .........H......H......H......H.
0001dfe0  35 db 89 02 00 c7 05 d9 89 02 00 00 60 00 00 44 39 ed 0f 83 6b 04 00 00 89 e8 49 8b 34 c4 80 3e  5...........`..D9...k.....I.4..>
0001e000  2d 75 06 80 7e 01 00 75 0c 48 8d 3d 24 87 01 00 e9 79 05 00 00 31 ff b8 01 00 00 00 89 c2 0f be  -u..~..u.H.=$....y...1..........
0001e020  0c 16 89 fa 83 f2 01 48 85 db 41 0f 94 c0 44 21 c2 84 c9 0f 84 e2 02 00 00 84 d2 0f 84 fd 02 00  .......H..A...D!................
0001e040  00 80 f9 63 0f 84 6c 02 00 00 0f 8f ab 00 00 00 80 f9 4b 0f 84 66 02 00 00 7f 55 80 f9 45 0f 84  ...c..l...........K..f....U..E..
0001e060  5d 01 00 00 7f 20 80 f9 42 0f 84 d9 01 00 00 80 f9 44 0f 84 4e 02 00 00 80 f9 32 0f 84 4e 02 00  ].... ..B........D..N.....2..N..
0001e080  00 e9 06 02 00 00 80 f9 47 0f 84 47 02 00 00 80 f9 49 0f 84 47 02 00 00 80 f9 46 0f 85 eb 01 00  ........G..G.....I..G.....F.....
0001e0a0  00 45 31 db 44 89 1d 9d 89 02 00 e9 62 02 00 00 80 f9 56 0f 84 b8 01 00 00 7f 20 80 f9 52 0f 84  .E1.D.......b.....V....... ..R..
0001e0c0  ee 00 00 00 80 f9 54 0f 84 19 02 00 00 80 f9 50 0f 84 17 02 00 00 e9 b1 01 00 00 80 f9 61 0f 84  ......T........P.............a..
0001e0e0  0a 01 00 00 80 f9 62 0f 84 09 02 00 00 80 f9 57 0f 84 09 02 00 00 e9 91 01 00 00 80 f9 6d 0f 84  ......b........W.............m..
0001e100  08 01 00 00 7f 61 80 f9 69 0f 84 ee 00 00 00 7f 2e 80 f9 67 0f 84 1f 01 00 00 80 f9 68 0f 84 43  .....a..i..........g........h..C
0001e120  01 00 00 80 f9 64 0f 84 da 01 00 00 80 f9 65 0f 84 9b 00 00 00 b9 66 00 00 00 e9 4d 01 00 00 80  .....d........e.......f....M....
0001e140  f9 6b 0f 84 97 00 00 00 48 8d 1d 39 8a 02 00 80 f9 6c 0f 84 bc 01 00 00 c7 05 ca 89 02 00 01 00  .k......H..9.....l..............
0001e160  00 00 e9 ab 01 00 00 80 f9 74 0f 84 e7 00 00 00 7f 20 80 f9 72 0f 84 8b 01 00 00 80 f9 73 0f 84  .........t....... ..r........s..
0001e180  a6 00 00 00 80 f9 70 0f 84 80 01 00 00 e9 fa 00 00 00 80 f9 77 0f 84 80 00 00 00 80 f9 7a 0f 84  ......p.............w........z..
0001e1a0  d9 00 00 00 80 f9 75 0f 84 65 01 00 00 e9 da 00 00 00 c7 05 7c 89 02 00 01 00 00 00 e9 51 01 00  ......u..e..........|........Q..
0001e1c0  00 45 31 d2 44 89 15 15 88 02 00 e9 42 01 00 00 c7 05 b6 89 02 00 01 00 00 00 e9 33 01 00 00 c7  .E1.D.......B..............3....
0001e1e0  05 3f 89 02 00 01 00 00 00 e9 24 01 00 00 c7 05 cc 87 02 00 01 00 00 00 e9 15 01 00 00 c7 05 f1  .?........$.....................
0001e200  88 02 00 01 00 00 00 e9 06 01 00 00 45 31 c9 44 89 0d ea 88 02 00 e9 f7 00 00 00 c7 05 df 88 02  ............E1.D................
0001e220  00 01 00 00 00 e9 e8 00 00 00 c7 05 e0 88 02 00 01 00 00 00 e9 d9 00 00 00 c7 05 d5 88 02 00 01  ................................
0001e240  00 00 00 e9 ca 00 00 00 c7 05 ca 88 02 00 01 00 00 00 e9 bb 00 00 00 c7 05 bf 88 02 00 01 00 00  ................................
0001e260  00 e9 ac 00 00 00 49 8b 3c 24 e8 7a fa ff ff eb 05 e8 4c 2e ff ff 31 ff e8 d3 74 fe ff c7 05 39  ......I.<$.z......L...1...t....9
0001e280  87 02 00 01 00 00 00 e9 86 00 00 00 48 8b 3d 8d 84 02 00 48 8d 15 af 84 01 00 be 01 00 00 00 31  ............H.=....H...........1
0001e2a0  c0 e8 da 74 fe ff 49 8b 3c 24 e8 3a fa ff ff bf 01 00 00 00 eb c2 48 8d 1d c3 88 02 00 eb 55 48  ...t..I.<$.:..........H.......UH
0001e2c0  8d 5c 24 10 eb 4e 48 8d 1d ab 88 02 00 eb 45 48 8d 5c 24 28 eb 3e 48 8d 1d 2b 88 02 00 eb 35 48  .\$..NH.......EH.\$(.>H..+....5H
0001e2e0  8d 5c 24 18 eb 2e 48 8d 5c 24 20 eb 27 48 8d 1d 7c 88 02 00 eb 1e 48 8d 1d 43 87 02 00 eb 15 48  .\$...H.\$ .'H..|.....H..C.....H
0001e300  8d 5c 24 08 eb 0e 48 8d 5c 24 30 eb 07 bf 01 00 00 00 31 db ff c0 e9 01 fd ff ff 84 d2 0f 85 37  .\$...H.\$0.......1............7
0001e320  01 00 00 8d 45 01 49 83 3c c4 00 48 89 c5 75 0c 48 8d 3d 26 84 01 00 e9 9d 03 00 00 31 c0 85 ff  ....E.I.<..H..u.H.=&........1...
0001e340  0f 84 b2 00 00 00 45 31 c0 89 ea 83 3d 4e 87 02 00 09 4c 89 44 24 38 49 8b 3c d4 4c 89 44 24 40  ......E1....=N....L.D$8I.<.L.D$@
0001e360  0f 87 f6 00 00 00 48 01 c7 48 8d 54 24 38 48 8d 74 24 40 e8 f4 2d ff ff ff c0 75 0c 48 8d 3d eb  ......H..H.T$8H.t$@..-....u.H.=.
0001e380  83 01 00 e9 51 03 00 00 48 83 7c 24 38 00 48 8b 44 24 40 75 0e 31 f6 48 89 44 24 38 48 89 74 24  ....Q...H.|$8.H.D$@u.1.H.D$8H.t$
0001e3a0  40 eb 05 48 85 c0 75 11 48 8d 3d c5 64 01 00 e8 a4 d2 fe ff 48 89 44 24 40 48 8b 74 24 38 80 3e  @..H..u.H.=.d.......H.D$@H.t$8.>
0001e3c0  00 75 0c 48 8d 3d b4 83 01 00 e9 0a 03 00 00 8b 0d cb 86 02 00 48 8d 15 64 86 02 00 48 89 74 ca  .u.H.=...............H..d...H.t.
0001e3e0  10 48 89 c8 48 8b 74 24 40 ff c0 48 89 74 ca 68 89 05 aa 86 02 00 eb 64 48 85 db 74 5d 89 ea 49  .H..H.t$@..H.t.h.......dH..t]..I
0001e400  03 04 d4 48 89 03 75 0c 48 8d 3d 78 83 01 00 e9 c7 02 00 00 48 8b 7c 24 30 48 85 ff 74 3c 48 63  ...H..u.H.=x........H.|$0H..t<Hc
0001e420  1d 3b 87 02 00 83 fb 03 7e 0c 48 8d 3d 6c 83 01 00 e9 a3 02 00 00 e8 1d d2 fe ff 31 c9 ff 05 1d  .;......~.H.=l.............1....
0001e440  87 02 00 48 89 c2 48 8d 05 f3 85 02 00 48 89 4c 24 30 48 89 94 d8 00 01 00 00 31 db ff c5 e9 8c  ...H..H......H.L$0H.......1.....
0001e460  fb ff ff 83 3d 36 86 02 00 00 75 30 48 8d 3d 69 82 01 00 e8 e0 d1 fe ff 48 8d 3d f5 63 01 00 48  ....=6....u0H.=i........H.=.c..H
0001e480  89 05 ca 85 02 00 e8 cd d1 fe ff c7 05 0b 86 02 00 01 00 00 00 48 89 05 0c 86 02 00 48 8b 3d 9d  .....................H......H.=.
0001e4a0  85 02 00 48 85 ff 0f 84 b3 00 00 00 48 8d 74 24 48 e8 ca 6f fe ff 85 c0 74 1f 48 8b 15 7f 85 02  ...H........H.t$H..o....t.H.....
0001e4c0  00 48 8d 35 e7 82 01 00 bf 04 00 00 00 31 c0 e8 b7 77 fe ff e9 86 00 00 00 48 8b 7c 24 78 48 81  .H.5.........1...w.......H.|$xH.
0001e4e0  ff 02 08 00 00 7e 1a ba 02 08 00 00 48 8d 35 db 82 01 00 bf 04 00 00 00 31 c0 e8 8c 77 fe ff eb  .....~......H.5.........1...w...
0001e500  5e e8 37 82 fe ff 48 8b 35 33 85 02 00 48 89 c7 48 89 05 51 86 02 00 e8 df 7a fe ff 85 c0 74 31  ^.7...H.53...H..H..Q.....z....t1
0001e520  48 8b 15 19 85 02 00 48 8d 35 c7 82 01 00 bf 04 00 00 00 31 c0 e8 51 77 fe ff 48 8b 3d 27 86 02  H......H.5.........1..Qw..H.='..
0001e540  00 e8 2b 82 fe ff 31 d2 48 89 15 19 86 02 00 eb 0e 48 8b 3d 10 86 02 00 31 f6 e8 eb 82 fe ff 48  ..+...1.H........H.=....1......H
0001e560  8b 3d a2 85 02 00 48 85 ff 74 2a e8 30 6f fe ff 48 85 c0 74 0b 8b 40 10 89 05 92 85 02 00 eb 15  .=....H..t*.0o..H..t..@.........
0001e580  48 8b 35 81 85 02 00 48 8d 3d 86 82 01 00 31 c0 e8 3c 76 fe ff 48 8b 7c 24 08 48 85 ff 74 05 e8  H.5....H.=....1..<v..H.|$.H..t..
0001e5a0  3f 2b ff ff 48 8b 5c 24 20 48 85 db 74 31 31 c0 48 8d 74 24 40 48 89 df 89 44 24 40 e8 37 7d fe  ?+..H.\$ H..t11.H.t$@H...D$@.7}.
0001e5c0  ff ff c0 74 08 8b 44 24 40 85 c0 75 0c 48 89 de 48 8d 3d 7e 82 01 00 eb b5 89 05 45 85 02 00 48  ...t..D$@..u.H..H.=~.......E...H
0001e5e0  8b 5c 24 10 48 85 db 74 26 48 8d 74 24 40 48 89 df e8 02 7d fe ff 48 89 de 48 8d 3d 6b 82 01 00  .\$.H..t&H.t$@H....}..H..H.=k...
0001e600  ff c0 74 8a 8b 44 24 40 48 89 05 c1 83 02 00 48 8b 5c 24 18 48 85 db 74 2a 48 8d 74 24 40 48 89  ..t..D$@H......H.\$.H..t*H.t$@H.
0001e620  df e8 d2 7c fe ff 48 89 de 48 8d 3d 4e 82 01 00 ff c0 0f 84 56 ff ff ff 8b 44 24 40 48 89 05 95  ...|..H..H.=N.......V....D$@H...
0001e640  83 02 00 48 8b 15 36 85 02 00 48 85 d2 74 13 48 8d 35 3e 82 01 00 bf 06 00 00 00 31 c0 e8 29 76  ...H..6...H..t.H.5>........1..)v
0001e660  fe ff 48 8b 15 1f 85 02 00 48 85 d2 74 13 48 8d 35 3a 82 01 00 bf 06 00 00 00 31 c0 e8 0a 76 fe  ..H......H..t.H.5:........1...v.
0001e680  ff 48 8b 7c 24 28 48 85 ff 74 22 48 8d 35 6a 84 02 00 e8 61 7c fe ff ff c0 74 09 83 3d 5a 84 02  .H.|$(H..t"H.5j....a|....t..=Z..
0001e6a0  00 00 79 09 48 8d 3d 1e 82 01 00 eb 2c 83 3d 6c 84 02 00 00 74 10 83 3d 57 84 02 00 00 48 8d 3d  ..y.H.=.....,.=l....t..=W....H.=
0001e6c0  0c 82 01 00 75 13 48 8b 05 ab 84 02 00 80 38 00 75 0e 48 8d 3d 12 82 01 00 31 c0 e8 f1 74 fe ff  ....u.H.......8.u.H.=....1...t..
0001e6e0  48 8b 84 24 d8 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 18 6b fe ff 48 81 c4 e8 00 00 00 5b  H..$....dH+.%(...t...k..H......[
0001e700  5d 41 5c 41 5d e9 ff 7f fe ff                                                                    ]A\A].....

0001e70a    void load_all_hostkeys() __noreturn

0001e70a  4154               push    r12 {var_8}
0001e70c  4c8d252d840200     lea     r12, [rel data_46b40]
0001e713  55                 push    rbp {var_10}
0001e714  53                 push    rbx {var_18}
0001e715  31db               xor     ebx, ebx  {0x0}
0001e717  e88f89feff         call    new_sign_key
{ Does not return }

0001e71c                                                                                      48 89 05 0d                              H...
0001e720  84 02 00 8b 05 37 84 02 00 39 d8 7e 1e 49 8b 2c dc be 01 00 00 00 48 ff c3 48 89 ef e8 39 f6 ff  .....7...9.~.I.,......H..H...9..
0001e740  ff 48 89 ef e8 17 69 fe ff eb d8 85 c0 75 2a 31 f6 48 8d 3d 06 6d 01 00 e8 1d f6 ff ff 31 f6 48  .H....i......u*1.H.=.m.......1.H
0001e760  8d 3d 1c 6d 01 00 e8 0f f6 ff ff 31 f6 48 8d 3d 34 6d 01 00 e8 01 f6 ff ff 44 8b 15 b8 83 02 00  .=.m.......1.H.=4m.......D......
0001e780  4c 8b 05 a9 83 02 00 bb 01 00 00 00 45 85 d2 75 13 49 83 78 10 00 75 0c bf 65 00 00 00 31 db e8  L...........E..u.I.x..u..e...1..
0001e7a0  12 f5 ff ff 49 83 78 18 00 41 b9 01 00 00 00 75 2c 49 83 78 20 00 75 0c 45 31 c9 49 83 78 28 00  ....I.x..A.....u,I.x .u.E1.I.x(.
0001e7c0  41 0f 95 c1 45 85 d2 74 05 45 85 c9 74 0c bf 01 00 00 00 e8 de f4 ff ff eb 03 45 31 c9 49 83 78  A...E..t.E..t.............E1.I.x
0001e7e0  20 00 75 0a bf 02 00 00 00 e8 c8 f4 ff ff 49 83 78 28 00 75 0a bf 03 00 00 00 e8 b7 f4 ff ff 41   .u...........I.x(.u...........A
0001e800  bb 01 00 00 00 45 85 d2 75 17 49 83 78 30 00 75 10 45 89 cb bf 05 00 00 00 41 09 db e8 95 f4 ff  .....E..u.I.x0.u.E.......A......
0001e820  ff bf 04 00 00 00 e8 8b f4 ff ff bf 06 00 00 00 e8 81 f4 ff ff 45 85 db 75 0e 48 8d 3d b1 80 01  .....................E..u.H.=...
0001e840  00 31 c0 e8 89 73 fe ff 5b 5d 41 5c e9 b8 7e fe ff                                               .1...s..[]A\..~..

0001e851    void agentaccept(int64_t arg1, int32_t arg2) __noreturn

0001e851  53                 push    rbx {__saved_rbx}
0001e852  89f7               mov     edi, esi
0001e854  31d2               xor     edx, edx  {0x0}
0001e856  31f6               xor     esi, esi  {0x0}
0001e858  e8a36efeff         call    accept
0001e85d  85c0               test    eax, eax
0001e85f  7822               js      0x1e883

0001e861  488d35d8650200     lea     rsi, [rel chan_svr_agent]
0001e868  89c7               mov     edi, eax
0001e86a  89c3               mov     ebx, eax
0001e86c  e88316ffff         call    send_msg_channel_open_init
{ Does not return }

0001e871                                                     85 c0 74 08 89 df 5b e9 c3 6a fe ff 5b e9 d7                   ..t...[..j..[..
0001e880  e8 fe ff                                                                                         ...

0001e883  5b                 pop     rbx {__saved_rbx}
0001e884  e9807efeff         jmp     __x86_return_thunk
{ Does not return }


0001e889    void svr_agentset(void* arg1) __noreturn

0001e889  48837f5000         cmp     qword [rdi+0x50], 0x0
0001e88e  7471               je      0x1e901

0001e890  4154               push    r12 {var_8}
0001e892  55                 push    rbp {var_10}
0001e893  53                 push    rbx {var_18}
0001e894  4889fb             mov     rbx, rdi
0001e897  488b7f60           mov     rdi, qword [rdi+0x60]
0001e89b  e85069feff         call    strlen
0001e8a0  488b7b58           mov     rdi, qword [rbx+0x58]
0001e8a4  4889c5             mov     rbp, rax
0001e8a7  e84469feff         call    strlen
0001e8ac  448d640502         lea     r12d, [rbp+rax+0x2]
0001e8b1  4d63e4             movsxd  r12, r12d
0001e8b4  4c89e7             mov     rdi, r12
0001e8b7  e854cdfeff         call    m_malloc
{ Does not return }

0001e8bc                                                                                      48 83 c9 ff                              H...
0001e8c0  4c 89 e6 ba 01 00 00 00 48 89 c5 50 4c 8d 05 b3 57 01 00 31 c0 ff 73 58 4c 8b 4b 60 48 89 ef e8  L.......H..PL...W..1..sXL.K`H...
0001e8e0  6c 67 fe ff 48 89 ee 48 8d 3d 4b 80 01 00 e8 7a e7 ff ff 5a 48 89 ef 59 5b 5d 41 5c e9 5f 67 fe  lg..H..H.=K....z...ZH..Y[]A\._g.
0001e900  ff                                                                                               .

0001e901  e9037efeff         jmp     __x86_return_thunk
{ Does not return }


0001e906    void svr_agentcleanup(void* arg1) __noreturn

0001e906  4156               push    r14 {__saved_r14}
0001e908  4155               push    r13 {__saved_r13}
0001e90a  4154               push    r12 {__saved_r12}
0001e90c  55                 push    rbp {__saved_rbp}
0001e90d  53                 push    rbx {__saved_rbx}
0001e90e  4889fb             mov     rbx, rdi
0001e911  488b7f50           mov     rdi, qword [rdi+0x50]
0001e915  4885ff             test    rdi, rdi
0001e918  740c               je      0x1e926

0001e91a  e83724ffff         call    remove_listener
0001e91f  4531c0             xor     r8d, r8d  {0x0}
0001e922  4c894350           mov     qword [rbx+0x50], r8  {0x0}

0001e926  48837b5800         cmp     qword [rbx+0x58], 0x0
0001e92b  0f84f1000000       je      0x1ea22

0001e931  48837b6000         cmp     qword [rbx+0x60], 0x0
0001e936  0f84e6000000       je      0x1ea22

0001e93c  e8df68feff         call    getuid
0001e941  4189c6             mov     r14d, eax
0001e944  e8c76bfeff         call    getgid
0001e949  8b3de57f0200       mov     edi, dword [rel data_46934]
0001e94f  4189c5             mov     r13d, eax
0001e952  e8c96efeff         call    setegid
0001e957  85c0               test    eax, eax
0001e959  790c               jns     0x1e967

0001e95b  488d3db5700100     lea     rdi, [rel data_35a17]  {"Failed to set euid"}
0001e962  e98a000000         jmp     0x1e9f1

0001e967  8b3dc37f0200       mov     edi, dword [rel data_46930]
0001e96d  e8fe6efeff         call    seteuid
0001e972  85c0               test    eax, eax
0001e974  78e5               js      0x1e95b

0001e976  488b7b60           mov     rdi, qword [rbx+0x60]
0001e97a  e87168feff         call    strlen
0001e97f  488b7b58           mov     rdi, qword [rbx+0x58]
0001e983  4889c5             mov     rbp, rax
0001e986  e86568feff         call    strlen
0001e98b  448d640502         lea     r12d, [rbp+rax+0x2]
0001e990  4d63e4             movsxd  r12, r12d
0001e993  4c89e7             mov     rdi, r12
0001e996  e875ccfeff         call    m_malloc
{ Does not return }

0001e99b                                                                                   4c 89 e6 ba 01                             L....
0001e9a0  00 00 00 4c 8d 05 dc 56 01 00 51 48 89 c5 48 83 c9 ff 48 89 c7 ff 73 58 4c 8b 4b 60 31 c0 e8 8d  ...L...V..QH..H...H...sXL.K`1...
0001e9c0  66 fe ff 48 89 ef e8 d5 66 fe ff 48 89 ef e8 8d 66 fe ff 48 8b 7b 60 e8 04 68 fe ff 44 89 f7 e8  f..H....f..H....f..H.{`..h..D...
0001e9e0  8c 6e fe ff 5e 5f 85 c0 79 0e 48 8d 3d 7f 70 01 00                                               .n..^_..y.H.=.p..

0001e9f1  31c0               xor     eax, eax  {0x0}
0001e9f3  e8d971feff         call    dropbear_exit
{ Does not return }

0001e9f8                                                                          44 89 ef e8 20 6e fe ff                          D... n..
0001ea00  85 c0 78 e6 48 8b 7b 58 e8 53 66 fe ff 31 c0 48 8b 7b 60 48 89 43 58 e8 44 66 fe ff 31 d2 48 89  ..x.H.{X.Sf..1.H.{`H.CX.Df..1.H.
0001ea20  53 60                                                                                            S`

0001ea22  5b                 pop     rbx {__saved_rbx}
0001ea23  5d                 pop     rbp {__saved_rbp}
0001ea24  415c               pop     r12 {__saved_r12}
0001ea26  415d               pop     r13 {__saved_r13}
0001ea28  415e               pop     r14 {__saved_r14}
0001ea2a  e9da7cfeff         jmp     __x86_return_thunk
{ Does not return }


0001ea2f    void svr_agentreq() __noreturn

0001ea2f  4157               push    r15 {var_8}
0001ea31  4156               push    r14 {var_10}
0001ea33  4155               push    r13 {var_18}
0001ea35  4154               push    r12 {var_20}
0001ea37  55                 push    rbp {var_28}
0001ea38  53                 push    rbx {var_30}
0001ea39  4881ec08010000     sub     rsp, 0x108
0001ea40  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0001ea49  48899c24f8000000   mov     qword [rsp+0xf8 {var_40}], rbx
0001ea51  4889fb             mov     rbx, rdi
0001ea54  c7442418ffffffff   mov     dword [rsp+0x18 {var_120}], 0xffffffff  {0xffffffff}
0001ea5c  e85bd4ffff         call    svr_pubkey_allows_agentfwd
{ Does not return }

0001ea61     85 c0 74 33 48 83 7b 50 00 75 2c 31 d2 be 01 00 00 00 bf 01 00 00 00 e8 e3 6d fe ff 89 44 24   ..t3H.{P.u,1.............m...D$
0001ea80  18 89 c5 85 c0 79 19 8b 7c 24 18 e8 91 73 fe ff 48 89 df e8 6e fe ff ff 83 c8 ff e9 db 01 00 00  .....y..|$...s..H...n...........
0001eaa0  e8 7b 67 fe ff 89 44 24 08 e8 62 6a fe ff 8b 3d 80 7e 02 00 89 44 24 0c e8 63 6d fe ff 85 c0 79  .{g...D$..bj...=.~...D$..cm....y
0001eac0  0c 48 8d 3d 4f 6f 01 00 e9 46 01 00 00 8b 3d 5d 7e 02 00 e8 98 6d fe ff 85 c0 78 e5 4c 8d 74 24  .H.=Oo...F....=]~....m....x.L.t$
0001eae0  22 b9 1b 00 00 00 31 c0 66 c7 44 24 20 01 00 4c 89 f7 41 bd 14 00 00 00 4c 8d 7c 24 1c f3 ab be  ".....1.f.D$ ..L..A.....L.|$....
0001eb00  04 00 00 00 4c 89 ff 4c 8d a4 24 8e 00 00 00 e8 d6 98 fe ff 44 8b 4c 24 1c 4c 89 e7 31 c0 be 35  ....L..L..$.........D.L$.L..1..5
0001eb20  00 00 00 b9 35 00 00 00 ba 01 00 00 00 4c 8d 05 13 7e 01 00 e8 17 65 fe ff be c0 01 00 00 4c 89  ....5........L...~....e.......L.
0001eb40  e7 e8 ba 65 fe ff 85 c0 0f 85 84 00 00 00 4c 89 ff be 04 00 00 00 4c 8d ac 24 c3 00 00 00 e8 87  ...e..........L.......L..$......
0001eb60  98 fe ff 4c 8d 05 f0 7d 01 00 b9 35 00 00 00 4c 89 ef 50 ba 01 00 00 00 be 35 00 00 00 31 c0 55  ...L...}...5...L..P......5...1.U
0001eb80  44 8b 4c 24 2c e8 c6 64 fe ff 4c 8d 7c 24 30 4d 89 e1 4c 89 f7 b9 6c 00 00 00 ba 01 00 00 00 31  D.L$,..d..L.|$0M..L...l........1
0001eba0  c0 4c 89 2c 24 4c 8d 05 da 54 01 00 be 6c 00 00 00 e8 9a 64 fe ff ba 6e 00 00 00 89 ef 4c 89 fe  .L.,$L...T...l.....d...n.....L..
0001ebc0  e8 4b 6a fe ff 5a 59 89 c5 85 c0 74 1a 83 cd ff eb 2d e8 b9 64 fe ff 83 38 11 75 f1 41 ff cd 0f  .Kj..ZY....t.....-..d...8.u.A...
0001ebe0  85 1a ff ff ff eb e6 4c 89 e7 e8 69 ca fe ff 4c 89 ef 48 89 43 60 e8 5d ca fe ff 48 89 43 58 8b  .......L...i...L..H.C`.]...H.CX.
0001ec00  7c 24 08 e8 68 6c fe ff 85 c0 79 0e 48 8d 3d 5d 6e 01 00 31 c0 e8 b7 6f fe ff 8b 7c 24 0c e8 fd  |$..hl....y.H.=]n..1...o...|$...
0001ec20  6b fe ff 85 c0 78 e5 ff c5 8b 7c 24 18 0f 84 54 fe ff ff be 14 00 00 00 e8 23 69 fe ff 8b 7c 24  k....x....|$...T.........#i...|$
0001ec40  18 85 c0 0f 88 3e fe ff ff e8 3b 74 fe ff 48 8d 7c 24 18 45 31 c9 48 89 d9 4c 8d 05 f1 fb ff ff  .....>....;t..H.|$.E1.H..L......
0001ec60  31 d2 be 01 00 00 00 e8 71 1f ff ff 48 89 43 50 48 85 c0 0f 84 0e fe ff ff 31 c0 48 8b 94 24 f8  1.......q...H.CPH........1.H..$.
0001ec80  00 00 00 64 48 2b 14 25 28 00 00 00 74 05 e8 7d 65 fe ff 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d  ...dH+.%(...t..}e..H......[]A\A]
0001eca0  41 5e 41 5f e9 60 7a fe ff                                                                       A^A_.`z..

0001eca9    void sigintterm_handler() __noreturn

0001eca9  c705e57c02000100…  mov     dword [rel data_46998], 0x1
0001ecb3  e9517afeff         jmp     __x86_return_thunk
{ Does not return }


0001ecb8    void commonsetup() __noreturn

0001ecb8  53                 push    rbx {var_8}
0001ecb9  4881eca0000000     sub     rsp, 0xa0
0001ecc0  64488b0425280000…  mov     rax, qword [fs:0x28]
0001ecc9  4889842498000000   mov     qword [rsp+0x98 {var_10}], rax
0001ecd1  31c0               xor     eax, eax  {0x0}
0001ecd3  833d067d020000     cmp     dword [rel data_469e0], 0x0
0001ecda  740c               je      0x1ece8  {data_469e0}

0001ecdc  488d3d9b7c0100     lea     rdi, [rel data_3697e]  {"dropbear"}
0001ece3  e8356efeff         call    startsyslog

0001ece8  488d1dbaffffff     lea     rbx, [rel sigintterm_handler]
0001ecef  bf02000000         mov     edi, 0x2
0001ecf4  4889de             mov     rsi, rbx  {sigintterm_handler}
0001ecf7  e82467feff         call    signal
0001ecfc  48ffc0             inc     rax
0001ecff  7426               je      0x1ed27

0001ed01  4889de             mov     rsi, rbx  {sigintterm_handler}
0001ed04  bf0f000000         mov     edi, 0xf
0001ed09  e81267feff         call    signal
0001ed0e  48ffc0             inc     rax
0001ed11  7414               je      0x1ed27

0001ed13  be01000000         mov     esi, 0x1
0001ed18  bf0d000000         mov     edi, 0xd
0001ed1d  e8fe66feff         call    signal
0001ed22  48ffc0             inc     rax
0001ed25  750e               jne     0x1ed35

0001ed27  488d3d18530100     lea     rdi, [rel data_34046]  {"signal() error"}
0001ed2e  31c0               xor     eax, eax  {0x0}
0001ed30  e89c6efeff         call    dropbear_exit
{ Does not return }

0001ed35  488d0529010000     lea     rax, [rel sigchld_handler]
0001ed3c  488d7c2408         lea     rdi, [rsp+0x8 {set}]
0001ed41  c784248800000001…  mov     dword [rsp+0x88 {var_20_1}], 0x1
0001ed4c  48890424           mov     qword [rsp {act}], rax  {sigchld_handler, "ATUSH"}
0001ed50  e81b67feff         call    sigemptyset
0001ed55  31d2               xor     edx, edx  {0x0}
0001ed57  4889e6             mov     rsi, rsp {act}
0001ed5a  bf11000000         mov     edi, 0x11
0001ed5f  e8bc63feff         call    sigaction
0001ed64  85c0               test    eax, eax
0001ed66  78bf               js      0x1ed27

0001ed68  488d35d5000000     lea     rsi, [rel sigsegv_handler]
0001ed6f  bf0b000000         mov     edi, 0xb
0001ed74  e8a766feff         call    signal
0001ed79  48ffc0             inc     rax
0001ed7c  74a9               je      0x1ed27

0001ed7e  e812affeff         call    crypto_init
{ Does not return }

0001ed83           e8 82 f9 ff ff 48 8b 84 24 98 00 00 00 64 48 2b 04 25 28 00 00 00 74 05 e8 70 64 fe ff     .....H..$....dH+.%(...t..pd..
0001eda0  48 81 c4 a0 00 00 00 5b e9 5c 79 fe ff                                                           H......[.\y..

0001edad    void main_inetd() __noreturn

0001edad  4883ec28           sub     rsp, 0x28
0001edb1  31c9               xor     ecx, ecx  {0x0}
0001edb3  64488b0425280000…  mov     rax, qword [fs:0x28]
0001edbc  4889442418         mov     qword [rsp+0x18 {var_10}], rax
0001edc1  31c0               xor     eax, eax  {0x0}
0001edc3  48894c2410         mov     qword [rsp+0x10 {var_18}], rcx  {0x0}
0001edc8  e8ebfeffff         call    commonsetup
{ Does not return }

0001edcd                                         e8 11 97 fe ff 83 3d 23 7d 02 00 00 79 5c 45 31 c9 4c 8d               ......=#}...y\E1.L.
0001ede0  44 24 10 48 8d 4c 24 08 31 d2 31 f6 31 ff e8 37 35 ff ff 48 8b 54 24 08 48 8b 4c 24 10 31 c0 48  D$.H.L$.1.1.1..75..H.T$.H.L$.1.H
0001ee00  8d 35 81 7b 01 00 bf 06 00 00 00 e8 7b 6e fe ff 48 8b 7c 24 08 e8 46 62 fe ff 48 8b 7c 24 10 31  .5.{........{n..H.|$..Fb..H.|$.1
0001ee20  c0 48 89 44 24 08 e8 35 62 fe ff 31 d2 48 89 54 24 10 e8 39 65 fe ff 8b 35 bf 7c 02 00 31 ff e8  .H.D$..5b..1.H.T$..9e...5.|..1..
0001ee40  13 d7 ff ff                                                                                      ....

0001ee44    void sigsegv_handler() __noreturn

0001ee44  50                 push    rax {var_8}
0001ee45  bf02000000         mov     edi, 0x2
0001ee4a  ba4a000000         mov     edx, 0x4a
0001ee4f  488d354d7b0100     lea     rsi, [rel data_369a3]  {"Aiee, segfault! You should proba…"}
0001ee56  e8256afeff         call    write
0001ee5b  bf01000000         mov     edi, 0x1
0001ee60  e86b62feff         call    _exit
{ Does not return }


0001ee65    void sigchld_handler() __noreturn

0001ee65  4154               push    r12 {__saved_r12}
0001ee67  55                 push    rbp {__saved_rbp}
0001ee68  53                 push    rbx {__saved_rbx}
0001ee69  4881eca0000000     sub     rsp, 0xa0
0001ee70  64488b0425280000…  mov     rax, qword [fs:0x28]
0001ee79  4889842498000000   mov     qword [rsp+0x98 {var_20}], rax
0001ee81  31c0               xor     eax, eax  {0x0}
0001ee83  e80862feff         call    __errno_location
0001ee88  8b28               mov     ebp, dword [rax]
0001ee8a  4889c3             mov     rbx, rax

0001ee8d  31f6               xor     esi, esi  {0x0}
0001ee8f  83cfff             or      edi, 0xffffffff  {0xffffffff}
0001ee92  ba01000000         mov     edx, 0x1
0001ee97  e8e467feff         call    waitpid
0001ee9c  85c0               test    eax, eax
0001ee9e  7fed               jg      0x1ee8d

0001eea0  488d05beffffff     lea     rax, [rel sigchld_handler]
0001eea7  488d7c2408         lea     rdi, [rsp+0x8 {set}]
0001eeac  c784248800000001…  mov     dword [rsp+0x88 {var_30}], 0x1
0001eeb7  48890424           mov     qword [rsp {act}], rax  {sigchld_handler, "ATUSH"}
0001eebb  e8b065feff         call    sigemptyset
0001eec0  31d2               xor     edx, edx  {0x0}
0001eec2  4889e6             mov     rsi, rsp {act}
0001eec5  bf11000000         mov     edi, 0x11
0001eeca  e85162feff         call    sigaction
0001eecf  85c0               test    eax, eax
0001eed1  790e               jns     0x1eee1

0001eed3  488d3d6c510100     lea     rdi, [rel data_34046]  {"signal() error"}
0001eeda  31c0               xor     eax, eax  {0x0}
0001eedc  e8f06cfeff         call    dropbear_exit
{ Does not return }

0001eee1  892b               mov     dword [rbx], ebp
0001eee3  488b842498000000   mov     rax, qword [rsp+0x98 {var_20}]
0001eeeb  64482b0425280000…  sub     rax, qword [fs:0x28]
0001eef4  7405               je      0x1eefb

0001eef6  e81563feff         call    __stack_chk_fail
{ Does not return }

0001eefb  4881c4a0000000     add     rsp, 0xa0
0001ef02  5b                 pop     rbx {__saved_rbx}
0001ef03  5d                 pop     rbp {__saved_rbp}
0001ef04  415c               pop     r12 {__saved_r12}
0001ef06  e9fe77feff         jmp     __x86_return_thunk
{ Does not return }


0001ef0b    void main_noinetd.constprop.0() __noreturn

0001ef0b  4157               push    r15 {var_8}
0001ef0d  4c8d3d2c7b0200     lea     r15, [rel svr_opts]
0001ef14  4156               push    r14 {var_10}
0001ef16  4531f6             xor     r14d, r14d  {0x0}
0001ef19  4155               push    r13 {var_18}
0001ef1b  4154               push    r12 {var_20}
0001ef1d  55                 push    rbp {var_28}
0001ef1e  53                 push    rbx {var_30}
0001ef1f  31db               xor     ebx, ebx  {0x0}
0001ef21  4881ec68030000     sub     rsp, 0x368
0001ef28  897c2410           mov     dword [rsp+0x10 {var_388}], edi
0001ef2c  4c8da424e0000000   lea     r12, [rsp+0xe0 {var_2b8}]
0001ef34  4c8dac2458020000   lea     r13, [rsp+0x258 {var_140}]
0001ef3c  4889742418         mov     qword [rsp+0x18 {var_380}], rsi
0001ef41  64488b0425280000…  mov     rax, qword [fs:0x28]
0001ef4a  4889842458030000   mov     qword [rsp+0x358 {var_40}], rax
0001ef52  31c0               xor     eax, eax  {0x0}
0001ef54  c7442444ffffffff   mov     dword [rsp+0x44 {var_354}], 0xffffffff  {0xffffffff}
0001ef5c  e857fdffff         call    commonsetup
{ Does not return }

0001ef61     b0 ff b9 78 00 00 00 4c 89 e7 f3 aa b9 3c 00 00 00 31 c0 4c 89 ef f3 ab 31 f6 48 89 74 24 58   ...x...L.....<...1.L....1.H.t$X
0001ef80  44 3b 35 19 7b 02 00 48 8d 6c 24 68 0f 83 aa 00 00 00 49 8b 77 10 49 8b 7f 68 50 48 8d 6c 9d 00  D;5.{..H.l$h......I.w.I..hPH.l..
0001efa0  ff 35 e2 7b 02 00 b9 1e 00 00 00 48 89 ea 29 d9 4c 8d 4c 24 54 4c 8d 44 24 68 e8 5c 2f ff ff 5a  .5.{.......H..).L.L$TL.D$h.\/..Z
0001efc0  31 d2 59 85 c0 79 30 49 8b 57 10 48 8b 4c 24 58 bf 04 00 00 00 31 c0 48 8d 35 10 7a 01 00 e8 a8  1.Y..y0I.W.H.L$X.....1.H.5.z....
0001efe0  6c fe ff 48 8b 7c 24 58 e8 73 60 fe ff 45 31 db 4c 89 5c 24 58 eb 39 39 c2 73 30 8b 7c 95 00 be  l..H.|$X.s`..E1.L.\$X.99.s0.|...
0001f000  01 00 00 00 89 44 24 14 48 89 54 24 08 89 3c 24 e8 68 2a ff ff 8b 3c 24 e8 0c 2a ff ff 48 8b 54  .....D$.H.T$..<$.h*...<$..*..H.T
0001f020  24 08 8b 44 24 14 48 ff c2 eb cc 48 98 48 01 c3 41 ff c6 49 83 c7 08 e9 44 ff ff ff 45 31 f6 48  $..D$.H....H.H..A..I....D...E1.H
0001f040  8d 3d c5 79 01 00 48 85 db 0f 84 be 01 00 00 4a 63 7c b5 00 e8 f7 61 fe ff 42 8b 4c b5 00 ba 01  .=.y..H........Jc|....a..B.L....
0001f060  00 00 00 49 ff c6 48 d3 e2 48 09 94 c4 58 01 00 00 49 39 de 75 d9 48 8b 44 24 18 be 00 00 08 00  ...I..H..H...X...I9.u.H.D$......
0001f080  48 8b 38 31 c0 e8 56 66 fe ff 83 3d b7 79 02 00 00 89 44 24 14 74 43 31 f6 83 3d 40 79 02 00 00  H.81..Vf...=.y....D$.tC1..=@y...
0001f0a0  40 0f 94 c6 31 ff e8 c5 64 fe ff 85 c0 79 1b e8 dc 5f fe ff 8b 38 e8 15 67 fe ff 48 8d 3d 67 79  @...1...d....y..._...8..g..H.=gy
0001f0c0  01 00 48 89 c6 e9 9e 03 00 00 83 3d 77 79 02 00 00 48 8d 35 69 79 01 00 75 07 48 8d 35 76 79 01  ..H........=wy...H.5iy..u.H.5vy.
0001f0e0  00 bf 06 00 00 00 31 c0 e8 9e 6b fe ff 48 8b 3d 7c 7a 02 00 48 8d 35 31 5c 01 00 e8 f0 65 fe ff  ......1...k..H.=|z..H.51\....e..
0001f100  49 89 c6 48 85 c0 74 25 e8 63 60 fe ff 4c 89 f7 be 01 00 00 00 48 8d 15 4d 79 01 00 89 c1 31 c0  I..H..t%.c`..L.......H..My....1.
0001f120  e8 5b 66 fe ff 4c 89 f7 e8 73 60 fe ff 48 8d 84 24 58 01 00 00 b9 20 00 00 00 45 31 ff 48 89 04  .[f..L...s`..H..$X.... ...E1.H..
0001f140  24 48 8b 3c 24 31 c0 f3 ab 4a 63 7c bd 00 e8 fd 60 fe ff 42 8b 4c bd 00 ba 01 00 00 00 49 ff c7  $H.<$1...Jc|....`..B.L.......I..
0001f160  48 d3 e2 48 09 94 c4 58 01 00 00 49 39 df 75 d9 45 31 f6 47 8b 3c b4 45 85 ff 78 2a 49 63 ff e8  H..H...X...I9.u.E1.G.<.E..x*Ic..
0001f180  cc 60 fe ff ba 01 00 00 00 44 89 f9 48 d3 e2 48 09 94 c4 58 01 00 00 8b 44 24 44 44 39 f8 41 0f  .`.......D..H..H...X....D$DD9.A.
0001f1a0  4c c7 89 44 24 44 49 ff c6 49 83 fe 1e 75 c4 8b 44 24 44 48 8b 34 24 45 31 c0 31 c9 31 d2 8d 78  L..D$DI..I...u..D$DH.4$E1.1.1..x
0001f1c0  01 e8 5a 63 fe ff 41 89 c6 8b 05 c9 77 02 00 85 c0 74 1a 48 8b 3d 96 79 02 00 e8 c1 5e fe ff 48  ..Zc..A.....w....t.H.=.y....^..H
0001f1e0  8d 3d 0b 56 01 00 31 c0 e8 3f 69 fe ff 45 85 f6 0f 84 37 ff ff ff 79 1c e8 93 5e fe ff 83 38 04  .=.V..1..?i..E....7...y...^...8.
0001f200  0f 84 27 ff ff ff 48 8d 3d 60 78 01 00 31 c0 e8 bd 69 fe ff 45 31 ff 41 be 01 00 00 00 43 8b 0c  ..'...H.=`x..1...i..E1.A.....C..
0001f220  bc 85 c9 78 42 48 63 f9 89 0c 24 e8 20 60 fe ff 8b 0c 24 48 89 c2 4c 89 f0 48 d3 e0 48 23 84 d4  ...xBHc...$. `....$H..L..H..H#..
0001f240  58 01 00 00 74 21 89 cf e8 d4 6b fe ff 4b 8b 7c fd 00 43 c7 04 bc ff ff ff ff e8 01 5e fe ff 45  X...t!....k..K.|..C.........^..E
0001f260  31 d2 4f 89 54 fd 00 49 ff c7 49 83 ff 1e 75 ad 45 31 f6 4a 63 7c b5 00 45 31 c0 45 31 c9 4c 89  1.O.T..I..I...u.E1.Jc|..E1.E1.L.
0001f280  44 24 50 4c 89 44 24 58 44 89 4c 24 48 e8 be 5f fe ff 42 8b 7c b5 00 48 89 c2 b8 01 00 00 00 89  D$PL.D$XD.L$H.._..B.|..H........
0001f2a0  f9 48 d3 e0 48 23 84 d4 58 01 00 00 0f 84 06 03 00 00 48 8d 84 24 d8 01 00 00 48 8d 54 24 4c c7  .H..H#..X.........H..$....H.T$L.
0001f2c0  44 24 4c 80 00 00 00 48 89 c6 48 89 44 24 08 e8 2c 64 fe ff 89 04 24 85 c0 0f 88 d9 02 00 00 48  D$L....H..H.D$..,d....$........H
0001f2e0  8b 7c 24 08 31 c9 31 d2 48 8d 74 24 50 45 31 ff e8 68 2f ff ff 48 8b 44 24 50 31 d2 31 c9 45 31  .|$.1.1.H.t$PE1..h/..H.D$P1.1.E1
0001f300  c0 48 89 44 24 20 41 83 3c 94 00 78 39 49 8b 74 d5 00 48 8b 7c 24 20 49 ff c0 48 89 4c 24 38 4c  .H.D$ A.<..x9I.t..H.|$ I..H.L$8L
0001f320  89 44 24 30 48 89 54 24 28 e8 e2 60 fe ff 48 8b 4c 24 38 48 8b 54 24 28 83 f8 01 4c 8b 44 24 30  .D$0H.T$(..`..H.L$8H.T$(...L.D$0
0001f340  48 83 d1 00 eb 03 49 89 d7 48 ff c2 48 83 fa 1e 75 b4 49 83 f8 1d 0f 87 45 02 00 00 48 83 f9 04  H.....I..H..H...u.I.....E...H...
0001f360  0f 87 3b 02 00 00 e8 78 91 fe ff 48 8d 7c 24 60 e8 db 5f fe ff 85 c0 0f 88 24 02 00 00 e8 ae 64  ..;....x...H.|$`.._......$.....d
0001f380  fe ff 89 44 24 48 85 c0 79 27 e8 01 5d fe ff 8b 38 e8 3a 64 fe ff 48 8d 35 e7 76 01 00 bf 04 00  ...D$H..y'..]...8.:d..H.5.v.....
0001f3a0  00 00 48 89 c2 31 c0 e8 df 68 fe ff e9 f0 01 00 00 48 8d 7c 24 48 be 04 00 00 00 e8 a1 8f fe ff  ..H..1...h.......H.|$H..........
0001f3c0  83 7c 24 48 00 7e 2e 8b 44 24 60 8b 7c 24 64 42 89 84 bc e0 00 00 00 e8 45 6a fe ff 48 8b 44 24  .|$H.~..D$`.|$dB........Ej..H.D$
0001f3e0  50 31 ff 48 89 7c 24 50 4a 89 84 fc 58 02 00 00 e9 ac 01 00 00 48 8b 7c 24 08 48 8d 54 24 58 31  P1.H.|$PJ...X........H.|$.H.T$X1
0001f400  c9 31 f6 31 ed e8 53 2e ff ff 48 8b 54 24 50 48 8b 4c 24 58 31 c0 48 8d 35 6a 75 01 00 bf 06 00  .1.1..S...H.T$PH.L$X1.H.5ju.....
0001f420  00 00 e8 64 68 fe ff 48 8b 7c 24 50 e8 2f 5c fe ff 48 8b 7c 24 58 31 c9 48 89 4c 24 50 e8 1e 5c  ...dh..H.|$P./\..H.|$X1.H.L$P..\
0001f440  fe ff 31 f6 48 89 74 24 58 e8 22 5f fe ff 85 c0 79 1d e8 39 5c fe ff 8b 38 e8 72 63 fe ff 48 8d  ..1.H.t$X."_....y..9\...8.rc..H.
0001f460  3d 31 76 01 00 48 89 c6 31 c0 e8 62 67 fe ff 8b 7c ac 68 48 ff c5 e8 a6 69 fe ff 48 39 dd 72 ef  =1v..H..1..bg...|.hH....i..H9.r.
0001f480  8b 7c 24 60 e8 98 69 fe ff 83 7c 24 14 00 0f 88 01 01 00 00 8b 44 24 10 48 8d ac 24 4e 03 00 00  .|$`..i...|$.........D$.H..$N...
0001f4a0  8d 78 04 48 63 ff 48 c1 e7 03 e8 61 c1 fe ff 48 8b 74 24 18 ba 01 00 00 00 4c 8d 05 f6 5b 01 00  .x.Hc.H....a...H.t$......L...[..
0001f4c0  48 89 c3 48 63 44 24 10 48 89 df 48 8d 0c c5 00 00 00 00 f3 a4 48 8d 0d f1 73 01 00 be 0a 00 00  H..HcD$.H..H.........H...s......
0001f4e0  00 48 89 ef 48 89 0c c3 31 c0 b9 0a 00 00 00 44 8b 4c 24 64 e8 57 5b fe ff 8b 44 24 10 31 d2 8b  .H..H...1......D.L$d.W[...D$.1..
0001f500  3c 24 31 f6 ff c0 48 98 48 89 2c c3 8b 44 24 10 83 c0 02 48 98 48 89 14 c3 e8 12 5d fe ff 85 c0  <$1...H.H.,..D$....H.H.....]....
0001f520  79 1b e8 69 5b fe ff 8b 38 e8 a2 62 fe ff 48 8d 3d 6c 75 01 00 48 89 c6 e9 2b ff ff ff 8b 3c 24  y..i[...8..b..H.=lu..H...+....<$
0001f540  ba 01 00 00 00 be 02 00 00 00 31 c0 e8 ff 5b fe ff 48 8b 15 a8 71 02 00 8b 7c 24 14 48 89 de e8  ..........1...[..H...q...|$.H...
0001f560  dc 5e fe ff e8 27 5b fe ff 8b 38 e8 60 62 fe ff 48 8d 35 3a 75 01 00 bf 04 00 00 00 48 89 c2 31  .^...'[...8.`b..H.5:u.......H..1
0001f580  c0 e8 05 67 fe ff 31 ff e8 94 68 fe ff 48 89 df e8 cb 5a fe ff 8b 74 24 64 8b 3c 24 e8 b6 cf ff  ...g..1...h..H....Z...t$d.<$....
0001f5a0  ff 8b 3c 24 e8 78 68 fe ff 48 8b 7c 24 50 48 85 ff 74 05 e8 a8 5a fe ff 49 ff c6 49 39 de 0f 85  ..<$.xh..H.|$PH..t...Z..I..I9...
0001f5c0  af fc ff ff e9 64 fb ff ff                                                                       .....d...

0001f5c9    void matchtcp(void* arg1, void* arg2) __noreturn

0001f5c9  8b5618             mov     edx, dword [rsi+0x18]
0001f5cc  31c0               xor     eax, eax  {0x0}
0001f5ce  395718             cmp     dword [rdi+0x18], edx
0001f5d1  7526               jne     0x1f5f9

0001f5d3  488b4e30           mov     rcx, qword [rsi+0x30]
0001f5d7  48394f30           cmp     qword [rdi+0x30], rcx
0001f5db  751c               jne     0x1f5f9

0001f5dd  50                 push    rax {var_8}  {0x0}
0001f5de  488b7610           mov     rsi, qword [rsi+0x10]
0001f5e2  488b7f10           mov     rdi, qword [rdi+0x10]
0001f5e6  e8255efeff         call    strcmp
0001f5eb  5a                 pop     rdx {var_8}  {0x0}
0001f5ec  85c0               test    eax, eax
0001f5ee  0f94c0             sete    al
0001f5f1  0fb6c0             movzx   eax, al
0001f5f4  e91071feff         jmp     __x86_return_thunk
{ Does not return }

0001f5f9  e90b71feff         jmp     __x86_return_thunk
{ Does not return }


0001f5fe    void newtcpdirect() __noreturn

0001f5fe  4156               push    r14 {__saved_r14}
0001f600  4155               push    r13 {__saved_r13}
0001f602  4154               push    r12 {__saved_r12}
0001f604  55                 push    rbp {__saved_rbp}
0001f605  53                 push    rbx {__saved_rbx}
0001f606  4883ec30           sub     rsp, 0x30
0001f60a  64488b0425280000…  mov     rax, qword [fs:0x28]
0001f613  4889442428         mov     qword [rsp+0x28 {var_30}], rax
0001f618  31c0               xor     eax, eax  {0x0}
0001f61a  833d0b75020000     cmp     dword [rel data_46b2c], 0x0
0001f621  740f               je      0x1f632  {data_46b2c}

0001f623  bd01000000         mov     ebp, 0x1
0001f628  4531e4             xor     r12d, r12d
0001f62b  31db               xor     ebx, ebx
0001f62d  e9eb000000         jmp     0x1f71d

0001f632  4989fe             mov     r14, rdi
0001f635  e8a1c8ffff         call    svr_pubkey_allows_tcpfwd
{ Does not return }

0001f63a                                                                                85 c0 74 e5 48 8b                            ..t.H.
0001f640  3d b3 71 02 00 48 8d 6c 24 04 48 89 ee e8 77 73 fe ff 81 7c 24 04 fe 00 00 00 48 89 c3 0f 87 b2  =.q..H.l$.H...ws...|$.....H.....
0001f660  00 00 00 48 8b 3d 8e 71 02 00 e8 27 73 fe ff 48 8b 3d 82 71 02 00 48 89 ee 41 89 c5 e8 48 73 fe  ...H.=.q...'s..H.=.q..H..A...Hs.
0001f680  ff 81 7c 24 04 fe 00 00 00 49 89 c4 76 0a bd 01 00 00 00 e9 85 00 00 00 48 8b 3d 59 71 02 00 bd  ..|$.....I..v...........H.=Yq...
0001f6a0  01 00 00 00 e8 ed 72 fe ff 44 09 e8 3d ff ff 00 00 77 6a 44 89 ee 48 89 df e8 79 c8 ff ff 85 c0  ......r..D..=....wjD..H...y.....
0001f6c0  74 cc 48 8d 6c 24 08 45 89 e9 b9 20 00 00 00 31 c0 48 89 ef ba 01 00 00 00 be 20 00 00 00 4c 8d  t.H.l$.E... ...1.H........ ...L.
0001f6e0  05 23 52 01 00 e8 66 59 fe ff 4c 89 f1 48 89 ee 45 31 c9 50 48 8d 15 c3 02 ff ff 45 31 c0 48 89  .#R...fY..L..H..E1.PH......E1.H.
0001f700  df 6a 00 bd 63 00 00 00 e8 7a 1e ff ff 49 89 46 60 5a 59 eb 08 bd 01 00 00 00 45 31 e4           .j..c....z...I.F`ZY.......E1.

0001f71d  4889df             mov     rdi, rbx  {0x0}
0001f720  e83b59feff         call    free
0001f725  4c89e7             mov     rdi, r12  {0x0}
0001f728  e83359feff         call    free
0001f72d  488b442428         mov     rax, qword [rsp+0x28 {var_30}]
0001f732  64482b0425280000…  sub     rax, qword [fs:0x28]
0001f73b  7405               je      0x1f742

0001f73d  e8ce5afeff         call    __stack_chk_fail
{ Does not return }

0001f742  4883c430           add     rsp, 0x30
0001f746  89e8               mov     eax, ebp  {0x1}
0001f748  5b                 pop     rbx {__saved_rbx}
0001f749  5d                 pop     rbp {__saved_rbp}
0001f74a  415c               pop     r12 {__saved_r12}
0001f74c  415d               pop     r13 {__saved_r13}
0001f74e  415e               pop     r14 {__saved_r14}
0001f750  e9b46ffeff         jmp     __x86_return_thunk
{ Does not return }


0001f755    void newstreamlocal() __noreturn

0001f755  4154               push    r12 {__saved_r12}
0001f757  55                 push    rbp {__saved_rbp}
0001f758  53                 push    rbx {__saved_rbx}
0001f759  4883ec10           sub     rsp, 0x10
0001f75d  64488b0425280000…  mov     rax, qword [fs:0x28]
0001f766  4889442408         mov     qword [rsp+0x8 {var_20}], rax
0001f76b  31c0               xor     eax, eax  {0x0}
0001f76d  833db873020000     cmp     dword [rel data_46b2c], 0x0
0001f774  740a               je      0x1f780  {data_46b2c}

0001f776  41bc01000000       mov     r12d, 0x1
0001f77c  31db               xor     ebx, ebx
0001f77e  eb4e               jmp     0x1f7ce

0001f780  4889fd             mov     rbp, rdi
0001f783  e853c7ffff         call    svr_pubkey_allows_tcpfwd
{ Does not return }

0001f788                          85 c0 74 ea 48 8b 3d 65 70 02 00 48 8d 74 24 04 41 bc 01 00 00 00 e8 26          ..t.H.=ep..H.t$.A......&
0001f7a0  72 fe ff 81 7c 24 04 fe 00 00 00 48 89 c3 77 1e 48 8d 35 07 02 ff ff 31 c9 48 89 ea 48 89 c7 41  r...|$.....H..w.H.5....1.H..H..A
0001f7c0  bc 63 00 00 00 e8 13 1f ff ff 48 89 45 60                                                        .c........H.E`

0001f7ce  4889df             mov     rdi, rbx  {0x0}
0001f7d1  e88a58feff         call    free
0001f7d6  488b442408         mov     rax, qword [rsp+0x8 {var_20}]
0001f7db  64482b0425280000…  sub     rax, qword [fs:0x28]
0001f7e4  7405               je      0x1f7eb

0001f7e6  e8255afeff         call    __stack_chk_fail
{ Does not return }

0001f7eb  4883c410           add     rsp, 0x10
0001f7ef  4489e0             mov     eax, r12d  {0x1}
0001f7f2  5b                 pop     rbx {__saved_rbx}
0001f7f3  5d                 pop     rbp {__saved_rbp}
0001f7f4  415c               pop     r12 {__saved_r12}
0001f7f6  e90e6ffeff         jmp     __x86_return_thunk
{ Does not return }


0001f7fb    void recv_msg_global_request_remotetcp() __noreturn

0001f7fb  4156               push    r14 {var_8}
0001f7fd  4155               push    r13 {var_10}
0001f7ff  4154               push    r12 {var_18}
0001f801  55                 push    rbp {var_20}
0001f802  53                 push    rbx {var_28}
0001f803  4883ec50           sub     rsp, 0x50
0001f807  488b3dea6f0200     mov     rdi, qword [rel data_467f8]
0001f80e  64488b3425280000…  mov     rsi, qword [fs:0x28]
0001f817  4889742448         mov     qword [rsp+0x48 {var_30}], rsi
0001f81c  4889e6             mov     rsi, rsp {var_78}
0001f81f  e8a571feff         call    buf_getstring
{ Does not return }

0001f824              48 8b 3d cd 6f 02 00 49 89 c5 e8 d1 70 fe ff 83 3d ee 72 02 00 00 41 89 c6 0f 85 f5      H.=.o..I....p...=.r...A.....
0001f840  01 00 00 e8 93 c6 ff ff 85 c0 0f 84 e8 01 00 00 83 3c 24 40 0f 87 de 01 00 00 4c 89 ee 48 8d 3d  .................<$@......L..H.=
0001f860  83 72 01 00 e8 a7 5b fe ff 85 c0 0f 85 2e 01 00 00 48 8b 3d 80 6f 02 00 45 31 c0 48 8d 74 24 04  .r....[..........H.=.o..E1.H.t$.
0001f880  4c 89 44 24 08 e8 3f 71 fe ff 81 7c 24 04 fe 00 00 00 48 89 c5 76 07 31 db e9 ec 00 00 00 48 8b  L.D$..?q...|$.....H..v.1......H.
0001f8a0  3d 53 6f 02 00 e8 ec 70 fe ff 41 89 c4 85 c0 74 1c 8d 40 ff 3d fe ff 00 00 77 dc 83 3d d2 70 02  =So....p..A....t..@.=....w..=.p.
0001f8c0  00 00 75 09 41 81 fc ff 03 00 00 76 ca bf 40 00 00 00 e8 39 bd fe ff 31 f6 31 ff 44 89 60 18 48  ..u.A......v..@....9...1.1.D.`.H
0001f8e0  89 c3 45 31 e4 83 3d d8 70 02 00 00 48 89 30 89 78 08 48 8d 05 07 56 02 00 48 89 43 30 48 8b 05  ..E1..=.p...H.0.x.H...V..H.C0H..
0001f900  84 72 02 00 c7 43 38 01 00 00 00 48 89 43 28 48 89 6b 20 74 1e 48 8d 35 11 57 01 00 48 89 ef e8  .r...C8....H.C(H.k t.H.5.W..H...
0001f920  ec 5a fe ff 85 c0 74 0b 48 89 ef e8 28 bd fe ff 49 89 c4 4c 89 63 10 48 8d 74 24 08 48 89 df e8  .Z....t.H...(...I..L.c.H.t$.H...
0001f940  85 10 ff ff 85 c0 75 3a 48 8b 44 24 08 8b 38 e8 04 25 ff ff 48 8b 3d 6d 6e 02 00 be 51 00 00 00  ......u:H.D$..8..%..H.=mn...Q...
0001f960  89 43 18 89 c5 e8 ab 6f fe ff                                                                    .C.....o..

0001f96a    void sub_1f96a(int32_t arg1 @ rbp) __noreturn

0001f96a  488b3d576e0200     mov     rdi, qword [rel data_467c8]
0001f971  89ee               mov     esi, ebp
0001f973  e8f270feff         call    buf_putint
{ Does not return }

0001f978                                                                          e8 dd d7 fe ff e9 c0 00                          ........
0001f980  00 00 ff c0 0f 85 ae 00 00 00 48 89 ef e8 ce 56 fe ff 48 89 df e8 c6 56 fe ff e9 99 00 00 00 4c  ..........H....V..H....V.......L
0001f9a0  89 ee 48 8d 3d 37 71 01 00 e8 62 5a fe ff 89 c3 85 c0 0f 85 80 00 00 00 48 8b 3d 39 6e 02 00 48  ..H.=7q...bZ............H.=9n..H
0001f9c0  8d 74 24 04 e8 00 70 fe ff 81 7c 24 04 fe 00 00 00 48 89 c5 76 05 83 cb ff eb 45 48 8b 3d 16 6e  .t$...p...|$.....H..v.....EH.=.n
0001f9e0  02 00 e8 af 6f fe ff 31 d2 31 c9 bf 67 2c 61 43 48 89 54 24 08 48 8d 74 24 08 48 8d 15 c8 fb ff  ....o..1.1..g,aCH.T$.H.t$.H.....
0001fa00  ff 89 4c 24 10 48 89 6c 24 18 89 44 24 20 e8 eb 12 ff ff 48 89 c7 48 85 c0 74 bb e8 36 13 ff ff  ..L$.H.l$..D$ .....H..H..t..6...
0001fa20  48 89 ef e8 38 56 fe ff 45 84 f6 74 15 85 db 75 0c e8 16 06 ff ff eb 0a 45 84 f6 74 05 e8 22 06  H...8V..E..t...u........E..t..".
0001fa40  ff ff 4c 89 ef e8 16 56 fe ff 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 74 05 e8 b1 57 fe ff 48  ..L....V..H.D$HdH+.%(...t...W..H
0001fa60  83 c4 50 5b 5d 41 5c 41 5d 41 5e e9 99 6c fe ff                                                  ..P[]A\A]A^..l..

0001fa70    void setup_mix(int32_t arg1) __noreturn

0001fa70  89f8               mov     eax, edi
0001fa72  89fa               mov     edx, edi
0001fa74  488d35c5920100     lea     rsi, [rel Te4]
0001fa7b  c1e810             shr     eax, 0x10
0001fa7e  0fb6ce             movzx   ecx, dh
0001fa81  c1ea18             shr     edx, 0x18
0001fa84  0fb6c0             movzx   eax, al
0001fa87  8b0c8e             mov     ecx, dword [rsi+rcx*4]
0001fa8a  0fb61496           movzx   edx, byte [rsi+rdx*4]
0001fa8e  8b0486             mov     eax, dword [rsi+rax*4]
0001fa91  81e10000ff00       and     ecx, 0xff0000
0001fa97  25000000ff         and     eax, 0xff000000
0001fa9c  09c8               or      eax, ecx
0001fa9e  400fb6cf           movzx   ecx, dil
0001faa2  8b0c8e             mov     ecx, dword [rsi+rcx*4]
0001faa5  81e100ff0000       and     ecx, 0xff00
0001faab  09ca               or      edx, ecx
0001faad  31d0               xor     eax, edx
0001faaf  e9556cfeff         jmp     __x86_return_thunk
{ Does not return }


0001fab4    void setup_mix2(int32_t arg1) __noreturn

0001fab4  89fa               mov     edx, edi
0001fab6  4c8d0583920100     lea     r8, [rel Te4]
0001fabd  488d3d7c8e0100     lea     rdi, [rel TD0]
0001fac4  0fb6ce             movzx   ecx, dh
0001fac7  89d0               mov     eax, edx
0001fac9  410fb60c88         movzx   ecx, byte [r8+rcx*4]
0001face  c1e810             shr     eax, 0x10
0001fad1  0fb6c0             movzx   eax, al
0001fad4  8b348f             mov     esi, dword [rdi+rcx*4]
0001fad7  0fb6ca             movzx   ecx, dl
0001fada  c1ea18             shr     edx, 0x18
0001fadd  410fb60480         movzx   eax, byte [r8+rax*4]
0001fae2  410fb61490         movzx   edx, byte [r8+rdx*4]
0001fae7  410fb60c88         movzx   ecx, byte [r8+rcx*4]
0001faec  8b0487             mov     eax, dword [rdi+rax*4]
0001faef  c1ce10             ror     esi, 0x10
0001faf2  c1c808             ror     eax, 0x8
0001faf5  31f0               xor     eax, esi
0001faf7  330497             xor     eax, dword [rdi+rdx*4]
0001fafa  8b0c8f             mov     ecx, dword [rdi+rcx*4]
0001fafd  c1c918             ror     ecx, 0x18
0001fb00  31c8               xor     eax, ecx
0001fb02  e9026cfeff         jmp     __x86_return_thunk
{ Does not return }


0001fb07    void rijndael_test() __noreturn

0001fb07  b802000000         mov     eax, 0x2
0001fb0c  e9f86bfeff         jmp     __x86_return_thunk
{ Does not return }


0001fb11    void rijndael_done() __noreturn

0001fb11  e9f36bfeff         jmp     __x86_return_thunk
{ Does not return }


0001fb16    void rijndael_setup(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t* arg4) __noreturn

0001fb16  4157               push    r15 {__saved_r15}
0001fb18  4156               push    r14 {__saved_r14}
0001fb1a  4155               push    r13 {__saved_r13}
0001fb1c  4154               push    r12 {__saved_r12}
0001fb1e  55                 push    rbp {__saved_rbp}
0001fb1f  53                 push    rbx {__saved_rbx}
0001fb20  4883ec18           sub     rsp, 0x18
0001fb24  4885ff             test    rdi, rdi
0001fb27  7515               jne     0x1fb3e

0001fb29  ba81000000         mov     edx, 0x81
0001fb2e  488d35fc6f0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
0001fb35  488d3d0c700100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
0001fb3c  eb1b               jmp     0x1fb59

0001fb3e  4989c9             mov     r9, rcx
0001fb41  4885c9             test    rcx, rcx
0001fb44  7518               jne     0x1fb5e

0001fb46  ba82000000         mov     edx, 0x82
0001fb4b  488d35df6f0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
0001fb52  488d3dee6f0100     lea     rdi, [rel data_36b47]  {"skey != NULL"}

0001fb59  e825300000         call    crypt_argchk
{ Does not return }

0001fb5e  89f1               mov     ecx, esi
0001fb60  4889f8             mov     rax, rdi
0001fb63  4189f4             mov     r12d, esi
0001fb66  83e1f7             and     ecx, 0xfffffff7
0001fb69  83f910             cmp     ecx, 0x10
0001fb6c  740e               je      0x1fb7c

0001fb6e  b903000000         mov     ecx, 0x3
0001fb73  83fe20             cmp     esi, 0x20
0001fb76  0f8542020000       jne     0x1fdbe

0001fb7c  4489e1             mov     ecx, r12d
0001fb7f  c1f903             sar     ecx, 0x3
0001fb82  8d740906           lea     esi, [rcx+rcx+0x6]
0001fb86  85d2               test    edx, edx
0001fb88  740d               je      0x1fb97

0001fb8a  b904000000         mov     ecx, 0x4
0001fb8f  39f2               cmp     edx, esi
0001fb91  0f8527020000       jne     0x1fdbe

0001fb97  4189b1e0010000     mov     dword [r9+0x1e0], esi
0001fb9e  448b18             mov     r11d, dword [rax]
0001fba1  410fcb             bswap   r11d
0001fba4  458919             mov     dword [r9], r11d
0001fba7  8b5804             mov     ebx, dword [rax+0x4]
0001fbaa  0fcb               bswap   ebx
0001fbac  41895904           mov     dword [r9+0x4], ebx
0001fbb0  448b5008           mov     r10d, dword [rax+0x8]
0001fbb4  410fca             bswap   r10d
0001fbb7  45895108           mov     dword [r9+0x8], r10d
0001fbbb  448b400c           mov     r8d, dword [rax+0xc]
0001fbbf  410fc8             bswap   r8d
0001fbc2  4589410c           mov     dword [r9+0xc], r8d
0001fbc6  4183fc10           cmp     r12d, 0x10
0001fbca  7548               jne     0x1fc14

0001fbcc  4c8d2d2d890100     lea     r13, [rel rcon]
0001fbd3  498d6910           lea     rbp, [r9+0x10]
0001fbd7  4d8d7528           lea     r14, [r13+0x28]  {data_38528}
0001fbdb  4489c7             mov     edi, r8d
0001fbde  4983c504           add     r13, 0x4  {data_38504}
0001fbe2  4883c510           add     rbp, 0x10
0001fbe6  e885feffff         call    setup_mix
{ Does not return }

0001fbeb                                   41 33 45 fc 41 31 c3 44 31 db 44 89 5d f0 41 31 da 89 5d f4 45             A3E.A1.D1.D.].A1..].E
0001fc00  31 d0 44 89 55 f8 44 89 45 fc 4d 39 ee 75 cc e9 fd 00 00 00                                      1.D.U.D.E.M9.u......

0001fc14  8b5010             mov     edx, dword [rax+0x10]
0001fc17  0fca               bswap   edx
0001fc19  41895110           mov     dword [r9+0x10], edx
0001fc1d  4183fc18           cmp     r12d, 0x18
0001fc21  755d               jne     0x1fc80

0001fc23  8b7814             mov     edi, dword [rax+0x14]
0001fc26  4c8d2dd3880100     lea     r13, [rel rcon]
0001fc2d  498d6918           lea     rbp, [r9+0x18]
0001fc31  4d8d7520           lea     r14, [r13+0x20]  {data_38520}
0001fc35  0fcf               bswap   edi
0001fc37  41897914           mov     dword [r9+0x14], edi
0001fc3b  e830feffff         call    setup_mix
{ Does not return }

0001fc40  41 33 45 00 49 83 c5 04 48 83 c5 18 41 31 c3 44 31 db 44 89 5d e8 41 31 da 89 5d ec 45 31 d0 44  A3E.I...H...A1.D1.D.].A1..].E1.D
0001fc60  89 55 f0 44 89 45 f4 4d 39 f5 0f 84 a1 00 00 00 8b 45 e0 44 31 c0 31 c7 89 45 f8 89 7d fc eb bb  .U.D.E.M9........E.D1.1..E..}...

0001fc80  8b5014             mov     edx, dword [rax+0x14]
0001fc83  4c8d2d76880100     lea     r13, [rel rcon]
0001fc8a  498d6920           lea     rbp, [r9+0x20]
0001fc8e  4d8d751c           lea     r14, [r13+0x1c]  {data_3851c}
0001fc92  0fca               bswap   edx
0001fc94  41895114           mov     dword [r9+0x14], edx
0001fc98  8b5018             mov     edx, dword [rax+0x18]
0001fc9b  0fca               bswap   edx
0001fc9d  41895118           mov     dword [r9+0x18], edx
0001fca1  8b501c             mov     edx, dword [rax+0x1c]
0001fca4  0fca               bswap   edx
0001fca6  4189511c           mov     dword [r9+0x1c], edx
0001fcaa  4189d7             mov     r15d, edx
0001fcad  4489ff             mov     edi, r15d
0001fcb0  4983c504           add     r13, 0x4  {data_38504}
0001fcb4  4883c520           add     rbp, 0x20
0001fcb8  e8b3fdffff         call    setup_mix
{ Does not return }

0001fcbd                                                                                         41 33 45                               A3E
0001fcc0  fc 41 31 c3 44 31 db 44 89 5d e0 41 31 da 89 5d e4 45 31 d0 44 89 55 e8 44 89 45 ec 4d 39 f5 74  .A1.D1.D.].A1..].E1.D.U.D.E.M9.t
0001fce0  30 8b 45 d0 44 89 c7 c1 cf 08 89 44 24 0c e8 7d fd ff ff 8b 74 24 0c 31 f0 89 45 f0 33 45 d4 89  0.E.D......D$..}....t$.1..E.3E..
0001fd00  45 f4 33 45 d8 41 31 c7 89 45 f8 44 89 7d fc eb 9c 41 83 c4 1c 4d 8d 99 f0 00 00 00 bb 01 00 00  E.3E.A1..E.D.}...A...M..........
0001fd20  00 4d 63 e4 4f 8d 54 a1 f0 41 8b 02 41 89 81 f0 00 00 00 41 8b 42 04 41 89 81 f4 00 00 00 41 8b  .Mc.O.T..A..A......A.B.A......A.
0001fd40  42 08 41 89 81 f8 00 00 00 41 8b 42 0c 41 89 81 fc 00 00 00 41 39 99 e0 01 00 00 7e 3f 41 8b 7a  B.A......A.B.A......A9.....~?A.z
0001fd60  f0 49 83 c3 10 49 83 ea 10 ff c3 e8 44 fd ff ff 41 89 03 41 8b 7a 04 e8 38 fd ff ff 41 89 43 04  .I...I......D...A..A.z..8...A.C.
0001fd80  41 8b 7a 08 e8 2b fd ff ff 41 89 43 08 41 8b 7a 0c e8 1e fd ff ff 41 89 43 0c eb b8 41 8b 42 f0  A.z..+...A.C.A.z......A.C...A.B.
0001fda0  31 c9 41 89 43 10 41 8b 42 f4 41 89 43 14 41 8b 42 f8 41 89 43 18 41 8b 42 fc 41 89 43 1c        1.A.C.A.B.A.C.A.B.A.C.A.B.A.C.

0001fdbe  4883c418           add     rsp, 0x18
0001fdc2  89c8               mov     eax, ecx
0001fdc4  5b                 pop     rbx {__saved_rbx}
0001fdc5  5d                 pop     rbp {__saved_rbp}
0001fdc6  415c               pop     r12 {__saved_r12}
0001fdc8  415d               pop     r13 {__saved_r13}
0001fdca  415e               pop     r14 {__saved_r14}
0001fdcc  415f               pop     r15 {__saved_r15}
0001fdce  e93669feff         jmp     __x86_return_thunk
{ Does not return }


0001fdd3    void rijndael_ecb_encrypt(int32_t* arg1, int32_t* arg2, void* arg3) __noreturn

0001fdd3  4157               push    r15 {__saved_r15}
0001fdd5  4156               push    r14 {__saved_r14}
0001fdd7  4155               push    r13 {__saved_r13}
0001fdd9  4154               push    r12 {__saved_r12}
0001fddb  55                 push    rbp {__saved_rbp}
0001fddc  53                 push    rbx {__saved_rbx}
0001fddd  51                 push    rcx {var_38}
0001fdde  4885ff             test    rdi, rdi
0001fde1  7515               jne     0x1fdf8

0001fde3  ba26010000         mov     edx, 0x126
0001fde8  488d35426d0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
0001fdef  488d3d5e6d0100     lea     rdi, [rel data_36b54]  {"pt != NULL"}
0001fdf6  eb1b               jmp     0x1fe13

0001fdf8  4989f3             mov     r11, rsi
0001fdfb  4885f6             test    rsi, rsi
0001fdfe  7518               jne     0x1fe18

0001fe00  ba27010000         mov     edx, 0x127
0001fe05  488d35256d0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
0001fe0c  488d3d4c6d0100     lea     rdi, [rel data_36b5f]  {"ct != NULL"}

0001fe13  e86b2d0000         call    crypt_argchk
{ Does not return }

0001fe18  4889d5             mov     rbp, rdx
0001fe1b  4885d2             test    rdx, rdx
0001fe1e  7515               jne     0x1fe35

0001fe20  ba28010000         mov     edx, 0x128
0001fe25  488d35056d0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
0001fe2c  488d3d146d0100     lea     rdi, [rel data_36b47]  {"skey != NULL"}
0001fe33  ebde               jmp     0x1fe13

0001fe35  448b07             mov     r8d, dword [rdi]
0001fe38  448b4f04           mov     r9d, dword [rdi+0x4]
0001fe3c  4989d5             mov     r13, rdx
0001fe3f  4531f6             xor     r14d, r14d  {0x0}
0001fe42  448b5708           mov     r10d, dword [rdi+0x8]
0001fe46  8b470c             mov     eax, dword [rdi+0xc]
0001fe49  488d3df0920100     lea     rdi, [rel TE0]
0001fe50  8b9ae0010000       mov     ebx, dword [rdx+0x1e0]
0001fe56  410fc8             bswap   r8d
0001fe59  410fc9             bswap   r9d
0001fe5c  443302             xor     r8d, dword [rdx]
0001fe5f  410fca             bswap   r10d
0001fe62  0fc8               bswap   eax
0001fe64  44334a04           xor     r9d, dword [rdx+0x4]
0001fe68  44335208           xor     r10d, dword [rdx+0x8]
0001fe6c  33420c             xor     eax, dword [rdx+0xc]
0001fe6f  448d63fe           lea     r12d, [rbx-0x2]

0001fe73  4489ca             mov     edx, r9d
0001fe76  4489d3             mov     ebx, r10d
0001fe79  4983c510           add     r13, 0x10
0001fe7d  450fb6f9           movzx   r15d, r9b
0001fe81  c1ea10             shr     edx, 0x10
0001fe84  0fb6cf             movzx   ecx, bh
0001fe87  468b3cbf           mov     r15d, dword [rdi+r15*4]
0001fe8b  0fb6d2             movzx   edx, dl
0001fe8e  8b348f             mov     esi, dword [rdi+rcx*4]
0001fe91  0fb6c8             movzx   ecx, al
0001fe94  8b1497             mov     edx, dword [rdi+rdx*4]
0001fe97  8b0c8f             mov     ecx, dword [rdi+rcx*4]
0001fe9a  c1ca08             ror     edx, 0x8
0001fe9d  89d3               mov     ebx, edx
0001fe9f  4489c2             mov     edx, r8d
0001fea2  c1ea18             shr     edx, 0x18
0001fea5  c1ce10             ror     esi, 0x10
0001fea8  31f3               xor     ebx, esi
0001feaa  41335d00           xor     ebx, dword [r13]
0001feae  c1c918             ror     ecx, 0x18
0001feb1  31cb               xor     ebx, ecx
0001feb3  331c97             xor     ebx, dword [rdi+rdx*4]
0001feb6  4489d2             mov     edx, r10d
0001feb9  0fb6cc             movzx   ecx, ah
0001febc  c1ea10             shr     edx, 0x10
0001febf  8b348f             mov     esi, dword [rdi+rcx*4]
0001fec2  410fb6c8           movzx   ecx, r8b
0001fec6  0fb6d2             movzx   edx, dl
0001fec9  8b0c8f             mov     ecx, dword [rdi+rcx*4]
0001fecc  c1ce10             ror     esi, 0x10
0001fecf  8b1497             mov     edx, dword [rdi+rdx*4]
0001fed2  c1ca08             ror     edx, 0x8
0001fed5  31d6               xor     esi, edx
0001fed7  4489ca             mov     edx, r9d
0001feda  41337504           xor     esi, dword [r13+0x4]
0001fede  c1ea18             shr     edx, 0x18
0001fee1  c1c918             ror     ecx, 0x18
0001fee4  31ce               xor     esi, ecx
0001fee6  333497             xor     esi, dword [rdi+rdx*4]
0001fee9  89c2               mov     edx, eax
0001feeb  c1ea10             shr     edx, 0x10
0001feee  0fb6d2             movzx   edx, dl
0001fef1  8b0c97             mov     ecx, dword [rdi+rdx*4]
0001fef4  4489c2             mov     edx, r8d
0001fef7  41c1e810           shr     r8d, 0x10
0001fefb  0fb6d6             movzx   edx, dh
0001fefe  450fb6c0           movzx   r8d, r8b
0001ff02  c1c908             ror     ecx, 0x8
0001ff05  8b1497             mov     edx, dword [rdi+rdx*4]
0001ff08  c1ca10             ror     edx, 0x10
0001ff0b  31ca               xor     edx, ecx
0001ff0d  4489d1             mov     ecx, r10d
0001ff10  41335508           xor     edx, dword [r13+0x8]
0001ff14  450fb6d2           movzx   r10d, r10b
0001ff18  c1e918             shr     ecx, 0x18
0001ff1b  41c1cf18           ror     r15d, 0x18
0001ff1f  4431fa             xor     edx, r15d
0001ff22  33148f             xor     edx, dword [rdi+rcx*4]
0001ff25  4489c9             mov     ecx, r9d
0001ff28  468b3c87           mov     r15d, dword [rdi+r8*4]
0001ff2c  0fb6cd             movzx   ecx, ch
0001ff2f  468b0497           mov     r8d, dword [rdi+r10*4]
0001ff33  448b0c8f           mov     r9d, dword [rdi+rcx*4]
0001ff37  41c1cf08           ror     r15d, 0x8
0001ff3b  4489f9             mov     ecx, r15d
0001ff3e  41c1c818           ror     r8d, 0x18
0001ff42  41c1c910           ror     r9d, 0x10
0001ff46  4431c9             xor     ecx, r9d
0001ff49  c1e818             shr     eax, 0x18
0001ff4c  41334d0c           xor     ecx, dword [r13+0xc]
0001ff50  4431c1             xor     ecx, r8d
0001ff53  330c87             xor     ecx, dword [rdi+rax*4]
0001ff56  89c8               mov     eax, ecx
0001ff58  4539f4             cmp     r12d, r14d
0001ff5b  7411               je      0x1ff6e

0001ff5d  41ffc6             inc     r14d
0001ff60  4189d2             mov     r10d, edx
0001ff63  4189f1             mov     r9d, esi
0001ff66  4189d8             mov     r8d, ebx
0001ff69  e905ffffff         jmp     0x1fe73

0001ff6e  49c1e404           shl     r12, 0x4
0001ff72  488d0dc78d0100     lea     rcx, [rel Te4]
0001ff79  0fb6f8             movzx   edi, al
0001ff7c  4189da             mov     r10d, ebx
0001ff7f  4e8d4c2510         lea     r9, [rbp+r12+0x10]
0001ff84  0fb6ee             movzx   ebp, dh
0001ff87  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
0001ff8b  41c1ea18           shr     r10d, 0x18
0001ff8f  448b04a9           mov     r8d, dword [rcx+rbp*4]
0001ff93  41337910           xor     edi, dword [r9+0x10]
0001ff97  0fb6ec             movzx   ebp, ah
0001ff9a  468b1491           mov     r10d, dword [rcx+r10*4]
0001ff9e  4181e000ff0000     and     r8d, 0xff00
0001ffa5  4431c7             xor     edi, r8d
0001ffa8  4189f0             mov     r8d, esi
0001ffab  4181e2000000ff     and     r10d, 0xff000000
0001ffb2  41c1e810           shr     r8d, 0x10
0001ffb6  450fb6c0           movzx   r8d, r8b
0001ffba  468b0481           mov     r8d, dword [rcx+r8*4]
0001ffbe  4181e00000ff00     and     r8d, 0xff0000
0001ffc5  4509d0             or      r8d, r10d
0001ffc8  4189f2             mov     r10d, esi
0001ffcb  4431c7             xor     edi, r8d
0001ffce  448b04a9           mov     r8d, dword [rcx+rbp*4]
0001ffd2  41c1ea18           shr     r10d, 0x18
0001ffd6  0fb6ef             movzx   ebp, bh
0001ffd9  0fcf               bswap   edi
0001ffdb  41893b             mov     dword [r11], edi
0001ffde  0fb6fb             movzx   edi, bl
0001ffe1  468b1491           mov     r10d, dword [rcx+r10*4]
0001ffe5  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
0001ffe9  4181e000ff0000     and     r8d, 0xff00
0001fff0  41337914           xor     edi, dword [r9+0x14]
0001fff4  c1eb10             shr     ebx, 0x10
0001fff7  4431c7             xor     edi, r8d
0001fffa  4189d0             mov     r8d, edx
0001fffd  4181e2000000ff     and     r10d, 0xff000000
00020004  0fb6db             movzx   ebx, bl
00020007  41c1e810           shr     r8d, 0x10
0002000b  450fb6c0           movzx   r8d, r8b
0002000f  468b0481           mov     r8d, dword [rcx+r8*4]
00020013  4181e00000ff00     and     r8d, 0xff0000
0002001a  4509d0             or      r8d, r10d
0002001d  4189d2             mov     r10d, edx
00020020  0fb6d2             movzx   edx, dl
00020023  4431c7             xor     edi, r8d
00020026  448b04a9           mov     r8d, dword [rcx+rbp*4]
0002002a  41c1ea18           shr     r10d, 0x18
0002002e  0fb61491           movzx   edx, byte [rcx+rdx*4]
00020032  0fcf               bswap   edi
00020034  41897b04           mov     dword [r11+0x4], edi
00020038  400fb6fe           movzx   edi, sil
0002003c  468b1491           mov     r10d, dword [rcx+r10*4]
00020040  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
00020044  4181e000ff0000     and     r8d, 0xff00
0002004b  41337918           xor     edi, dword [r9+0x18]
0002004f  4431c7             xor     edi, r8d
00020052  4189c0             mov     r8d, eax
00020055  4181e2000000ff     and     r10d, 0xff000000
0002005c  41c1e810           shr     r8d, 0x10
00020060  450fb6c0           movzx   r8d, r8b
00020064  468b0481           mov     r8d, dword [rcx+r8*4]
00020068  4181e00000ff00     and     r8d, 0xff0000
0002006f  4509d0             or      r8d, r10d
00020072  4431c7             xor     edi, r8d
00020075  0fcf               bswap   edi
00020077  41897b08           mov     dword [r11+0x8], edi
0002007b  418b791c           mov     edi, dword [r9+0x1c]
0002007f  31d7               xor     edi, edx
00020081  89f2               mov     edx, esi
00020083  0fb6f6             movzx   esi, dh
00020086  8b34b1             mov     esi, dword [rcx+rsi*4]
00020089  81e600ff0000       and     esi, 0xff00
0002008f  31f7               xor     edi, esi
00020091  8b3499             mov     esi, dword [rcx+rbx*4]
00020094  81e60000ff00       and     esi, 0xff0000
0002009a  c1e818             shr     eax, 0x18
0002009d  8b0481             mov     eax, dword [rcx+rax*4]
000200a0  25000000ff         and     eax, 0xff000000
000200a5  09f0               or      eax, esi
000200a7  31f8               xor     eax, edi
000200a9  0fc8               bswap   eax
000200ab  4189430c           mov     dword [r11+0xc], eax
000200af  31c0               xor     eax, eax  {0x0}
000200b1  5a                 pop     rdx {var_38}
000200b2  5b                 pop     rbx {__saved_rbx}
000200b3  5d                 pop     rbp {__saved_rbp}
000200b4  415c               pop     r12 {__saved_r12}
000200b6  415d               pop     r13 {__saved_r13}
000200b8  415e               pop     r14 {__saved_r14}
000200ba  415f               pop     r15 {__saved_r15}
000200bc  e94866feff         jmp     __x86_return_thunk
{ Does not return }


000200c1    void rijndael_ecb_decrypt(int32_t* arg1, int32_t* arg2, void* arg3) __noreturn

000200c1  4157               push    r15 {__saved_r15}
000200c3  4156               push    r14 {__saved_r14}
000200c5  4155               push    r13 {__saved_r13}
000200c7  4154               push    r12 {__saved_r12}
000200c9  55                 push    rbp {__saved_rbp}
000200ca  53                 push    rbx {__saved_rbx}
000200cb  51                 push    rcx {var_38}
000200cc  4885f6             test    rsi, rsi
000200cf  7515               jne     0x200e6

000200d1  bad9010000         mov     edx, 0x1d9
000200d6  488d35546a0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
000200dd  488d3d706a0100     lea     rdi, [rel data_36b54]  {"pt != NULL"}
000200e4  eb18               jmp     0x200fe

000200e6  4885ff             test    rdi, rdi
000200e9  7518               jne     0x20103

000200eb  bada010000         mov     edx, 0x1da
000200f0  488d353a6a0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
000200f7  488d3d616a0100     lea     rdi, [rel data_36b5f]  {"ct != NULL"}

000200fe  e8802a0000         call    crypt_argchk
{ Does not return }

00020103  4885d2             test    rdx, rdx
00020106  7515               jne     0x2011d

00020108  badb010000         mov     edx, 0x1db
0002010d  488d351d6a0100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
00020114  488d3d2c6a0100     lea     rdi, [rel data_36b47]  {"skey != NULL"}
0002011b  ebe1               jmp     0x200fe

0002011d  448b0f             mov     r9d, dword [rdi]
00020120  448b5704           mov     r10d, dword [rdi+0x4]
00020124  4989f3             mov     r11, rsi
00020127  4531ed             xor     r13d, r13d  {0x0}
0002012a  448b4708           mov     r8d, dword [rdi+0x8]
0002012e  8b470c             mov     eax, dword [rdi+0xc]
00020131  4c8db2f0000000     lea     r14, [rdx+0xf0]
00020138  488d3d01880100     lea     rdi, [rel TD0]
0002013f  8baae0010000       mov     ebp, dword [rdx+0x1e0]
00020145  410fc9             bswap   r9d
00020148  410fca             bswap   r10d
0002014b  44338af0000000     xor     r9d, dword [rdx+0xf0]
00020152  410fc8             bswap   r8d
00020155  0fc8               bswap   eax
00020157  4d89f4             mov     r12, r14
0002015a  443392f4000000     xor     r10d, dword [rdx+0xf4]
00020161  443382f8000000     xor     r8d, dword [rdx+0xf8]
00020168  3382fc000000       xor     eax, dword [rdx+0xfc]
0002016e  83ed02             sub     ebp, 0x2

00020171  89c2               mov     edx, eax
00020173  4489c3             mov     ebx, r8d
00020176  4983c410           add     r12, 0x10
0002017a  440fb6f8           movzx   r15d, al
0002017e  c1ea10             shr     edx, 0x10
00020181  0fb6cf             movzx   ecx, bh
00020184  468b3cbf           mov     r15d, dword [rdi+r15*4]
00020188  0fb6d2             movzx   edx, dl
0002018b  8b348f             mov     esi, dword [rdi+rcx*4]
0002018e  410fb6ca           movzx   ecx, r10b
00020192  c1ce10             ror     esi, 0x10
00020195  8b1497             mov     edx, dword [rdi+rdx*4]
00020198  8b0c8f             mov     ecx, dword [rdi+rcx*4]
0002019b  c1ca08             ror     edx, 0x8
0002019e  31d6               xor     esi, edx
000201a0  4489ca             mov     edx, r9d
000201a3  41333424           xor     esi, dword [r12]
000201a7  c1ea18             shr     edx, 0x18
000201aa  c1c918             ror     ecx, 0x18
000201ad  31ce               xor     esi, ecx
000201af  333497             xor     esi, dword [rdi+rdx*4]
000201b2  4489ca             mov     edx, r9d
000201b5  0fb6cc             movzx   ecx, ah
000201b8  c1ea10             shr     edx, 0x10
000201bb  8b1c8f             mov     ebx, dword [rdi+rcx*4]
000201be  410fb6c8           movzx   ecx, r8b
000201c2  0fb6d2             movzx   edx, dl
000201c5  8b0c8f             mov     ecx, dword [rdi+rcx*4]
000201c8  c1cb10             ror     ebx, 0x10
000201cb  8b1497             mov     edx, dword [rdi+rdx*4]
000201ce  c1ca08             ror     edx, 0x8
000201d1  31d3               xor     ebx, edx
000201d3  4489d2             mov     edx, r10d
000201d6  41335c2404         xor     ebx, dword [r12+0x4]
000201db  c1ea18             shr     edx, 0x18
000201de  c1c918             ror     ecx, 0x18
000201e1  31cb               xor     ebx, ecx
000201e3  331c97             xor     ebx, dword [rdi+rdx*4]
000201e6  4489d2             mov     edx, r10d
000201e9  c1ea10             shr     edx, 0x10
000201ec  0fb6d2             movzx   edx, dl
000201ef  8b0c97             mov     ecx, dword [rdi+rdx*4]
000201f2  4489ca             mov     edx, r9d
000201f5  450fb6c9           movzx   r9d, r9b
000201f9  0fb6d6             movzx   edx, dh
000201fc  c1c908             ror     ecx, 0x8
000201ff  8b1497             mov     edx, dword [rdi+rdx*4]
00020202  c1ca10             ror     edx, 0x10
00020205  31ca               xor     edx, ecx
00020207  4489c1             mov     ecx, r8d
0002020a  4133542408         xor     edx, dword [r12+0x8]
0002020f  41c1e810           shr     r8d, 0x10
00020213  c1e918             shr     ecx, 0x18
00020216  450fb6c0           movzx   r8d, r8b
0002021a  41c1cf18           ror     r15d, 0x18
0002021e  4431fa             xor     edx, r15d
00020221  33148f             xor     edx, dword [rdi+rcx*4]
00020224  4489d1             mov     ecx, r10d
00020227  0fb6cd             movzx   ecx, ch
0002022a  4189d7             mov     r15d, edx
0002022d  428b1487           mov     edx, dword [rdi+r8*4]
00020231  468b048f           mov     r8d, dword [rdi+r9*4]
00020235  448b148f           mov     r10d, dword [rdi+rcx*4]
00020239  c1ca08             ror     edx, 0x8
0002023c  89d1               mov     ecx, edx
0002023e  41c1c818           ror     r8d, 0x18
00020242  41c1ca10           ror     r10d, 0x10
00020246  4431d1             xor     ecx, r10d
00020249  c1e818             shr     eax, 0x18
0002024c  41334c240c         xor     ecx, dword [r12+0xc]
00020251  4431c1             xor     ecx, r8d
00020254  330c87             xor     ecx, dword [rdi+rax*4]
00020257  89c8               mov     eax, ecx
00020259  4439ed             cmp     ebp, r13d
0002025c  7411               je      0x2026f

0002025e  41ffc5             inc     r13d
00020261  4589f8             mov     r8d, r15d
00020264  4189da             mov     r10d, ebx
00020267  4189f1             mov     r9d, esi
0002026a  e902ffffff         jmp     0x20171

0002026f  48c1e504           shl     rbp, 0x4
00020273  4489fa             mov     edx, r15d
00020276  0fb6fb             movzx   edi, bl
00020279  4189f2             mov     r10d, esi
0002027c  488d0dbd820100     lea     rcx, [rel Td4]
00020283  4d8d4c2e10         lea     r9, [r14+rbp+0x10]
00020288  0fb6ee             movzx   ebp, dh
0002028b  41c1ea18           shr     r10d, 0x18
0002028f  448b04a9           mov     r8d, dword [rcx+rbp*4]
00020293  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
00020297  0fb6ec             movzx   ebp, ah
0002029a  89f2               mov     edx, esi
0002029c  41337910           xor     edi, dword [r9+0x10]
000202a0  468b1491           mov     r10d, dword [rcx+r10*4]
000202a4  4181e000ff0000     and     r8d, 0xff00
000202ab  4431c7             xor     edi, r8d
000202ae  4189c0             mov     r8d, eax
000202b1  4181e2000000ff     and     r10d, 0xff000000
000202b8  41c1e810           shr     r8d, 0x10
000202bc  450fb6c0           movzx   r8d, r8b
000202c0  468b0481           mov     r8d, dword [rcx+r8*4]
000202c4  4181e00000ff00     and     r8d, 0xff0000
000202cb  4509d0             or      r8d, r10d
000202ce  4189da             mov     r10d, ebx
000202d1  4431c7             xor     edi, r8d
000202d4  448b04a9           mov     r8d, dword [rcx+rbp*4]
000202d8  41c1ea18           shr     r10d, 0x18
000202dc  0fb6ee             movzx   ebp, dh
000202df  0fcf               bswap   edi
000202e1  41893b             mov     dword [r11], edi
000202e4  410fb6ff           movzx   edi, r15b
000202e8  468b1491           mov     r10d, dword [rcx+r10*4]
000202ec  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
000202f0  4181e000ff0000     and     r8d, 0xff00
000202f7  41337914           xor     edi, dword [r9+0x14]
000202fb  4489fa             mov     edx, r15d
000202fe  4431c7             xor     edi, r8d
00020301  4189f0             mov     r8d, esi
00020304  4181e2000000ff     and     r10d, 0xff000000
0002030b  c1ea18             shr     edx, 0x18
0002030e  41c1e810           shr     r8d, 0x10
00020312  400fb6f6           movzx   esi, sil
00020316  450fb6c0           movzx   r8d, r8b
0002031a  0fb634b1           movzx   esi, byte [rcx+rsi*4]
0002031e  468b0481           mov     r8d, dword [rcx+r8*4]
00020322  4181e00000ff00     and     r8d, 0xff0000
00020329  4509d0             or      r8d, r10d
0002032c  4189d2             mov     r10d, edx
0002032f  4489fa             mov     edx, r15d
00020332  4431c7             xor     edi, r8d
00020335  448b04a9           mov     r8d, dword [rcx+rbp*4]
00020339  468b1491           mov     r10d, dword [rcx+r10*4]
0002033d  c1ea10             shr     edx, 0x10
00020340  0fcf               bswap   edi
00020342  41897b04           mov     dword [r11+0x4], edi
00020346  0fb6f8             movzx   edi, al
00020349  0fb6d2             movzx   edx, dl
0002034c  0fb63cb9           movzx   edi, byte [rcx+rdi*4]
00020350  4181e000ff0000     and     r8d, 0xff00
00020357  4181e2000000ff     and     r10d, 0xff000000
0002035e  8b1491             mov     edx, dword [rcx+rdx*4]
00020361  41337918           xor     edi, dword [r9+0x18]
00020365  4431c7             xor     edi, r8d
00020368  4189d8             mov     r8d, ebx
0002036b  0fb6df             movzx   ebx, bh
0002036e  41c1e810           shr     r8d, 0x10
00020372  450fb6c0           movzx   r8d, r8b
00020376  468b0481           mov     r8d, dword [rcx+r8*4]
0002037a  4181e00000ff00     and     r8d, 0xff0000
00020381  4509d0             or      r8d, r10d
00020384  4431c7             xor     edi, r8d
00020387  0fcf               bswap   edi
00020389  41897b08           mov     dword [r11+0x8], edi
0002038d  8b3c99             mov     edi, dword [rcx+rbx*4]
00020390  4133711c           xor     esi, dword [r9+0x1c]
00020394  81e700ff0000       and     edi, 0xff00
0002039a  31fe               xor     esi, edi
0002039c  81e20000ff00       and     edx, 0xff0000
000203a2  c1e818             shr     eax, 0x18
000203a5  8b0481             mov     eax, dword [rcx+rax*4]
000203a8  25000000ff         and     eax, 0xff000000
000203ad  09d0               or      eax, edx
000203af  31f0               xor     eax, esi
000203b1  0fc8               bswap   eax
000203b3  4189430c           mov     dword [r11+0xc], eax
000203b7  31c0               xor     eax, eax  {0x0}
000203b9  5a                 pop     rdx {var_38}
000203ba  5b                 pop     rbx {__saved_rbx}
000203bb  5d                 pop     rbp {__saved_rbp}
000203bc  415c               pop     r12 {__saved_r12}
000203be  415d               pop     r13 {__saved_r13}
000203c0  415e               pop     r14 {__saved_r14}
000203c2  415f               pop     r15 {__saved_r15}
000203c4  e94063feff         jmp     __x86_return_thunk
{ Does not return }


000203c9    void rijndael_keysize(int32_t* arg1) __noreturn

000203c9  4885ff             test    rdi, rdi
000203cc  7519               jne     0x203e7

000203ce  50                 push    rax {var_8}
000203cf  bad4020000         mov     edx, 0x2d4
000203d4  488d3556670100     lea     rsi, [rel data_36b31]  {"src/ciphers/aes/aes.c"}
000203db  488d3d88670100     lea     rdi, [rel data_36b6a]  {"keysize != NULL"}
000203e2  e89c270000         call    crypt_argchk
{ Does not return }

000203e7  8b07               mov     eax, dword [rdi]
000203e9  ba03000000         mov     edx, 0x3
000203ee  83f80f             cmp     eax, 0xf
000203f1  7e24               jle     0x20417

000203f3  83f817             cmp     eax, 0x17
000203f6  7f08               jg      0x20400

000203f8  c70710000000       mov     dword [rdi], 0x10
000203fe  eb0b               jmp     0x2040b

00020400  83f81f             cmp     eax, 0x1f
00020403  7f0a               jg      0x2040f

00020405  c70718000000       mov     dword [rdi], 0x18

0002040b  31d2               xor     edx, edx  {0x0}
0002040d  eb08               jmp     0x20417

0002040f  c70720000000       mov     dword [rdi], 0x20
00020415  ebf4               jmp     0x2040b

00020417  89d0               mov     eax, edx
00020419  e9eb62feff         jmp     __x86_return_thunk
{ Does not return }


0002041e    void sha256_test() __noreturn

0002041e  b802000000         mov     eax, 0x2
00020423  e9e162feff         jmp     __x86_return_thunk
{ Does not return }


00020428    void sha256_init(int64_t* arg1) __noreturn

00020428  4885ff             test    rdi, rdi
0002042b  7519               jne     0x20446

0002042d  51                 push    rcx {var_8}
0002042e  bace000000         mov     edx, 0xce
00020433  488d3544670100     lea     rsi, [rel data_36b7e]  {"src/hashes/sha2/sha256.c"}
0002043a  488d3d56670100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020441  e83d270000         call    crypt_argchk
{ Does not return }

00020446  31c0               xor     eax, eax  {0x0}
00020448  31d2               xor     edx, edx  {0x0}
0002044a  488907             mov     qword [rdi], rax  {0x0}
0002044d  48b867e6096a85ae…  mov     rax, 0xbb67ae856a09e667
00020457  48894708           mov     qword [rdi+0x8], rax  {-0x4498517a95f61999}
0002045b  48b872f36e3c3af5…  mov     rax, 0xa54ff53a3c6ef372
00020465  48894710           mov     qword [rdi+0x10], rax  {-0x5ab00ac5c3910c8e}
00020469  48b87f520e518c68…  mov     rax, 0x9b05688c510e527f
00020473  48894718           mov     qword [rdi+0x18], rax  {-0x64fa9773aef1ad81}
00020477  48b8abd9831f19cd…  mov     rax, 0x5be0cd191f83d9ab
00020481  48894720           mov     qword [rdi+0x20], rax  {0x5be0cd191f83d9ab}
00020485  31c0               xor     eax, eax  {0x0}
00020487  895728             mov     dword [rdi+0x28], edx  {0x0}
0002048a  e97a62feff         jmp     __x86_return_thunk
{ Does not return }


0002048f    void sha256_compress.isra.0(void* arg1, int32_t* arg2) __noreturn

0002048f  4157               push    r15 {__saved_r15}
00020491  4156               push    r14 {__saved_r14}
00020493  4155               push    r13 {__saved_r13}
00020495  4154               push    r12 {__saved_r12}
00020497  55                 push    rbp {__saved_rbp}
00020498  53                 push    rbx {__saved_rbx}
00020499  4881ec38010000     sub     rsp, 0x138
000204a0  0f104708           movups  xmm0, xmmword [rdi+0x8]
000204a4  64488b0425280000…  mov     rax, qword [fs:0x28]
000204ad  4889842428010000   mov     qword [rsp+0x128 {var_40}], rax
000204b5  31c0               xor     eax, eax  {0x0}
000204b7  0f11442408         movups  xmmword [rsp+0x8 {var_160}], xmm0
000204bc  0f104718           movups  xmm0, xmmword [rdi+0x18]
000204c0  0f11442418         movups  xmmword [rsp+0x18 {var_150}], xmm0

000204c5  8b0c06             mov     ecx, dword [rsi+rax]
000204c8  488d542428         lea     rdx, [rsp+0x28 {var_140}]
000204cd  0fc9               bswap   ecx
000204cf  894c0428           mov     dword [rsp+rax+0x28 {var_140}], ecx
000204d3  4883c004           add     rax, 0x4
000204d7  4883f840           cmp     rax, 0x40
000204db  75e8               jne     0x204c5

000204dd  4c8d8c24e8000000   lea     r9, [rsp+0xe8 {var_80}]

000204e5  448b4238           mov     r8d, dword [rdx+0x38]
000204e9  8b7204             mov     esi, dword [rdx+0x4]
000204ec  4883c204           add     rdx, 0x4
000204f0  4489c0             mov     eax, r8d
000204f3  4589c3             mov     r11d, r8d
000204f6  41c1e80a           shr     r8d, 0xa
000204fa  89f1               mov     ecx, esi
000204fc  c1c811             ror     eax, 0x11
000204ff  41c1cb13           ror     r11d, 0x13
00020503  4431d8             xor     eax, r11d
00020506  4189f2             mov     r10d, esi
00020509  c1ee03             shr     esi, 0x3
0002050c  4431c0             xor     eax, r8d
0002050f  448b42fc           mov     r8d, dword [rdx-0x4]
00020513  44034220           add     r8d, dword [rdx+0x20]
00020517  c1c907             ror     ecx, 0x7
0002051a  41c1ca12           ror     r10d, 0x12
0002051e  4431d1             xor     ecx, r10d
00020521  4401c0             add     eax, r8d
00020524  31f1               xor     ecx, esi
00020526  01c8               add     eax, ecx
00020528  89423c             mov     dword [rdx+0x3c], eax
0002052b  4c39ca             cmp     rdx, r9 {var_80}
0002052e  75b5               jne     0x204e5

00020530  8b742424           mov     esi, dword [rsp+0x24 {var_150+0xc}]
00020534  8b4c2418           mov     ecx, dword [rsp+0x18 {var_150}]
00020538  4531d2             xor     r10d, r10d  {0x0}
0002053b  448b4c2420         mov     r9d, dword [rsp+0x20 {var_150+0x8}]
00020540  8b5c241c           mov     ebx, dword [rsp+0x1c {var_150+0x4}]
00020544  8b542408           mov     edx, dword [rsp+0x8 {var_160}]
00020548  448b44240c         mov     r8d, dword [rsp+0xc {var_160+0x4}]
0002054d  448b5c2410         mov     r11d, dword [rsp+0x10 {var_160+0x8}]
00020552  448b6c2414         mov     r13d, dword [rsp+0x14 {var_160+0xc}]

00020557  4c8d3de28f0100     lea     r15, [rel K]
0002055e  89c8               mov     eax, ecx
00020560  4189ce             mov     r14d, ecx
00020563  4189cc             mov     r12d, ecx
00020566  41c1ce0b           ror     r14d, 0xb
0002056a  c1c806             ror     eax, 0x6
0002056d  4431f0             xor     eax, r14d
00020570  428b6c1428         mov     ebp, dword [rsp+r10+0x28 {var_140}]
00020575  43032c17           add     ebp, dword [r15+r10]
00020579  4189d7             mov     r15d, edx
0002057c  41c1cc19           ror     r12d, 0x19
00020580  4431e0             xor     eax, r12d
00020583  4521c7             and     r15d, r8d
00020586  4189d4             mov     r12d, edx
00020589  4983c204           add     r10, 0x4
0002058d  01e8               add     eax, ebp
0002058f  4489cd             mov     ebp, r9d
00020592  31dd               xor     ebp, ebx
00020594  21cd               and     ebp, ecx
00020596  4431cd             xor     ebp, r9d
00020599  01e8               add     eax, ebp
0002059b  89d5               mov     ebp, edx
0002059d  448d3430           lea     r14d, [rax+rsi]
000205a1  89d6               mov     esi, edx
000205a3  89d0               mov     eax, edx
000205a5  4409c6             or      esi, r8d
000205a8  4421de             and     esi, r11d
000205ab  4409fe             or      esi, r15d
000205ae  c1c802             ror     eax, 0x2
000205b1  41c1cc0d           ror     r12d, 0xd
000205b5  4431e0             xor     eax, r12d
000205b8  4401f6             add     esi, r14d
000205bb  4501ee             add     r14d, r13d
000205be  4589dd             mov     r13d, r11d
000205c1  c1cd16             ror     ebp, 0x16
000205c4  31e8               xor     eax, ebp
000205c6  01f0               add     eax, esi
000205c8  4489ce             mov     esi, r9d
000205cb  4981fa00010000     cmp     r10, 0x100
000205d2  7415               je      0x205e9

000205d4  4589c3             mov     r11d, r8d
000205d7  4189d9             mov     r9d, ebx
000205da  4189d0             mov     r8d, edx
000205dd  89cb               mov     ebx, ecx
000205df  89c2               mov     edx, eax
000205e1  4489f1             mov     ecx, r14d
000205e4  e96effffff         jmp     0x20557

000205e9  44894c2424         mov     dword [rsp+0x24 {var_150+0xc}], r9d
000205ee  895c2420           mov     dword [rsp+0x20 {var_150+0x8}], ebx
000205f2  894c241c           mov     dword [rsp+0x1c {var_150+0x4}], ecx
000205f6  4489742418         mov     dword [rsp+0x18 {var_150}], r14d
000205fb  44895c2414         mov     dword [rsp+0x14 {var_160+0xc}], r11d
00020600  4489442410         mov     dword [rsp+0x10 {var_160+0x8}], r8d
00020605  8954240c           mov     dword [rsp+0xc {var_160+0x4}], edx
00020609  89442408           mov     dword [rsp+0x8 {var_160}], eax
0002060d  31c0               xor     eax, eax  {0x0}

0002060f  8b540408           mov     edx, dword [rsp+rax+0x8 {var_160}]
00020613  01540708           add     dword [rdi+rax+0x8], edx
00020617  4883c004           add     rax, 0x4
0002061b  4883f820           cmp     rax, 0x20
0002061f  75ee               jne     0x2060f

00020621  488b842428010000   mov     rax, qword [rsp+0x128 {var_40}]
00020629  64482b0425280000…  sub     rax, qword [fs:0x28]
00020632  7405               je      0x20639

00020634  e8d74bfeff         call    __stack_chk_fail
{ Does not return }

00020639  4881c438010000     add     rsp, 0x138
00020640  5b                 pop     rbx {__saved_rbx}
00020641  5d                 pop     rbp {__saved_rbp}
00020642  415c               pop     r12 {__saved_r12}
00020644  415d               pop     r13 {__saved_r13}
00020646  415e               pop     r14 {__saved_r14}
00020648  415f               pop     r15 {__saved_r15}
0002064a  e9ba60feff         jmp     __x86_return_thunk
{ Does not return }


0002064f    void sha256_done(int64_t* arg1, int64_t arg2) __noreturn

0002064f  4154               push    r12 {__saved_r12}
00020651  55                 push    rbp {__saved_rbp}
00020652  53                 push    rbx {__saved_rbx}
00020653  4885ff             test    rdi, rdi
00020656  7515               jne     0x2066d

00020658  baf0000000         mov     edx, 0xf0
0002065d  488d351a650100     lea     rsi, [rel data_36b7e]  {"src/hashes/sha2/sha256.c"}
00020664  488d3d2c650100     lea     rdi, [rel data_36b97]  {"md != NULL"}
0002066b  eb1b               jmp     0x20688

0002066d  4989f4             mov     r12, rsi
00020670  4885f6             test    rsi, rsi
00020673  7518               jne     0x2068d

00020675  baf1000000         mov     edx, 0xf1
0002067a  488d35fd640100     lea     rsi, [rel data_36b7e]  {"src/hashes/sha2/sha256.c"}
00020681  488d3d8b3e0100     lea     rdi, [rel data_34513]  {"out != NULL"}

00020688  e8f6240000         call    crypt_argchk
{ Does not return }

0002068d  8b5728             mov     edx, dword [rdi+0x28]
00020690  4889fb             mov     rbx, rdi
00020693  b810000000         mov     eax, 0x10
00020698  83fa3f             cmp     edx, 0x3f
0002069b  0f8788000000       ja      0x20729

000206a1  8d2cd500000000     lea     ebp, [rdx*8]
000206a8  8d4201             lea     eax, [rdx+0x1]
000206ab  48032f             add     rbp, qword [rdi]
000206ae  48892f             mov     qword [rdi], rbp
000206b1  894728             mov     dword [rdi+0x28], eax
000206b4  c644172c80         mov     byte [rdi+rdx+0x2c], 0x80
000206b9  83f838             cmp     eax, 0x38
000206bc  7628               jbe     0x206e6

000206be  48ffc0             inc     rax
000206c1  8d50ff             lea     edx, [rax-0x1]
000206c4  83fa3f             cmp     edx, 0x3f
000206c7  770a               ja      0x206d3

000206c9  894328             mov     dword [rbx+0x28], eax
000206cc  c644032b00         mov     byte [rbx+rax+0x2b], 0x0
000206d1  ebeb               jmp     0x206be

000206d3  488d732c           lea     rsi, [rbx+0x2c]
000206d7  4889df             mov     rdi, rbx
000206da  e8b0fdffff         call    sha256_compress.isra.0
{ Does not return }

000206df                                                                                               31                                 1
000206e0  c0 89 43 28 31 c0                                                                                ..C(1.

000206e6  89c2               mov     edx, eax
000206e8  4801da             add     rdx, rbx

000206eb  48ffc2             inc     rdx
000206ee  83f838             cmp     eax, 0x38
000206f1  740b               je      0x206fe

000206f3  ffc0               inc     eax
000206f5  894328             mov     dword [rbx+0x28], eax
000206f8  c6422b00           mov     byte [rdx+0x2b], 0x0
000206fc  ebed               jmp     0x206eb

000206fe  480fcd             bswap   rbp
00020701  48896b64           mov     qword [rbx+0x64], rbp
00020705  488d732c           lea     rsi, [rbx+0x2c]
00020709  4889df             mov     rdi, rbx
0002070c  e87efdffff         call    sha256_compress.isra.0
{ Does not return }

00020711                                                     31 c0 8b 54 03 08 0f ca 41 89 14 04 48 83 c0                   1..T....A...H..
00020720  04 48 83 f8 20 75 ec 31 c0                                                                       .H.. u.1.

00020729  5b                 pop     rbx {__saved_rbx}
0002072a  5d                 pop     rbp {__saved_rbp}
0002072b  415c               pop     r12 {__saved_r12}
0002072d  e9d75ffeff         jmp     __x86_return_thunk
{ Does not return }


00020732    void sha256_process(int64_t* arg1, int32_t* arg2, uint64_t arg3) __noreturn

00020732  4156               push    r14 {__saved_r14}
00020734  4155               push    r13 {__saved_r13}
00020736  4154               push    r12 {__saved_r12}
00020738  55                 push    rbp {__saved_rbp}
00020739  53                 push    rbx {__saved_rbx}
0002073a  4885ff             test    rdi, rdi
0002073d  7515               jne     0x20754

0002073f  bae4000000         mov     edx, 0xe4
00020744  488d3533640100     lea     rsi, [rel data_36b7e]  {"src/hashes/sha2/sha256.c"}
0002074b  488d3d45640100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020752  eb1b               jmp     0x2076f

00020754  4989f4             mov     r12, rsi
00020757  4885f6             test    rsi, rsi
0002075a  7518               jne     0x20774

0002075c  bae4000000         mov     edx, 0xe4
00020761  488d3516640100     lea     rsi, [rel data_36b7e]  {"src/hashes/sha2/sha256.c"}
00020768  488d3d33640100     lea     rdi, [rel data_36ba2]  {"in != NULL"}

0002076f  e80f240000         call    crypt_argchk
{ Does not return }

00020774  837f2840           cmp     dword [rdi+0x28], 0x40
00020778  4889fb             mov     rbx, rdi
0002077b  b810000000         mov     eax, 0x10
00020780  0f8791000000       ja      0x20817

00020786  4889d5             mov     rbp, rdx
00020789  480317             add     rdx, qword [rdi]
0002078c  b819000000         mov     eax, 0x19
00020791  41bd40000000       mov     r13d, 0x40
00020797  727e               jb      0x20817

00020799  4885ed             test    rbp, rbp
0002079c  7477               je      0x20815

0002079e  8b7b28             mov     edi, dword [rbx+0x28]
000207a1  85ff               test    edi, edi
000207a3  7522               jne     0x207c7

000207a5  4883fd3f           cmp     rbp, 0x3f
000207a9  761c               jbe     0x207c7

000207ab  4c89e6             mov     rsi, r12
000207ae  4889df             mov     rdi, rbx
000207b1  4983c440           add     r12, 0x40
000207b5  4883ed40           sub     rbp, 0x40
000207b9  e8d1fcffff         call    sha256_compress.isra.0
{ Does not return }

000207be                                                                                            48 81                                H.
000207c0  03 00 02 00 00 eb d2                                                                             .......

000207c7  4489e9             mov     ecx, r13d  {0x40}
000207ca  488d532c           lea     rdx, [rbx+0x2c]
000207ce  4c89e6             mov     rsi, r12
000207d1  29f9               sub     ecx, edi
000207d3  488d043a           lea     rax, [rdx+rdi]
000207d7  4839e9             cmp     rcx, rbp
000207da  4889c7             mov     rdi, rax
000207dd  480f47cd           cmova   rcx, rbp
000207e1  4989ce             mov     r14, rcx
000207e4  f3a4               rep movsb byte [rdi], [rsi]  {0x0}
000207e6  8b4328             mov     eax, dword [rbx+0x28]
000207e9  4401f0             add     eax, r14d
000207ec  894328             mov     dword [rbx+0x28], eax
000207ef  4989f4             mov     r12, rsi
000207f2  83f840             cmp     eax, 0x40
000207f5  7405               je      0x207fc

000207f7  4c29f5             sub     rbp, r14
000207fa  eb9d               jmp     0x20799

000207fc  4889d6             mov     rsi, rdx
000207ff  4889df             mov     rdi, rbx
00020802  e888fcffff         call    sha256_compress.isra.0
{ Does not return }

00020807                       31 c0 48 81 03 00 02 00 00 89 43 28 eb e2                                          1.H.......C(..

00020815  31c0               xor     eax, eax  {0x0}

00020817  5b                 pop     rbx {__saved_rbx}
00020818  5d                 pop     rbp {__saved_rbp}
00020819  415c               pop     r12 {__saved_r12}
0002081b  415d               pop     r13 {__saved_r13}
0002081d  415e               pop     r14 {__saved_r14}
0002081f  e9e55efeff         jmp     __x86_return_thunk
{ Does not return }


00020824    void sha384_test() __noreturn

00020824  b802000000         mov     eax, 0x2
00020829  e9db5efeff         jmp     __x86_return_thunk
{ Does not return }


0002082e    void sha384_init(int64_t* arg1) __noreturn

0002082e  4885ff             test    rdi, rdi
00020831  7519               jne     0x2084c

00020833  52                 push    rdx {var_8}
00020834  488d3572630100     lea     rsi, [rel data_36bad]  {"src/hashes/sha2/sha384.c"}
0002083b  ba2b000000         mov     edx, 0x2b
00020840  488d3d50630100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020847  e837230000         call    crypt_argchk
{ Does not return }

0002084c  31c0               xor     eax, eax  {0x0}
0002084e  48894748           mov     qword [rdi+0x48], rax  {0x0}
00020852  488907             mov     qword [rdi], rax  {0x0}
00020855  48b8d89e05c15d9d…  mov     rax, 0xcbbb9d5dc1059ed8
0002085f  48894708           mov     qword [rdi+0x8], rax  {-0x344462a23efa6128}
00020863  48b807d57c362a29…  mov     rax, 0x629a292a367cd507
0002086d  48894710           mov     qword [rdi+0x10], rax  {0x629a292a367cd507}
00020871  48b817dd70305a01…  mov     rax, 0x9159015a3070dd17
0002087b  48894718           mov     qword [rdi+0x18], rax  {-0x6ea6fea5cf8f22e9}
0002087f  48b839590ef7d8ec…  mov     rax, 0x152fecd8f70e5939
00020889  48894720           mov     qword [rdi+0x20], rax  {0x152fecd8f70e5939}
0002088d  48b8310bc0ff6726…  mov     rax, 0x67332667ffc00b31
00020897  48894728           mov     qword [rdi+0x28], rax  {0x67332667ffc00b31}
0002089b  48b811155868874a…  mov     rax, 0x8eb44a8768581511
000208a5  48894730           mov     qword [rdi+0x30], rax  {-0x714bb57897a7eaef}
000208a9  48b8a78ff9640d2e…  mov     rax, 0xdb0c2e0d64f98fa7
000208b3  48894738           mov     qword [rdi+0x38], rax  {-0x24f3d1f29b067059}
000208b7  48b8a44ffabe1d48…  mov     rax, 0x47b5481dbefa4fa4
000208c1  48894740           mov     qword [rdi+0x40], rax  {0x47b5481dbefa4fa4}
000208c5  31c0               xor     eax, eax  {0x0}
000208c7  e93d5efeff         jmp     __x86_return_thunk
{ Does not return }


000208cc    void sha384_done(int64_t* arg1, int64_t arg2) __noreturn

000208cc  55                 push    rbp {__saved_rbp}
000208cd  53                 push    rbx {__saved_rbx}
000208ce  4883ec58           sub     rsp, 0x58
000208d2  64488b0425280000…  mov     rax, qword [fs:0x28]
000208db  4889442448         mov     qword [rsp+0x48 {var_20}], rax
000208e0  31c0               xor     eax, eax  {0x0}
000208e2  4885ff             test    rdi, rdi
000208e5  7515               jne     0x208fc

000208e7  ba44000000         mov     edx, 0x44
000208ec  488d35ba620100     lea     rsi, [rel data_36bad]  {"src/hashes/sha2/sha384.c"}
000208f3  488d3d9d620100     lea     rdi, [rel data_36b97]  {"md != NULL"}
000208fa  eb1b               jmp     0x20917

000208fc  4889f3             mov     rbx, rsi
000208ff  4885f6             test    rsi, rsi
00020902  7518               jne     0x2091c

00020904  ba45000000         mov     edx, 0x45
00020909  488d359d620100     lea     rsi, [rel data_36bad]  {"src/hashes/sha2/sha384.c"}
00020910  488d3dfc3b0100     lea     rdi, [rel data_34513]  {"out != NULL"}

00020917  e867220000         call    crypt_argchk
{ Does not return }

0002091c  48837f487f         cmp     qword [rdi+0x48], 0x7f
00020921  b810000000         mov     eax, 0x10
00020926  771c               ja      0x20944

00020928  488d6c2408         lea     rbp, [rsp+0x8 {var_60}]
0002092d  4889ee             mov     rsi, rbp {var_60}
00020930  e8c3020000         call    sha512_done
{ Does not return }

00020935                                                                 b9 0c 00 00 00 48 89 df 48 89 ee                       .....H..H..
00020940  f3 a5 31 c0                                                                                      ..1.

00020944  488b542448         mov     rdx, qword [rsp+0x48 {var_20}]
00020949  64482b1425280000…  sub     rdx, qword [fs:0x28]
00020952  7405               je      0x20959

00020954  e8b748feff         call    __stack_chk_fail
{ Does not return }

00020959  4883c458           add     rsp, 0x58
0002095d  5b                 pop     rbx {__saved_rbx}
0002095e  5d                 pop     rbp {__saved_rbp}
0002095f  e9a55dfeff         jmp     __x86_return_thunk
{ Does not return }


00020964    void sha512_test() __noreturn

00020964  b802000000         mov     eax, 0x2
00020969  e99b5dfeff         jmp     __x86_return_thunk
{ Does not return }


0002096e    void sha512_init(int64_t* arg1) __noreturn

0002096e  4885ff             test    rdi, rdi
00020971  7519               jne     0x2098c

00020973  52                 push    rdx {var_8}
00020974  488d3552620100     lea     rsi, [rel data_36bcd]  {"src/hashes/sha2/sha512.c"}
0002097b  baaf000000         mov     edx, 0xaf
00020980  488d3d10620100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020987  e8f7210000         call    crypt_argchk
{ Does not return }

0002098c  31c0               xor     eax, eax  {0x0}
0002098e  48894748           mov     qword [rdi+0x48], rax  {0x0}
00020992  488907             mov     qword [rdi], rax  {0x0}
00020995  48b808c9bcf367e6…  mov     rax, 0x6a09e667f3bcc908
0002099f  48894708           mov     qword [rdi+0x8], rax  {0x6a09e667f3bcc908}
000209a3  48b83ba7ca8485ae…  mov     rax, 0xbb67ae8584caa73b
000209ad  48894710           mov     qword [rdi+0x10], rax  {-0x4498517a7b3558c5}
000209b1  48b82bf894fe72f3…  mov     rax, 0x3c6ef372fe94f82b
000209bb  48894718           mov     qword [rdi+0x18], rax  {0x3c6ef372fe94f82b}
000209bf  48b8f1361d5f3af5…  mov     rax, 0xa54ff53a5f1d36f1
000209c9  48894720           mov     qword [rdi+0x20], rax  {-0x5ab00ac5a0e2c90f}
000209cd  48b8d182e6ad7f52…  mov     rax, 0x510e527fade682d1
000209d7  48894728           mov     qword [rdi+0x28], rax  {0x510e527fade682d1}
000209db  48b81f6c3e2b8c68…  mov     rax, 0x9b05688c2b3e6c1f
000209e5  48894730           mov     qword [rdi+0x30], rax  {-0x64fa9773d4c193e1}
000209e9  48b86bbd41fbabd9…  mov     rax, 0x1f83d9abfb41bd6b
000209f3  48894738           mov     qword [rdi+0x38], rax  {0x1f83d9abfb41bd6b}
000209f7  48b879217e1319cd…  mov     rax, 0x5be0cd19137e2179
00020a01  48894740           mov     qword [rdi+0x40], rax  {0x5be0cd19137e2179}
00020a05  31c0               xor     eax, eax  {0x0}
00020a07  e9fd5cfeff         jmp     __x86_return_thunk
{ Does not return }


00020a0c    void sha512_compress.isra.0(int64_t arg1, int64_t* arg2) __noreturn

00020a0c  4157               push    r15 {__saved_r15}
00020a0e  4989f8             mov     r8, rdi
00020a11  b910000000         mov     ecx, 0x10
00020a16  4156               push    r14 {__saved_r14}
00020a18  4155               push    r13 {__saved_r13}
00020a1a  4154               push    r12 {__saved_r12}
00020a1c  55                 push    rbp {__saved_rbp}
00020a1d  53                 push    rbx {__saved_rbx}
00020a1e  4881ecd8020000     sub     rsp, 0x2d8
00020a25  644c8b0c25280000…  mov     r9, qword [fs:0x28]
00020a2e  4c898c24c8020000   mov     qword [rsp+0x2c8 {var_40}], r9
00020a36  4989f1             mov     r9, rsi
00020a39  488d442408         lea     rax, [rsp+0x8 {var_300}]
00020a3e  488d7708           lea     rsi, [rdi+0x8]
00020a42  4889c7             mov     rdi, rax {var_300}
00020a45  31c0               xor     eax, eax  {0x0}
00020a47  f3a5               rep movsd dword [rdi], [rsi] {var_340} {var_300}  {0x0}

00020a49  498b0c01           mov     rcx, qword [r9+rax]
00020a4d  488d542448         lea     rdx, [rsp+0x48 {var_2c0}]
00020a52  480fc9             bswap   rcx
00020a55  48894c0448         mov     qword [rsp+rax+0x48 {var_2c0}], rcx
00020a5a  4883c008           add     rax, 0x8
00020a5e  483d80000000       cmp     rax, 0x80
00020a64  75e3               jne     0x20a49

00020a66  4c8d8c2448020000   lea     r9, [rsp+0x248 {var_c0}]

00020a6e  488b7a70           mov     rdi, qword [rdx+0x70]
00020a72  488b7208           mov     rsi, qword [rdx+0x8]
00020a76  4883c208           add     rdx, 0x8
00020a7a  4889f8             mov     rax, rdi
00020a7d  4989fb             mov     r11, rdi
00020a80  48c1ef06           shr     rdi, 0x6
00020a84  4889f1             mov     rcx, rsi
00020a87  48c1c813           ror     rax, 0x13
00020a8b  49c1cb3d           ror     r11, 0x3d
00020a8f  4c31d8             xor     rax, r11
00020a92  4989f2             mov     r10, rsi
00020a95  48c1ee07           shr     rsi, 0x7
00020a99  4831f8             xor     rax, rdi
00020a9c  488b7af8           mov     rdi, qword [rdx-0x8]
00020aa0  48037a40           add     rdi, qword [rdx+0x40]
00020aa4  48d1c9             ror     rcx, 0x1
00020aa7  49c1ca08           ror     r10, 0x8
00020aab  4c31d1             xor     rcx, r10
00020aae  4801f8             add     rax, rdi
00020ab1  4831f1             xor     rcx, rsi
00020ab4  4801c8             add     rax, rcx
00020ab7  48894278           mov     qword [rdx+0x78], rax
00020abb  4c39ca             cmp     rdx, r9 {var_c0}
00020abe  75ae               jne     0x20a6e

00020ac0  488b742440         mov     rsi, qword [rsp+0x40 {var_2c8}]
00020ac5  488b4c2428         mov     rcx, qword [rsp+0x28 {var_2e0}]
00020aca  4531d2             xor     r10d, r10d  {0x0}
00020acd  4c8b4c2438         mov     r9, qword [rsp+0x38 {var_2d0}]
00020ad2  488b5c2430         mov     rbx, qword [rsp+0x30 {var_2d8}]
00020ad7  488b542408         mov     rdx, qword [rsp+0x8 {var_300}]
00020adc  488b7c2410         mov     rdi, qword [rsp+0x10 {var_2f8}]
00020ae1  4c8b5c2418         mov     r11, qword [rsp+0x18 {var_2f0}]
00020ae6  4c8b6c2420         mov     r13, qword [rsp+0x20 {var_2e8}]

00020aeb  4c8d3d4e8b0100     lea     r15, [rel K]
00020af2  4889c8             mov     rax, rcx
00020af5  4989ce             mov     r14, rcx
00020af8  4989cc             mov     r12, rcx
00020afb  49c1ce12           ror     r14, 0x12
00020aff  48c1c80e           ror     rax, 0xe
00020b03  4c31f0             xor     rax, r14
00020b06  4a8b6c1448         mov     rbp, qword [rsp+r10+0x48 {var_2c0}]
00020b0b  4b032c17           add     rbp, qword [r15+r10]
00020b0f  4989d7             mov     r15, rdx
00020b12  49c1cc29           ror     r12, 0x29
00020b16  4c31e0             xor     rax, r12
00020b19  4921ff             and     r15, rdi
00020b1c  4989d4             mov     r12, rdx
00020b1f  4983c208           add     r10, 0x8
00020b23  4801e8             add     rax, rbp
00020b26  4c89cd             mov     rbp, r9
00020b29  4831dd             xor     rbp, rbx
00020b2c  4821cd             and     rbp, rcx
00020b2f  4c31cd             xor     rbp, r9
00020b32  4801e8             add     rax, rbp
00020b35  4889d5             mov     rbp, rdx
00020b38  4c8d3430           lea     r14, [rax+rsi]
00020b3c  4889d6             mov     rsi, rdx
00020b3f  4889d0             mov     rax, rdx
00020b42  4809fe             or      rsi, rdi
00020b45  4c21de             and     rsi, r11
00020b48  4c09fe             or      rsi, r15
00020b4b  48c1c81c           ror     rax, 0x1c
00020b4f  49c1cc22           ror     r12, 0x22
00020b53  4c31e0             xor     rax, r12
00020b56  4c01f6             add     rsi, r14
00020b59  4d01ee             add     r14, r13
00020b5c  4d89dd             mov     r13, r11
00020b5f  48c1cd27           ror     rbp, 0x27
00020b63  4831e8             xor     rax, rbp
00020b66  4801f0             add     rax, rsi
00020b69  4c89ce             mov     rsi, r9
00020b6c  4981fa80020000     cmp     r10, 0x280
00020b73  7417               je      0x20b8c

00020b75  4989fb             mov     r11, rdi
00020b78  4989d9             mov     r9, rbx
00020b7b  4889d7             mov     rdi, rdx
00020b7e  4889cb             mov     rbx, rcx
00020b81  4889c2             mov     rdx, rax
00020b84  4c89f1             mov     rcx, r14
00020b87  e95fffffff         jmp     0x20aeb

00020b8c  4c894c2440         mov     qword [rsp+0x40 {var_2c8_1}], r9
00020b91  48895c2438         mov     qword [rsp+0x38 {var_2d0_1}], rbx
00020b96  48894c2430         mov     qword [rsp+0x30 {var_2d8_1}], rcx
00020b9b  4c89742428         mov     qword [rsp+0x28 {var_2e0_1}], r14
00020ba0  4c895c2420         mov     qword [rsp+0x20 {var_2e8_1}], r11
00020ba5  48897c2418         mov     qword [rsp+0x18 {var_2f0_1}], rdi
00020baa  4889542410         mov     qword [rsp+0x10 {var_2f8_1}], rdx
00020baf  4889442408         mov     qword [rsp+0x8 {var_300}], rax
00020bb4  31c0               xor     eax, eax  {0x0}

00020bb6  488b540408         mov     rdx, qword [rsp+rax+0x8 {var_300}]
00020bbb  4901540008         add     qword [r8+rax+0x8], rdx
00020bc0  4883c008           add     rax, 0x8
00020bc4  4883f840           cmp     rax, 0x40
00020bc8  75ec               jne     0x20bb6

00020bca  488b8424c8020000   mov     rax, qword [rsp+0x2c8 {var_40}]
00020bd2  64482b0425280000…  sub     rax, qword [fs:0x28]
00020bdb  7405               je      0x20be2

00020bdd  e82e46feff         call    __stack_chk_fail
{ Does not return }

00020be2  4881c4d8020000     add     rsp, 0x2d8
00020be9  5b                 pop     rbx {__saved_rbx}
00020bea  5d                 pop     rbp {__saved_rbp}
00020beb  415c               pop     r12 {__saved_r12}
00020bed  415d               pop     r13 {__saved_r13}
00020bef  415e               pop     r14 {__saved_r14}
00020bf1  415f               pop     r15 {__saved_r15}
00020bf3  e9115bfeff         jmp     __x86_return_thunk
{ Does not return }


00020bf8    void sha512_done(int64_t* arg1, int64_t arg2) __noreturn

00020bf8  4154               push    r12 {__saved_r12}
00020bfa  55                 push    rbp {__saved_rbp}
00020bfb  53                 push    rbx {__saved_rbx}
00020bfc  4885ff             test    rdi, rdi
00020bff  7515               jne     0x20c16

00020c01  bad0000000         mov     edx, 0xd0
00020c06  488d35c05f0100     lea     rsi, [rel data_36bcd]  {"src/hashes/sha2/sha512.c"}
00020c0d  488d3d835f0100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020c14  eb1b               jmp     0x20c31

00020c16  4889f5             mov     rbp, rsi
00020c19  4885f6             test    rsi, rsi
00020c1c  7518               jne     0x20c36

00020c1e  bad1000000         mov     edx, 0xd1
00020c23  488d35a35f0100     lea     rsi, [rel data_36bcd]  {"src/hashes/sha2/sha512.c"}
00020c2a  488d3de2380100     lea     rdi, [rel data_34513]  {"out != NULL"}

00020c31  e84d1f0000         call    crypt_argchk
{ Does not return }

00020c36  488b5748           mov     rdx, qword [rdi+0x48]
00020c3a  4889fb             mov     rbx, rdi
00020c3d  b810000000         mov     eax, 0x10
00020c42  4883fa7f           cmp     rdx, 0x7f
00020c46  0f8784000000       ja      0x20cd0

00020c4c  488b07             mov     rax, qword [rdi]
00020c4f  4c8d24d0           lea     r12, [rax+rdx*8]
00020c53  488d4201           lea     rax, [rdx+0x1]
00020c57  4c8927             mov     qword [rdi], r12
00020c5a  48894748           mov     qword [rdi+0x48], rax
00020c5e  c644175080         mov     byte [rdi+rdx+0x50], 0x80
00020c63  4883f870           cmp     rax, 0x70
00020c67  7624               jbe     0x20c8d

00020c69  483d80000000       cmp     rax, 0x80
00020c6f  740e               je      0x20c7f

00020c71  48ffc0             inc     rax
00020c74  48894348           mov     qword [rbx+0x48], rax
00020c78  c644034f00         mov     byte [rbx+rax+0x4f], 0x0
00020c7d  ebea               jmp     0x20c69

00020c7f  488d7350           lea     rsi, [rbx+0x50]
00020c83  4889df             mov     rdi, rbx
00020c86  e881fdffff         call    sha512_compress.isra.0
{ Does not return }

00020c8b                                   31 c0                                                                      1.

00020c8d  48ffc0             inc     rax
00020c90  48894348           mov     qword [rbx+0x48], rax
00020c94  c644034f00         mov     byte [rbx+rax+0x4f], 0x0
00020c99  4883f878           cmp     rax, 0x78
00020c9d  75ee               jne     0x20c8d

00020c9f  490fcc             bswap   r12
00020ca2  4c89a3c8000000     mov     qword [rbx+0xc8], r12
00020ca9  488d7350           lea     rsi, [rbx+0x50]
00020cad  4889df             mov     rdi, rbx
00020cb0  e857fdffff         call    sha512_compress.isra.0
{ Does not return }


00020cb5    void sub_20cb5(int64_t arg1 @ rbx, uint64_t* arg2 @ rbp, int64_t arg3, int64_t arg4) __noreturn

00020cb5  31c0               xor     eax, eax  {0x0}

00020cb7  488b540308         mov     rdx, qword [rbx+rax+0x8]
00020cbc  480fca             bswap   rdx
00020cbf  4889540500         mov     qword [rbp+rax], rdx
00020cc4  4883c008           add     rax, 0x8
00020cc8  4883f840           cmp     rax, 0x40
00020ccc  75e9               jne     0x20cb7

00020cce  31c0               xor     eax, eax  {0x0}
00020cd0  5b                 pop     rbx {__return_addr}
00020cd1  5d                 pop     rbp {arg3}
00020cd2  415c               pop     r12 {arg4}
00020cd4  e9305afeff         jmp     __x86_return_thunk
{ Does not return }


{ Continuation of function sha512_done }

00020cd0  5b                 pop     rbx {__saved_rbx}
00020cd1  5d                 pop     rbp {__saved_rbp}
00020cd2  415c               pop     r12 {__saved_r12}
00020cd4  e9305afeff         jmp     __x86_return_thunk
{ Does not return }


00020cd9    void sha512_process(int64_t* arg1, int64_t* arg2, int64_t arg3) __noreturn

00020cd9  4156               push    r14 {__saved_r14}
00020cdb  4155               push    r13 {__saved_r13}
00020cdd  4154               push    r12 {__saved_r12}
00020cdf  55                 push    rbp {__saved_rbp}
00020ce0  53                 push    rbx {__saved_rbx}
00020ce1  4885ff             test    rdi, rdi
00020ce4  7515               jne     0x20cfb

00020ce6  bac4000000         mov     edx, 0xc4
00020ceb  488d35db5e0100     lea     rsi, [rel data_36bcd]  {"src/hashes/sha2/sha512.c"}
00020cf2  488d3d9e5e0100     lea     rdi, [rel data_36b97]  {"md != NULL"}
00020cf9  eb1b               jmp     0x20d16

00020cfb  4989f4             mov     r12, rsi
00020cfe  4885f6             test    rsi, rsi
00020d01  7518               jne     0x20d1b

00020d03  bac4000000         mov     edx, 0xc4
00020d08  488d35be5e0100     lea     rsi, [rel data_36bcd]  {"src/hashes/sha2/sha512.c"}
00020d0f  488d3d8c5e0100     lea     rdi, [rel data_36ba2]  {"in != NULL"}

00020d16  e8681e0000         call    crypt_argchk
{ Does not return }

00020d1b  48817f4880000000   cmp     qword [rdi+0x48], 0x80
00020d23  4889fb             mov     rbx, rdi
00020d26  b810000000         mov     eax, 0x10
00020d2b  0f87a5000000       ja      0x20dd6

00020d31  4889d1             mov     rcx, rdx
00020d34  48030f             add     rcx, qword [rdi]
00020d37  4889d5             mov     rbp, rdx
00020d3a  b819000000         mov     eax, 0x19
00020d3f  41be80000000       mov     r14d, 0x80
00020d45  0f828b000000       jb      0x20dd6

00020d4b  4885ed             test    rbp, rbp
00020d4e  0f8480000000       je      0x20dd4

00020d54  488b7b48           mov     rdi, qword [rbx+0x48]
00020d58  4885ff             test    rdi, rdi
00020d5b  7522               jne     0x20d7f

00020d5d  4883fd7f           cmp     rbp, 0x7f
00020d61  761c               jbe     0x20d7f

00020d63  4c89e6             mov     rsi, r12
00020d66  4889df             mov     rdi, rbx
00020d69  4983ec80           sub     r12, 0xffffffffffffff80
00020d6d  4883c580           add     rbp, 0xffffffffffffff80
00020d71  e896fcffff         call    sha512_compress.isra.0
{ Does not return }

00020d76                                                                    48 81 03 00 04 00 00 eb cc                           H........

00020d7f  4d89f5             mov     r13, r14  {0x80}
00020d82  488d5350           lea     rdx, [rbx+0x50]
00020d86  4c89e6             mov     rsi, r12
00020d89  4929fd             sub     r13, rdi
00020d8c  488d043a           lea     rax, [rdx+rdi]
00020d90  4939ed             cmp     r13, rbp
00020d93  4889c7             mov     rdi, rax
00020d96  4c0f47ed           cmova   r13, rbp
00020d9a  4c89e9             mov     rcx, r13
00020d9d  f3a4               rep movsb byte [rdi], [rsi]  {0x0}
00020d9f  488b4348           mov     rax, qword [rbx+0x48]
00020da3  4c01e8             add     rax, r13
00020da6  48894348           mov     qword [rbx+0x48], rax
00020daa  4989f4             mov     r12, rsi
00020dad  483d80000000       cmp     rax, 0x80
00020db3  7405               je      0x20dba

00020db5  4c29ed             sub     rbp, r13
00020db8  eb91               jmp     0x20d4b

00020dba  4889d6             mov     rsi, rdx
00020dbd  4889df             mov     rdi, rbx
00020dc0  e847fcffff         call    sha512_compress.isra.0
{ Does not return }

00020dc5                 31 c0 48 81 03 00 04 00 00 48 89 43 48 eb e1                                           1.H......H.CH..

00020dd4  31c0               xor     eax, eax  {0x0}

00020dd6  5b                 pop     rbx {__saved_rbx}
00020dd7  5d                 pop     rbp {__saved_rbp}
00020dd8  415c               pop     r12 {__saved_r12}
00020dda  415d               pop     r13 {__saved_r13}
00020ddc  415e               pop     r14 {__saved_r14}
00020dde  e92659feff         jmp     __x86_return_thunk
{ Does not return }


00020de3    void hmac_done(void* arg1, int64_t arg2) __noreturn

00020de3  4157               push    r15 {var_8}
00020de5  4156               push    r14 {var_10}
00020de7  4155               push    r13 {var_18}
00020de9  4154               push    r12 {var_20}
00020deb  55                 push    rbp {var_28}
00020dec  53                 push    rbx {var_30}
00020ded  4881ec28010000     sub     rsp, 0x128
00020df4  64488b0425280000…  mov     rax, qword [fs:0x28]
00020dfd  4889842418010000   mov     qword [rsp+0x118 {var_40}], rax
00020e05  31c0               xor     eax, eax  {0x0}
00020e07  4885ff             test    rdi, rdi
00020e0a  7515               jne     0x20e21

00020e0c  ba21000000         mov     edx, 0x21
00020e11  488d35ce5d0100     lea     rsi, [rel data_36be6]  {"src/mac/hmac/hmac_done.c"}
00020e18  488d3de05d0100     lea     rdi, [rel data_36bff]  {"hmac != NULL"}
00020e1f  eb1b               jmp     0x20e3c

00020e21  4989f4             mov     r12, rsi
00020e24  4885f6             test    rsi, rsi
00020e27  7518               jne     0x20e41

00020e29  ba22000000         mov     edx, 0x22
00020e2e  488d35b15d0100     lea     rsi, [rel data_36be6]  {"src/mac/hmac/hmac_done.c"}
00020e35  488d3dd7360100     lea     rdi, [rel data_34513]  {"out != NULL"}

00020e3c  e8421d0000         call    crypt_argchk
{ Does not return }

00020e41  4c63afd0000000     movsxd  r13, dword [rdi+0xd0]
00020e48  4889fb             mov     rbx, rdi
00020e4b  4889d5             mov     rbp, rdx
00020e4e  4489ef             mov     edi, r13d
00020e51  e8121e0000         call    hash_is_valid
{ Does not return }

00020e56                                                                    85 c0 0f 85 06 01 00 00 49 69                        ........Ii
00020e60  d5 d0 00 00 00 4c 8d 3d 34 5d 02 00 48 89 df 48 8d 84 24 98 00 00 00 4c 01 fa 4c 8b 72 10 48 89  .....L.=4]..H..H..$....L..L.r.H.
00020e80  04 24 48 8b 82 b8 00 00 00 48 8b 34 24 48 89 54 24 08 e8 95 58 fe ff 85 c0 0f 85 b3 00 00 00 48  .$H......H.4$H.T$...X..........H
00020ea0  8b 54 24 08 31 c0 48 8b 72 18 48 39 c6 74 16 48 8b 93 a8 01 00 00 8a 14 02 83 f2 5c 88 54 04 18  .T$.1.H.r.H9.t.H...........\.T..
00020ec0  48 ff c0 eb e5 4d 69 ed d0 00 00 00 48 89 df 4d 01 ef 49 8b 87 a8 00 00 00 e8 4e 58 fe ff 85 c0  H....Mi.....H..M..I.......NX....
00020ee0  75 70 4c 8d 6c 24 18 49 8b 87 b0 00 00 00 49 8b 57 18 48 89 df 4c 89 ee e8 2f 58 fe ff 85 c0 75  upL.l$.I......I.W.H..L.../X....u
00020f00  51 49 8b 87 b0 00 00 00 48 8b 34 24 4c 89 f2 48 89 df e8 15 58 fe ff 85 c0 75 37 49 8b 87 b8 00  QI......H.4$L..H....X....u7I....
00020f20  00 00 4c 89 ee 48 89 df e8 ff 57 fe ff 31 d2 85 c0 75 1f 4c 39 f2 75 06 48 89 55 00 eb 14 48 3b  ..L..H....W..1...u.L9.u.H.U...H;
00020f40  55 00 73 f4 41 8a 4c 15 00 41 88 0c 14 48 ff c2 eb e1 48 8b bb a8 01 00 00 89 04 24 e8 ff 40 fe  U.s.A.L..A...H....H........$..@.
00020f60  ff 8b 04 24 48 8b 94 24 18 01 00 00 64 48 2b 14 25 28 00 00 00 74 05 e8 94 42 fe ff 48 81 c4 28  ...$H..$....dH+.%(...t...B..H..(
00020f80  01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 77 57 fe ff                                            ...[]A\A]A^A_.wW..

00020f92    void hmac_init(int64_t arg1, int32_t arg2, int64_t arg3) __noreturn

00020f92  4157               push    r15 {var_8}
00020f94  4156               push    r14 {var_10}
00020f96  4155               push    r13 {var_18}
00020f98  4154               push    r12 {var_20}
00020f9a  55                 push    rbp {var_28}
00020f9b  53                 push    rbx {var_30}
00020f9c  4881eca8000000     sub     rsp, 0xa8
00020fa3  64488b0425280000…  mov     rax, qword [fs:0x28]
00020fac  4889842498000000   mov     qword [rsp+0x98 {var_40}], rax
00020fb4  31c0               xor     eax, eax  {0x0}
00020fb6  4885ff             test    rdi, rdi
00020fb9  7515               jne     0x20fd0

00020fbb  ba23000000         mov     edx, 0x23
00020fc0  488d35455c0100     lea     rsi, [rel data_36c0c]  {"src/mac/hmac/hmac_init.c"}
00020fc7  488d3d315c0100     lea     rdi, [rel data_36bff]  {"hmac != NULL"}
00020fce  eb1b               jmp     0x20feb

00020fd0  4189f6             mov     r14d, esi
00020fd3  4885d2             test    rdx, rdx
00020fd6  7518               jne     0x20ff0

00020fd8  ba24000000         mov     edx, 0x24
00020fdd  488d35285c0100     lea     rsi, [rel data_36c0c]  {"src/mac/hmac/hmac_init.c"}
00020fe4  488d3d5d5b0100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}

00020feb  e8931b0000         call    crypt_argchk
{ Does not return }

00020ff0  4889fb             mov     rbx, rdi
00020ff3  89f7               mov     edi, esi
00020ff5  4889542408         mov     qword [rsp+0x8 {var_d0}], rdx
00020ffa  4889cd             mov     rbp, rcx
00020ffd  e8661c0000         call    hash_is_valid
{ Does not return }

00021002        85 c0 0f 85 2a 01 00 00 44 89 b3 d0 00 00 00 b8 03 00 00 00 48 85 ed 0f 84 15 01 00 00 4d    ....*...D...........H........M
00021020  63 ee 4c 8d 25 77 5b 02 00 49 69 cd d0 00 00 00 4c 01 e1 48 8b 79 18 4c 8b 79 10 48 89 0c 24 e8  c.L.%w[..Ii.....L..H.y.L.y.H..$.
00021040  cc a5 fe ff 48 89 c2 48 89 83 a8 01 00 00 b8 0d 00 00 00 48 85 d2 0f 84 d8 00 00 00 48 8b 0c 24  ....H..H...........H........H..$
00021060  48 8b 74 24 08 48 8b 41 18 48 39 e8 73 21 48 89 d1 4c 8d 44 24 10 48 89 ea 44 89 f7 48 89 44 24  H.t$.H.A.H9.s!H..L.D$.H..D..H.D$
00021080  10 e8 cb 4e 00 00 85 c0 74 10 e9 93 00 00 00 48 89 d7 48 89 e9 49 89 ef f3 a4 49 69 c5 d0 00 00  ...N....t......H..H..I....Ii....
000210a0  00 49 8b 74 04 18 49 39 f7 73 12 48 8b bb a8 01 00 00 4c 29 fe 4c 01 ff e8 81 1d 00 00 49 69 c5  .I.t..I9.s.H......L).L.......Ii.
000210c0  d0 00 00 00 49 8b 4c 04 18 31 c0 48 39 c1 74 16 48 8b 93 a8 01 00 00 8a 14 02 83 f2 36 88 54 04  ....I.L..1.H9.t.H...........6.T.
000210e0  18 48 ff c0 eb e5 4d 69 ed d0 00 00 00 48 89 df 4d 01 ec 49 8b 84 24 a8 00 00 00 e8 2c 56 fe ff  .H....Mi.....H..M..I..$.....,V..
00021100  85 c0 75 1e 49 8b 84 24 b0 00 00 00 49 8b 54 24 18 48 8d 74 24 18 48 89 df e8 0e 56 fe ff 85 c0  ..u.I..$....I.T$.H.t$.H....V....
00021120  74 12 48 8b bb a8 01 00 00 89 04 24 e8 2f 3f fe ff 8b 04 24 48 8b 94 24 98 00 00 00 64 48 2b 14  t.H........$./?....$H..$....dH+.
00021140  25 28 00 00 00 74 05 e8 c4 40 fe ff 48 81 c4 a8 00 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 a7 55  %(...t...@..H......[]A\A]A^A_..U
00021160  fe ff                                                                                            ..

00021162    void hmac_process(void* arg1, int64_t arg2) __noreturn

00021162  4154               push    r12 {var_8}
00021164  53                 push    rbx {var_10}
00021165  4883ec18           sub     rsp, 0x18
00021169  4885ff             test    rdi, rdi
0002116c  7515               jne     0x21183

0002116e  ba1c000000         mov     edx, 0x1c
00021173  488d35ab5a0100     lea     rsi, [rel data_36c25]  {"src/mac/hmac/hmac_process.c"}
0002117a  488d3d7e5a0100     lea     rdi, [rel data_36bff]  {"hmac != NULL"}
00021181  eb18               jmp     0x2119b

00021183  4885f6             test    rsi, rsi
00021186  7518               jne     0x211a0

00021188  ba1d000000         mov     edx, 0x1d
0002118d  488d35915a0100     lea     rsi, [rel data_36c25]  {"src/mac/hmac/hmac_process.c"}
00021194  488d3d075a0100     lea     rdi, [rel data_36ba2]  {"in != NULL"}

0002119b  e8e3190000         call    crypt_argchk
{ Does not return }

000211a0  4889fb             mov     rbx, rdi
000211a3  8bbfd0000000       mov     edi, dword [rdi+0xd0]
000211a9  4889742408         mov     qword [rsp+0x8 {var_20}], rsi
000211ae  4989d4             mov     r12, rdx
000211b1  e8b21a0000         call    hash_is_valid
{ Does not return }

000211b6                                                                    85 c0 75 34 48 63 83 d0 00 00                        ..u4Hc....
000211c0  00 48 8d 15 d8 59 02 00 48 8b 74 24 08 48 89 df 48 69 c0 d0 00 00 00 48 8b 84 02 b0 00 00 00 48  .H...Y..H.t$.H..Hi.....H.......H
000211e0  83 c4 18 4c 89 e2 5b 41 5c e9 3e 55 fe ff 48 83 c4 18 5b 41 5c e9 0f 55 fe ff                    ...L..[A\.>U..H...[A\..U..

000211fa    void _poly1305_block(int32_t* arg1, int32_t* arg2, int64_t arg3) __noreturn

000211fa  4157               push    r15 {__saved_r15}
000211fc  4889f9             mov     rcx, rdi
000211ff  4989d0             mov     r8, rdx
00021202  31d2               xor     edx, edx  {0x0}
00021204  83795000           cmp     dword [rcx+0x50], 0x0
00021208  8b4124             mov     eax, dword [rcx+0x24]
0002120b  4156               push    r14 {__saved_r14}
0002120d  4155               push    r13 {__saved_r13}
0002120f  0f94c2             sete    dl
00021212  448b711c           mov     r14d, dword [rcx+0x1c]
00021216  4154               push    r12 {__saved_r12}
00021218  c1e218             shl     edx, 0x18
0002121b  55                 push    rbp {__saved_rbp}
0002121c  6b691005           imul    ebp, dword [rcx+0x10], 0x5
00021220  53                 push    rbx {__saved_rbx}
00021221  448b5704           mov     r10d, dword [rdi+0x4]
00021225  4889f3             mov     rbx, rsi
00021228  448b5f08           mov     r11d, dword [rdi+0x8]
0002122c  448b670c           mov     r12d, dword [rdi+0xc]
00021230  456bea05           imul    r13d, r10d, 0x5
00021234  448b4f14           mov     r9d, dword [rdi+0x14]
00021238  8b7120             mov     esi, dword [rcx+0x20]
0002123b  456bfb05           imul    r15d, r11d, 0x5
0002123f  895424d4           mov     dword [rsp-0x2c {var_5c}], edx
00021243  4889da             mov     rdx, rbx
00021246  8b7f18             mov     edi, dword [rdi+0x18]
00021249  8b19               mov     ebx, dword [rcx]
0002124b  4c896c24f0         mov     qword [rsp-0x10 {var_40}], r13
00021250  4589dd             mov     r13d, r11d
00021253  4589e3             mov     r11d, r12d
00021256  4c895c24c8         mov     qword [rsp-0x38 {var_68}], r11
0002125b  448b5910           mov     r11d, dword [rcx+0x10]
0002125f  4c897c24c0         mov     qword [rsp-0x40 {var_70}], r15
00021264  456bfc05           imul    r15d, r12d, 0x5
00021268  4c895c24f8         mov     qword [rsp-0x8 {var_38}], r11
0002126d  4e8d1c02           lea     r11, [rdx+r8]
00021271  4c895c24e8         mov     qword [rsp-0x18 {var_48}], r11

00021276  448b02             mov     r8d, dword [rdx]
00021279  4181e0ffffff03     and     r8d, 0x3ffffff
00021280  478d1c08           lea     r11d, [r8+r9]
00021284  448b4203           mov     r8d, dword [rdx+0x3]
00021288  448b4a0c           mov     r9d, dword [rdx+0xc]
0002128c  41c1e802           shr     r8d, 0x2
00021290  41c1e908           shr     r9d, 0x8
00021294  4181e0ffffff03     and     r8d, 0x3ffffff
0002129b  4101f8             add     r8d, edi
0002129e  8b7a09             mov     edi, dword [rdx+0x9]
000212a1  4589c0             mov     r8d, r8d
000212a4  c1ef06             shr     edi, 0x6
000212a7  4d89c4             mov     r12, r8
000212aa  01f7               add     edi, esi
000212ac  8b7206             mov     esi, dword [rdx+0x6]
000212af  4c0fafe5           imul    r12, rbp
000212b3  89ff               mov     edi, edi
000212b5  c1ee04             shr     esi, 0x4
000212b8  81e6ffffff03       and     esi, 0x3ffffff
000212be  4401f6             add     esi, r14d
000212c1  448b7424d4         mov     r14d, dword [rsp-0x2c {var_5c}]
000212c6  89f6               mov     esi, esi
000212c8  4509f1             or      r9d, r14d
000212cb  4d89de             mov     r14, r11
000212ce  4101c1             add     r9d, eax
000212d1  488b4424c0         mov     rax, qword [rsp-0x40 {var_70}]
000212d6  4d0faff2           imul    r14, r10
000212da  4589c9             mov     r9d, r9d
000212dd  480fafc7           imul    rax, rdi
000212e1  4c01e0             add     rax, r12
000212e4  4d89dc             mov     r12, r11
000212e7  4c0fafe3           imul    r12, rbx
000212eb  4901c4             add     r12, rax
000212ee  4889f0             mov     rax, rsi
000212f1  490fafc7           imul    rax, r15
000212f5  4c01e0             add     rax, r12
000212f8  4c8b6424f0         mov     r12, qword [rsp-0x10 {var_40}]
000212fd  4d0fafe1           imul    r12, r9
00021301  4c01e0             add     rax, r12
00021304  4989dc             mov     r12, rbx
00021307  4d0fafe0           imul    r12, r8
0002130b  4d01f4             add     r12, r14
0002130e  4989fe             mov     r14, rdi
00021311  4d0faff7           imul    r14, r15
00021315  4d01e6             add     r14, r12
00021318  4989ec             mov     r12, rbp
0002131b  4c0fafe6           imul    r12, rsi
0002131f  4d01f4             add     r12, r14
00021322  4c8b7424c0         mov     r14, qword [rsp-0x40 {var_70}]
00021327  4d0faff1           imul    r14, r9
0002132b  4d01e6             add     r14, r12
0002132e  4d89c4             mov     r12, r8
00021331  4c897424d8         mov     qword [rsp-0x28 {var_58_1}], r14
00021336  4d89de             mov     r14, r11
00021339  4d0fafe2           imul    r12, r10
0002133d  4d0faff5           imul    r14, r13
00021341  4d01f4             add     r12, r14
00021344  4989de             mov     r14, rbx
00021347  4c0faff6           imul    r14, rsi
0002134b  4d01e6             add     r14, r12
0002134e  4989ec             mov     r12, rbp
00021351  4c0fafe7           imul    r12, rdi
00021355  4d01f4             add     r12, r14
00021358  4d89fe             mov     r14, r15
0002135b  4d0faff1           imul    r14, r9
0002135f  4d01e6             add     r14, r12
00021362  4c8b6424c8         mov     r12, qword [rsp-0x38 {var_68}]
00021367  4c897424e0         mov     qword [rsp-0x20 {var_50_1}], r14
0002136c  4d89c6             mov     r14, r8
0002136f  4d0fafe3           imul    r12, r11
00021373  4d0faff5           imul    r14, r13
00021377  4d01e6             add     r14, r12
0002137a  4989dc             mov     r12, rbx
0002137d  4c0fafe7           imul    r12, rdi
00021381  490faffa           imul    rdi, r10
00021385  4d01f4             add     r12, r14
00021388  4989f6             mov     r14, rsi
0002138b  4d0faff2           imul    r14, r10
0002138f  490faff5           imul    rsi, r13
00021393  4d01e6             add     r14, r12
00021396  4989ec             mov     r12, rbp
00021399  4d0fafe1           imul    r12, r9
0002139d  4c0fafcb           imul    r9, rbx
000213a1  4d01f4             add     r12, r14
000213a4  4c8b7424f8         mov     r14, qword [rsp-0x8 {var_38}]
000213a9  4d0fafde           imul    r11, r14
000213ad  4c8b7424c8         mov     r14, qword [rsp-0x38 {var_68}]
000213b2  4d0fafc6           imul    r8, r14
000213b6  4d01d8             add     r8, r11
000213b9  4c01c7             add     rdi, r8
000213bc  4801fe             add     rsi, rdi
000213bf  89c7               mov     edi, eax
000213c1  48c1e81a           shr     rax, 0x1a
000213c5  4901f1             add     r9, rsi
000213c8  488b7424d8         mov     rsi, qword [rsp-0x28 {var_58_1}]
000213cd  89c0               mov     eax, eax
000213cf  81e7ffffff03       and     edi, 0x3ffffff
000213d5  4801f0             add     rax, rsi
000213d8  488b7424e0         mov     rsi, qword [rsp-0x20 {var_50_1}]
000213dd  4189c0             mov     r8d, eax
000213e0  48c1e81a           shr     rax, 0x1a
000213e4  89c0               mov     eax, eax
000213e6  4181e0ffffff03     and     r8d, 0x3ffffff
000213ed  4801f0             add     rax, rsi
000213f0  4189c6             mov     r14d, eax
000213f3  4181e6ffffff03     and     r14d, 0x3ffffff
000213fa  48c1e81a           shr     rax, 0x1a
000213fe  4883c210           add     rdx, 0x10
00021402  89c0               mov     eax, eax
00021404  4c01e0             add     rax, r12
00021407  89c6               mov     esi, eax
00021409  48c1e81a           shr     rax, 0x1a
0002140d  89c0               mov     eax, eax
0002140f  81e6ffffff03       and     esi, 0x3ffffff
00021415  4901c1             add     r9, rax
00021418  4489c8             mov     eax, r9d
0002141b  49c1e91a           shr     r9, 0x1a
0002141f  478d0c89           lea     r9d, [r9+r9*4]
00021423  25ffffff03         and     eax, 0x3ffffff
00021428  4401cf             add     edi, r9d
0002142b  4189f9             mov     r9d, edi
0002142e  c1ef1a             shr     edi, 0x1a
00021431  4401c7             add     edi, r8d
00021434  4c8b4424e8         mov     r8, qword [rsp-0x18 {var_48}]
00021439  4181e1ffffff03     and     r9d, 0x3ffffff
00021440  4929d0             sub     r8, rdx
00021443  4983f80f           cmp     r8, 0xf
00021447  0f8729feffff       ja      0x21276

0002144d  5b                 pop     rbx {__saved_rbx}
0002144e  4489711c           mov     dword [rcx+0x1c], r14d
00021452  5d                 pop     rbp {__saved_rbp}
00021453  44894914           mov     dword [rcx+0x14], r9d
00021457  415c               pop     r12 {__saved_r12}
00021459  415d               pop     r13 {__saved_r13}
0002145b  897918             mov     dword [rcx+0x18], edi
0002145e  415e               pop     r14 {__saved_r14}
00021460  415f               pop     r15 {__saved_r15}
00021462  897120             mov     dword [rcx+0x20], esi
00021465  894124             mov     dword [rcx+0x24], eax
00021468  e99c52feff         jmp     __x86_return_thunk
{ Does not return }


0002146d    void poly1305_init(int32_t* arg1, int32_t* arg2, int64_t arg3) __noreturn

0002146d  4152               push    r10 {var_8}
0002146f  4885ff             test    rdi, rdi
00021472  7515               jne     0x21489

00021474  ba5b000000         mov     edx, 0x5b
00021479  488d35c1570100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
00021480  488d3dd6570100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00021487  eb1b               jmp     0x214a4

00021489  4889f1             mov     rcx, rsi
0002148c  4885f6             test    rsi, rsi
0002148f  7518               jne     0x214a9

00021491  ba5c000000         mov     edx, 0x5c
00021496  488d35a4570100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
0002149d  488d3da4560100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}

000214a4  e8da160000         call    crypt_argchk
{ Does not return }

000214a9  4883fa20           cmp     rdx, 0x20
000214ad  7415               je      0x214c4

000214af  ba5d000000         mov     edx, 0x5d
000214b4  488d3586570100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
000214bb  488d3da6570100     lea     rdi, [rel data_36c68]  {"keylen == 32"}
000214c2  ebe0               jmp     0x214a4

000214c4  8b16               mov     edx, dword [rsi]
000214c6  4889f8             mov     rax, rdi
000214c9  4531c0             xor     r8d, r8d  {0x0}
000214cc  81e2ffffff03       and     edx, 0x3ffffff
000214d2  8917               mov     dword [rdi], edx
000214d4  8b5603             mov     edx, dword [rsi+0x3]
000214d7  c1ea02             shr     edx, 0x2
000214da  81e203ffff03       and     edx, 0x3ffff03
000214e0  895704             mov     dword [rdi+0x4], edx
000214e3  8b5606             mov     edx, dword [rsi+0x6]
000214e6  c1ea04             shr     edx, 0x4
000214e9  81e2ffc0ff03       and     edx, 0x3ffc0ff
000214ef  895708             mov     dword [rdi+0x8], edx
000214f2  8b5609             mov     edx, dword [rsi+0x9]
000214f5  c1ea06             shr     edx, 0x6
000214f8  81e2ff3ff003       and     edx, 0x3f03fff
000214fe  89570c             mov     dword [rdi+0xc], edx
00021501  8b560c             mov     edx, dword [rsi+0xc]
00021504  31f6               xor     esi, esi  {0x0}
00021506  48897718           mov     qword [rdi+0x18], rsi  {0x0}
0002150a  c1ea08             shr     edx, 0x8
0002150d  48897720           mov     qword [rdi+0x20], rsi  {0x0}
00021511  81e2ffff0f00       and     edx, 0xfffff
00021517  895710             mov     dword [rdi+0x10], edx
0002151a  31d2               xor     edx, edx  {0x0}
0002151c  895714             mov     dword [rdi+0x14], edx  {0x0}
0002151f  8b5110             mov     edx, dword [rcx+0x10]
00021522  895728             mov     dword [rdi+0x28], edx
00021525  8b5114             mov     edx, dword [rcx+0x14]
00021528  89572c             mov     dword [rdi+0x2c], edx
0002152b  8b5118             mov     edx, dword [rcx+0x18]
0002152e  895730             mov     dword [rdi+0x30], edx
00021531  8b511c             mov     edx, dword [rcx+0x1c]
00021534  895734             mov     dword [rdi+0x34], edx
00021537  31ff               xor     edi, edi  {0x0}
00021539  48897838           mov     qword [rax+0x38], rdi  {0x0}
0002153d  44894050           mov     dword [rax+0x50], r8d  {0x0}
00021541  31c0               xor     eax, eax  {0x0}
00021543  4159               pop     r9 {var_8}
00021545  e9bf51feff         jmp     __x86_return_thunk
{ Does not return }


0002154a    void poly1305_process(int32_t* arg1, char* arg2, int64_t arg3) __noreturn

0002154a  4885d2             test    rdx, rdx
0002154d  0f840b010000       je      0x2165e

00021553  4155               push    r13 {__saved_r13}
00021555  4154               push    r12 {__saved_r12}
00021557  55                 push    rbp {__saved_rbp}
00021558  4889fd             mov     rbp, rdi
0002155b  53                 push    rbx {__saved_rbx}
0002155c  4150               push    r8 {var_28}
0002155e  4885ff             test    rdi, rdi
00021561  7518               jne     0x2157b

00021563  ba84000000         mov     edx, 0x84
00021568  488d35d2560100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
0002156f  488d3de7560100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00021576  e808160000         call    crypt_argchk
{ Does not return }

0002157b  4989f4             mov     r12, rsi
0002157e  4885f6             test    rsi, rsi
00021581  7518               jne     0x2159b

00021583  ba85000000         mov     edx, 0x85
00021588  488d35b2560100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
0002158f  488d3d0c560100     lea     rdi, [rel data_36ba2]  {"in != NULL"}
00021596  e8e8150000         call    crypt_argchk
{ Does not return }

0002159b  4889d3             mov     rbx, rdx
0002159e  488b5738           mov     rdx, qword [rdi+0x38]
000215a2  4885d2             test    rdx, rdx
000215a5  0f849d000000       je      0x21648

000215ab  b810000000         mov     eax, 0x10
000215b0  488d3417           lea     rsi, [rdi+rdx]
000215b4  4829d0             sub     rax, rdx
000215b7  4839d8             cmp     rax, rbx
000215ba  480f47c3           cmova   rax, rbx
000215be  31c9               xor     ecx, ecx  {0x0}

000215c0  4839c8             cmp     rax, rcx
000215c3  740e               je      0x215d3

000215c5  418a3c0c           mov     dil, byte [r12+rcx]
000215c9  40887c0e40         mov     byte [rsi+rcx+0x40], dil
000215ce  48ffc1             inc     rcx
000215d1  ebed               jmp     0x215c0

000215d3  4801c2             add     rdx, rax
000215d6  48895538           mov     qword [rbp+0x38], rdx
000215da  4883fa0f           cmp     rdx, 0xf
000215de  7670               jbe     0x21650

000215e0  488d7540           lea     rsi, [rbp+0x40]
000215e4  ba10000000         mov     edx, 0x10
000215e9  4889ef             mov     rdi, rbp
000215ec  4829c3             sub     rbx, rax
000215ef  4901c4             add     r12, rax
000215f2  e803fcffff         call    _poly1305_block
{ Does not return }

000215f7                                                                       31 c9 48 89 4d 38 48 83 fb                         1.H.M8H..
00021600  0f 76 1b                                                                                         .v.

00021603  4989dd             mov     r13, rbx
00021606  4c89e6             mov     rsi, r12
00021609  4889ef             mov     rdi, rbp
0002160c  4983e5f0           and     r13, 0xfffffffffffffff0
00021610  4c89ea             mov     rdx, r13
00021613  4d01ec             add     r12, r13
00021616  4c29eb             sub     rbx, r13
00021619  e8dcfbffff         call    _poly1305_block
{ Does not return }

0002161e                                                                                            48 85                                H.
00021620  db 74 2d                                                                                         .t-

00021623  488b5538           mov     rdx, qword [rbp+0x38]
00021627  31c0               xor     eax, eax  {0x0}
00021629  488d4c1500         lea     rcx, [rbp+rdx]

0002162e  418a3404           mov     sil, byte [r12+rax]
00021632  4088740140         mov     byte [rcx+rax+0x40], sil
00021637  48ffc0             inc     rax
0002163a  4839d8             cmp     rax, rbx
0002163d  75ef               jne     0x2162e

0002163f  4801c2             add     rdx, rax
00021642  48895538           mov     qword [rbp+0x38], rdx
00021646  eb08               jmp     0x21650

00021648  4883fb0f           cmp     rbx, 0xf
0002164c  76d5               jbe     0x21623

0002164e  ebb3               jmp     0x21603

00021650  5a                 pop     rdx {var_28}
00021651  31c0               xor     eax, eax  {0x0}
00021653  5b                 pop     rbx {__saved_rbx}
00021654  5d                 pop     rbp {__saved_rbp}
00021655  415c               pop     r12 {__saved_r12}
00021657  415d               pop     r13 {__saved_r13}
00021659  e9ab50feff         jmp     __x86_return_thunk
{ Does not return }

0002165e  31c0               xor     eax, eax  {0x0}
00021660  e9a450feff         jmp     __x86_return_thunk
{ Does not return }


00021665    void poly1305_done(int32_t* arg1, int32_t* arg2, int64_t* arg3) __noreturn

00021665  4157               push    r15 {__saved_r15}
00021667  4156               push    r14 {__saved_r14}
00021669  4155               push    r13 {__saved_r13}
0002166b  4154               push    r12 {__saved_r12}
0002166d  55                 push    rbp {__saved_rbp}
0002166e  53                 push    rbx {__saved_rbx}
0002166f  51                 push    rcx {var_38}
00021670  4885ff             test    rdi, rdi
00021673  7515               jne     0x2168a

00021675  bab2000000         mov     edx, 0xb2
0002167a  488d35c0550100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
00021681  488d3dd5550100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00021688  eb1b               jmp     0x216a5

0002168a  4889f5             mov     rbp, rsi
0002168d  4885f6             test    rsi, rsi
00021690  7518               jne     0x216aa

00021692  bab3000000         mov     edx, 0xb3
00021697  488d35a3550100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
0002169e  488d3d5b550100     lea     rdi, [rel data_36bff[1]]  {"mac != NULL"}

000216a5  e8d9140000         call    crypt_argchk
{ Does not return }

000216aa  4989d4             mov     r12, rdx
000216ad  4885d2             test    rdx, rdx
000216b0  7515               jne     0x216c7

000216b2  bab4000000         mov     edx, 0xb4
000216b7  488d3583550100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
000216be  488d3db0550100     lea     rdi, [rel data_36c75]  {"maclen != NULL"}
000216c5  ebde               jmp     0x216a5

000216c7  48833a0f           cmp     qword [rdx], 0xf
000216cb  7715               ja      0x216e2

000216cd  bab5000000         mov     edx, 0xb5
000216d2  488d3568550100     lea     rsi, [rel data_36c41]  {"src/mac/poly1305/poly1305.c"}
000216d9  488d3da4550100     lea     rdi, [rel data_36c84]  {"*maclen >= 16"}
000216e0  ebc3               jmp     0x216a5

000216e2  488b5738           mov     rdx, qword [rdi+0x38]
000216e6  4889fb             mov     rbx, rdi
000216e9  4885d2             test    rdx, rdx
000216ec  7431               je      0x2171f

000216ee  c644174001         mov     byte [rdi+rdx+0x40], 0x1
000216f3  488d4201           lea     rax, [rdx+0x1]

000216f7  4883f80f           cmp     rax, 0xf
000216fb  770a               ja      0x21707

000216fd  c644034000         mov     byte [rbx+rax+0x40], 0x0
00021702  48ffc0             inc     rax
00021705  ebf0               jmp     0x216f7

00021707  c7435001000000     mov     dword [rbx+0x50], 0x1
0002170e  488d7340           lea     rsi, [rbx+0x40]
00021712  ba10000000         mov     edx, 0x10
00021717  4889df             mov     rdi, rbx
0002171a  e8dbfaffff         call    _poly1305_block
{ Does not return }

0002171f  8b4318             mov     eax, dword [rbx+0x18]
00021722  89c2               mov     edx, eax
00021724  c1e81a             shr     eax, 0x1a
00021727  03431c             add     eax, dword [rbx+0x1c]
0002172a  4189c1             mov     r9d, eax
0002172d  c1e81a             shr     eax, 0x1a
00021730  034320             add     eax, dword [rbx+0x20]
00021733  81e2ffffff03       and     edx, 0x3ffffff
00021739  4189c5             mov     r13d, eax
0002173c  c1e81a             shr     eax, 0x1a
0002173f  034324             add     eax, dword [rbx+0x24]
00021742  4181e1ffffff03     and     r9d, 0x3ffffff
00021749  89c7               mov     edi, eax
0002174b  4181e5ffffff03     and     r13d, 0x3ffffff
00021752  4189c2             mov     r10d, eax
00021755  0d000000fc         or      eax, 0xfc000000
0002175a  c1ef1a             shr     edi, 0x1a
0002175d  4181e2ffffff03     and     r10d, 0x3ffffff
00021764  8d3cbf             lea     edi, [rdi+rdi*4]
00021767  037b14             add     edi, dword [rbx+0x14]
0002176a  4189ff             mov     r15d, edi
0002176d  c1ef1a             shr     edi, 0x1a
00021770  4181e7ffffff03     and     r15d, 0x3ffffff
00021777  01d7               add     edi, edx
00021779  458d4705           lea     r8d, [r15+0x5]
0002177d  4489c6             mov     esi, r8d
00021780  c1ee1a             shr     esi, 0x1a
00021783  01fe               add     esi, edi
00021785  89f1               mov     ecx, esi
00021787  c1e91a             shr     ecx, 0x1a
0002178a  4401c9             add     ecx, r9d
0002178d  4189ce             mov     r14d, ecx
00021790  41c1ee1a           shr     r14d, 0x1a
00021794  4501ee             add     r14d, r13d
00021797  4489f2             mov     edx, r14d
0002179a  c1ea1a             shr     edx, 0x1a
0002179d  01c2               add     edx, eax
0002179f  4489f0             mov     eax, r14d
000217a2  4189d3             mov     r11d, edx
000217a5  4189d6             mov     r14d, edx
000217a8  41c1eb1f           shr     r11d, 0x1f
000217ac  41c1fe1f           sar     r14d, 0x1f
000217b0  41ffcb             dec     r11d
000217b3  4521f7             and     r15d, r14d
000217b6  4421de             and     esi, r11d
000217b9  4521d8             and     r8d, r11d
000217bc  4421d9             and     ecx, r11d
000217bf  4421d8             and     eax, r11d
000217c2  4181e0ffffff03     and     r8d, 0x3ffffff
000217c9  4421f7             and     edi, r14d
000217cc  4521f1             and     r9d, r14d
000217cf  4521f5             and     r13d, r14d
000217d2  81e6ffffff03       and     esi, 0x3ffffff
000217d8  4509f8             or      r8d, r15d
000217db  4521f2             and     r10d, r14d
000217de  448b7b28           mov     r15d, dword [rbx+0x28]
000217e2  09fe               or      esi, edi
000217e4  81e1ffffff03       and     ecx, 0x3ffffff
000217ea  25ffffff03         and     eax, 0x3ffffff
000217ef  4421da             and     edx, r11d
000217f2  89f7               mov     edi, esi
000217f4  4409c9             or      ecx, r9d
000217f7  c1ee06             shr     esi, 0x6
000217fa  4409e8             or      eax, r13d
000217fd  c1e71a             shl     edi, 0x1a
00021800  4189f6             mov     r14d, esi
00021803  4189cd             mov     r13d, ecx
00021806  c1e114             shl     ecx, 0x14
00021809  4409c7             or      edi, r8d
0002180c  4409f1             or      ecx, r14d
0002180f  448b732c           mov     r14d, dword [rbx+0x2c]
00021813  41c1ed0c           shr     r13d, 0xc
00021817  4189f8             mov     r8d, edi
0002181a  4189c1             mov     r9d, eax
0002181d  c1e00e             shl     eax, 0xe
00021820  4409d2             or      edx, r10d
00021823  4d01f8             add     r8, r15
00021826  4c01f1             add     rcx, r14
00021829  4409e8             or      eax, r13d
0002182c  448b6b30           mov     r13d, dword [rbx+0x30]
00021830  49c1e820           shr     r8, 0x20
00021834  41c1e912           shr     r9d, 0x12
00021838  4c89fe             mov     rsi, r15
0002183b  4c01c1             add     rcx, r8
0002183e  4c01e8             add     rax, r13
00021841  c1e208             shl     edx, 0x8
00021844  4989c8             mov     r8, rcx
00021847  49c1e820           shr     r8, 0x20
0002184b  4c01c0             add     rax, r8
0002184e  4989c0             mov     r8, rax
00021851  49c1e820           shr     r8, 0x20
00021855  4409ca             or      edx, r9d
00021858  448b4b34           mov     r9d, dword [rbx+0x34]
0002185c  01fe               add     esi, edi
0002185e  894508             mov     dword [rbp+0x8], eax
00021861  31c0               xor     eax, eax  {0x0}
00021863  4c01ca             add     rdx, r9
00021866  897500             mov     dword [rbp], esi
00021869  4c01c2             add     rdx, r8
0002186c  894d04             mov     dword [rbp+0x4], ecx
0002186f  89550c             mov     dword [rbp+0xc], edx
00021872  488903             mov     qword [rbx], rax  {0x0}
00021875  48894308           mov     qword [rbx+0x8], rax  {0x0}
00021879  48894310           mov     qword [rbx+0x10], rax  {0x0}
0002187d  48894318           mov     qword [rbx+0x18], rax  {0x0}
00021881  48894320           mov     qword [rbx+0x20], rax  {0x0}
00021885  48894328           mov     qword [rbx+0x28], rax  {0x0}
00021889  48894330           mov     qword [rbx+0x30], rax  {0x0}
0002188d  31c0               xor     eax, eax  {0x0}
0002188f  49c7042410000000   mov     qword [r12], 0x10
00021897  5a                 pop     rdx {var_38}
00021898  5b                 pop     rbx {__saved_rbx}
00021899  5d                 pop     rbp {__saved_rbp}
0002189a  415c               pop     r12 {__saved_r12}
0002189c  415d               pop     r13 {__saved_r13}
0002189e  415e               pop     r14 {__saved_r14}
000218a0  415f               pop     r15 {__saved_r15}
000218a2  e9624efeff         jmp     __x86_return_thunk
{ Does not return }


000218a7    void mpi_to_ltc_error(int32_t arg1) __noreturn

000218a7  85ff               test    edi, edi
000218a9  7420               je      0x218cb

000218ab  83fffe             cmp     edi, 0xfffffffe
000218ae  741f               je      0x218cf

000218b0  83fffd             cmp     edi, 0xfffffffd
000218b3  7421               je      0x218d6

000218b5  83fffc             cmp     edi, 0xfffffffc
000218b8  7423               je      0x218dd

000218ba  b801000000         mov     eax, 0x1
000218bf  83fffb             cmp     edi, 0xfffffffb
000218c2  7529               jne     0x218ed

000218c4  b804000000         mov     eax, 0x4
000218c9  eb17               jmp     0x218e2

000218cb  31c0               xor     eax, eax  {0x0}
000218cd  eb13               jmp     0x218e2

000218cf  b801000000         mov     eax, 0x1
000218d4  eb0c               jmp     0x218e2

000218d6  b802000000         mov     eax, 0x2
000218db  eb05               jmp     0x218e2

000218dd  b803000000         mov     eax, 0x3

000218e2  488d15d77f0100     lea     rdx, [rel mpi_to_ltc_codes]
000218e9  8b44c204           mov     eax, dword [rdx+rax*8+0x4]

000218ed  e9174efeff         jmp     __x86_return_thunk
{ Does not return }


000218f2    void submod(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

000218f2  4150               push    r8 {var_8}
000218f4  4885ff             test    rdi, rdi
000218f7  7515               jne     0x2190e

000218f9  ba4b010000         mov     edx, 0x14b
000218fe  488d358d530100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021905  488d3d9a530100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002190c  eb18               jmp     0x21926

0002190e  4885f6             test    rsi, rsi
00021911  7518               jne     0x2192b

00021913  ba4c010000         mov     edx, 0x14c
00021918  488d3573530100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002191f  488d3d8a530100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021926  e858120000         call    crypt_argchk
{ Does not return }

0002192b  4885d2             test    rdx, rdx
0002192e  7515               jne     0x21945

00021930  ba4d010000         mov     edx, 0x14d
00021935  488d3556530100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002193c  488d3dbf520100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021943  ebe1               jmp     0x21926

00021945  4885c9             test    rcx, rcx
00021948  7515               jne     0x2195f

0002194a  ba4e010000         mov     edx, 0x14e
0002194f  488d353c530100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021956  488d3d3b520100     lea     rdi, [rel data_36b97[1]]  {"d != NULL"}
0002195d  ebc7               jmp     0x21926

0002195f  e84ca60000         call    mp_submod
{ Does not return }

00021964              89 c7 58 e9 3b ff ff ff                                                                  ..X.;...

0002196c    void addmod(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

0002196c  4150               push    r8 {var_8}
0002196e  4885ff             test    rdi, rdi
00021971  7515               jne     0x21988

00021973  ba42010000         mov     edx, 0x142
00021978  488d3513530100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002197f  488d3d20530100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021986  eb18               jmp     0x219a0

00021988  4885f6             test    rsi, rsi
0002198b  7518               jne     0x219a5

0002198d  ba43010000         mov     edx, 0x143
00021992  488d35f9520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021999  488d3d10530100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000219a0  e8de110000         call    crypt_argchk
{ Does not return }

000219a5  4885d2             test    rdx, rdx
000219a8  7515               jne     0x219bf

000219aa  ba44010000         mov     edx, 0x144
000219af  488d35dc520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000219b6  488d3d45520100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
000219bd  ebe1               jmp     0x219a0

000219bf  4885c9             test    rcx, rcx
000219c2  7515               jne     0x219d9

000219c4  ba45010000         mov     edx, 0x145
000219c9  488d35c2520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000219d0  488d3dc1510100     lea     rdi, [rel data_36b97[1]]  {"d != NULL"}
000219d7  ebc7               jmp     0x219a0

000219d9  e8324b0000         call    mp_addmod
{ Does not return }

000219de                                                                                            89 c7                                ..
000219e0  58 e9 c1 fe ff ff                                                                                X.....

000219e6    void isprime(int32_t* arg1, int64_t arg2, int64_t arg3) __noreturn

000219e6  55                 push    rbp {var_8}
000219e7  53                 push    rbx {var_10}
000219e8  51                 push    rcx {var_18}
000219e9  4885ff             test    rdi, rdi
000219ec  7515               jne     0x21a03

000219ee  ba9f010000         mov     edx, 0x19f
000219f3  488d3598520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000219fa  488d3da5520100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021a01  eb1b               jmp     0x21a1e

00021a03  4889d3             mov     rbx, rdx
00021a06  4885d2             test    rdx, rdx
00021a09  7518               jne     0x21a23

00021a0b  baa0010000         mov     edx, 0x1a0
00021a10  488d357b520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021a17  488d3de4510100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}

00021a1e  e860110000         call    crypt_argchk
{ Does not return }

00021a23  4889fd             mov     rbp, rdi
00021a26  e8b5550000         call    mp_count_bits
{ Does not return }

00021a2b                                   89 c7 e8 9e 93 00 00 48 89 da 48 89 ef 89 c6 e8 71 84 00 00 89             .......H..H.....q....
00021a40  c7 e8 61 fe ff ff 31 d2 83 3b 01 0f 94 c2 89 13 5a 5b 5d e9 b1 4c fe ff                          ..a...1..;......Z[]..L..

00021a58    void exptmod(int64_t arg1, int64_t arg2, int32_t* arg3, int64_t arg4) __noreturn

00021a58  4150               push    r8 {var_8}
00021a5a  4885ff             test    rdi, rdi
00021a5d  7515               jne     0x21a74

00021a5f  ba95010000         mov     edx, 0x195
00021a64  488d3527520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021a6b  488d3d34520100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021a72  eb18               jmp     0x21a8c

00021a74  4885f6             test    rsi, rsi
00021a77  7518               jne     0x21a91

00021a79  ba96010000         mov     edx, 0x196
00021a7e  488d350d520100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021a85  488d3d24520100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021a8c  e8f2100000         call    crypt_argchk
{ Does not return }

00021a91  4885d2             test    rdx, rdx
00021a94  7515               jne     0x21aab

00021a96  ba97010000         mov     edx, 0x197
00021a9b  488d35f0510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021aa2  488d3d59510100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021aa9  ebe1               jmp     0x21a8c

00021aab  4885c9             test    rcx, rcx
00021aae  7515               jne     0x21ac5

00021ab0  ba98010000         mov     edx, 0x198
00021ab5  488d35d6510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021abc  488d3dd5500100     lea     rdi, [rel data_36b97[1]]  {"d != NULL"}
00021ac3  ebc7               jmp     0x21a8c

00021ac5  e8e6630000         call    mp_exptmod
{ Does not return }

00021aca                                89 c7 58 e9 d5 fd ff ff                                                      ..X.....

00021ad2    void montgomery_deinit(void* ptr)

00021ad2  e98935feff         jmp     free


00021ad7    void montgomery_reduce(int32_t* arg1, int32_t* arg2, int64_t* arg3) __noreturn

00021ad7  51                 push    rcx {var_8}
00021ad8  4885ff             test    rdi, rdi
00021adb  7515               jne     0x21af2

00021add  ba87010000         mov     edx, 0x187
00021ae2  488d35a9510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021ae9  488d3db6510100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021af0  eb18               jmp     0x21b0a

00021af2  4885f6             test    rsi, rsi
00021af5  7518               jne     0x21b0f

00021af7  ba88010000         mov     edx, 0x188
00021afc  488d358f510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021b03  488d3da6510100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021b0a  e874100000         call    crypt_argchk
{ Does not return }

00021b0f  4885d2             test    rdx, rdx
00021b12  7515               jne     0x21b29

00021b14  ba89010000         mov     edx, 0x189
00021b19  488d3572510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021b20  488d3ddb500100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021b27  ebe1               jmp     0x21b0a

00021b29  488b12             mov     rdx, qword [rdx]
00021b2c  e86f770000         call    mp_montgomery_reduce
{ Does not return }

00021b31                                                     89 c7 58 e9 6e fd ff ff                                        ..X.n...

00021b39    void montgomery_setup(int64_t arg1, int64_t arg2) __noreturn

00021b39  4154               push    r12 {var_8}
00021b3b  55                 push    rbp {var_10}
00021b3c  4883ec18           sub     rsp, 0x18
00021b40  4885ff             test    rdi, rdi
00021b43  7515               jne     0x21b5a

00021b45  ba70010000         mov     edx, 0x170
00021b4a  488d3541510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021b51  488d3d4e510100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021b58  eb1b               jmp     0x21b75

00021b5a  4889f5             mov     rbp, rsi
00021b5d  4885f6             test    rsi, rsi
00021b60  7518               jne     0x21b7a

00021b62  ba71010000         mov     edx, 0x171
00021b67  488d3524510100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021b6e  488d3d3b510100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021b75  e809100000         call    crypt_argchk
{ Does not return }

00021b7a  be08000000         mov     esi, 0x8
00021b7f  4989fc             mov     r12, rdi
00021b82  bf01000000         mov     edi, 0x1
00021b87  e8b09afeff         call    m_calloc
{ Does not return }

00021b8c                                      48 89 c6 48 89 45 00 b8 0d 00 00 00 48 85 f6 74 24 4c 89 e7              H..H.E......H..t$L..
00021ba0  e8 db 79 00 00 89 c7 e8 fb fc ff ff 85 c0 74 11 48 8b 7d 00 89 44 24 0c e8 a3 34 fe ff 8b 44 24  ..y...........t.H.}..D$...4...D$
00021bc0  0c 48 83 c4 18 5d 41 5c e9 3c 4b fe ff                                                           .H...]A\.<K..

00021bcd    void invmod(int64_t arg1, void* arg2, int64_t arg3) __noreturn

00021bcd  51                 push    rcx {var_8}
00021bce  4885ff             test    rdi, rdi
00021bd1  7515               jne     0x21be8

00021bd3  ba66010000         mov     edx, 0x166
00021bd8  488d35b3500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021bdf  488d3dc0500100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021be6  eb18               jmp     0x21c00

00021be8  4885f6             test    rsi, rsi
00021beb  7518               jne     0x21c05

00021bed  ba67010000         mov     edx, 0x167
00021bf2  488d3599500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021bf9  488d3db0500100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021c00  e87e0f0000         call    crypt_argchk
{ Does not return }

00021c05  4885d2             test    rdx, rdx
00021c08  7515               jne     0x21c1f

00021c0a  ba68010000         mov     edx, 0x168
00021c0f  488d357c500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021c16  488d3de54f0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021c1d  ebe1               jmp     0x21c00

00021c1f  e89c6d0000         call    mp_invmod
{ Does not return }

00021c24              89 c7 58 e9 7b fc ff ff                                                                  ..X.{...

00021c2c    void sqrmod(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00021c2c  51                 push    rcx {var_8}
00021c2d  4885ff             test    rdi, rdi
00021c30  7515               jne     0x21c47

00021c32  ba5d010000         mov     edx, 0x15d
00021c37  488d3554500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021c3e  488d3d61500100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021c45  eb18               jmp     0x21c5f

00021c47  4885f6             test    rsi, rsi
00021c4a  7518               jne     0x21c64

00021c4c  ba5e010000         mov     edx, 0x15e
00021c51  488d353a500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021c58  488d3d51500100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021c5f  e81f0f0000         call    crypt_argchk
{ Does not return }

00021c64  4885d2             test    rdx, rdx
00021c67  7515               jne     0x21c7e

00021c69  ba5f010000         mov     edx, 0x15f
00021c6e  488d351d500100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021c75  488d3d864f0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021c7c  ebe1               jmp     0x21c5f

00021c7e  e8dd9e0000         call    mp_sqrmod
{ Does not return }

00021c83           89 c7 58 e9 1c fc ff ff                                                                    ..X.....

00021c8b    void mulmod(int64_t arg1, int64_t arg2, int32_t* arg3, int64_t arg4) __noreturn

00021c8b  4150               push    r8 {var_8}
00021c8d  4885ff             test    rdi, rdi
00021c90  7515               jne     0x21ca7

00021c92  ba54010000         mov     edx, 0x154
00021c97  488d35f44f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021c9e  488d3d01500100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021ca5  eb18               jmp     0x21cbf

00021ca7  4885f6             test    rsi, rsi
00021caa  7518               jne     0x21cc4

00021cac  ba55010000         mov     edx, 0x155
00021cb1  488d35da4f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021cb8  488d3df14f0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021cbf  e8bf0e0000         call    crypt_argchk
{ Does not return }

00021cc4  4885d2             test    rdx, rdx
00021cc7  7515               jne     0x21cde

00021cc9  ba56010000         mov     edx, 0x156
00021cce  488d35bd4f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021cd5  488d3d264f0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021cdc  ebe1               jmp     0x21cbf

00021cde  4885c9             test    rcx, rcx
00021ce1  7515               jne     0x21cf8

00021ce3  ba57010000         mov     edx, 0x157
00021ce8  488d35a34f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021cef  488d3da24e0100     lea     rdi, [rel data_36b97[1]]  {"d != NULL"}
00021cf6  ebc7               jmp     0x21cbf

00021cf8  e8c3800000         call    mp_mulmod
{ Does not return }

00021cfd                                                                                         89 c7 58                               ..X
00021d00  e9 a2 fb ff ff                                                                                   .....

00021d05    void lcm(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00021d05  51                 push    rcx {var_8}
00021d06  4885ff             test    rdi, rdi
00021d09  7515               jne     0x21d20

00021d0b  ba3a010000         mov     edx, 0x13a
00021d10  488d357b4f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021d17  488d3d884f0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021d1e  eb18               jmp     0x21d38

00021d20  4885f6             test    rsi, rsi
00021d23  7518               jne     0x21d3d

00021d25  ba3b010000         mov     edx, 0x13b
00021d2a  488d35614f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021d31  488d3d784f0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021d38  e8460e0000         call    crypt_argchk
{ Does not return }

00021d3d  4885d2             test    rdx, rdx
00021d40  7515               jne     0x21d57

00021d42  ba3c010000         mov     edx, 0x13c
00021d47  488d35444f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021d4e  488d3dad4e0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021d55  ebe1               jmp     0x21d38

00021d57  e8e46c0000         call    mp_lcm
{ Does not return }

00021d5c                                                                                      89 c7 58 e9                              ..X.
00021d60  43 fb ff ff                                                                                      C...

00021d64    void gcd(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00021d64  51                 push    rcx {var_8}
00021d65  4885ff             test    rdi, rdi
00021d68  7515               jne     0x21d7f

00021d6a  ba31010000         mov     edx, 0x131
00021d6f  488d351c4f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021d76  488d3d294f0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021d7d  eb18               jmp     0x21d97

00021d7f  4885f6             test    rsi, rsi
00021d82  7518               jne     0x21d9c

00021d84  ba32010000         mov     edx, 0x132
00021d89  488d35024f0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021d90  488d3d194f0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021d97  e8e70d0000         call    crypt_argchk
{ Does not return }

00021d9c  4885d2             test    rdx, rdx
00021d9f  7515               jne     0x21db6

00021da1  ba33010000         mov     edx, 0x133
00021da6  488d35e54e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021dad  488d3d4e4e0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021db4  ebe1               jmp     0x21d97

00021db6  e885640000         call    mp_gcd
{ Does not return }

00021dbb                                                                                   89 c7 58 e9 e4                             ..X..
00021dc0  fa ff ff                                                                                         ...

00021dc3    void mul(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00021dc3  51                 push    rcx {var_8}
00021dc4  4885ff             test    rdi, rdi
00021dc7  7515               jne     0x21dde

00021dc9  bafa000000         mov     edx, 0xfa
00021dce  488d35bd4e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021dd5  488d3dca4e0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021ddc  eb18               jmp     0x21df6

00021dde  4885f6             test    rsi, rsi
00021de1  7518               jne     0x21dfb

00021de3  bafb000000         mov     edx, 0xfb
00021de8  488d35a34e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021def  488d3dba4e0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021df6  e8880d0000         call    crypt_argchk
{ Does not return }

00021dfb  4885d2             test    rdx, rdx
00021dfe  7515               jne     0x21e15

00021e00  bafc000000         mov     edx, 0xfc
00021e05  488d35864e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021e0c  488d3def4d0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021e13  ebe1               jmp     0x21df6

00021e15  e8f6770000         call    mp_mul
{ Does not return }

00021e1a                                                                                89 c7 58 e9 85 fa                            ..X...
00021e20  ff ff                                                                                            ..

00021e22    void sub(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00021e22  51                 push    rcx {var_8}
00021e23  4885ff             test    rdi, rdi
00021e26  7515               jne     0x21e3d

00021e28  baea000000         mov     edx, 0xea
00021e2d  488d355e4e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021e34  488d3d6b4e0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021e3b  eb18               jmp     0x21e55

00021e3d  4885f6             test    rsi, rsi
00021e40  7518               jne     0x21e5a

00021e42  baeb000000         mov     edx, 0xeb
00021e47  488d35444e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021e4e  488d3d5b4e0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021e55  e8290d0000         call    crypt_argchk
{ Does not return }

00021e5a  4885d2             test    rdx, rdx
00021e5d  7515               jne     0x21e74

00021e5f  baec000000         mov     edx, 0xec
00021e64  488d35274e0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021e6b  488d3d904d0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021e72  ebe1               jmp     0x21e55

00021e74  e8779d0000         call    mp_sub
{ Does not return }

00021e79                                                                             89 c7 58 e9 26 fa ff                           ..X.&..
00021e80  ff                                                                                               .

00021e81    void add(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00021e81  51                 push    rcx {var_8}
00021e82  4885ff             test    rdi, rdi
00021e85  7515               jne     0x21e9c

00021e87  bada000000         mov     edx, 0xda
00021e8c  488d35ff4d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021e93  488d3d0c4e0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021e9a  eb18               jmp     0x21eb4

00021e9c  4885f6             test    rsi, rsi
00021e9f  7518               jne     0x21eb9

00021ea1  badb000000         mov     edx, 0xdb
00021ea6  488d35e54d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021ead  488d3dfc4d0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021eb4  e8ca0c0000         call    crypt_argchk
{ Does not return }

00021eb9  4885d2             test    rdx, rdx
00021ebc  7515               jne     0x21ed3

00021ebe  badc000000         mov     edx, 0xdc
00021ec3  488d35c84d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021eca  488d3d314d0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}
00021ed1  ebe1               jmp     0x21eb4

00021ed3  e888420000         call    mp_add
{ Does not return }

00021ed8                                                                          89 c7 58 e9 c7 f9 ff ff                          ..X.....

00021ee0    void get_digit_count(int32_t* arg1) __noreturn

00021ee0  4885ff             test    rdi, rdi
00021ee3  7519               jne     0x21efe

00021ee5  50                 push    rax {var_8}
00021ee6  ba7f000000         mov     edx, 0x7f
00021eeb  488d35a04d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021ef2  488d3dad4d0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021ef9  e8850c0000         call    crypt_argchk
{ Does not return }

00021efe  8b07               mov     eax, dword [rdi]
00021f00  e90448feff         jmp     __x86_return_thunk
{ Does not return }


00021f05    void get_digit(int32_t* arg1, int32_t arg2) __noreturn

00021f05  4885ff             test    rdi, rdi
00021f08  7519               jne     0x21f23

00021f0a  50                 push    rax {var_8}
00021f0b  ba77000000         mov     edx, 0x77
00021f10  488d357b4d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021f17  488d3d884d0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021f1e  e8600c0000         call    crypt_argchk
{ Does not return }

00021f23  3937               cmp     dword [rdi], esi
00021f25  7e14               jle     0x21f3b

00021f27  85f6               test    esi, esi
00021f29  7810               js      0x21f3b

00021f2b  488b4710           mov     rax, qword [rdi+0x10]
00021f2f  4863f6             movsxd  rsi, esi
00021f32  488b04f0           mov     rax, qword [rax+rsi*8]
00021f36  e9ce47feff         jmp     __x86_return_thunk
{ Does not return }

00021f3b  31c0               xor     eax, eax  {0x0}
00021f3d  e9c747feff         jmp     __x86_return_thunk
{ Does not return }


00021f42    void set_rand(int32_t* arg1, int32_t arg2) __noreturn

00021f42  52                 push    rdx {var_8}
00021f43  4885ff             test    rdi, rdi
00021f46  7518               jne     0x21f60

00021f48  baa9010000         mov     edx, 0x1a9
00021f4d  488d353e4d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021f54  488d3d4b4d0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021f5b  e8230c0000         call    crypt_argchk
{ Does not return }

00021f60  e86b8f0000         call    mp_rand
{ Does not return }

00021f65                 89 c7 58 e9 3a f9 ff ff                                                                ..X.:...

00021f6d    void count_bits(int32_t* arg1) __noreturn

00021f6d  4885ff             test    rdi, rdi
00021f70  7519               jne     0x21f8b

00021f72  50                 push    rax {var_8}
00021f73  ba9d000000         mov     edx, 0x9d
00021f78  488d35134d0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021f7f  488d3d204d0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021f86  e8f80b0000         call    crypt_argchk
{ Does not return }

00021f8b  e950500000         jmp     mp_count_bits
{ Does not return }


00021f90    void montgomery_normalization(int64_t arg1, int32_t* arg2) __noreturn

00021f90  52                 push    rdx {var_8}
00021f91  4885ff             test    rdi, rdi
00021f94  7515               jne     0x21fab

00021f96  ba7f010000         mov     edx, 0x17f
00021f9b  488d35f04c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021fa2  488d3dfd4c0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00021fa9  eb18               jmp     0x21fc3

00021fab  4885f6             test    rsi, rsi
00021fae  7518               jne     0x21fc8

00021fb0  ba80010000         mov     edx, 0x180
00021fb5  488d35d64c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021fbc  488d3ded4c0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00021fc3  e8bb0b0000         call    crypt_argchk
{ Does not return }

00021fc8  e833700000         call    mp_montgomery_calc_normalization
{ Does not return }

00021fcd                                         89 c7 58 e9 d2 f8 ff ff                                                ..X.....

00021fd5    void modi(int32_t* arg1, int64_t arg2, int64_t arg3) __noreturn

00021fd5  53                 push    rbx {var_8}
00021fd6  4883ec10           sub     rsp, 0x10
00021fda  64488b0425280000…  mov     rax, qword [fs:0x28]
00021fe3  4889442408         mov     qword [rsp+0x8 {var_10}], rax
00021fe8  31c0               xor     eax, eax  {0x0}
00021fea  4885ff             test    rdi, rdi
00021fed  7515               jne     0x22004

00021fef  ba24010000         mov     edx, 0x124
00021ff4  488d35974c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00021ffb  488d3da44c0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022002  eb1b               jmp     0x2201f

00022004  4889d3             mov     rbx, rdx
00022007  4885d2             test    rdx, rdx
0002200a  7518               jne     0x22024

0002200c  ba25010000         mov     edx, 0x125
00022011  488d357a4c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022018  488d3de34b0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}

0002201f  e85f0b0000         call    crypt_argchk
{ Does not return }

00022024  4889e2             mov     rdx, rsp {var_18}
00022027  e8c46f0000         call    mp_mod_d
{ Does not return }

0002202c                                      89 c7 e8 74 f8 ff ff 85 c0 75 07 48 8b 14 24 48 89 13 48 8b              ...t.....u.H..$H..H.
00022040  54 24 08 64 48 2b 14 25 28 00 00 00 74 05 e8 bd 31 fe ff 48 83 c4 10 5b e9 ac 46 fe ff           T$.dH+.%(...t...1..H...[..F..

0002205d    void div_2(int32_t* arg1, int32_t* arg2) __noreturn

0002205d  52                 push    rdx {var_8}
0002205e  4885ff             test    rdi, rdi
00022061  7515               jne     0x22078

00022063  ba19010000         mov     edx, 0x119
00022068  488d35234c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002206f  488d3d304c0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022076  eb18               jmp     0x22090

00022078  4885f6             test    rsi, rsi
0002207b  7518               jne     0x22095

0002207d  ba1a010000         mov     edx, 0x11a
00022082  488d35094c0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022089  488d3d204c0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00022090  e8ee0a0000         call    crypt_argchk
{ Does not return }

00022095  e8d6570000         call    mp_div_2
{ Does not return }

0002209a                                                                                89 c7 58 e9 05 f8                            ..X...
000220a0  ff ff                                                                                            ..

000220a2    void divide(int32_t* arg1, int32_t* arg2) __noreturn

000220a2  4150               push    r8 {var_8}
000220a4  4885ff             test    rdi, rdi
000220a7  7515               jne     0x220be

000220a9  ba12010000         mov     edx, 0x112
000220ae  488d35dd4b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000220b5  488d3dea4b0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000220bc  eb18               jmp     0x220d6

000220be  4885f6             test    rsi, rsi
000220c1  7518               jne     0x220db

000220c3  ba13010000         mov     edx, 0x113
000220c8  488d35c34b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000220cf  488d3dda4b0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000220d6  e8a80a0000         call    crypt_argchk
{ Does not return }

000220db  e8304f0000         call    mp_div
{ Does not return }

000220e0  89 c7 58 e9 bf f7 ff ff                                                                          ..X.....

000220e8    void sqr(int32_t* arg1, void* arg2) __noreturn

000220e8  52                 push    rdx {var_8}
000220e9  4885ff             test    rdi, rdi
000220ec  7515               jne     0x22103

000220ee  ba0a010000         mov     edx, 0x10a
000220f3  488d35984b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000220fa  488d3da54b0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022101  eb18               jmp     0x2211b

00022103  4885f6             test    rsi, rsi
00022106  7518               jne     0x22120

00022108  ba0b010000         mov     edx, 0x10b
0002210d  488d357e4b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022114  488d3d954b0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

0002211b  e8630a0000         call    crypt_argchk
{ Does not return }

00022120  e8eb990000         call    mp_sqr
{ Does not return }

00022125                 89 c7 58 e9 7a f7 ff ff                                                                ..X.z...

0002212d    void muli(int32_t* arg1, int64_t arg2, int32_t* arg3) __noreturn

0002212d  51                 push    rcx {var_8}
0002212e  4885ff             test    rdi, rdi
00022131  7515               jne     0x22148

00022133  ba02010000         mov     edx, 0x102
00022138  488d35534b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002213f  488d3d604b0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022146  eb18               jmp     0x22160

00022148  4885d2             test    rdx, rdx
0002214b  7518               jne     0x22165

0002214d  ba03010000         mov     edx, 0x103
00022152  488d35394b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022159  488d3da24a0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}

00022160  e81e0a0000         call    crypt_argchk
{ Does not return }

00022165  e8667a0000         call    mp_mul_d
{ Does not return }

0002216a                                89 c7 58 e9 35 f7 ff ff                                                      ..X.5...

00022172    void subi(int32_t* arg1, uint64_t arg2, int32_t* arg3) __noreturn

00022172  51                 push    rcx {var_8}
00022173  4885ff             test    rdi, rdi
00022176  7515               jne     0x2218d

00022178  baf2000000         mov     edx, 0xf2
0002217d  488d350e4b0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022184  488d3d1b4b0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002218b  eb18               jmp     0x221a5

0002218d  4885d2             test    rdx, rdx
00022190  7518               jne     0x221aa

00022192  baf3000000         mov     edx, 0xf3
00022197  488d35f44a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002219e  488d3d5d4a0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}

000221a5  e8d9090000         call    crypt_argchk
{ Does not return }

000221aa  e8c19a0000         call    mp_sub_d
{ Does not return }

000221af                                               89 c7 58 e9 f0 f6 ff ff                                            ..X.....

000221b7    void addi(int32_t* arg1, uint64_t arg2, int32_t* arg3) __noreturn

000221b7  51                 push    rcx {var_8}
000221b8  4885ff             test    rdi, rdi
000221bb  7515               jne     0x221d2

000221bd  bae2000000         mov     edx, 0xe2
000221c2  488d35c94a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000221c9  488d3dd64a0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000221d0  eb18               jmp     0x221ea

000221d2  4885d2             test    rdx, rdx
000221d5  7518               jne     0x221ef

000221d7  bae3000000         mov     edx, 0xe3
000221dc  488d35af4a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000221e3  488d3d184a0100     lea     rdi, [rel data_36bff[3]]  {"c != NULL"}

000221ea  e894090000         call    crypt_argchk
{ Does not return }

000221ef  e8ec3f0000         call    mp_add_d
{ Does not return }

000221f4                                                              89 c7 58 e9 ab f6 ff ff                                  ..X.....

000221fc    void unsigned_read(int32_t* arg1, int64_t arg2, int64_t arg3) __noreturn

000221fc  51                 push    rcx {var_8}
000221fd  4885ff             test    rdi, rdi
00022200  7515               jne     0x22217

00022202  bad2000000         mov     edx, 0xd2
00022207  488d35844a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002220e  488d3d914a0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022215  eb18               jmp     0x2222f

00022217  4885f6             test    rsi, rsi
0002221a  7518               jne     0x22234

0002221c  bad3000000         mov     edx, 0xd3
00022221  488d356a4a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022228  488d3d814a0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

0002222f  e84f090000         call    crypt_argchk
{ Does not return }

00022234  e8575e0000         call    mp_from_ubin
{ Does not return }

00022239                                                                             89 c7 58 e9 66 f6 ff                           ..X.f..
00022240  ff                                                                                               .

00022241    void unsigned_write(int32_t* arg1, int64_t arg2) __noreturn

00022241  52                 push    rdx {var_8}
00022242  4885ff             test    rdi, rdi
00022245  7515               jne     0x2225c

00022247  baca000000         mov     edx, 0xca
0002224c  488d353f4a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022253  488d3d4c4a0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002225a  eb18               jmp     0x22274

0002225c  4885f6             test    rsi, rsi
0002225f  7518               jne     0x22279

00022261  bacb000000         mov     edx, 0xcb
00022266  488d35254a0100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002226d  488d3d3c4a0100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00022274  e80a090000         call    crypt_argchk
{ Does not return }

00022279  31c9               xor     ecx, ecx  {0x0}
0002227b  4883caff           or      rdx, 0xffffffffffffffff
0002227f  e8cca10000         call    mp_to_ubin
{ Does not return }

00022284              89 c7 58 e9 1b f6 ff ff                                                                  ..X.....

0002228c    void unsigned_size(int32_t* arg1) __noreturn

0002228c  4885ff             test    rdi, rdi
0002228f  7519               jne     0x222aa

00022291  50                 push    rax {var_8}
00022292  bac3000000         mov     edx, 0xc3
00022297  488d35f4490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002229e  488d3d014a0100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000222a5  e8d9080000         call    crypt_argchk
{ Does not return }

000222aa  e9a1a30000         jmp     mp_ubin_size
{ Does not return }


000222af    void write_radix(int32_t* arg1, int16_t* arg2, int32_t arg3) __noreturn

000222af  51                 push    rcx {var_8}
000222b0  4885ff             test    rdi, rdi
000222b3  7515               jne     0x222ca

000222b5  babb000000         mov     edx, 0xbb
000222ba  488d35d1490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000222c1  488d3dde490100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000222c8  eb18               jmp     0x222e2

000222ca  4885f6             test    rsi, rsi
000222cd  7518               jne     0x222e7

000222cf  babc000000         mov     edx, 0xbc
000222d4  488d35b7490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000222db  488d3dce490100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000222e2  e89c080000         call    crypt_argchk
{ Does not return }

000222e7  4189d0             mov     r8d, edx
000222ea  31c9               xor     ecx, ecx  {0x0}
000222ec  4883caff           or      rdx, 0xffffffffffffffff
000222f0  e85b9d0000         call    mp_to_radix
{ Does not return }

000222f5                                                                 89 c7 58 e9 aa f5 ff ff                                ..X.....

000222fd    void read_radix(int32_t* arg1, char* arg2, int32_t arg3) __noreturn

000222fd  51                 push    rcx {var_8}
000222fe  4885ff             test    rdi, rdi
00022301  7515               jne     0x22318

00022303  bab3000000         mov     edx, 0xb3
00022308  488d3583490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002230f  488d3d90490100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022316  eb18               jmp     0x22330

00022318  4885f6             test    rsi, rsi
0002231b  7518               jne     0x22335

0002231d  bab4000000         mov     edx, 0xb4
00022322  488d3569490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022329  488d3d80490100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00022330  e84e080000         call    crypt_argchk
{ Does not return }

00022335  e8068e0000         call    mp_read_radix
{ Does not return }

0002233a                                                                                89 c7 58 e9 65 f5                            ..X.e.
00022340  ff ff                                                                                            ..

00022342    void twoexpt(int32_t* arg1, int32_t arg2) __noreturn

00022342  52                 push    rdx {var_8}
00022343  4885ff             test    rdi, rdi
00022346  7518               jne     0x22360

00022348  baaa000000         mov     edx, 0xaa
0002234d  488d353e490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022354  488d3d4b490100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002235b  e823080000         call    crypt_argchk
{ Does not return }

00022360  e86b3d0000         call    mp_2expt
{ Does not return }

00022365                 89 c7 58 e9 3a f5 ff ff                                                                ..X.:...

0002236d    void count_lsb_bits(int32_t* arg1) __noreturn

0002236d  4885ff             test    rdi, rdi
00022370  7519               jne     0x2238b

00022372  50                 push    rax {var_8}
00022373  baa3000000         mov     edx, 0xa3
00022378  488d3513490100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002237f  488d3d20490100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022386  e8f8070000         call    crypt_argchk
{ Does not return }

0002238b  e9b0470000         jmp     mp_cnt_lsb
{ Does not return }


00022390    void compare_d(void* arg1, int64_t arg2) __noreturn

00022390  51                 push    rcx {var_8}
00022391  4885ff             test    rdi, rdi
00022394  7518               jne     0x223ae

00022396  ba92000000         mov     edx, 0x92
0002239b  488d35f0480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000223a2  488d3dfd480100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000223a9  e8d5070000         call    crypt_argchk
{ Does not return }

000223ae  e8dd440000         call    mp_cmp_d
{ Does not return }

000223b3                                                           83 f8 ff 74 08 ff c8 0f 94 c0 0f b6 c0                     ...t.........
000223c0  5a e9 43 43 fe ff                                                                                Z.CC..

000223c6    void compare(int32_t* arg1, int32_t* arg2) __noreturn

000223c6  51                 push    rcx {var_8}
000223c7  4885ff             test    rdi, rdi
000223ca  7515               jne     0x223e1

000223cc  ba86000000         mov     edx, 0x86
000223d1  488d35ba480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000223d8  488d3dc7480100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000223df  eb18               jmp     0x223f9

000223e1  4885f6             test    rsi, rsi
000223e4  7518               jne     0x223fe

000223e6  ba87000000         mov     edx, 0x87
000223eb  488d35a0480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000223f2  488d3db7480100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000223f9  e885070000         call    crypt_argchk
{ Does not return }

000223fe  e83d440000         call    mp_cmp
{ Does not return }

00022403           83 f8 ff 74 08 ff c8 0f 94 c0 0f b6 c0 5a e9 f3 42 fe ff                                   ...t.........Z..B..

00022416    void get_int(int32_t* arg1) __noreturn

00022416  4885ff             test    rdi, rdi
00022419  7519               jne     0x22434

0002241b  50                 push    rax {var_8}
0002241c  ba70000000         mov     edx, 0x70
00022421  488d356a480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022428  488d3d77480100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002242f  e84f070000         call    crypt_argchk
{ Does not return }

00022434  e957600000         jmp     mp_get_l
{ Does not return }


00022439    void set_int(int32_t* arg1, int32_t arg2) __noreturn

00022439  51                 push    rcx {var_8}
0002243a  4885ff             test    rdi, rdi
0002243d  7518               jne     0x22457

0002243f  ba69000000         mov     edx, 0x69
00022444  488d3547480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002244b  488d3d54480100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022452  e82c070000         call    crypt_argchk
{ Does not return }

00022457  e8f4950000         call    mp_set_u32
0002245c  31c0               xor     eax, eax  {0x0}
0002245e  5a                 pop     rdx {var_8}
0002245f  e9a542feff         jmp     __x86_return_thunk
{ Does not return }


00022464    void copy(int32_t* arg1, int32_t* arg2) __noreturn

00022464  52                 push    rdx {var_8}
00022465  4885ff             test    rdi, rdi
00022468  7515               jne     0x2247f

0002246a  ba58000000         mov     edx, 0x58
0002246f  488d351c480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022476  488d3d29480100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002247d  eb18               jmp     0x22497

0002247f  4885f6             test    rsi, rsi
00022482  7518               jne     0x2249c

00022484  ba59000000         mov     edx, 0x59
00022489  488d3502480100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022490  488d3d19480100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

00022497  e8e7060000         call    crypt_argchk
{ Does not return }

0002249c  e84f480000         call    mp_copy
{ Does not return }

000224a1     89 c7 58 e9 fe f3 ff ff                                                                        ..X.....

000224a9    void neg(void* arg1, int32_t* arg2) __noreturn

000224a9  52                 push    rdx {var_8}
000224aa  4885ff             test    rdi, rdi
000224ad  7515               jne     0x224c4

000224af  ba51000000         mov     edx, 0x51
000224b4  488d35d7470100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000224bb  488d3de4470100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000224c2  eb18               jmp     0x224dc

000224c4  4885f6             test    rsi, rsi
000224c7  7518               jne     0x224e1

000224c9  ba52000000         mov     edx, 0x52
000224ce  488d35bd470100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000224d5  488d3dd4470100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000224dc  e8a2060000         call    crypt_argchk
{ Does not return }

000224e1  e87a790000         call    mp_neg
{ Does not return }

000224e6                    89 c7 58 e9 b9 f3 ff ff                                                              ..X.....

000224ee    void deinit(int64_t* arg1) __noreturn

000224ee  4883ec18           sub     rsp, 0x18
000224f2  4885ff             test    rdi, rdi
000224f5  7518               jne     0x2250f

000224f7  ba4a000000         mov     edx, 0x4a
000224fc  488d358f470100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
00022503  488d3d9c470100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
0002250a  e874060000         call    crypt_argchk
{ Does not return }

0002250f  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00022514  e807420000         call    mp_clear
{ Does not return }

00022519                                                                             48 8b 7c 24 08 48 83                           H.|$.H.
00022520  c4 18 e9 39 2b fe ff                                                                             ...9+..

00022527    void init(int64_t arg1) __noreturn

00022527  55                 push    rbp {var_8}
00022528  4883ec10           sub     rsp, 0x10
0002252c  4885ff             test    rdi, rdi
0002252f  7518               jne     0x22549

00022531  ba3d000000         mov     edx, 0x3d
00022536  488d3555470100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
0002253d  488d3d62470100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
00022544  e83a060000         call    crypt_argchk
{ Does not return }

00022549  4889fd             mov     rbp, rdi
0002254c  be18000000         mov     esi, 0x18
00022551  bf01000000         mov     edi, 0x1
00022556  e8e190feff         call    m_calloc
{ Does not return }

0002255b                                                                                   48 89 c7 48 89                             H..H.
00022560  45 00 b8 0d 00 00 00 48 85 ff 74 21 e8 ff 5f 00 00 89 c7 e8 2f f3 ff ff 85 c0 74 11 48 8b 7d 00  E......H..t!.._...../.....t.H.}.
00022580  89 44 24 0c e8 d7 2a fe ff 8b 44 24 0c 48 83 c4 10 5d e9 72 41 fe ff                             .D$...*...D$.H...].rA..

00022597    void init_copy(int64_t arg1, int64_t arg2) __noreturn

00022597  55                 push    rbp {var_8}
00022598  53                 push    rbx {var_10}
00022599  4150               push    r8 {var_18}
0002259b  4885ff             test    rdi, rdi
0002259e  7515               jne     0x225b5

000225a0  ba60000000         mov     edx, 0x60
000225a5  488d35e6460100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000225ac  488d3df3460100     lea     rdi, [rel data_36ca6]  {"a != NULL"}
000225b3  eb1b               jmp     0x225d0

000225b5  4889f3             mov     rbx, rsi
000225b8  4885f6             test    rsi, rsi
000225bb  7518               jne     0x225d5

000225bd  ba61000000         mov     edx, 0x61
000225c2  488d35c9460100     lea     rsi, [rel data_36c92]  {"src/math/ltm_desc.c"}
000225c9  488d3de0460100     lea     rdi, [rel data_36cb0]  {"b != NULL"}

000225d0  e8ae050000         call    crypt_argchk
{ Does not return }

000225d5  4889fd             mov     rbp, rdi
000225d8  be18000000         mov     esi, 0x18
000225dd  bf01000000         mov     edi, 0x1
000225e2  e85590feff         call    m_calloc
{ Does not return }

000225e7                       48 89 45 00 48 89 c7 48 85 c0 74 12 48 89 de e8 b5 5f 00 00 59 5b 89 c7 5d         H.E.H..H..t.H...._..Y[..]
00022600  e9 a2 f2 ff ff 5a b8 0d 00 00 00 5b 5d e9 f7 40 fe ff                                            .....Z.....[]..@..

00022612    void ltc_init_multi(int64_t arg1) __noreturn

00022612  55                 push    rbp {__saved_rbp}
00022613  4889fd             mov     rbp, rdi
00022616  53                 push    rbx {__saved_rbx}
00022617  31db               xor     ebx, ebx  {0x0}
00022619  4883ec78           sub     rsp, 0x78
0002261d  4889742448         mov     qword [rsp+0x48 {var_40}], rsi
00022622  4889542450         mov     qword [rsp+0x50 {var_38}], rdx
00022627  48894c2458         mov     qword [rsp+0x58 {var_30}], rcx
0002262c  4c89442460         mov     qword [rsp+0x60 {var_28}], r8
00022631  4c894c2468         mov     qword [rsp+0x68 {var_20}], r9
00022636  64488b0425280000…  mov     rax, qword [fs:0x28]
0002263f  4889442438         mov     qword [rsp+0x38 {var_50}], rax
00022644  31c0               xor     eax, eax  {0x0}
00022646  488d842490000000   lea     rax, [rsp+0x90 {arg_8}]
0002264e  c744240808000000   mov     dword [rsp+0x8 {var_80}], 0x8
00022656  4889442410         mov     qword [rsp+0x10 {var_78}], rax {arg_8}
0002265b  488d442440         lea     rax, [rsp+0x40 {var_48}]
00022660  4889442418         mov     qword [rsp+0x18 {var_70}], rax {var_48}
00022665  4885ff             test    rdi, rdi
00022668  0f84a9000000       je      0x22717

0002266e  488b055b490200     mov     rax, qword [rel data_46fd0]
00022675  e8b240feff         call    __x86_indirect_thunk_rax
{ Does not return }

0002267a                                                                                85 c0 74 68 48 8d                            ..thH.
00022680  84 24 90 00 00 00 c7 44 24 20 08 00 00 00 48 89 44 24 28 48 8d 44 24 40 48 89 44 24 30 85 db 74  .$.....D$ ....H.D$(H.D$@H.D$0..t
000226a0  3e 48 8b 7d 00 48 8b 05 34 49 02 00 e8 7b 40 fe ff 8b 54 24 20 83 fa 2f 77 10 89 d0 83 c2 08 48  >H.}.H..4I...{@...T$ ../w......H
000226c0  03 44 24 30 89 54 24 20 eb 0e 48 8b 44 24 28 48 8d 50 08 48 89 54 24 28 48 8b 28 ff cb eb be b8  .D$0.T$ ..H.D$(H.P.H.T$(H.(.....
000226e0  0d 00 00 00 eb 33 8b 54 24 08 ff c3 83 fa 2f 77 10 89 d0 83 c2 08 48 03 44 24 18 89 54 24 08 eb  .....3.T$...../w......H.D$..T$..
00022700  0e 48 8b 44 24 10 48 8d 50 08 48 89 54 24 10 48 8b 38 e9 4e ff ff ff                             .H.D$.H.P.H.T$.H.8.N...

00022717  31c0               xor     eax, eax  {0x0}
00022719  488b542438         mov     rdx, qword [rsp+0x38 {var_50}]
0002271e  64482b1425280000…  sub     rdx, qword [fs:0x28]
00022727  7405               je      0x2272e

00022729  e8e22afeff         call    __stack_chk_fail
{ Does not return }

0002272e  4883c478           add     rsp, 0x78
00022732  5b                 pop     rbx {__saved_rbx}
00022733  5d                 pop     rbp {__saved_rbp}
00022734  e9d03ffeff         jmp     __x86_return_thunk
{ Does not return }


00022739    void ltc_deinit_multi(int64_t arg1) __noreturn

00022739  4883ec58           sub     rsp, 0x58
0002273d  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
00022742  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
00022747  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
0002274c  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
00022751  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
00022756  64488b0425280000…  mov     rax, qword [fs:0x28]
0002275f  4889442418         mov     qword [rsp+0x18 {var_40}], rax
00022764  31c0               xor     eax, eax  {0x0}
00022766  488d442460         lea     rax, [rsp+0x60 {arg_8}]
0002276b  c7042408000000     mov     dword [rsp {var_58}], 0x8
00022772  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
00022777  488d442420         lea     rax, [rsp+0x20 {var_38}]
0002277c  4889442410         mov     qword [rsp+0x10 {var_48}], rax {var_38}
00022781  4885ff             test    rdi, rdi
00022784  7436               je      0x227bc

00022786  488b0553480200     mov     rax, qword [rel data_46fe0]
0002278d  e89a3ffeff         call    __x86_indirect_thunk_rax
{ Does not return }

00022792                                                        8b 14 24 83 fa 2f 77 0f 89 d0 83 c2 08 48                    ..$../w......H
000227a0  03 44 24 10 89 14 24 eb 0e 48 8b 44 24 08 48 8d 50 08 48 89 54 24 08 48 8b 38 eb c5              .D$...$..H.D$.H.P.H.T$.H.8..

000227bc  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
000227c1  64482b0425280000…  sub     rax, qword [fs:0x28]
000227ca  7405               je      0x227d1

000227cc  e83f2afeff         call    __stack_chk_fail
{ Does not return }

000227d1  4883c458           add     rsp, 0x58
000227d5  e92f3ffeff         jmp     __x86_return_thunk
{ Does not return }


000227da    void ltc_cleanup_multi(int64_t* arg1) __noreturn

000227da  53                 push    rbx {__saved_rbx}
000227db  4889fb             mov     rbx, rdi
000227de  4883ec50           sub     rsp, 0x50
000227e2  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
000227e7  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
000227ec  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
000227f1  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
000227f6  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
000227fb  64488b0425280000…  mov     rax, qword [fs:0x28]
00022804  4889442418         mov     qword [rsp+0x18 {var_40}], rax
00022809  31c0               xor     eax, eax  {0x0}
0002280b  488d442460         lea     rax, [rsp+0x60 {arg_8}]
00022810  c7042408000000     mov     dword [rsp {var_58}], 0x8
00022817  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
0002281c  488d442420         lea     rax, [rsp+0x20 {var_38}]
00022821  4889442410         mov     qword [rsp+0x10 {var_48}], rax {var_38}

00022826  4885db             test    rbx, rbx
00022829  7443               je      0x2286e

0002282b  488b3b             mov     rdi, qword [rbx]
0002282e  4885ff             test    rdi, rdi
00022831  7411               je      0x22844

00022833  488b05a6470200     mov     rax, qword [rel data_46fe0]
0002283a  e8ed3efeff         call    __x86_indirect_thunk_rax
{ Does not return }

0002283f                                                                                               31                                 1
00022840  c0 48 89 03                                                                                      .H..

00022844  8b1424             mov     edx, dword [rsp {var_58}]
00022847  83fa2f             cmp     edx, 0x2f
0002284a  770f               ja      0x2285b

0002284c  89d0               mov     eax, edx
0002284e  83c208             add     edx, 0x8
00022851  4803442410         add     rax, qword [rsp+0x10 {var_48}]
00022856  891424             mov     dword [rsp {var_58}], edx
00022859  eb0e               jmp     0x22869

0002285b  488b442408         mov     rax, qword [rsp+0x8 {var_50}]
00022860  488d5008           lea     rdx, [rax+0x8]
00022864  4889542408         mov     qword [rsp+0x8 {var_50}], rdx

00022869  488b18             mov     rbx, qword [rax]
0002286c  ebb8               jmp     0x22826

0002286e  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
00022873  64482b0425280000…  sub     rax, qword [fs:0x28]
0002287c  7405               je      0x22883

0002287e  e88d29feff         call    __stack_chk_fail
{ Does not return }

00022883  4883c450           add     rsp, 0x50
00022887  5b                 pop     rbx {__saved_rbx}
00022888  e97c3efeff         jmp     __x86_return_thunk
{ Does not return }


0002288d    void _base64_decode_internal.constprop.0(void* arg1, int64_t arg2, uint8_t* arg3, int64_t* arg4, int32_t arg5) __noreturn

0002288d  4155               push    r13 {__saved_r13}
0002288f  4154               push    r12 {__saved_r12}
00022891  55                 push    rbp {__saved_rbp}
00022892  53                 push    rbx {__saved_rbx}
00022893  4889fb             mov     rbx, rdi
00022896  4151               push    r9 {var_28}
00022898  4885ff             test    rdi, rdi
0002289b  7515               jne     0x228b2

0002289d  ba56000000         mov     edx, 0x56
000228a2  488d351c440100     lea     rsi, [rel data_36cc5]  {"src/misc/base64/base64_decode.c"}
000228a9  488d3df2420100     lea     rdi, [rel data_36ba2]  {"in != NULL"}
000228b0  eb1b               jmp     0x228cd

000228b2  4889d7             mov     rdi, rdx
000228b5  4885d2             test    rdx, rdx
000228b8  7518               jne     0x228d2

000228ba  ba57000000         mov     edx, 0x57
000228bf  488d35ff430100     lea     rsi, [rel data_36cc5]  {"src/misc/base64/base64_decode.c"}
000228c6  488d3d461c0100     lea     rdi, [rel data_34513]  {"out != NULL"}

000228cd  e8b1020000         call    crypt_argchk
{ Does not return }

000228d2  4989ca             mov     r10, rcx
000228d5  4885c9             test    rcx, rcx
000228d8  7515               jne     0x228ef

000228da  ba58000000         mov     edx, 0x58
000228df  488d35df430100     lea     rsi, [rel data_36cc5]  {"src/misc/base64/base64_decode.c"}
000228e6  488d3d171c0100     lea     rdi, [rel data_34504]  {"outlen != NULL"}
000228ed  ebde               jmp     0x228cd

000228ef  4589c5             mov     r13d, r8d
000228f2  4889f5             mov     rbp, rsi
000228f5  31c9               xor     ecx, ecx  {0x0}
000228f7  31c0               xor     eax, eax  {0x0}
000228f9  31f6               xor     esi, esi  {0x0}
000228fb  4531db             xor     r11d, r11d  {0x0}
000228fe  31d2               xor     edx, edx  {0x0}
00022900  4183e501           and     r13d, 0x1
00022904  4c8d25f56f0100     lea     r12, [rel map_base64]

0002290b  4939eb             cmp     r11, rbp
0002290e  746d               je      0x2297d

00022910  460fb60c1b         movzx   r9d, byte [rbx+r11]
00022915  470fb60c0c         movzx   r9d, byte [r12+r9]
0002291a  4180f9fe           cmp     r9b, 0xfe
0002291e  7504               jne     0x22924

00022920  ffc1               inc     ecx
00022922  eb54               jmp     0x22978

00022924  85c9               test    ecx, ecx
00022926  7e09               jle     0x22931

00022928  4584ed             test    r13b, r13b
0002292b  0f85b1000000       jne     0x229e2

00022931  4180f9ff           cmp     r9b, 0xff
00022935  750a               jne     0x22941

00022937  4585c0             test    r8d, r8d
0002293a  743c               je      0x22978

0002293c  e9a1000000         jmp     0x229e2

00022941  48c1e206           shl     rdx, 0x6
00022945  48ffc6             inc     rsi
00022948  4c09ca             or      rdx, r9
0002294b  4883fe04           cmp     rsi, 0x4
0002294f  7527               jne     0x22978

00022951  488d7003           lea     rsi, [rax+0x3]
00022955  493932             cmp     qword [r10], rsi
00022958  0f828c000000       jb      0x229ea

0002295e  4989d1             mov     r9, rdx
00022961  88740701           mov     byte [rdi+rax+0x1], dh
00022965  49c1e910           shr     r9, 0x10
00022969  88540702           mov     byte [rdi+rax+0x2], dl
0002296d  31d2               xor     edx, edx  {0x0}
0002296f  44880c07           mov     byte [rdi+rax], r9b
00022973  4889f0             mov     rax, rsi
00022976  31f6               xor     esi, esi  {0x0}

00022978  49ffc3             inc     r11
0002297b  eb8e               jmp     0x2290b

0002297d  4885f6             test    rsi, rsi
00022980  7458               je      0x229da

00022982  41b907000000       mov     r9d, 0x7
00022988  4883fe01           cmp     rsi, 0x1
0002298c  7462               je      0x229f0

0002298e  4863c9             movsxd  rcx, ecx
00022991  4801f1             add     rcx, rsi
00022994  4883f904           cmp     rcx, 0x4
00022998  7406               je      0x229a0

0002299a  4183e001           and     r8d, 0x1
0002299e  7550               jne     0x229f0

000229a0  6bcefa             imul    ecx, esi, 0xfffffffa
000229a3  41b906000000       mov     r9d, 0x6
000229a9  83c118             add     ecx, 0x18
000229ac  48d3e2             shl     rdx, cl
000229af  488d4c06ff         lea     rcx, [rsi+rax-0x1]
000229b4  49390a             cmp     qword [r10], rcx
000229b7  7237               jb      0x229f0

000229b9  4989d0             mov     r8, rdx
000229bc  488d4801           lea     rcx, [rax+0x1]
000229c0  49c1e810           shr     r8, 0x10
000229c4  44880407           mov     byte [rdi+rax], r8b
000229c8  4883fe03           cmp     rsi, 0x3
000229cc  7509               jne     0x229d7

000229ce  88340f             mov     byte [rdi+rcx], dh
000229d1  4883c002           add     rax, 0x2
000229d5  eb03               jmp     0x229da

000229d7  4889c8             mov     rax, rcx

000229da  498902             mov     qword [r10], rax
000229dd  4531c9             xor     r9d, r9d  {0x0}
000229e0  eb0e               jmp     0x229f0

000229e2  41b907000000       mov     r9d, 0x7
000229e8  eb06               jmp     0x229f0

000229ea  41b906000000       mov     r9d, 0x6

000229f0  5a                 pop     rdx {var_28}
000229f1  4489c8             mov     eax, r9d
000229f4  5b                 pop     rbx {__saved_rbx}
000229f5  5d                 pop     rbp {__saved_rbp}
000229f6  415c               pop     r12 {__saved_r12}
000229f8  415d               pop     r13 {__saved_r13}
000229fa  e90a3dfeff         jmp     __x86_return_thunk
{ Does not return }


000229ff    void base64_decode(void* arg1, int64_t arg2, uint8_t* arg3, int64_t* arg4) __noreturn

000229ff  4531c0             xor     r8d, r8d  {0x0}
00022a02  e986feffff         jmp     _base64_decode_internal.constprop.0
{ Does not return }


00022a07    void base64_strict_decode(void* arg1, int64_t arg2, uint8_t* arg3, int64_t* arg4) __noreturn

00022a07  41b801000000       mov     r8d, 0x1
00022a0d  e97bfeffff         jmp     _base64_decode_internal.constprop.0
{ Does not return }


00022a12    void base64_encode(char* arg1, int64_t arg2, void* arg3, void** arg4) __noreturn

00022a12  53                 push    rbx {var_8}
00022a13  4885ff             test    rdi, rdi
00022a16  7515               jne     0x22a2d

00022a18  ba25000000         mov     edx, 0x25
00022a1d  488d35c1420100     lea     rsi, [rel data_36ce5]  {"src/misc/base64/base64_encode.c"}
00022a24  488d3d77410100     lea     rdi, [rel data_36ba2]  {"in != NULL"}
00022a2b  eb1b               jmp     0x22a48

00022a2d  4989d1             mov     r9, rdx
00022a30  4885d2             test    rdx, rdx
00022a33  7518               jne     0x22a4d

00022a35  ba26000000         mov     edx, 0x26
00022a3a  488d35a4420100     lea     rsi, [rel data_36ce5]  {"src/misc/base64/base64_encode.c"}
00022a41  488d3dcb1a0100     lea     rdi, [rel data_34513]  {"out != NULL"}

00022a48  e836010000         call    crypt_argchk
{ Does not return }

00022a4d  4989ca             mov     r10, rcx
00022a50  4885c9             test    rcx, rcx
00022a53  7515               jne     0x22a6a

00022a55  ba27000000         mov     edx, 0x27
00022a5a  488d3584420100     lea     rsi, [rel data_36ce5]  {"src/misc/base64/base64_encode.c"}
00022a61  488d3d9c1a0100     lea     rdi, [rel data_34504]  {"outlen != NULL"}
00022a68  ebde               jmp     0x22a48

00022a6a  488d4602           lea     rax, [rsi+0x2]
00022a6e  b903000000         mov     ecx, 0x3
00022a73  31d2               xor     edx, edx  {0x0}
00022a75  48f7f1             div     rcx  {0x3}
00022a78  488d148501000000   lea     rdx, [rax*4+0x1]
00022a80  b806000000         mov     eax, 0x6
00022a85  493912             cmp     qword [r10], rdx
00022a88  0f82ec000000       jb      0x22b7a

00022a8e  4889f0             mov     rax, rsi
00022a91  31d2               xor     edx, edx  {0x0}
00022a93  4c8d056b420100     lea     r8, [rel data_36d05]  {"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef…"}
00022a9a  4989f3             mov     r11, rsi
00022a9d  48f7f1             div     rcx  {0x3}
00022aa0  31c0               xor     eax, eax  {0x0}
00022aa2  4929d3             sub     r11, rdx
00022aa5  4c89ca             mov     rdx, r9

00022aa8  4c39d8             cmp     rax, r11
00022aab  7364               jae     0x22b11

00022aad  8a0f               mov     cl, byte [rdi]
00022aaf  4883c204           add     rdx, 0x4
00022ab3  4883c703           add     rdi, 0x3
00022ab7  4883c003           add     rax, 0x3
00022abb  c0e902             shr     cl, 0x2
00022abe  0fb6c9             movzx   ecx, cl
00022ac1  418a0c08           mov     cl, byte [r8+rcx]
00022ac5  884afc             mov     byte [rdx-0x4], cl
00022ac8  0fb64ffd           movzx   ecx, byte [rdi-0x3]
00022acc  8a5ffe             mov     bl, byte [rdi-0x2]
00022acf  c1e104             shl     ecx, 0x4
00022ad2  c0eb04             shr     bl, 0x4
00022ad5  83e130             and     ecx, 0x30
00022ad8  4801d9             add     rcx, rbx
00022adb  83e17f             and     ecx, 0x7f
00022ade  418a0c08           mov     cl, byte [r8+rcx]
00022ae2  884afd             mov     byte [rdx-0x3], cl
00022ae5  0fb64ffe           movzx   ecx, byte [rdi-0x2]
00022ae9  8a5fff             mov     bl, byte [rdi-0x1]
00022aec  c1e102             shl     ecx, 0x2
00022aef  83e13c             and     ecx, 0x3c
00022af2  c0eb06             shr     bl, 0x6
00022af5  4801d9             add     rcx, rbx
00022af8  83e17f             and     ecx, 0x7f
00022afb  418a0c08           mov     cl, byte [r8+rcx]
00022aff  884afe             mov     byte [rdx-0x2], cl
00022b02  8a4fff             mov     cl, byte [rdi-0x1]
00022b05  83e13f             and     ecx, 0x3f
00022b08  418a0c08           mov     cl, byte [r8+rcx]
00022b0c  884aff             mov     byte [rdx-0x1], cl
00022b0f  eb97               jmp     0x22aa8

00022b11  4839f0             cmp     rax, rsi
00022b14  735c               jae     0x22b72

00022b16  48ffc0             inc     rax
00022b19  0fb60f             movzx   ecx, byte [rdi]
00022b1c  4531c0             xor     r8d, r8d  {0x0}
00022b1f  4839f0             cmp     rax, rsi
00022b22  7305               jae     0x22b29

00022b24  440fb64701         movzx   r8d, byte [rdi+0x1]

00022b29  4189cb             mov     r11d, ecx
00022b2c  488d3dd2410100     lea     rdi, [rel data_36d05]  {"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef…"}
00022b33  c1e104             shl     ecx, 0x4
00022b36  41c1eb02           shr     r11d, 0x2
00022b3a  83e130             and     ecx, 0x30
00022b3d  468a1c1f           mov     r11b, byte [rdi+r11]
00022b41  44881a             mov     byte [rdx], r11b
00022b44  4589c3             mov     r11d, r8d
00022b47  41c1eb04           shr     r11d, 0x4
00022b4b  4401d9             add     ecx, r11d
00022b4e  8a0c0f             mov     cl, byte [rdi+rcx]
00022b51  884a01             mov     byte [rdx+0x1], cl
00022b54  b13d               mov     cl, 0x3d
00022b56  4839f0             cmp     rax, rsi
00022b59  730c               jae     0x22b67

00022b5b  41c1e002           shl     r8d, 0x2
00022b5f  4183e03c           and     r8d, 0x3c
00022b63  428a0c07           mov     cl, byte [rdi+r8]

00022b67  884a02             mov     byte [rdx+0x2], cl
00022b6a  4883c204           add     rdx, 0x4
00022b6e  c642ff3d           mov     byte [rdx-0x1], 0x3d

00022b72  c60200             mov     byte [rdx], 0x0
00022b75  31c0               xor     eax, eax  {0x0}
00022b77  4c29ca             sub     rdx, r9

00022b7a  498912             mov     qword [r10], rdx
00022b7d  5b                 pop     rbx {var_8}
00022b7e  e9863bfeff         jmp     __x86_return_thunk
{ Does not return }


00022b83    void crypt_argchk(int64_t arg1, int64_t arg2, int32_t arg3) __noreturn

00022b83  50                 push    rax {var_8}
00022b84  4889f9             mov     rcx, rdi
00022b87  488b3d923b0200     mov     rdi, qword [rel stderr]
00022b8e  4989f1             mov     r9, rsi
00022b91  4189d0             mov     r8d, edx
00022b94  be01000000         mov     esi, 0x1
00022b99  31c0               xor     eax, eax  {0x0}
00022b9b  488d15a4410100     lea     rdx, [rel data_36d46]  {"LTC_ARGCHK '%s' failure on line …"}
00022ba2  e8d92bfeff         call    __fprintf_chk
00022ba7  e8d424feff         call    abort
{ Does not return }


00022bac    void find_cipher(char* arg1) __noreturn

00022bac  4154               push    r12 {__saved_r12}
00022bae  55                 push    rbp {__saved_rbp}
00022baf  53                 push    rbx {__saved_rbx}
00022bb0  4885ff             test    rdi, rdi
00022bb3  7518               jne     0x22bcd

00022bb5  ba18000000         mov     edx, 0x18
00022bba  488d35b4410100     lea     rsi, [rel data_36d75]  {"src/misc/crypt/crypt_find_cipher…"}
00022bc1  488d3d21490100     lea     rdi, [rel data_374e2[7]]  {"name != NULL"}
00022bc8  e8b6ffffff         call    crypt_argchk
{ Does not return }

00022bcd  4889fd             mov     rbp, rdi
00022bd0  4c8d2589450200     lea     r12, [rel cipher_descriptor]
00022bd7  31db               xor     ebx, ebx  {0x0}

00022bd9  498b3c24           mov     rdi, qword [r12]
00022bdd  4885ff             test    rdi, rdi
00022be0  740c               je      0x22bee

00022be2  4889ee             mov     rsi, rbp
00022be5  e82628feff         call    strcmp
00022bea  85c0               test    eax, eax
00022bec  7411               je      0x22bff

00022bee  ffc3               inc     ebx
00022bf0  4981c4c0000000     add     r12, 0xc0
00022bf7  83fb05             cmp     ebx, 0x5
00022bfa  75dd               jne     0x22bd9

00022bfc  83cbff             or      ebx, 0xffffffff  {0xffffffff}

00022bff  89d8               mov     eax, ebx
00022c01  5b                 pop     rbx {__saved_rbx}
00022c02  5d                 pop     rbp {__saved_rbp}
00022c03  415c               pop     r12 {__saved_r12}
00022c05  e9ff3afeff         jmp     __x86_return_thunk
{ Does not return }


00022c0a    void find_hash(char* arg1) __noreturn

00022c0a  4154               push    r12 {__saved_r12}
00022c0c  55                 push    rbp {__saved_rbp}
00022c0d  53                 push    rbx {__saved_rbx}
00022c0e  4885ff             test    rdi, rdi
00022c11  7518               jne     0x22c2b

00022c13  ba18000000         mov     edx, 0x18
00022c18  488d3579410100     lea     rsi, [rel data_36d98]  {"src/misc/crypt/crypt_find_hash.c"}
00022c1f  488d3dc3480100     lea     rdi, [rel data_374e2[7]]  {"name != NULL"}
00022c26  e858ffffff         call    crypt_argchk
{ Does not return }

00022c2b  4889fd             mov     rbp, rdi
00022c2e  4c8d256b3f0200     lea     r12, [rel hash_descriptor]
00022c35  31db               xor     ebx, ebx  {0x0}

00022c37  498b3c24           mov     rdi, qword [r12]
00022c3b  4885ff             test    rdi, rdi
00022c3e  740c               je      0x22c4c

00022c40  4889ee             mov     rsi, rbp
00022c43  e8c827feff         call    strcmp
00022c48  85c0               test    eax, eax
00022c4a  7411               je      0x22c5d

00022c4c  ffc3               inc     ebx
00022c4e  4981c4d0000000     add     r12, 0xd0
00022c55  83fb05             cmp     ebx, 0x5
00022c58  75dd               jne     0x22c37

00022c5a  83cbff             or      ebx, 0xffffffff  {0xffffffff}

00022c5d  89d8               mov     eax, ebx
00022c5f  5b                 pop     rbx {__saved_rbx}
00022c60  5d                 pop     rbp {__saved_rbp}
00022c61  415c               pop     r12 {__saved_r12}
00022c63  e9a13afeff         jmp     __x86_return_thunk
{ Does not return }


00022c68    void hash_is_valid(int32_t arg1) __noreturn

00022c68  b80b000000         mov     eax, 0xb
00022c6d  83ff04             cmp     edi, 0x4
00022c70  771a               ja      0x22c8c

00022c72  4863ff             movsxd  rdi, edi
00022c75  488d15243f0200     lea     rdx, [rel hash_descriptor]
00022c7c  4869ffd0000000     imul    rdi, rdi, 0xd0
00022c83  48833c3a00         cmp     qword [rdx+rdi], 0x0
00022c88  7402               je      0x22c8c

00022c8a  31c0               xor     eax, eax  {0x0}

00022c8c  e9783afeff         jmp     __x86_return_thunk
{ Does not return }


00022c91    void register_cipher(void* arg1) __noreturn

00022c91  4885ff             test    rdi, rdi
00022c94  7519               jne     0x22caf

00022c96  50                 push    rax {var_8}
00022c97  ba19000000         mov     edx, 0x19
00022c9c  488d3516410100     lea     rsi, [rel data_36db9]  {"src/misc/crypt/crypt_register_ci…"}
00022ca3  488d3d36410100     lea     rdi, [rel data_36de0]  {"cipher != NULL"}
00022caa  e8d4feffff         call    crypt_argchk
{ Does not return }

00022caf  488d15aa440200     lea     rdx, [rel cipher_descriptor]
00022cb6  4889fe             mov     rsi, rdi
00022cb9  31c0               xor     eax, eax  {0x0}
00022cbb  4889d7             mov     rdi, rdx  {cipher_descriptor}
00022cbe  4889d1             mov     rcx, rdx  {cipher_descriptor}

00022cc1  48833f00           cmp     qword [rdi], 0x0
00022cc5  740a               je      0x22cd1

00022cc7  448a4608           mov     r8b, byte [rsi+0x8]
00022ccb  44384708           cmp     byte [rdi+0x8], r8b
00022ccf  7443               je      0x22d14

00022cd1  ffc0               inc     eax
00022cd3  4881c7c0000000     add     rdi, 0xc0
00022cda  83f805             cmp     eax, 0x5
00022cdd  75e2               jne     0x22cc1

00022cdf  31c0               xor     eax, eax  {0x0}

00022ce1  48833a00           cmp     qword [rdx], 0x0
00022ce5  751c               jne     0x22d03

00022ce7  4863d0             movsxd  rdx, eax
00022cea  4869d2c0000000     imul    rdx, rdx, 0xc0
00022cf1  4801ca             add     rdx, rcx
00022cf4  b930000000         mov     ecx, 0x30
00022cf9  4889d7             mov     rdi, rdx
00022cfc  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
00022cfe  e9063afeff         jmp     __x86_return_thunk
{ Does not return }

00022d03  ffc0               inc     eax
00022d05  4881c2c0000000     add     rdx, 0xc0
00022d0c  83f805             cmp     eax, 0x5
00022d0f  75d0               jne     0x22ce1

00022d11  83c8ff             or      eax, 0xffffffff  {0xffffffff}

00022d14  e9f039feff         jmp     __x86_return_thunk
{ Does not return }


00022d19    void register_hash(int64_t arg1) __noreturn

00022d19  4154               push    r12 {__saved_r12}
00022d1b  55                 push    rbp {__saved_rbp}
00022d1c  53                 push    rbx {__saved_rbx}
00022d1d  4885ff             test    rdi, rdi
00022d20  7518               jne     0x22d3a

00022d22  ba19000000         mov     edx, 0x19
00022d27  488d35c1400100     lea     rsi, [rel data_36def]  {"src/misc/crypt/crypt_register_ha…"}
00022d2e  488d3ddf400100     lea     rdi, [rel data_36e14]  {"hash != NULL"}
00022d35  e849feffff         call    crypt_argchk
{ Does not return }

00022d3a  4889fd             mov     rbp, rdi
00022d3d  31db               xor     ebx, ebx  {0x0}

00022d3f  4869fbd0000000     imul    rdi, rbx, 0xd0
00022d46  4c8d25533e0200     lea     r12, [rel hash_descriptor]
00022d4d  bad0000000         mov     edx, 0xd0
00022d52  4889ee             mov     rsi, rbp
00022d55  4c01e7             add     rdi, r12
00022d58  e86326feff         call    memcmp
00022d5d  4c89e2             mov     rdx, r12  {hash_descriptor}
00022d60  85c0               test    eax, eax
00022d62  7441               je      0x22da5

00022d64  48ffc3             inc     rbx
00022d67  4883fb05           cmp     rbx, 0x5
00022d6b  75d2               jne     0x22d3f

00022d6d  31c0               xor     eax, eax  {0x0}

00022d6f  49833c2400         cmp     qword [r12], 0x0
00022d74  751c               jne     0x22d92

00022d76  4863c8             movsxd  rcx, eax
00022d79  4889ee             mov     rsi, rbp
00022d7c  4869c9d0000000     imul    rcx, rcx, 0xd0
00022d83  4801ca             add     rdx, rcx
00022d86  b934000000         mov     ecx, 0x34
00022d8b  4889d7             mov     rdi, rdx
00022d8e  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
00022d90  eb15               jmp     0x22da7

00022d92  ffc0               inc     eax
00022d94  4981c4d0000000     add     r12, 0xd0
00022d9b  83f805             cmp     eax, 0x5
00022d9e  75cf               jne     0x22d6f

00022da0  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00022da3  eb02               jmp     0x22da7

00022da5  89d8               mov     eax, ebx

00022da7  5b                 pop     rbx {__saved_rbx}
00022da8  5d                 pop     rbp {__saved_rbp}
00022da9  415c               pop     r12 {__saved_r12}
00022dab  e95939feff         jmp     __x86_return_thunk
{ Does not return }


00022db0    void register_prng(int64_t arg1) __noreturn

00022db0  4154               push    r12 {__saved_r12}
00022db2  55                 push    rbp {__saved_rbp}
00022db3  53                 push    rbx {__saved_rbx}
00022db4  4885ff             test    rdi, rdi
00022db7  7518               jne     0x22dd1

00022db9  ba19000000         mov     edx, 0x19
00022dbe  488d355c400100     lea     rsi, [rel data_36e21]  {"src/misc/crypt/crypt_register_pr…"}
00022dc5  488d3d7a400100     lea     rdi, [rel data_36e46]  {"prng != NULL"}
00022dcc  e8b2fdffff         call    crypt_argchk
{ Does not return }

00022dd1  4889fd             mov     rbp, rdi
00022dd4  31db               xor     ebx, ebx  {0x0}

00022dd6  486bfb50           imul    rdi, rbx, 0x50
00022dda  4c8d253f470200     lea     r12, [rel prng_descriptor]
00022de1  ba50000000         mov     edx, 0x50
00022de6  4889ee             mov     rsi, rbp
00022de9  4c01e7             add     rdi, r12
00022dec  e8cf25feff         call    memcmp
00022df1  4c89e2             mov     rdx, r12  {prng_descriptor}
00022df4  85c0               test    eax, eax
00022df6  743b               je      0x22e33

00022df8  48ffc3             inc     rbx
00022dfb  4883fb05           cmp     rbx, 0x5
00022dff  75d5               jne     0x22dd6

00022e01  31c0               xor     eax, eax  {0x0}

00022e03  49833c2400         cmp     qword [r12], 0x0
00022e08  7519               jne     0x22e23

00022e0a  4863c8             movsxd  rcx, eax
00022e0d  4889ee             mov     rsi, rbp
00022e10  486bc950           imul    rcx, rcx, 0x50
00022e14  4801ca             add     rdx, rcx
00022e17  b914000000         mov     ecx, 0x14
00022e1c  4889d7             mov     rdi, rdx
00022e1f  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
00022e21  eb12               jmp     0x22e35

00022e23  ffc0               inc     eax
00022e25  4983c450           add     r12, 0x50
00022e29  83f805             cmp     eax, 0x5
00022e2c  75d5               jne     0x22e03

00022e2e  83c8ff             or      eax, 0xffffffff  {0xffffffff}
00022e31  eb02               jmp     0x22e35

00022e33  89d8               mov     eax, ebx

00022e35  5b                 pop     rbx {__saved_rbx}
00022e36  5d                 pop     rbp {__saved_rbp}
00022e37  415c               pop     r12 {__saved_r12}
00022e39  e9cb38feff         jmp     __x86_return_thunk
{ Does not return }


00022e3e    int64_t zeromem(int64_t arg1, int32_t arg2)

00022e3e  e9ec3efeff         jmp     m_burn


00022e43    void ctr_decrypt(int64_t arg1, int64_t arg2, int64_t arg3, int32_t* arg4) __noreturn

00022e43  4150               push    r8 {var_8}
00022e45  4885f6             test    rsi, rsi
00022e48  7515               jne     0x22e5f

00022e4a  ba1c000000         mov     edx, 0x1c
00022e4f  488d35fd3f0100     lea     rsi, [rel data_36e53]  {"src/modes/ctr/ctr_decrypt.c"}
00022e56  488d3df73c0100     lea     rdi, [rel data_36b54]  {"pt != NULL"}
00022e5d  eb18               jmp     0x22e77

00022e5f  4885ff             test    rdi, rdi
00022e62  7518               jne     0x22e7c

00022e64  ba1d000000         mov     edx, 0x1d
00022e69  488d35e33f0100     lea     rsi, [rel data_36e53]  {"src/modes/ctr/ctr_decrypt.c"}
00022e70  488d3de83c0100     lea     rdi, [rel data_36b5f]  {"ct != NULL"}

00022e77  e807fdffff         call    crypt_argchk
{ Does not return }

00022e7c  4885c9             test    rcx, rcx
00022e7f  7515               jne     0x22e96

00022e81  ba1e000000         mov     edx, 0x1e
00022e86  488d35c63f0100     lea     rsi, [rel data_36e53]  {"src/modes/ctr/ctr_decrypt.c"}
00022e8d  488d3ddb3f0100     lea     rdi, [rel data_36e6f]  {"ctr != NULL"}
00022e94  ebe1               jmp     0x22e77

00022e96  58                 pop     rax {var_8}
00022e97  e90e010000         jmp     ctr_encrypt
{ Does not return }


00022e9c    void _ctr_encrypt(char* arg1, int64_t* arg2, uint64_t arg3, int32_t* arg4) __noreturn

00022e9c  4156               push    r14 {__saved_r14}
00022e9e  4c8d35bb420200     lea     r14, [rel cipher_descriptor]
00022ea5  4155               push    r13 {__saved_r13}
00022ea7  4989f5             mov     r13, rsi
00022eaa  4154               push    r12 {__saved_r12}
00022eac  4989fc             mov     r12, rdi
00022eaf  55                 push    rbp {__saved_rbp}
00022eb0  4889d5             mov     rbp, rdx
00022eb3  53                 push    rbx {__saved_rbx}
00022eb4  4889cb             mov     rbx, rcx

00022eb7  4885ed             test    rbp, rbp
00022eba  0f84db000000       je      0x22f9b

00022ec0  48634308           movsxd  rax, dword [rbx+0x8]
00022ec4  3b4304             cmp     eax, dword [rbx+0x4]
00022ec7  7568               jne     0x22f31

00022ec9  837b0c00           cmp     dword [rbx+0xc], 0x0
00022ecd  8b4b10             mov     ecx, dword [rbx+0x10]
00022ed0  7557               jne     0x22f29

00022ed2  31c0               xor     eax, eax  {0x0}

00022ed4  39c1               cmp     ecx, eax
00022ed6  7e13               jle     0x22eeb

00022ed8  408a7c0314         mov     dil, byte [rbx+rax+0x14]
00022edd  8d5701             lea     edx, [rdi+0x1]
00022ee0  88540314           mov     byte [rbx+rax+0x14], dl
00022ee4  48ffc0             inc     rax
00022ee7  84d2               test    dl, dl
00022ee9  74e9               je      0x22ed4

00022eeb  486303             movsxd  rax, dword [rbx]
00022eee  488d9318010000     lea     rdx, [rbx+0x118]
00022ef5  488db394000000     lea     rsi, [rbx+0x94]
00022efc  488d7b14           lea     rdi, [rbx+0x14]
00022f00  4869c0c0000000     imul    rax, rax, 0xc0
00022f07  498b440628         mov     rax, qword [r14+rax+0x28]
00022f0c  e81b38feff         call    __x86_indirect_thunk_rax
{ Does not return }

00022f11                                                     85 c0 0f 85 84 00 00 00 31 c0 89 43 08 eb 15                   ........1..C...

00022f20  4863f0             movsxd  rsi, eax
00022f23  fe443314           inc     byte [rbx+rsi+0x14]
00022f27  75c2               jne     0x22eeb

00022f29  ffc8               dec     eax
00022f2b  39c8               cmp     eax, ecx
00022f2d  7df1               jge     0x22f20

00022f2f  ebba               jmp     0x22eeb

00022f31  85c0               test    eax, eax
00022f33  7543               jne     0x22f78

00022f35  48634304           movsxd  rax, dword [rbx+0x4]
00022f39  4839c5             cmp     rbp, rax
00022f3c  7304               jae     0x22f42

00022f3e  31c0               xor     eax, eax  {0x0}
00022f40  eb36               jmp     0x22f78

00022f42  31c0               xor     eax, eax  {0x0}

00022f44  8b5304             mov     edx, dword [rbx+0x4]
00022f47  39c2               cmp     edx, eax
00022f49  7e19               jle     0x22f64

00022f4b  4863d0             movsxd  rdx, eax
00022f4e  83c008             add     eax, 0x8
00022f51  498b0c14           mov     rcx, qword [r12+rdx]
00022f55  48338c1394000000   xor     rcx, qword [rbx+rdx+0x94]
00022f5d  49894c1500         mov     qword [r13+rdx], rcx
00022f62  ebe0               jmp     0x22f44

00022f64  4863c2             movsxd  rax, edx
00022f67  895308             mov     dword [rbx+0x8], edx
00022f6a  4901c4             add     r12, rax
00022f6d  4901c5             add     r13, rax
00022f70  4829c5             sub     rbp, rax
00022f73  e93fffffff         jmp     0x22eb7

00022f78  8d4801             lea     ecx, [rax+0x1]
00022f7b  418a1424           mov     dl, byte [r12]
00022f7f  48ffcd             dec     rbp
00022f82  49ffc5             inc     r13
00022f85  894b08             mov     dword [rbx+0x8], ecx
00022f88  32940394000000     xor     dl, byte [rbx+rax+0x94]
00022f8f  49ffc4             inc     r12
00022f92  418855ff           mov     byte [r13-0x1], dl
00022f96  e91cffffff         jmp     0x22eb7

00022f9b  31c0               xor     eax, eax  {0x0}
00022f9d  5b                 pop     rbx {__saved_rbx}
00022f9e  5d                 pop     rbp {__saved_rbp}
00022f9f  415c               pop     r12 {__saved_r12}
00022fa1  415d               pop     r13 {__saved_r13}
00022fa3  415e               pop     r14 {__saved_r14}
00022fa5  e95f37feff         jmp     __x86_return_thunk
{ Does not return }


00022faa    void ctr_encrypt(int64_t arg1, int64_t arg2, int64_t arg3, int32_t* arg4) __noreturn

00022faa  4157               push    r15 {var_8}
00022fac  4156               push    r14 {var_10}
00022fae  4155               push    r13 {var_18}
00022fb0  4154               push    r12 {var_20}
00022fb2  55                 push    rbp {var_28}
00022fb3  53                 push    rbx {var_30}
00022fb4  4151               push    r9 {var_38}
00022fb6  4885ff             test    rdi, rdi
00022fb9  7515               jne     0x22fd0

00022fbb  ba5a000000         mov     edx, 0x5a
00022fc0  488d35b43e0100     lea     rsi, [rel data_36e7b]  {"src/modes/ctr/ctr_encrypt.c"}
00022fc7  488d3d863b0100     lea     rdi, [rel data_36b54]  {"pt != NULL"}
00022fce  eb1b               jmp     0x22feb

00022fd0  4989f4             mov     r12, rsi
00022fd3  4885f6             test    rsi, rsi
00022fd6  7518               jne     0x22ff0

00022fd8  ba5b000000         mov     edx, 0x5b
00022fdd  488d35973e0100     lea     rsi, [rel data_36e7b]  {"src/modes/ctr/ctr_encrypt.c"}
00022fe4  488d3d743b0100     lea     rdi, [rel data_36b5f]  {"ct != NULL"}

00022feb  e893fbffff         call    crypt_argchk
{ Does not return }

00022ff0  4989cd             mov     r13, rcx
00022ff3  4885c9             test    rcx, rcx
00022ff6  7515               jne     0x2300d

00022ff8  ba5c000000         mov     edx, 0x5c
00022ffd  488d35773e0100     lea     rsi, [rel data_36e7b]  {"src/modes/ctr/ctr_encrypt.c"}
00023004  488d3d643e0100     lea     rdi, [rel data_36e6f]  {"ctr != NULL"}
0002300b  ebde               jmp     0x22feb

0002300d  4889fd             mov     rbp, rdi
00023010  8b39               mov     edi, dword [rcx]
00023012  4889d3             mov     rbx, rdx
00023015  e85a300000         call    cipher_is_valid
{ Does not return }

0002301a                                                                                85 c0 0f 85 fd 00                            ......
00023020  00 00 41 8b 45 04 8d 50 ff 83 fa 7f 0f 87 e8 00 00 00 41 8b 55 08 81 fa 80 00 00 00 0f 87 d8 00  ..A.E..P..........A.U...........
00023040  00 00 a8 07 0f 85 d0 00 00 00 49 63 4d 00 4c 8d 3d 0b 41 02 00 48 69 c9 c0 00 00 00 49 83 7c 0f  ..........IcM.L.=.A..Hi.....I.|.
00023060  70 00 0f 84 95 00 00 00 48 63 c8 48 39 cb 0f 82 89 00 00 00 39 d0 7e 27 29 d0 4c 89 e9 4c 89 e6  p.......Hc.H9.......9.~').L..L..
00023080  48 89 ef 4c 63 f0 4c 89 f2 e8 0e fe ff ff 85 c0 0f 85 89 00 00 00 4c 01 f5 4d 01 f4 4c 29 f3 49  H..Lc.L...............L..M..L).I
000230a0  63 4d 04 48 39 cb 72 55 31 d2 48 89 d8 49 8d 75 14 45 8b 45 0c 48 f7 f1 49 63 55 00 48 69 d2 c0  cM.H9.rU1.H..I.u.E.E.H..IcU.Hi..
000230c0  00 00 00 48 89 f1 4d 8d 8d 18 01 00 00 4c 89 e6 48 89 ef 4d 8b 54 17 70 48 89 c2 e8 59 bd fe ff  ...H..M......L..H..M.T.pH...Y...
000230e0  85 c0 75 3b 49 63 4d 04 48 89 d8 31 d2 48 f7 f1 48 0f af c1 48 89 d3 48 01 c5 49 01 c4 41 58 4c  ..u;IcM.H..1.H..H...H..H..I..AXL
00023100  89 e9 48 89 da 4c 89 e6 5b 48 89 ef 5d 41 5c 41 5d 41 5e 41 5f e9 82 fd ff ff b8 10 00 00 00 5a  ..H..L..[H..]A\A]A^A_..........Z
00023120  5b 5d 41 5c 41 5d 41 5e 41 5f e9 da 35 fe ff                                                     []A\A]A^A_..5..

0002312f    void ctr_start(int32_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7) __noreturn

0002312f  4157               push    r15 {var_8}
00023131  4156               push    r14 {var_10}
00023133  4989f6             mov     r14, rsi
00023136  4155               push    r13 {var_18}
00023138  4154               push    r12 {var_20}
0002313a  55                 push    rbp {var_28}
0002313b  53                 push    rbx {var_30}
0002313c  4883ec28           sub     rsp, 0x28
00023140  488b5c2460         mov     rbx, qword [rsp+0x60 {arg7}]
00023145  4885f6             test    rsi, rsi
00023148  7515               jne     0x2315f

0002314a  ba26000000         mov     edx, 0x26
0002314f  488d35413d0100     lea     rsi, [rel data_36e97]  {"src/modes/ctr/ctr_start.c"}
00023156  488d3d543d0100     lea     rdi, [rel data_36eb1]  {"IV != NULL"}
0002315d  eb1b               jmp     0x2317a

0002315f  4989d2             mov     r10, rdx
00023162  4885d2             test    rdx, rdx
00023165  7518               jne     0x2317f

00023167  ba27000000         mov     edx, 0x27
0002316c  488d35243d0100     lea     rsi, [rel data_36e97]  {"src/modes/ctr/ctr_start.c"}
00023173  488d3dce390100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}

0002317a  e804faffff         call    crypt_argchk
{ Does not return }

0002317f  4885db             test    rbx, rbx
00023182  7515               jne     0x23199

00023184  ba28000000         mov     edx, 0x28
00023189  488d35073d0100     lea     rsi, [rel data_36e97]  {"src/modes/ctr/ctr_start.c"}
00023190  488d3dd83c0100     lea     rdi, [rel data_36e6f]  {"ctr != NULL"}
00023197  ebe1               jmp     0x2317a

00023199  448944241c         mov     dword [rsp+0x1c {var_3c}], r8d
0002319e  4189fd             mov     r13d, edi
000231a1  4489cd             mov     ebp, r9d
000231a4  894c2410           mov     dword [rsp+0x10 {var_48}], ecx
000231a8  4c89542408         mov     qword [rsp+0x8 {var_50}], r10
000231ad  e8c22e0000         call    cipher_is_valid
{ Does not return }

000231b2                                                        85 c0 0f 85 27 01 00 00 4d 63 e5 89 e9 4c                    ....'...Mc...L
000231c0  8d 3d 9a 3f 02 00 8b 74 24 10 49 69 c4 c0 00 00 00 4c 8b 54 24 08 8b 54 24 1c 81 e1 ff 00 00 00  .=.?...t$.Ii.....L.T$..T$.......
000231e0  41 8b 44 07 14 75 07 89 43 10 89 c1 eb 0b 89 4b 10 39 c1 0f 8f e3 00 00 00 41 89 e8 41 81 e0 00  A.D..u..C......K.9.......A..A...
00023200  10 00 00 74 05 29 c8 89 43 10 4d 69 cc c0 00 00 00 48 8d 83 18 01 00 00 44 89 44 24 1c 4c 89 d7  ...t.)..C.Mi.....H......D.D$.L..
00023220  48 89 44 24 08 48 8b 4c 24 08 4d 01 f9 49 8b 41 20 4c 89 4c 24 10 e8 f1 34 fe ff 85 c0 0f 85 9e  H.D$.H.L$.M..I.A L.L$...4.......
00023240  00 00 00 4c 8b 4c 24 10 44 8b 44 24 1c 31 d2 41 8b 41 14 44 89 2b 44 89 43 0c 89 43 04 89 53 08  ...L.L$.D.D$.1.A.A.D.+D.C..C..S.
00023260  31 d2 39 d0 7e 0d 41 8a 0c 16 88 4c 13 14 48 ff c2 eb ef 0f ba e5 0d 72 2f 4d 69 e4 c0 00 00 00  1.9.~.A....L..H........r/Mi.....
00023280  48 8b 54 24 08 48 8d b3 94 00 00 00 48 8d 7b 14 4b 8b 44 27 28 48 83 c4 28 5b 5d 41 5c 41 5d 41  H.T$.H......H.{.K.D'(H..([]A\A]A
000232a0  5e 41 5f e9 84 34 fe ff 8b 4b 10 45 85 c0 75 24 31 c0 39 c1 7e c3 40 8a 7c 03 14 8d 57 01 88 54  ^A_..4...K.E..u$1.9.~.@.|...W..T
000232c0  03 14 48 ff c0 84 d2 74 e9 eb ae 48 63 f0 fe 44 33 14 75 a5 ff c8 39 c8 7d f1 eb 9d b8 10 00 00  ..H....t...Hc..D3.u...9.}.......
000232e0  00 48 83 c4 28 5b 5d 41 5c 41 5d 41 5e 41 5f e9 15 34 fe ff                                      .H..([]A\A]A^A_..4..

000232f4    void ecc_ansi_x963_export(void* arg1, int64_t arg2, int64_t arg3) __noreturn

000232f4  4157               push    r15 {var_8}
000232f6  4156               push    r14 {var_10}
000232f8  4155               push    r13 {var_18}
000232fa  4154               push    r12 {var_20}
000232fc  55                 push    rbp {var_28}
000232fd  53                 push    rbx {var_30}
000232fe  4881ec28010000     sub     rsp, 0x128
00023305  64488b0425280000…  mov     rax, qword [fs:0x28]
0002330e  4889842418010000   mov     qword [rsp+0x118 {var_40}], rax
00023316  31c0               xor     eax, eax  {0x0}
00023318  4885ff             test    rdi, rdi
0002331b  7515               jne     0x23332

0002331d  ba23000000         mov     edx, 0x23
00023322  488d3567410100     lea     rsi, [rel data_37490]  {"src/pk/ecc/ecc_ansi_x963_export.…"}
00023329  488d3d18380100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00023330  eb1b               jmp     0x2334d

00023332  4989d5             mov     r13, rdx
00023335  4885d2             test    rdx, rdx
00023338  7518               jne     0x23352

0002333a  ba24000000         mov     edx, 0x24
0002333f  488d354a410100     lea     rsi, [rel data_37490]  {"src/pk/ecc/ecc_ansi_x963_export.…"}
00023346  488d3db7110100     lea     rdi, [rel data_34504]  {"outlen != NULL"}

0002334d  e831f8ffff         call    crypt_argchk
{ Does not return }

00023352  4989fc             mov     r12, rdi
00023355  8b7f04             mov     edi, dword [rdi+0x4]
00023358  4989f6             mov     r14, rsi
0002335b  e8a9040000         call    ltc_ecc_is_valid_idx
{ Does not return }

00023360  85 c0 0f 84 0d 01 00 00 49 8b 44 24 08 49 8b 7c 24 10 48 63 18 48 8b 05 d4 3c 02 00 e8 ab 33 fe  ........I.D$.I.|$.Hc.H...<....3.
00023380  ff 49 8b 7c 24 18 49 89 c7 48 8b 05 c0 3c 02 00 e8 97 33 fe ff 49 39 c7 49 89 c0 49 0f 43 c7 48  .I.|$.I..H...<....3..I9.I..I.C.H
000233a0  39 c3 72 1a 48 81 fb 00 01 00 00 77 11 48 8d 14 1b 48 ff c2 49 39 55 00 73 0e 49 89 55 00 b8 06  9.r.H......w.H...H..I9U.s.I.U...
000233c0  00 00 00 e9 b2 00 00 00 4d 85 f6 75 18 ba 36 00 00 00 48 8d 35 b7 40 01 00 48 8d 3d 33 11 01 00  ........M..u..6...H.5.@..H.=3...
000233e0  e9 68 ff ff ff 41 c6 06 04 48 8d 6c 24 18 be 00 01 00 00 48 89 ef 48 89 14 24 4c 89 44 24 08 e8  .h...A...H.l$......H..H..$L.D$..
00023400  3a fa ff ff 48 89 de 49 8b 7c 24 10 48 8b 05 45 3c 02 00 4c 29 fe 48 01 ee e8 0e 33 fe ff 49 8d  :...H..I.|$.H..E<..L).H....3..I.
00023420  46 01 48 89 ee 48 89 d9 48 89 c7 f3 a4 be 00 01 00 00 48 89 ef e8 04 fa ff ff 4c 8b 44 24 08 48  F.H..H..H.........H.......L.D$.H
00023440  89 de 49 8b 7c 24 18 48 8b 05 0a 3c 02 00 4c 29 c6 48 01 ee e8 d3 32 fe ff 48 8b 14 24 49 8d 44  ..I.|$.H...<..L).H....2..H..$I.D
00023460  1e 01 48 89 ee 48 89 c7 48 89 d9 31 c0 f3 a4 49 89 55 00 eb 05 b8 10 00 00 00 48 8b 94 24 18 01  ..H..H..H..1...I.U........H..$..
00023480  00 00 64 48 2b 14 25 28 00 00 00 74 05 e8 7e 1d fe ff 48 81 c4 28 01 00 00 5b 5d 41 5c 41 5d 41  ..dH+.%(...t..~...H..(...[]A\A]A
000234a0  5e 41 5f e9 61 32 fe ff                                                                          ^A_.a2..

000234a8    void ecc_free(void* arg1) __noreturn

000234a8  4885ff             test    rdi, rdi
000234ab  7519               jne     0x234c6

000234ad  50                 push    rax {var_8}
000234ae  ba1e000000         mov     edx, 0x1e
000234b3  488d35f83f0100     lea     rsi, [rel data_374b2]  {"src/pk/ecc/ecc_free.c"}
000234ba  488d3d87360100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
000234c1  e8bdf6ffff         call    crypt_argchk
{ Does not return }

000234c6  488b4f28           mov     rcx, qword [rdi+0x28]
000234ca  488b5720           mov     rdx, qword [rdi+0x20]
000234ce  4531c0             xor     r8d, r8d  {0x0}
000234d1  31c0               xor     eax, eax  {0x0}
000234d3  488b7718           mov     rsi, qword [rdi+0x18]
000234d7  488b7f10           mov     rdi, qword [rdi+0x10]
000234db  e959f2ffff         jmp     ltc_deinit_multi
{ Does not return }


000234e0    void ecc_make_key_ex(int64_t arg1, int32_t arg2, int64_t arg3, int64_t arg4) __noreturn

000234e0  4157               push    r15 {var_8}
000234e2  4156               push    r14 {var_10}
000234e4  4155               push    r13 {var_18}
000234e6  4154               push    r12 {var_20}
000234e8  55                 push    rbp {var_28}
000234e9  53                 push    rbx {var_30}
000234ea  4883ec28           sub     rsp, 0x28
000234ee  64488b0425280000…  mov     rax, qword [fs:0x28]
000234f7  4889442418         mov     qword [rsp+0x18 {var_40}], rax
000234fc  31c0               xor     eax, eax  {0x0}
000234fe  4885d2             test    rdx, rdx
00023501  7515               jne     0x23518

00023503  ba38000000         mov     edx, 0x38
00023508  488d35b93f0100     lea     rsi, [rel data_374c8]  {"src/pk/ecc/ecc_make_key.c"}
0002350f  488d3d32360100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}
00023516  eb1d               jmp     0x23535

00023518  48833da03a020000   cmp     qword [rel ltc_mp], 0x0
00023520  7518               jne     0x2353a  {ltc_mp}

00023522  ba39000000         mov     edx, 0x39
00023527  488d359a3f0100     lea     rsi, [rel data_374c8]  {"src/pk/ecc/ecc_make_key.c"}
0002352e  488d3dad3f0100     lea     rdi, [rel data_374e2]  {"ltc_mp.name != NULL"}

00023535  e849f6ffff         call    crypt_argchk
{ Does not return }

0002353a  4989cd             mov     r13, rcx
0002353d  4885c9             test    rcx, rcx
00023540  7515               jne     0x23557

00023542  ba3a000000         mov     edx, 0x3a
00023547  488d357a3f0100     lea     rsi, [rel data_374c8]  {"src/pk/ecc/ecc_make_key.c"}
0002354e  488d3da13f0100     lea     rdi, [rel data_374f6]  {"dp != NULL"}
00023555  ebde               jmp     0x23535

00023557  4c63e6             movsxd  r12, esi
0002355a  4989ff             mov     r15, rdi
0002355d  4889d5             mov     rbp, rdx
00023560  4489e7             mov     edi, r12d
00023563  e8352b0000         call    prng_is_valid
{ Does not return }

00023568                          89 c3 85 c0 0f 85 22 02 00 00 4c 89 6d 08 bf 42 00 00 00 4d 63 75 00 bb          ......"...L.m..B...Mcu..
00023580  0d 00 00 00 c7 45 04 ff ff ff ff e8 80 80 fe ff 49 89 c5 48 85 c0 0f 84 f8 01 00 00 4d 6b e4 50  .....E..........I..H........Mk.P
000235a0  4c 89 fa 4c 89 f6 4c 89 ef 48 8d 05 70 3f 02 00 bb 09 00 00 00 4a 8b 44 20 28 e8 6d 31 fe ff 49  L..L..L..H..p?.......J.D (.m1..I
000235c0  39 c6 0f 85 c4 01 00 00 50 4c 8d 7d 10 48 8d 4d 28 31 c0 6a 00 48 8d 55 20 48 8d 75 18 4c 89 ff  9.......PL.}.H.M(1.j.H.U H.u.L..
000235e0  4c 8d 4c 24 20 4c 8d 44 24 18 e8 23 f0 ff ff 5a 59 89 c3 85 c0 0f 85 91 01 00 00 e8 e4 0f 00 00  L.L$ L.D$..#...ZY...............
00023600  49 89 c4 48 85 c0 0f 84 46 01 00 00 48 8b 45 08 48 8b 7c 24 08 ba 10 00 00 00 48 8b 70 10 48 8b  I..H....F...H.E.H.|$......H.p.H.
00023620  05 1b 3a 02 00 e8 02 31 fe ff 89 c3 85 c0 0f 85 23 01 00 00 48 8b 45 08 48 8b 7c 24 10 ba 10 00  ..:....1........#...H.E.H.|$....
00023640  00 00 48 8b 70 20 48 8b 05 f3 39 02 00 e8 da 30 fe ff 89 c3 85 c0 0f 85 fb 00 00 00 48 8b 45 08  ..H.p H...9....0............H.E.
00023660  49 8b 3c 24 ba 10 00 00 00 48 8b 70 28 48 8b 05 cc 39 02 00 e8 b3 30 fe ff 89 c3 85 c0 0f 85 d4  I.<$.....H.p(H...9....0.........
00023680  00 00 00 48 8b 45 08 49 8b 7c 24 08 ba 10 00 00 00 48 8b 70 30 48 8b 05 a4 39 02 00 e8 8b 30 fe  ...H.E.I.|$......H.p0H...9....0.
000236a0  ff 89 c3 85 c0 0f 85 ac 00 00 00 49 8b 7c 24 10 48 8b 05 41 39 02 00 be 01 00 00 00 e8 6b 30 fe  ...........I.|$.H..A9........k0.
000236c0  ff 89 c3 85 c0 0f 85 8c 00 00 00 48 8b 7d 28 48 8b 05 8a 39 02 00 4c 89 f2 4c 89 ee e8 4b 30 fe  ...........H.}(H...9..L..L...K0.
000236e0  ff 89 c3 85 c0 75 70 48 8b 7d 28 48 8b 74 24 10 48 8b 05 21 39 02 00 e8 30 30 fe ff ff c0 75 30  .....upH.}(H.t$.H..!9...00....u0
00023700  48 8b 7d 28 48 8b 4c 24 08 4c 89 fa 4c 89 e6 48 8b 05 fa 39 02 00 41 b8 01 00 00 00 e8 0b 30 fe  H.}(H.L$.L..L..H...9..A.......0.
00023720  ff 89 c3 85 c0 75 30 c7 45 00 01 00 00 00 eb 41 48 8b 7d 28 48 8b 74 24 10 31 d2 48 8b 05 5e 39  .....u0.E......AH.}(H.t$.1.H..^9
00023740  02 00 48 89 f9 e8 e2 2f fe ff 89 c3 85 c0 74 b0 eb 05 bb 0d 00 00 00 48 8b 4d 28 48 8b 55 20 45  ..H..../......t........H.M(H.U E
00023760  31 c0 31 c0 48 8b 75 18 48 8b 7d 10 e8 c8 ef ff ff 4c 89 e7 e8 ae 0e 00 00 48 8b 74 24 10 31 d2  1.1.H.u.H.}......L.......H.t$.1.
00023780  31 c0 48 8b 7c 24 08 e8 ad ef ff ff 4c 89 ef e8 cc 18 fe ff 48 8b 44 24 18 64 48 2b 04 25 28 00  1.H.|$......L.......H.D$.dH+.%(.
000237a0  00 00 74 05 e8 67 1a fe ff 48 83 c4 28 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 4b 2f fe ff        ..t..g...H..(..[]A\A]A^A_.K/..

000237be    void ecc_make_key(int64_t arg1, int32_t arg2, int32_t arg3, int64_t arg4) __noreturn

000237be  55                 push    rbp {__saved_rbp}
000237bf  31ed               xor     ebp, ebp  {0x0}
000237c1  53                 push    rbx {__saved_rbx}
000237c2  4889cb             mov     rbx, rcx
000237c5  4150               push    r8 {var_18}
000237c7  4c8d05f2190200     lea     r8, [rel ltc_ecc_sets]

000237ce  4863cd             movsxd  rcx, ebp
000237d1  486bc938           imul    rcx, rcx, 0x38
000237d5  4c01c1             add     rcx, r8
000237d8  8b01               mov     eax, dword [rcx]
000237da  39d0               cmp     eax, edx
000237dc  7d08               jge     0x237e6

000237de  85c0               test    eax, eax
000237e0  741a               je      0x237fc

000237e2  ffc5               inc     ebp
000237e4  ebe8               jmp     0x237ce

000237e6  85c0               test    eax, eax
000237e8  7412               je      0x237fc

000237ea  83f842             cmp     eax, 0x42
000237ed  7f0d               jg      0x237fc

000237ef  4889da             mov     rdx, rbx
000237f2  e8e9fcffff         call    ecc_make_key_ex
{ Does not return }

000237f7                                                                       89 6b 04 eb 05                                     .k...

000237fc  b803000000         mov     eax, 0x3
00023801  5a                 pop     rdx {var_18}
00023802  5b                 pop     rbx {__saved_rbx}
00023803  5d                 pop     rbp {__saved_rbp}
00023804  e9002ffeff         jmp     __x86_return_thunk
{ Does not return }


00023809    void ltc_ecc_is_valid_idx(int32_t arg1) __noreturn

00023809  31c0               xor     eax, eax  {0x0}
0002380b  488d0dae190200     lea     rcx, [rel ltc_ecc_sets]

00023812  4863d0             movsxd  rdx, eax
00023815  486bd238           imul    rdx, rdx, 0x38
00023819  833c1100           cmp     dword [rcx+rdx], 0x0
0002381d  7404               je      0x23823

0002381f  ffc0               inc     eax
00023821  ebef               jmp     0x23812

00023823  83ffff             cmp     edi, 0xffffffff
00023826  0f9dc2             setge   dl
00023829  39f8               cmp     eax, edi
0002382b  0f9fc0             setg    al
0002382e  0fb6c0             movzx   eax, al
00023831  21d0               and     eax, edx
00023833  e9d12efeff         jmp     __x86_return_thunk
{ Does not return }


00023838    void ltc_ecc_map(int64_t arg1, int64_t arg2, int64_t arg3) __noreturn

00023838  4155               push    r13 {var_8}
0002383a  4154               push    r12 {var_10}
0002383c  55                 push    rbp {var_18}
0002383d  53                 push    rbx {var_20}
0002383e  4883ec28           sub     rsp, 0x28
00023842  64488b0425280000…  mov     rax, qword [fs:0x28]
0002384b  4889442418         mov     qword [rsp+0x18 {var_30}], rax
00023850  31c0               xor     eax, eax  {0x0}
00023852  4885ff             test    rdi, rdi
00023855  7515               jne     0x2386c

00023857  ba24000000         mov     edx, 0x24
0002385c  488d359e3c0100     lea     rsi, [rel data_37501]  {"src/pk/ecc/ltc_ecc_map.c"}
00023863  488d3db03c0100     lea     rdi, [rel data_3751a]  {"P != NULL"}
0002386a  eb1b               jmp     0x23887

0002386c  4989f4             mov     r12, rsi
0002386f  4885f6             test    rsi, rsi
00023872  7518               jne     0x2388c

00023874  ba25000000         mov     edx, 0x25
00023879  488d35813c0100     lea     rsi, [rel data_37501]  {"src/pk/ecc/ltc_ecc_map.c"}
00023880  488d3d9d3c0100     lea     rdi, [rel data_37524]  {"modulus != NULL"}

00023887  e8f7f2ffff         call    crypt_argchk
{ Does not return }

0002388c  4989d5             mov     r13, rdx
0002388f  4885d2             test    rdx, rdx
00023892  7515               jne     0x238a9

00023894  ba26000000         mov     edx, 0x26
00023899  488d35613c0100     lea     rsi, [rel data_37501]  {"src/pk/ecc/ltc_ecc_map.c"}
000238a0  488d3dbf080100     lea     rdi, [rel data_34166]  {"mp != NULL"}
000238a7  ebde               jmp     0x23887

000238a9  4889fd             mov     rbp, rdi
000238ac  488d742410         lea     rsi, [rsp+0x10 {var_38}]
000238b1  488d7c2408         lea     rdi, [rsp+0x8 {var_40}]
000238b6  31d2               xor     edx, edx  {0x0}
000238b8  31c0               xor     eax, eax  {0x0}
000238ba  e853edffff         call    ltc_init_multi
{ Does not return }

000238bf                                                                                               89                                 .
000238c0  c3 85 c0 0f 85 69 01 00 00 48 8b 7d 10 48 8b 05 1c 38 02 00 4c 89 ea 4c 89 e6 e8 4d 2e fe ff 89  .....i...H.}.H...8..L..L...M....
000238e0  c3 85 c0 0f 85 36 01 00 00 48 8b 7d 10 48 8b 54 24 08 4c 89 e6 48 8b 05 dc 37 02 00 e8 2b 2e fe  .....6...H.}.H.T$.L..H...7...+..
00023900  ff 89 c3 85 c0 0f 85 14 01 00 00 48 8b 74 24 10 48 8b 7c 24 08 48 8b 05 7c 37 02 00 e8 0b 2e fe  ...........H.t$.H.|$.H..|7......
00023920  ff 89 c3 85 c0 0f 85 f4 00 00 00 48 8b 7c 24 10 48 8b 05 69 37 02 00 31 d2 4c 89 e6 48 89 f9 e8  ...........H.|$.H..i7..1.L..H...
00023940  e8 2d fe ff 89 c3 85 c0 0f 85 d1 00 00 00 48 8b 7c 24 08 48 8b 74 24 10 48 8b 05 29 37 02 00 48  .-............H.|$.H.t$.H..)7..H
00023960  89 fa e8 c5 2d fe ff 89 c3 85 c0 0f 85 ae 00 00 00 48 8b 7c 24 08 48 8b 05 23 37 02 00 31 d2 4c  ....-............H.|$.H..#7..1.L
00023980  89 e6 48 89 f9 e8 a2 2d fe ff 89 c3 85 c0 0f 85 8b 00 00 00 48 8b 7d 00 48 8b 74 24 10 48 8b 05  ..H....-............H.}.H.t$.H..
000239a0  e4 36 02 00 48 89 fa e8 80 2d fe ff 89 c3 85 c0 75 6d 48 8b 7d 00 48 8b 05 33 37 02 00 4c 89 ea  .6..H....-......umH.}.H..37..L..
000239c0  4c 89 e6 e8 64 2d fe ff 89 c3 85 c0 75 51 48 8b 7d 08 48 8b 74 24 08 48 8b 05 aa 36 02 00 48 89  L...d-......uQH.}.H.t$.H...6..H.
000239e0  fa e8 46 2d fe ff 89 c3 85 c0 75 33 48 8b 7d 08 48 8b 05 f9 36 02 00 4c 89 ea 4c 89 e6 e8 2a 2d  ..F-......u3H.}.H...6..L..L...*-
00023a00  fe ff 89 c3 85 c0 75 17 48 8b 7d 10 48 8b 05 e5 35 02 00 be 01 00 00 00 e8 0f 2d fe ff 89 c3 48  ......u.H.}.H...5.........-....H
00023a20  8b 74 24 10 48 8b 7c 24 08 31 d2 31 c0 e8 07 ed ff ff 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00  .t$.H.|$.1.1......H.D$.dH+.%(...
00023a40  74 05 e8 c9 17 fe ff 48 83 c4 28 89 d8 5b 5d 41 5c 41 5d e9 b1 2c fe ff                          t......H..(..[]A\A]..,..

00023a58    void ltc_ecc_mul2add(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) __noreturn

00023a58  4157               push    r15 {var_8}
00023a5a  4156               push    r14 {var_10}
00023a5c  4155               push    r13 {var_18}
00023a5e  4154               push    r12 {var_20}
00023a60  55                 push    rbp {var_28}
00023a61  53                 push    rbx {var_30}
00023a62  4881ecd8000000     sub     rsp, 0xd8
00023a69  4c894c2408         mov     qword [rsp+0x8 {var_100}], r9
00023a6e  64488b0425280000…  mov     rax, qword [fs:0x28]
00023a77  48898424c8000000   mov     qword [rsp+0xc8 {var_40}], rax
00023a7f  31c0               xor     eax, eax  {0x0}
00023a81  4885ff             test    rdi, rdi
00023a84  7515               jne     0x23a9b

00023a86  ba2f000000         mov     edx, 0x2f
00023a8b  488d35a23a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023a92  488d3dc33a0100     lea     rdi, [rel data_3755b[1]]  {"A != NULL"}
00023a99  eb1b               jmp     0x23ab6

00023a9b  4989d4             mov     r12, rdx
00023a9e  4885d2             test    rdx, rdx
00023aa1  7518               jne     0x23abb

00023aa3  ba30000000         mov     edx, 0x30
00023aa8  488d35853a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023aaf  488d3db13a0100     lea     rdi, [rel data_37566[1]]  {"B != NULL"}

00023ab6  e8c8f0ffff         call    crypt_argchk
{ Does not return }

00023abb  4c89c3             mov     rbx, r8
00023abe  4d85c0             test    r8, r8
00023ac1  7515               jne     0x23ad8

00023ac3  ba31000000         mov     edx, 0x31
00023ac8  488d35653a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023acf  488d3d7b3a0100     lea     rdi, [rel data_37551]  {"C != NULL"}
00023ad6  ebde               jmp     0x23ab6

00023ad8  4989f7             mov     r15, rsi
00023adb  4885f6             test    rsi, rsi
00023ade  7515               jne     0x23af5

00023ae0  ba32000000         mov     edx, 0x32
00023ae5  488d35483a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023aec  488d3d683a0100     lea     rdi, [rel data_3755b]  {"kA != NULL"}
00023af3  ebc1               jmp     0x23ab6

00023af5  4989ce             mov     r14, rcx
00023af8  4885c9             test    rcx, rcx
00023afb  7515               jne     0x23b12

00023afd  ba33000000         mov     edx, 0x33
00023b02  488d352b3a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023b09  488d3d563a0100     lea     rdi, [rel data_37566]  {"kB != NULL"}
00023b10  eba4               jmp     0x23ab6

00023b12  48837c240800       cmp     qword [rsp+0x8 {var_100}], 0x0
00023b18  7515               jne     0x23b2f

00023b1a  ba34000000         mov     edx, 0x34
00023b1f  488d350e3a0100     lea     rsi, [rel data_37534]  {"src/pk/ecc/ltc_ecc_mul2add.c"}
00023b26  488d3df7390100     lea     rdi, [rel data_37524]  {"modulus != NULL"}
00023b2d  eb87               jmp     0x23ab6

00023b2f  4989fd             mov     r13, rdi
00023b32  be00010000         mov     esi, 0x100
00023b37  bf01000000         mov     edi, 0x1
00023b3c  e8fb7afeff         call    m_calloc
{ Does not return }

00023b41     48 89 c5 48 85 c0 74 21 be 00 01 00 00 bf 01 00 00 00 e8 e4 7a fe ff 48 89 44 24 10 48 85 c0   H..H..t!............z..H.D$.H..
00023b60  75 12 48 89 ef e8 f6 14 fe ff b8 0d 00 00 00 e9 fa 04 00 00 4c 89 ff 48 8b 05 d2 34 02 00 e8 a9  u.H.................L..H...4....
00023b80  2b fe ff 4c 89 f7 48 89 44 24 18 48 8b 05 be 34 02 00 e8 95 2b fe ff 48 8b 4c 24 18 48 89 c2 81  +..L..H.D$.H...4....+..H.L$.H...
00023ba0  f9 00 01 00 00 0f 87 a4 04 00 00 3d 00 01 00 00 0f 87 99 04 00 00 39 ca 89 c8 4c 89 ff 48 89 54  ...........=..........9...L..H.T
00023bc0  24 18 0f 43 c2 4c 8d 7c 24 48 89 c6 89 44 24 2c 48 8b 05 81 34 02 00 29 ce 48 01 ee e8 4b 2b fe  $..C.L.|$H...D$,H...4..).H...K+.
00023be0  ff 8b 74 24 2c 48 8b 54 24 18 4c 89 f7 48 8b 44 24 10 45 31 f6 29 d6 48 01 c6 48 8b 05 57 34 02  ..t$,H.T$.L..H.D$.E1.).H..H..W4.
00023c00  00 e8 26 2b fe ff e8 d9 09 00 00 4b 89 04 f7 48 85 c0 75 1f 31 db 44 39 f3 73 0e 49 8b 3c df 48  ..&+.......K...H..u.1.D9.s.I.<.H
00023c20  ff c3 e8 00 0a 00 00 eb ed b8 0d 00 00 00 e9 21 04 00 00 49 ff c6 49 83 fe 10 75 ca 48 8b 7c 24  ...............!...I..I...u.H.|$
00023c40  08 48 8b 05 98 34 02 00 48 8d 74 24 38 e8 da 2a fe ff 85 c0 0f 85 d6 03 00 00 48 8b 05 6f 33 02  .H...4..H.t$8..*..........H..o3.
00023c60  00 48 8d 7c 24 40 e8 c1 2a fe ff 85 c0 0f 85 a4 03 00 00 48 8b 74 24 08 48 8b 7c 24 40 48 8b 05  .H.|$@..*..........H.t$.H.|$@H..
00023c80  64 34 02 00 e8 a3 2a fe ff 85 c0 0f 85 6d 03 00 00 4c 8b 74 24 50 48 8b 54 24 08 48 8b 74 24 40  d4....*......m...L.t$PH.T$.H.t$@
00023ca0  49 8b 7d 00 49 8b 0e 48 8b 05 1a 34 02 00 e8 79 2a fe ff 85 c0 0f 85 43 03 00 00 49 8b 4e 08 49  I.}.I..H...4...y*......C...I.N.I
00023cc0  8b 7d 08 48 8b 54 24 08 48 8b 74 24 40 48 8b 05 f4 33 02 00 e8 53 2a fe ff 85 c0 0f 85 1d 03 00  .}.H.T$.H.t$@H...3...S*.........
00023ce0  00 49 8b 4e 10 49 8b 7d 10 48 8b 54 24 08 48 8b 74 24 40 48 8b 05 ce 33 02 00 e8 2d 2a fe ff 85  .I.N.I.}.H.T$.H.t$@H...3...-*...
00023d00  c0 0f 85 f7 02 00 00 4c 8b 6c 24 68 48 8b 54 24 08 48 8b 74 24 40 49 8b 3c 24 49 8b 4d 00 48 8b  .......L.l$hH.T$.H.t$@I.<$I.M.H.
00023d20  05 a3 33 02 00 e8 02 2a fe ff 85 c0 0f 85 cc 02 00 00 49 8b 4d 08 49 8b 7c 24 08 48 8b 54 24 08  ..3....*..........I.M.I.|$.H.T$.
00023d40  48 8b 74 24 40 48 8b 05 7c 33 02 00 e8 db 29 fe ff 85 c0 0f 85 a5 02 00 00 49 8b 4d 10 49 8b 7c  H.t$@H..|3....)..........I.M.I.|
00023d60  24 10 48 8b 54 24 08 48 8b 74 24 40 48 8b 05 55 33 02 00 e8 b4 29 fe ff 85 c0 0f 85 7e 02 00 00  $.H.T$.H.t$@H..U3....)......~...
00023d80  4c 8b 64 24 58 48 8b 4c 24 38 4c 89 f7 48 8b 54 24 08 48 8b 05 87 33 02 00 4c 89 e6 e8 8b 29 fe  L.d$XH.L$8L..H.T$.H...3..L....).
00023da0  ff 85 c0 0f 85 55 02 00 00 4c 8b 44 24 38 48 8b 4c 24 08 4c 89 e6 4c 89 f7 48 8b 54 24 60 48 8b  .....U...L.D$8H.L$.L..L..H.T$`H.
00023dc0  05 53 33 02 00 e8 62 29 fe ff 85 c0 0f 85 2c 02 00 00 4c 8b a4 24 88 00 00 00 48 8b 4c 24 38 4c  .S3...b)......,...L..$....H.L$8L
00023de0  89 ef 48 8b 54 24 08 48 8b 05 32 33 02 00 4c 89 e6 e8 36 29 fe ff 85 c0 0f 85 00 02 00 00 4c 89  ..H.T$.H..23..L...6)..........L.
00023e00  e6 4c 8b 44 24 38 48 8b 4c 24 08 4c 89 ef 48 8b 94 24 a8 00 00 00 48 8b 05 fb 32 02 00 41 bc 01  .L.D$8H.L$.L..H..$....H...2..A..
00023e20  00 00 00 e8 04 29 fe ff 85 c0 0f 85 ce 01 00 00 45 8d 6c 24 04 4c 8d 74 24 48 45 8d 7c 24 10 44  .....)..........E.l$.L.t$HE.|$.D
00023e40  89 e8 49 8b 76 20 4a 8b 7c e4 48 48 8b 54 c4 48 4c 8b 44 24 38 48 8b 4c 24 08 48 8b 05 b7 32 02  ..I.v J.|.HH.T.HL.D$8H.L$.H...2.
00023e60  00 e8 c6 28 fe ff 85 c0 0f 85 90 01 00 00 41 83 c5 04 49 83 c6 20 45 39 fd 75 c4 49 ff c4 49 83  ...(..........A...I.. E9.u.I..I.
00023e80  fc 04 75 ac 31 d2 48 8b 44 24 10 44 0f b6 65 00 41 be 03 00 00 00 89 54 24 28 44 0f b6 28 b8 01  ..u.1.H.D$.D..e.A......T$(D..(..
00023ea0  00 00 00 41 ff c6 41 83 fe 04 75 29 8b 54 24 2c 39 54 24 28 0f 84 32 01 00 00 8b 54 24 28 48 8b  ...A..A...u).T$,9T$(..2....T$(H.
00023ec0  4c 24 10 45 31 f6 ff 44 24 28 44 0f b6 64 15 00 44 0f b6 2c 11 44 89 e1 41 c1 e4 02 c1 e9 06 45  L$.E1..D$(D..d..D..,.D..A......E
00023ee0  0f b6 e4 89 4c 24 18 44 89 e9 44 8b 7c 24 18 41 c1 e5 02 c1 e9 06 45 0f b6 ed 89 4c 24 24 41 09  ....L$.D..D.|$.A......E....L$$A.
00023f00  cf 75 07 83 f8 01 75 06 eb 99 85 c0 75 54 48 8b 4c 24 38 48 8b 54 24 08 48 89 de 48 89 df 48 8b  .u....u.....uTH.L$8H.T$.H..H..H.
00023f20  05 fb 31 02 00 e8 02 28 fe ff 85 c0 0f 85 cc 00 00 00 48 8b 4c 24 38 48 8b 54 24 08 48 89 de 48  ..1....(..........H.L$8H.T$.H..H
00023f40  89 df 48 8b 05 d7 31 02 00 e8 de 27 fe ff 85 c0 0f 85 a8 00 00 00 45 85 ff 75 5b 31 c0 e9 41 ff  ..H...1....'..........E..u[1..A.
00023f60  ff ff 8b 44 24 18 8b 54 24 24 48 8b 33 8d 04 90 4c 8b 7c c4 48 48 8b 05 74 30 02 00 49 8b 3f e8  ...D$..T$$H.3...L.|.HH..t0..I.?.
00023f80  a8 27 fe ff 85 c0 75 76 48 8b 73 08 49 8b 7f 08 48 8b 05 59 30 02 00 e8 90 27 fe ff 85 c0 75 5e  .'....uvH.s.I...H..Y0....'....u^
00023fa0  48 8b 73 10 49 8b 7f 10 48 8b 05 41 30 02 00 e8 78 27 fe ff eb 2c 8b 4c 24 24 8b 44 24 18 48 89  H.s.I...H..A0...x'...,.L$$.D$.H.
00023fc0  da 48 89 df 4c 8b 44 24 38 8d 04 88 48 8b 4c 24 08 48 8b 74 c4 48 48 8b 05 3b 31 02 00 e8 4a 27  .H..L.D$8...H.L$.H.t.HH..;1...J'
00023fe0  fe ff 85 c0 0f 84 71 ff ff ff eb 12 48 8b 54 24 38 48 8b 74 24 08 48 89 df e8 3a f8 ff ff 48 8b  ......q.....H.T$8H.t$.H...:...H.
00024000  7c 24 40 48 8b 15 d6 2f 02 00 89 44 24 08 e8 89 00 00 00 8b 44 24 08 48 8b 7c 24 38 48 8b 15 d5  |$@H.../...D$.......D$.H.|$8H...
00024020  30 02 00 89 44 24 08 e8 70 00 00 00 8b 44 24 08 31 db 48 8b 7c dc 48 48 ff c3 89 44 24 08 e8 e4  0...D$..p....D$.1.H.|.HH...D$...
00024040  05 00 00 48 83 fb 10 8b 44 24 08 75 e5 eb 05 b8 10 00 00 00 48 89 ef 89 44 24 08 e8 00 10 fe ff  ...H....D$.u........H...D$......
00024060  48 8b 7c 24 10 e8 f6 0f fe ff 8b 44 24 08 48 8b 94 24 c8 00 00 00 64 48 2b 14 25 28 00 00 00 74  H.|$.......D$.H..$....dH+.%(...t
00024080  05 e8 8a 11 fe ff 48 81 c4 d8 00 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 6d 26 fe ff              ......H......[]A\A]A^A_.m&..

0002409c    void __x86_indirect_thunk_rdx() __noreturn

0002409c  e807000000         call    sub_240a8

000240a1  f390               pause   
000240a3  0faee8             lfence  
000240a6  ebf9               jmp     0x240a1


000240a8    int64_t sub_240a8() __pure

000240a8  48891424           mov     qword [rsp {__return_addr}], rdx
000240ac  c3                 retn     {__return_addr}


000240ad    void ltc_ecc_mulmod(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

000240ad  4157               push    r15 {var_8}
000240af  4156               push    r14 {var_10}
000240b1  4155               push    r13 {var_18}
000240b3  4154               push    r12 {var_20}
000240b5  55                 push    rbp {var_28}
000240b6  53                 push    rbx {var_30}
000240b7  4883ec68           sub     rsp, 0x68
000240bb  48897c2418         mov     qword [rsp+0x18 {var_80}], rdi
000240c0  48890c24           mov     qword [rsp {var_98}], rcx
000240c4  448944242c         mov     dword [rsp+0x2c {var_6c}], r8d
000240c9  64488b0425280000…  mov     rax, qword [fs:0x28]
000240d2  4889442458         mov     qword [rsp+0x58 {var_40}], rax
000240d7  31c0               xor     eax, eax  {0x0}
000240d9  4885ff             test    rdi, rdi
000240dc  7515               jne     0x240f3

000240de  ba2b000000         mov     edx, 0x2b
000240e3  488d3587340100     lea     rsi, [rel data_37571]  {"src/pk/ecc/ltc_ecc_mulmod_timing…"}
000240ea  488d3da3340100     lea     rdi, [rel data_37594]  {"k != NULL"}
000240f1  eb1b               jmp     0x2410e

000240f3  4989f5             mov     r13, rsi
000240f6  4885f6             test    rsi, rsi
000240f9  7518               jne     0x24113

000240fb  ba2c000000         mov     edx, 0x2c
00024100  488d356a340100     lea     rsi, [rel data_37571]  {"src/pk/ecc/ltc_ecc_mulmod_timing…"}
00024107  488d3d90340100     lea     rdi, [rel data_3759e]  {"G != NULL"}

0002410e  e870eaffff         call    crypt_argchk
{ Does not return }

00024113  4989d4             mov     r12, rdx
00024116  488d3554340100     lea     rsi, [rel data_37571]  {"src/pk/ecc/ltc_ecc_mulmod_timing…"}
0002411d  ba2d000000         mov     edx, 0x2d
00024122  488d3d7f340100     lea     rdi, [rel data_375a8]  {"R != NULL"}
00024129  4d85e4             test    r12, r12
0002412c  74e0               je      0x2410e

0002412e  48833c2400         cmp     qword [rsp {var_98}], 0x0
00024133  ba2e000000         mov     edx, 0x2e
00024138  488d3532340100     lea     rsi, [rel data_37571]  {"src/pk/ecc/ltc_ecc_mulmod_timing…"}
0002413f  488d3dde330100     lea     rdi, [rel data_37524]  {"modulus != NULL"}
00024146  74c6               je      0x2410e

00024148  488b3c24           mov     rdi, qword [rsp {var_98}]
0002414c  488b058d2f0200     mov     rax, qword [rel data_470e0]
00024153  488d742438         lea     rsi, [rsp+0x38 {var_60}]
00024158  e8cf25feff         call    __x86_indirect_thunk_rax
{ Does not return }

0002415d                                                                                         41 89 c7                               A..
00024160  85 c0 0f 85 51 04 00 00 48 8b 05 61 2e 02 00 48 8d 7c 24 30 e8 b3 25 fe ff 41 89 c7 85 c0 75 34  ....Q...H..a...H.|$0..%..A....u4
00024180  48 8b 34 24 48 8b 7c 24 30 31 db 4c 8d 74 24 40 48 8b 05 51 2f 02 00 e8 90 25 fe ff 41 89 c7 85  H.4$H.|$01.L.t$@H..Q/....%..A...
000241a0  c0 74 30 48 8b 7c 24 30 48 8b 05 31 2e 02 00 e8 78 25 fe ff 48 8b 7c 24 38 48 8b 05 38 2f 02 00  .t0H.|$0H..1....x%..H.|$8H..8/..
000241c0  e8 67 25 fe ff e9 ef 03 00 00 48 ff c3 48 83 fb 03 74 4f e8 0c 04 00 00 49 89 04 de 48 85 c0 75  .g%.......H..H...tO.....I...H..u
000241e0  e9 31 ed 39 eb 7e 0e 49 8b 3c ee 48 ff c5 e8 34 04 00 00 eb ee 48 8b 7c 24 30 48 8b 05 df 2d 02  .1.9.~.I.<.H...4.....H.|$0H...-.
00024200  00 41 bf 0d 00 00 00 e8 20 25 fe ff 48 8b 7c 24 38 48 8b 05 e0 2e 02 00 e8 0f 25 fe ff e9 97 03  .A...... %..H.|$8H........%.....
00024220  00 00 e8 bd 03 00 00 41 bf 0d 00 00 00 48 8b 6c 24 40 48 89 c3 48 8b 44 24 48 48 89 44 24 08 48  .......A.....H.l$@H..H.D$HH.D$.H
00024240  85 db 0f 84 26 03 00 00 48 8b 0b 48 8b 14 24 48 8b 74 24 30 49 8b 7d 00 48 8b 05 69 2e 02 00 e8  ....&...H..H..$H.t$0I.}.H..i....
00024260  c8 24 fe ff 41 89 c7 85 c0 0f 85 ff 02 00 00 48 8b 4b 08 49 8b 7d 08 48 8b 14 24 48 8b 74 24 30  .$..A..........H.K.I.}.H..$H.t$0
00024280  48 8b 05 41 2e 02 00 e8 a0 24 fe ff 41 89 c7 85 c0 0f 85 d7 02 00 00 48 8b 4b 10 49 8b 7d 10 48  H..A.....$..A..........H.K.I.}.H
000242a0  8b 14 24 48 8b 74 24 30 48 8b 05 19 2e 02 00 e8 78 24 fe ff 41 89 c7 85 c0 0f 85 af 02 00 00 48  ..$H.t$0H.......x$..A..........H
000242c0  8b 7c 24 30 48 8b 05 15 2d 02 00 e8 5c 24 fe ff 31 d2 48 8b 75 00 48 8b 3b 48 89 54 24 30 48 8b  .|$0H...-...\$..1.H.u.H.;H.T$0H.
000242e0  05 0b 2d 02 00 e8 42 24 fe ff 41 89 c7 85 c0 0f 85 79 02 00 00 48 8b 75 08 48 8b 7b 08 48 8b 05  ..-...B$..A......y...H.u.H.{.H..
00024300  ec 2c 02 00 e8 23 24 fe ff 41 89 c7 85 c0 0f 85 5a 02 00 00 48 8b 75 10 48 8b 7b 10 48 8b 05 cd  .,...#$..A......Z...H.u.H.{.H...
00024320  2c 02 00 e8 04 24 fe ff 41 89 c7 85 c0 0f 85 3b 02 00 00 48 8b 4c 24 38 48 8b 14 24 48 89 df 48  ,....$..A......;...H.L$8H..$H..H
00024340  8b 74 24 08 48 8b 05 d5 2d 02 00 e8 dc 23 fe ff 41 89 c7 85 c0 0f 85 13 02 00 00 48 8b 7c 24 18  .t$.H...-....#..A..........H.|$.
00024360  48 8b 05 a9 2c 02 00 41 be 01 00 00 00 45 31 ed e8 b7 23 fe ff ff c8 89 44 24 20 31 c0 89 44 24  H...,..A.....E1...#.....D$ 1..D$
00024380  24 41 ff ce 75 2e 83 7c 24 20 ff 0f 84 6f 01 00 00 8b 74 24 20 48 8b 7c 24 18 48 8b 05 67 2c 02  $A..u..|$ ...o....t$ H.|$.H..g,.
000243a0  00 e8 86 23 fe ff ff 4c 24 20 44 8b 35 17 2c 02 00 49 89 c5 8b 05 0e 2c 02 00 4d 89 e9 4c 8b 44  ...#...L$ D.5.,..I.....,..M..L.D
000243c0  24 38 4c 8b 15 4f 2d 02 00 8d 48 ff 49 d3 e9 48 8b 4c 24 50 44 89 c8 48 89 4c 24 10 83 e0 01 44  $8L..O-...H.I..H.L$PD..H.L$....D
000243e0  89 f9 09 c1 75 58 48 8b 0c 24 48 8b 54 24 10 48 89 ef 48 8b 74 24 08 e8 3d aa fe ff 41 89 c7 85  ....uXH..$H.T$.H..H.t$..=...A...
00024400  c0 0f 85 67 01 00 00 48 8b 4c 24 38 48 8b 14 24 48 8b 74 24 10 48 8b 7c 24 08 48 8b 05 ff 2c 02  ...g...H.L$8H..$H.t$.H.|$.H...,.
00024420  00 e8 06 23 fe ff 41 89 c7 85 c0 0f 85 3d 01 00 00 44 89 7c 24 24 4d 01 ed e9 43 ff ff ff 44 89  ...#..A......=...D.|$$M...C...D.
00024440  fa 83 f2 01 21 c2 89 54 24 28 74 52 48 8b 0c 24 48 8b 54 24 10 48 89 ef 48 8b 74 24 08 e8 d7 a9  ....!..T$(tRH..$H.T$.H..H.t$....
00024460  fe ff 41 89 c7 85 c0 0f 85 01 01 00 00 48 8b 4c 24 38 48 8b 14 24 48 8b 74 24 10 48 8b 7c 24 08  ..A..........H.L$8H..$H.t$.H.|$.
00024480  48 8b 05 99 2c 02 00 e8 a0 22 fe ff 41 89 c7 85 c0 0f 85 d7 00 00 00 44 8b 7c 24 28 eb 93 83 f0  H...,...."..A..........D.|$(....
000244a0  01 4c 89 4c 24 10 48 8b 0c 24 48 89 ef 48 98 48 8b 74 24 08 48 8b 54 c4 40 e8 7b a9 fe ff 41 89  .L.L$.H..$H..H.H.t$.H.T.@.{...A.
000244c0  c7 85 c0 0f 85 a5 00 00 00 4c 8b 4c 24 10 48 8b 4c 24 38 48 8b 14 24 48 8b 05 42 2c 02 00 41 83  .........L.L$.H.L$8H..$H..B,..A.
000244e0  e1 01 4a 8b 7c cc 40 48 89 fe e8 3d 22 fe ff 41 89 c7 85 c0 75 78 44 8b 7c 24 24 e9 31 ff ff ff  ..J.|.@H...="..A....uxD.|$$.1...
00024500  49 8b 34 24 48 8b 7d 00 48 8b 05 e1 2a 02 00 e8 18 22 fe ff 41 89 c7 85 c0 75 53 49 8b 74 24 08  I.4$H.}.H...*...."..A....uSI.t$.
00024520  48 8b 7d 08 48 8b 05 c5 2a 02 00 e8 fc 21 fe ff 41 89 c7 85 c0 75 37 49 8b 74 24 10 48 8b 7d 10  H.}.H...*....!..A....u7I.t$.H.}.
00024540  48 8b 05 a9 2a 02 00 e8 e0 21 fe ff 41 89 c7 85 c0 75 1b 83 7c 24 2c 00 74 14 48 8b 54 24 38 48  H...*....!..A....u..|$,.t.H.T$8H
00024560  8b 34 24 4c 89 e7 e8 cd f2 ff ff 41 89 c7 48 8b 7c 24 30 48 85 ff 74 0c 48 8b 05 61 2a 02 00 e8  .4$L.......A..H.|$0H..t.H..a*...
00024580  a8 21 fe ff 48 8b 05 6d 2b 02 00 48 8b 7c 24 38 e8 97 21 fe ff 48 89 df e8 8a 00 00 00 48 89 ef  .!..H..m+..H.|$8..!..H.......H..
000245a0  e8 82 00 00 00 48 8b 7c 24 08 e8 78 00 00 00 48 8b 7c 24 50 e8 6e 00 00 00 48 8b 44 24 58 64 48  .....H.|$..x...H.|$P.n...H.D$XdH
000245c0  2b 04 25 28 00 00 00 74 05 e8 42 0c fe ff 48 83 c4 68 44 89 f8 5b 5d 41 5c 41 5d 41 5e 41 5f e9  +.%(...t..B...H..hD..[]A\A]A^A_.
000245e0  25 21 fe ff                                                                                      %!..

000245e4    void ltc_ecc_new_point() __noreturn

000245e4  53                 push    rbx {var_8}
000245e5  be18000000         mov     esi, 0x18
000245ea  bf01000000         mov     edi, 0x1
000245ef  e84870feff         call    m_calloc
{ Does not return }

000245f4                                                              48 85 c0 74 23 48 89 c3 48 8d 50 10                      H..t#H..H.P.
00024600  48 8d 70 08 31 c9 48 89 c7 31 c0 e8 02 e0 ff ff 85 c0 74 0a 48 89 df e8 44 0a fe ff 31 db 48 89  H.p.1.H..1........t.H...D...1.H.
00024620  d8 5b e9 e2 20 fe ff                                                                             .[.. ..

00024627    void ltc_ecc_del_point(int64_t* arg1) __noreturn

00024627  4885ff             test    rdi, rdi
0002462a  7421               je      0x2464d

0002462c  53                 push    rbx {var_8}
0002462d  4889fb             mov     rbx, rdi
00024630  488b5710           mov     rdx, qword [rdi+0x10]
00024634  31c9               xor     ecx, ecx  {0x0}
00024636  488b7708           mov     rsi, qword [rdi+0x8]
0002463a  488b3f             mov     rdi, qword [rdi]
0002463d  31c0               xor     eax, eax  {0x0}
0002463f  e8f5e0ffff         call    ltc_deinit_multi
{ Does not return }

00024644              48 89 df 5b e9 13 0a fe ff                                                               H..[.....

0002464d  e9b720feff         jmp     __x86_return_thunk
{ Does not return }


00024652    void ltc_ecc_projective_add_point(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) __noreturn

00024652  4157               push    r15 {var_8}
00024654  4156               push    r14 {var_10}
00024656  4155               push    r13 {var_18}
00024658  4154               push    r12 {var_20}
0002465a  55                 push    rbp {var_28}
0002465b  53                 push    rbx {var_30}
0002465c  4883ec38           sub     rsp, 0x38
00024660  64488b0425280000…  mov     rax, qword [fs:0x28]
00024669  4889442428         mov     qword [rsp+0x28 {var_40}], rax
0002466e  31c0               xor     eax, eax  {0x0}
00024670  4885ff             test    rdi, rdi
00024673  7515               jne     0x2468a

00024675  ba26000000         mov     edx, 0x26
0002467a  488d35312f0100     lea     rsi, [rel data_375b2]  {"src/pk/ecc/ltc_ecc_projective_ad…"}
00024681  488d3d922e0100     lea     rdi, [rel data_3751a]  {"P != NULL"}
00024688  eb1b               jmp     0x246a5

0002468a  4989f6             mov     r14, rsi
0002468d  4885f6             test    rsi, rsi
00024690  7518               jne     0x246aa

00024692  ba27000000         mov     edx, 0x27
00024697  488d35142f0100     lea     rsi, [rel data_375b2]  {"src/pk/ecc/ltc_ecc_projective_ad…"}
0002469e  488d3d372f0100     lea     rdi, [rel data_375dc]  {"Q != NULL"}

000246a5  e8d9e4ffff         call    crypt_argchk
{ Does not return }

000246aa  4889d5             mov     rbp, rdx
000246ad  4885d2             test    rdx, rdx
000246b0  7515               jne     0x246c7

000246b2  ba28000000         mov     edx, 0x28
000246b7  488d35f42e0100     lea     rsi, [rel data_375b2]  {"src/pk/ecc/ltc_ecc_projective_ad…"}
000246be  488d3de32e0100     lea     rdi, [rel data_375a8]  {"R != NULL"}
000246c5  ebde               jmp     0x246a5

000246c7  4989cc             mov     r12, rcx
000246ca  4885c9             test    rcx, rcx
000246cd  7515               jne     0x246e4

000246cf  ba29000000         mov     edx, 0x29
000246d4  488d35d72e0100     lea     rsi, [rel data_375b2]  {"src/pk/ecc/ltc_ecc_projective_ad…"}
000246db  488d3d422e0100     lea     rdi, [rel data_37524]  {"modulus != NULL"}
000246e2  ebc1               jmp     0x246a5

000246e4  4d89c5             mov     r13, r8
000246e7  4d85c0             test    r8, r8
000246ea  7515               jne     0x24701

000246ec  ba2a000000         mov     edx, 0x2a
000246f1  488d35ba2e0100     lea     rsi, [rel data_375b2]  {"src/pk/ecc/ltc_ecc_projective_ad…"}
000246f8  488d3d67fa0000     lea     rdi, [rel data_34166]  {"mp != NULL"}
000246ff  eba4               jmp     0x246a5

00024701  4989ff             mov     r15, rdi
00024704  488d4c2418         lea     rcx, [rsp+0x18 {var_50}]
00024709  488d542410         lea     rdx, [rsp+0x10 {var_58}]
0002470e  4889e7             mov     rdi, rsp {var_68}
00024711  488d742408         lea     rsi, [rsp+0x8 {var_60}]
00024716  4531c9             xor     r9d, r9d  {0x0}
00024719  4c8d442420         lea     r8, [rsp+0x20 {var_48}]
0002471e  31c0               xor     eax, eax  {0x0}
00024720  e8eddeffff         call    ltc_init_multi
{ Does not return }

00024725                 89 c3 85 c0 0f 85 c3 09 00 00 49 8b 76 08 48 8b 14 24 4c 89 e7 48 8b 05 37 29 02       ..........I.v.H..$L..H..7).
00024740  00 e8 e6 1f fe ff 89 c3 85 c0 0f 85 80 09 00 00 49 8b 36 49 8b 3f 48 8b 05 bb 28 02 00 e8 ca 1f  ................I.6I.?H...(.....
00024760  fe ff 85 c0 0f 85 87 00 00 00 49 8b 76 10 48 85 f6 74 7e 49 8b 7f 10 48 8b 05 9a 28 02 00 e8 a9  ..........I.v.H..t~I...H...(....
00024780  1f fe ff 85 c0 75 6a 49 8b 76 08 49 8b 7f 08 48 8b 05 82 28 02 00 e8 91 1f fe ff 85 c0 75 3a 4c  .....ujI.v.I...H...(.........u:L
000247a0  8b 44 24 20 48 8b 4c 24 18 45 31 c9 31 c0 48 8b 54 24 10 48 8b 74 24 08 48 8b 3c 24 e8 78 df ff  .D$ H.L$.E1.1.H.T$.H.t$.H.<$.x..
000247c0  ff 4c 89 e9 4c 89 e2 48 89 ee 4c 89 ff e8 4a 09 00 00 89 c3 e9 19 09 00 00 49 8b 7f 08 48 8b 34  .L..L..H..L...J..........I...H.4
000247e0  24 48 8b 05 30 28 02 00 e8 3f 1f fe ff 85 c0 74 ae 48 8b 74 24 10 49 8b 3f 48 8b 05 f0 27 02 00  $H..0(...?.....t.H.t$.I.?H...'..
00024800  e8 27 1f fe ff 89 c3 85 c0 0f 85 c1 08 00 00 49 8b 7f 08 48 8b 74 24 18 48 8b 05 d1 27 02 00 e8  .'.............I...H.t$.H...'...
00024820  08 1f fe ff 89 c3 85 c0 0f 85 a2 08 00 00 49 8b 7f 10 48 8b 74 24 20 48 8b 05 b2 27 02 00 e8 e9  ..............I...H.t$ H...'....
00024840  1e fe ff 89 c3 85 c0 0f 85 83 08 00 00 49 8b 7e 10 48 85 ff 75 24 48 8b 34 24 48 8b 7c 24 20 48  .............I.~.H..u$H.4$H.|$ H
00024860  8b 05 32 28 02 00 e8 c1 1e fe ff 89 c3 85 c0 0f 84 0b 01 00 00 e9 56 08 00 00 48 8b 34 24 48 8b  ..2(..................V...H.4$H.
00024880  05 13 28 02 00 e8 a2 1e fe ff 89 c3 85 c0 0f 85 3c 08 00 00 48 8b 3c 24 48 8b 05 51 28 02 00 4c  ..(.............<...H.<$H..Q(..L
000248a0  89 ea 4c 89 e6 e8 82 1e fe ff 89 c3 85 c0 0f 85 1c 08 00 00 48 8b 74 24 10 48 8b 3c 24 48 8b 05  ..L.................H.t$.H.<$H..
000248c0  c4 27 02 00 48 89 f2 e8 60 1e fe ff 89 c3 85 c0 0f 85 fa 07 00 00 48 8b 7c 24 10 48 8b 05 0e 28  .'..H...`.............H.|$.H...(
000248e0  02 00 4c 89 ea 4c 89 e6 e8 3f 1e fe ff 89 c3 85 c0 0f 85 d9 07 00 00 48 8b 34 24 49 8b 7e 10 48  ..L..L...?.............H.4$I.~.H
00024900  8b 05 82 27 02 00 48 89 f2 e8 1e 1e fe ff 89 c3 85 c0 0f 85 b8 07 00 00 48 8b 3c 24 48 8b 05 cd  ...'..H.................H.<$H...
00024920  27 02 00 4c 89 ea 4c 89 e6 e8 fe 1d fe ff 89 c3 85 c0 0f 85 98 07 00 00 48 8b 74 24 18 48 8b 3c  '..L..L.................H.t$.H.<
00024940  24 48 8b 05 40 27 02 00 48 89 f2 e8 dc 1d fe ff 89 c3 85 c0 0f 85 76 07 00 00 48 8b 7c 24 18 48  $H..@'..H.............v...H.|$.H
00024960  8b 05 8a 27 02 00 4c 89 ea 4c 89 e6 e8 bb 1d fe ff 89 c3 85 c0 0f 84 db fe ff ff e9 50 07 00 00  ...'..L..L..................P...
00024980  48 8b 3c 24 48 8b 05 65 27 02 00 4c 89 ea 4c 89 e6 e8 96 1d fe ff 89 c3 85 c0 0f 85 30 07 00 00  H.<$H..e'..L..L.............0...
000249a0  48 8b 54 24 08 48 8b 34 24 49 8b 3e 48 8b 05 d5 26 02 00 e8 74 1d fe ff 89 c3 85 c0 0f 85 0e 07  H.T$.H.4$I.>H...&...t...........
000249c0  00 00 48 8b 7c 24 08 48 8b 05 22 27 02 00 4c 89 ea 4c 89 e6 e8 53 1d fe ff 89 c3 85 c0 0f 85 ed  ..H.|$.H.."'..L..L...S..........
000249e0  06 00 00 48 8b 34 24 48 8b 7c 24 20 48 8b 05 95 26 02 00 48 89 f2 e8 31 1d fe ff 89 c3 85 c0 0f  ...H.4$H.|$ H...&..H...1........
00024a00  85 cb 06 00 00 48 8b 3c 24 48 8b 05 e0 26 02 00 4c 89 ea 4c 89 e6 e8 11 1d fe ff 89 c3 85 c0 0f  .....H.<$H...&..L..L............
00024a20  85 ab 06 00 00 48 8b 34 24 49 8b 7e 08 48 8b 05 54 26 02 00 48 89 f2 e8 f0 1c fe ff 89 c3 85 c0  .....H.4$I.~.H..T&..H...........
00024a40  0f 85 8a 06 00 00 48 8b 3c 24 48 8b 05 9f 26 02 00 4c 89 ea 4c 89 e6 e8 d0 1c fe ff 89 c3 85 c0  ......H.<$H...&..L..L...........
00024a60  0f 85 6a 06 00 00 48 8b 7c 24 18 48 8b 34 24 48 8b 05 02 26 02 00 48 89 fa e8 ae 1c fe ff 89 c3  ..j...H.|$.H.4$H...&..H.........
00024a80  85 c0 0f 85 48 06 00 00 31 f6 48 8b 7c 24 18 48 8b 05 8a 25 02 00 e8 91 1c fe ff ff c0 74 21 48  ....H...1.H.|$.H...%.........t!H
00024aa0  8b 3c 24 48 8b 05 be 25 02 00 48 89 fa 48 89 fe e8 77 1c fe ff 89 c3 85 c0 74 27 e9 10 06 00 00  .<$H...%..H..H...w.......t'.....
00024ac0  48 8b 7c 24 18 48 8b 05 9c 25 02 00 4c 89 e6 48 89 fa e8 55 1c fe ff 89 c3 85 c0 74 c2 e9 ee 05  H.|$.H...%..L..H...U.......t....
00024ae0  00 00 48 8b 3c 24 48 8b 05 2b 25 02 00 4c 89 e6 e8 37 1c fe ff ff c0 75 23 48 8b 3c 24 48 8b 74  ..H.<$H..+%..L...7.....u#H.<$H.t
00024b00  24 18 48 8b 05 5f 25 02 00 48 89 fa e8 1b 1c fe ff 89 c3 85 c0 74 26 e9 b4 05 00 00 48 8b 3c 24  $.H.._%..H...........t&.....H.<$
00024b20  48 8b 05 51 25 02 00 4c 89 e6 48 89 fa e8 fa 1b fe ff 89 c3 85 c0 74 c1 e9 93 05 00 00 48 8b 3c  H..Q%..L..H...........t......H.<
00024b40  24 48 8b 05 d0 24 02 00 4c 89 e6 e8 dc 1b fe ff ff c0 75 24 48 8b 7c 24 10 48 8b 74 24 08 48 8b  $H...$..L.........u$H.|$.H.t$.H.
00024b60  05 13 25 02 00 48 89 fa e8 bf 1b fe ff 89 c3 85 c0 74 26 e9 58 05 00 00 48 8b 3c 24 48 8b 05 f5  ..%..H...........t&.X...H.<$H...
00024b80  24 02 00 4c 89 e6 48 89 fa e8 9e 1b fe ff 89 c3 85 c0 74 c0 e9 37 05 00 00 31 f6 48 8b 7c 24 10  $..L..H...........t..7...1.H.|$.
00024ba0  48 8b 05 79 24 02 00 e8 80 1b fe ff ff c0 74 22 48 8b 7c 24 08 48 8b 05 ac 24 02 00 48 89 fa 48  H..y$.........t"H.|$.H...$..H..H
00024bc0  89 fe e8 65 1b fe ff 89 c3 85 c0 74 27 e9 fe 04 00 00 48 8b 7c 24 10 48 8b 05 8a 24 02 00 4c 89  ...e.......t'.....H.|$.H...$..L.
00024be0  e6 48 89 fa e8 43 1b fe ff 89 c3 85 c0 74 c1 e9 dc 04 00 00 48 8b 7c 24 08 48 8b 05 18 24 02 00  .H...C.......t......H.|$.H...$..
00024c00  4c 89 e6 e8 24 1b fe ff ff c0 75 24 48 8b 7c 24 08 48 8b 74 24 10 48 8b 05 4b 24 02 00 48 89 fa  L...$.....u$H.|$.H.t$.H..K$..H..
00024c20  e8 07 1b fe ff 89 c3 85 c0 74 27 e9 a0 04 00 00 48 8b 7c 24 08 48 8b 05 3c 24 02 00 4c 89 e6 48  .........t'.....H.|$.H..<$..L..H
00024c40  89 fa e8 e5 1a fe ff 89 c3 85 c0 74 bf e9 7e 04 00 00 48 8b 7c 24 08 48 8b 05 ba 23 02 00 4c 89  ...........t..~...H.|$.H...#..L.
00024c60  e6 e8 c6 1a fe ff ff c0 75 0b 49 8b 76 10 48 85 f6 75 24 eb 61 48 8b 7c 24 08 48 8b 05 f7 23 02  ........u.I.v.H..u$.aH.|$.H...#.
00024c80  00 4c 89 e6 48 89 fa e8 a0 1a fe ff 89 c3 85 c0 74 d8 e9 39 04 00 00 48 8b 7c 24 20 48 8b 05 e5  .L..H...........t..9...H.|$ H...
00024ca0  23 02 00 48 89 fa e8 81 1a fe ff 89 c3 85 c0 0f 85 1b 04 00 00 48 8b 7c 24 20 48 8b 05 2f 24 02  #..H.................H.|$ H../$.
00024cc0  00 4c 89 ea 4c 89 e6 e8 60 1a fe ff 89 c3 85 c0 0f 85 fa 03 00 00 48 8b 7c 24 20 48 8b 74 24 10  .L..L...`.............H.|$ H.t$.
00024ce0  48 8b 05 a1 23 02 00 48 89 fa e8 3d 1a fe ff 89 c3 85 c0 0f 85 d7 03 00 00 48 8b 7c 24 20 48 8b  H...#..H...=.............H.|$ H.
00024d00  05 eb 23 02 00 4c 89 ea 4c 89 e6 e8 1c 1a fe ff 89 c3 85 c0 0f 85 b6 03 00 00 48 8b 3c 24 48 8b  ..#..L..L.................H.<$H.
00024d20  74 24 10 48 8b 05 5e 23 02 00 48 89 fa e8 fa 19 fe ff 89 c3 85 c0 0f 85 94 03 00 00 48 8b 3c 24  t$.H..^#..H.................H.<$
00024d40  48 8b 05 a9 23 02 00 4c 89 ea 4c 89 e6 e8 da 19 fe ff 89 c3 85 c0 0f 85 74 03 00 00 48 8b 7c 24  H...#..L..L.............t...H.|$
00024d60  10 48 8b 05 30 23 02 00 48 89 fe e8 bc 19 fe ff 89 c3 85 c0 0f 85 56 03 00 00 48 8b 7c 24 10 48  .H..0#..H.............V...H.|$.H
00024d80  8b 05 6a 23 02 00 4c 89 ea 4c 89 e6 e8 9b 19 fe ff 89 c3 85 c0 0f 85 35 03 00 00 48 8b 7c 24 08  ..j#..L..L.............5...H.|$.
00024da0  48 8b 74 24 10 48 8b 05 dc 22 02 00 48 89 fa e8 78 19 fe ff 89 c3 85 c0 0f 85 12 03 00 00 48 8b  H.t$.H..."..H...x.............H.
00024dc0  7c 24 08 48 8b 05 26 23 02 00 4c 89 ea 4c 89 e6 e8 57 19 fe ff 89 c3 85 c0 0f 85 f1 02 00 00 48  |$.H..&#..L..L...W.............H
00024de0  8b 3c 24 48 8b 74 24 10 48 8b 05 99 22 02 00 48 89 fa e8 35 19 fe ff 89 c3 85 c0 0f 85 cf 02 00  .<$H.t$.H..."..H...5............
00024e00  00 48 8b 3c 24 48 8b 05 e4 22 02 00 4c 89 ea 4c 89 e6 e8 15 19 fe ff 89 c3 85 c0 0f 85 af 02 00  .H.<$H..."..L..L................
00024e20  00 48 8b 74 24 10 48 8b 7c 24 18 48 8b 05 66 22 02 00 e8 f5 18 fe ff 89 c3 85 c0 0f 85 8f 02 00  .H.t$.H.|$.H..f"................
00024e40  00 48 8b 7c 24 10 48 8b 05 a3 22 02 00 4c 89 ea 4c 89 e6 e8 d4 18 fe ff 89 c3 85 c0 0f 85 6e 02  .H.|$.H..."..L..L.............n.
00024e60  00 00 48 8b 7c 24 10 48 8b 74 24 08 48 8b 05 05 22 02 00 48 89 fa e8 b1 18 fe ff 89 c3 85 c0 0f  ..H.|$.H.t$.H..."..H............
00024e80  85 4b 02 00 00 31 f6 48 8b 7c 24 10 48 8b 05 8d 21 02 00 e8 94 18 fe ff ff c0 74 24 48 8b 7c 24  .K...1.H.|$.H...!.........t$H.|$
00024ea0  08 48 8b 74 24 10 48 8b 05 cb 21 02 00 48 89 fa e8 77 18 fe ff 89 c3 85 c0 74 27 e9 10 02 00 00  .H.t$.H...!..H...w.......t'.....
00024ec0  48 8b 7c 24 10 48 8b 05 9c 21 02 00 4c 89 e6 48 89 fa e8 55 18 fe ff 89 c3 85 c0 74 bf e9 ee 01  H.|$.H...!..L..H...U.......t....
00024ee0  00 00 31 f6 48 8b 7c 24 08 48 8b 05 30 21 02 00 e8 37 18 fe ff ff c0 74 24 48 8b 7c 24 08 48 8b  ..1.H.|$.H..0!...7.....t$H.|$.H.
00024f00  74 24 10 48 8b 05 6e 21 02 00 48 89 fa e8 1a 18 fe ff 89 c3 85 c0 74 27 e9 b3 01 00 00 48 8b 7c  t$.H..n!..H...........t'.....H.|
00024f20  24 08 48 8b 05 3f 21 02 00 4c 89 e6 48 89 fa e8 f8 17 fe ff 89 c3 85 c0 74 bf e9 91 01 00 00 31  $.H..?!..L..H...........t......1
00024f40  f6 48 8b 7c 24 08 48 8b 05 d3 20 02 00 e8 da 17 fe ff ff c0 74 24 48 8b 7c 24 08 48 8b 74 24 18  .H.|$.H... .........t$H.|$.H.t$.
00024f60  48 8b 05 21 21 02 00 48 89 fa e8 bd 17 fe ff 89 c3 85 c0 74 27 e9 56 01 00 00 48 8b 7c 24 08 48  H..!!..H...........t'.V...H.|$.H
00024f80  8b 05 e2 20 02 00 4c 89 e6 48 89 fa e8 9b 17 fe ff 89 c3 85 c0 74 bf e9 34 01 00 00 48 8b 7c 24  ... ..L..H...........t..4...H.|$
00024fa0  08 48 8b 05 48 21 02 00 4c 89 ea 4c 89 e6 e8 79 17 fe ff 89 c3 85 c0 0f 85 13 01 00 00 48 8b 54  .H..H!..L..L...y.............H.T
00024fc0  24 18 48 8b 34 24 48 8b 7c 24 08 48 8b 05 a6 20 02 00 e8 55 17 fe ff 89 c3 85 c0 0f 85 ef 00 00  $.H.4$H.|$.H... ...U............
00024fe0  00 31 f6 48 8b 7c 24 18 48 8b 05 31 20 02 00 e8 38 17 fe ff ff c0 74 17 48 8b 7c 24 18 48 8b 05  .1.H.|$.H..1 ...8.....t.H.|$.H..
00025000  0c 20 02 00 e8 23 17 fe ff 85 c0 7f 24 eb 39 48 8b 7c 24 18 48 8b 05 4d 20 02 00 4c 89 e6 48 89  . ...#......$.9H.|$.H..M ..L..H.
00025020  fa e8 06 17 fe ff 89 c3 85 c0 74 cc e9 9f 00 00 00 31 f6 48 8b 7c 24 18 48 8b 05 c9 1f 02 00 e8  ..........t......1.H.|$.H.......
00025040  e8 16 fe ff a8 01 75 1c 48 8b 7c 24 18 48 8b 05 54 20 02 00 48 89 fe e8 d0 16 fe ff 89 c3 85 c0  ......u.H.|$.H..T ..H...........
00025060  74 21 eb 6c 48 8b 7c 24 18 48 8b 05 f8 1f 02 00 4c 89 e6 48 89 fa e8 b1 16 fe ff 89 c3 85 c0 74  t!.lH.|$.H......L..H...........t
00025080  c7 eb 4d 48 8b 75 00 48 8b 7c 24 10 48 8b 05 5d 1f 02 00 e8 94 16 fe ff 89 c3 85 c0 75 32 48 8b  ..MH.u.H.|$.H..]............u2H.
000250a0  75 08 48 8b 7c 24 18 48 8b 05 42 1f 02 00 e8 79 16 fe ff 89 c3 85 c0 75 17 48 8b 75 10 48 8b 7c  u.H.|$.H..B....y.......u.H.u.H.|
000250c0  24 20 48 8b 05 27 1f 02 00 e8 5e 16 fe ff 89 c3 4c 8b 44 24 20 48 8b 4c 24 18 45 31 c9 31 c0 48  $ H..'....^.....L.D$ H.L$.E1.1.H
000250e0  8b 54 24 10 48 8b 74 24 08 48 8b 3c 24 e8 47 d6 ff ff 48 8b 44 24 28 64 48 2b 04 25 28 00 00 00  .T$.H.t$.H.<$.G...H.D$(dH+.%(...
00025100  74 05 e8 09 01 fe ff 48 83 c4 38 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 ed 15 fe ff              t......H..8..[]A\A]A^A_.....

0002511c    void ltc_ecc_projective_dbl_point(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

0002511c  4156               push    r14 {var_8}
0002511e  4155               push    r13 {var_10}
00025120  4154               push    r12 {var_18}
00025122  55                 push    rbp {var_20}
00025123  53                 push    rbx {var_28}
00025124  4883ec20           sub     rsp, 0x20
00025128  64488b0425280000…  mov     rax, qword [fs:0x28]
00025131  4889442418         mov     qword [rsp+0x18 {var_30}], rax
00025136  31c0               xor     eax, eax  {0x0}
00025138  4885ff             test    rdi, rdi
0002513b  7515               jne     0x25152

0002513d  ba25000000         mov     edx, 0x25
00025142  488d359d240100     lea     rsi, [rel data_375e6]  {"src/pk/ecc/ltc_ecc_projective_db…"}
00025149  488d3dca230100     lea     rdi, [rel data_3751a]  {"P != NULL"}
00025150  eb1b               jmp     0x2516d

00025152  4889f5             mov     rbp, rsi
00025155  4885f6             test    rsi, rsi
00025158  7518               jne     0x25172

0002515a  ba26000000         mov     edx, 0x26
0002515f  488d3580240100     lea     rsi, [rel data_375e6]  {"src/pk/ecc/ltc_ecc_projective_db…"}
00025166  488d3d3b240100     lea     rdi, [rel data_375a8]  {"R != NULL"}

0002516d  e811daffff         call    crypt_argchk
{ Does not return }

00025172  4989d4             mov     r12, rdx
00025175  4885d2             test    rdx, rdx
00025178  7515               jne     0x2518f

0002517a  ba27000000         mov     edx, 0x27
0002517f  488d3560240100     lea     rsi, [rel data_375e6]  {"src/pk/ecc/ltc_ecc_projective_db…"}
00025186  488d3d97230100     lea     rdi, [rel data_37524]  {"modulus != NULL"}
0002518d  ebde               jmp     0x2516d

0002518f  4989cd             mov     r13, rcx
00025192  4885c9             test    rcx, rcx
00025195  7515               jne     0x251ac

00025197  ba28000000         mov     edx, 0x28
0002519c  488d3543240100     lea     rsi, [rel data_375e6]  {"src/pk/ecc/ltc_ecc_projective_db…"}
000251a3  488d3dbcef0000     lea     rdi, [rel data_34166]  {"mp != NULL"}
000251aa  ebc1               jmp     0x2516d

000251ac  4989fe             mov     r14, rdi
000251af  488d742410         lea     rsi, [rsp+0x10 {var_38}]
000251b4  488d7c2408         lea     rdi, [rsp+0x8 {var_40}]
000251b9  31d2               xor     edx, edx  {0x0}
000251bb  31c0               xor     eax, eax  {0x0}
000251bd  e850d4ffff         call    ltc_init_multi
{ Does not return }

000251c2        89 c3 85 c0 0f 85 5d 06 00 00 49 39 ee 75 20 48 8b 7d 10 48 8b 74 24 08 48 8b 05 b7 1e 02    ......]...I9.u H.}.H.t$.H.....
000251e0  00 e8 46 15 fe ff 89 c3 85 c0 74 5f e9 25 06 00 00 48 8b 75 00 49 8b 3e 48 8b 05 f1 1d 02 00 e8  ..F.......t_.%...H.u.I.>H.......
00025200  28 15 fe ff 89 c3 85 c0 0f 85 08 06 00 00 48 8b 75 08 49 8b 7e 08 48 8b 05 d3 1d 02 00 e8 0a 15  (.............H.u.I.~.H.........
00025220  fe ff 89 c3 85 c0 0f 85 ea 05 00 00 48 8b 75 10 49 8b 7e 10 48 8b 05 b5 1d 02 00 e8 ec 14 fe ff  ............H.u.I.~.H...........
00025240  89 c3 85 c0 74 8b e9 cb 05 00 00 48 8b 7c 24 08 48 8b 05 99 1e 02 00 4c 89 ea 4c 89 e6 e8 ca 14  ....t......H.|$.H......L..L.....
00025260  fe ff 89 c3 85 c0 0f 85 aa 05 00 00 48 8b 7d 10 48 8b 75 08 48 8b 05 0d 1e 02 00 48 89 fa e8 a9  ............H.}.H.u.H......H....
00025280  14 fe ff 89 c3 85 c0 0f 85 89 05 00 00 48 8b 7d 10 48 8b 05 58 1e 02 00 4c 89 ea 4c 89 e6 e8 89  .............H.}.H..X...L..L....
000252a0  14 fe ff 89 c3 85 c0 0f 85 69 05 00 00 48 8b 7d 10 48 8b 05 b0 1d 02 00 48 89 fa 48 89 fe e8 69  .........i...H.}.H......H..H...i
000252c0  14 fe ff 89 c3 85 c0 0f 85 49 05 00 00 48 8b 7d 10 48 8b 05 40 1d 02 00 4c 89 e6 e8 4c 14 fe ff  .........I...H.}.H..@...L...L...
000252e0  ff c0 75 25 48 8b 54 24 10 48 8b 74 24 08 48 8b 7d 00 48 8b 05 7f 1d 02 00 e8 2e 14 fe ff 89 c3  ..u%H.T$.H.t$.H.}.H.............
00025300  85 c0 74 26 e9 0d 05 00 00 48 8b 7d 10 48 8b 05 64 1d 02 00 4c 89 e6 48 89 fa e8 0d 14 fe ff 89  ..t&.....H.}.H..d...L..H........
00025320  c3 85 c0 74 bf e9 ec 04 00 00 31 f6 48 8b 7c 24 10 48 8b 05 e8 1c 02 00 e8 ef 13 fe ff ff c0 74  ...t......1.H.|$.H.............t
00025340  23 48 8b 7c 24 08 48 8b 75 00 48 8b 05 17 1d 02 00 48 89 fa e8 d3 13 fe ff 89 c3 85 c0 74 27 e9  #H.|$.H.u.H......H...........t'.
00025360  b2 04 00 00 48 8b 7c 24 10 48 8b 05 f8 1c 02 00 4c 89 e6 48 89 fa e8 b1 13 fe ff 89 c3 85 c0 74  ....H.|$.H......L..H...........t
00025380  c0 e9 90 04 00 00 48 8b 7c 24 08 48 8b 05 86 1c 02 00 4c 89 e6 e8 92 13 fe ff ff c0 75 24 48 8b  ......H.|$.H......L.........u$H.
000253a0  74 24 10 48 8b 7c 24 08 48 8b 05 d9 1c 02 00 48 89 f2 e8 75 13 fe ff 89 c3 85 c0 74 27 e9 54 04  t$.H.|$.H......H...u.......t'.T.
000253c0  00 00 48 8b 7c 24 08 48 8b 05 aa 1c 02 00 4c 89 e6 48 89 fa e8 53 13 fe ff 89 c3 85 c0 74 bf e9  ..H.|$.H......L..H...S.......t..
000253e0  32 04 00 00 48 8b 7c 24 10 48 8b 05 00 1d 02 00 4c 89 ea 4c 89 e6 e8 31 13 fe ff 89 c3 85 c0 0f  2...H.|$.H......L..L...1........
00025400  85 11 04 00 00 48 8b 7c 24 10 48 8b 54 24 08 48 8b 05 52 1c 02 00 48 89 fe e8 0e 13 fe ff 89 c3  .....H.|$.H.T$.H..R...H.........
00025420  85 c0 0f 85 ee 03 00 00 48 8b 7c 24 08 48 8b 05 e4 1b 02 00 4c 89 e6 e8 f0 12 fe ff ff c0 75 24  ........H.|$.H......L.........u$
00025440  48 8b 7c 24 08 48 8b 74 24 10 48 8b 05 17 1c 02 00 48 89 fa e8 d3 12 fe ff 89 c3 85 c0 74 27 e9  H.|$.H.t$.H......H...........t'.
00025460  b2 03 00 00 48 8b 7c 24 08 48 8b 05 08 1c 02 00 4c 89 e6 48 89 fa e8 b1 12 fe ff 89 c3 85 c0 74  ....H.|$.H......L..H...........t
00025480  bf e9 90 03 00 00 48 8b 7c 24 08 48 8b 05 86 1b 02 00 4c 89 e6 e8 92 12 fe ff ff c0 75 21 48 8b  ......H.|$.H......L.........u!H.
000254a0  7d 08 48 8b 05 bf 1b 02 00 48 89 fa 48 89 fe e8 78 12 fe ff 89 c3 85 c0 74 27 e9 57 03 00 00 48  }.H......H..H...x.......t'.W...H
000254c0  8b 7c 24 08 48 8b 05 ad 1b 02 00 4c 89 e6 48 89 fa e8 56 12 fe ff 89 c3 85 c0 74 c2 e9 35 03 00  .|$.H......L..H...V.......t..5..
000254e0  00 48 8b 7d 08 48 8b 05 2c 1b 02 00 4c 89 e6 e8 38 12 fe ff ff c0 75 1e 48 8b 7d 08 48 8b 05 95  .H.}.H..,...L...8.....u.H.}.H...
00025500  1b 02 00 48 89 fe e8 21 12 fe ff 89 c3 85 c0 74 26 e9 00 03 00 00 48 8b 7d 08 48 8b 05 57 1b 02  ...H...!.......t&.....H.}.H..W..
00025520  00 4c 89 e6 48 89 fa e8 00 12 fe ff 89 c3 85 c0 74 c6 e9 df 02 00 00 48 8b 7d 08 48 8b 05 ae 1b  .L..H...........t......H.}.H....
00025540  02 00 4c 89 ea 4c 89 e6 e8 df 11 fe ff 89 c3 85 c0 0f 85 bf 02 00 00 48 8b 7d 08 48 8b 74 24 10  ..L..L.................H.}.H.t$.
00025560  48 8b 05 31 1b 02 00 e8 c0 11 fe ff 89 c3 85 c0 0f 85 a0 02 00 00 48 8b 7c 24 10 48 8b 05 6e 1b  H..1..................H.|$.H..n.
00025580  02 00 4c 89 ea 4c 89 e6 e8 9f 11 fe ff 89 c3 85 c0 0f 85 7f 02 00 00 48 8b 7c 24 10 48 8b 05 6d  ..L..L.................H.|$.H..m
000255a0  1a 02 00 e8 84 11 fe ff 85 c0 7f 1f 48 8b 7c 24 10 48 8b 05 f0 1a 02 00 48 89 fe e8 6c 11 fe ff  ............H.|$.H......H...l...
000255c0  89 c3 85 c0 74 3e e9 4b 02 00 00 31 f6 48 8b 7c 24 10 48 8b 05 2f 1a 02 00 e8 4e 11 fe ff a8 01  ....t>.K...1.H.|$.H../....N.....
000255e0  74 ca 48 8b 7c 24 10 48 8b 05 7a 1a 02 00 4c 89 e6 48 89 fa e8 33 11 fe ff 89 c3 85 c0 74 ad e9  t.H.|$.H..z...L..H...3.......t..
00025600  12 02 00 00 48 8b 7d 08 48 8b 75 00 48 8b 05 75 1a 02 00 48 89 fa e8 11 11 fe ff 89 c3 85 c0 0f  ....H.}.H.u.H..u...H............
00025620  85 f1 01 00 00 48 8b 7d 08 48 8b 05 c0 1a 02 00 4c 89 ea 4c 89 e6 e8 f1 10 fe ff 89 c3 85 c0 0f  .....H.}.H......L..L............
00025640  85 d1 01 00 00 48 8b 75 00 48 8b 7c 24 08 48 8b 05 43 1a 02 00 e8 d2 10 fe ff 89 c3 85 c0 0f 85  .....H.u.H.|$.H..C..............
00025660  b2 01 00 00 48 8b 7d 00 48 8b 05 81 1a 02 00 4c 89 ea 4c 89 e6 e8 b2 10 fe ff 89 c3 85 c0 0f 85  ....H.}.H......L..L.............
00025680  92 01 00 00 48 8b 7d 00 48 8b 75 08 48 8b 05 e5 19 02 00 48 89 fa e8 91 10 fe ff 89 c3 85 c0 0f  ....H.}.H.u.H......H............
000256a0  85 71 01 00 00 31 f6 48 8b 7d 00 48 8b 05 6e 19 02 00 e8 75 10 fe ff ff c0 74 22 48 8b 7d 00 48  .q...1.H.}.H..n....u.....t"H.}.H
000256c0  8b 75 08 48 8b 05 ae 19 02 00 48 89 fa e8 5a 10 fe ff 89 c3 85 c0 74 26 e9 39 01 00 00 48 8b 7d  .u.H......H...Z.......t&.9...H.}
000256e0  00 48 8b 05 80 19 02 00 4c 89 e6 48 89 fa e8 39 10 fe ff 89 c3 85 c0 74 c2 e9 18 01 00 00 31 f6  .H......L..H...9.......t......1.
00025700  48 8b 7d 00 48 8b 05 15 19 02 00 e8 1c 10 fe ff ff c0 74 22 48 8b 7d 08 48 8b 75 00 48 8b 05 55  H.}.H.............t"H.}.H.u.H..U
00025720  19 02 00 48 89 fa e8 01 10 fe ff 89 c3 85 c0 74 26 e9 e0 00 00 00 48 8b 7d 00 48 8b 05 27 19 02  ...H...........t&.....H.}.H..'..
00025740  00 4c 89 e6 48 89 fa e8 e0 0f fe ff 89 c3 85 c0 74 c2 e9 bf 00 00 00 31 f6 48 8b 7d 08 48 8b 05  .L..H...........t......1.H.}.H..
00025760  bc 18 02 00 e8 c3 0f fe ff ff c0 74 23 48 8b 7d 08 48 8b 74 24 08 48 8b 05 0b 19 02 00 48 89 fa  ...........t#H.}.H.t$.H......H..
00025780  e8 a7 0f fe ff 89 c3 85 c0 74 23 e9 86 00 00 00 48 8b 7d 08 48 8b 05 cd 18 02 00 4c 89 e6 48 89  .........t#.....H.}.H......L..H.
000257a0  fa e8 86 0f fe ff 89 c3 85 c0 74 c1 eb 68 48 8b 7d 08 48 8b 05 37 19 02 00 4c 89 ea 4c 89 e6 e8  ..........t..hH.}.H..7...L..L...
000257c0  68 0f fe ff 89 c3 85 c0 75 4c 48 8b 7d 08 48 8b 74 24 10 48 8b 05 9e 18 02 00 48 89 fa e8 4a 0f  h.......uLH.}.H.t$.H......H...J.
000257e0  fe ff 89 c3 85 c0 75 2e 31 f6 48 8b 7d 08 48 8b 05 2b 18 02 00 e8 32 0f fe ff ff c0 75 18 48 8b  ......u.1.H.}.H..+....2.....u.H.
00025800  7d 08 48 8b 05 5f 18 02 00 4c 89 e6 48 89 fa e8 18 0f fe ff 89 c3 48 8b 74 24 10 48 8b 7c 24 08  }.H.._...L..H.........H.t$.H.|$.
00025820  31 d2 31 c0 e8 10 cf ff ff 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 74 05 e8 d2 f9 fd ff 48 83  1.1......H.D$.dH+.%(...t......H.
00025840  c4 20 89 d8 5b 5d 41 5c 41 5d 41 5e e9 b8 0e fe ff                                               . ..[]A\A]A^.....

00025851    void chacha_crypt(int32_t* arg1, char* arg2, int64_t arg3, char* arg4) __noreturn

00025851  4157               push    r15 {__saved_r15}
00025853  4156               push    r14 {__saved_r14}
00025855  4155               push    r13 {__saved_r13}
00025857  4154               push    r12 {__saved_r12}
00025859  55                 push    rbp {__saved_rbp}
0002585a  53                 push    rbx {__saved_rbx}
0002585b  4881ece8000000     sub     rsp, 0xe8
00025862  64488b0425280000…  mov     rax, qword [fs:0x28]
0002586b  48898424d8000000   mov     qword [rsp+0xd8 {var_40}], rax
00025873  31c0               xor     eax, eax  {0x0}
00025875  4885d2             test    rdx, rdx
00025878  0f8409050000       je      0x25d87

0002587e  4989fa             mov     r10, rdi
00025881  4885ff             test    rdi, rdi
00025884  7515               jne     0x2589b

00025886  ba3d000000         mov     edx, 0x3d
0002588b  488d357e1d0100     lea     rsi, [rel data_37610]  {"src/stream/chacha/chacha_crypt.c"}
00025892  488d3dc4130100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00025899  eb1b               jmp     0x258b6

0002589b  4889f5             mov     rbp, rsi
0002589e  4885f6             test    rsi, rsi
000258a1  7518               jne     0x258bb

000258a3  ba3e000000         mov     edx, 0x3e
000258a8  488d35611d0100     lea     rsi, [rel data_37610]  {"src/stream/chacha/chacha_crypt.c"}
000258af  488d3dec120100     lea     rdi, [rel data_36ba2]  {"in != NULL"}

000258b6  e8c8d2ffff         call    crypt_argchk
{ Does not return }

000258bb  4989cd             mov     r13, rcx
000258be  4885c9             test    rcx, rcx
000258c1  7515               jne     0x258d8

000258c3  ba3f000000         mov     edx, 0x3f
000258c8  488d35411d0100     lea     rsi, [rel data_37610]  {"src/stream/chacha/chacha_crypt.c"}
000258cf  488d3d3dec0000     lea     rdi, [rel data_34513]  {"out != NULL"}
000258d6  ebde               jmp     0x258b6

000258d8  4883bf8800000000   cmp     qword [rdi+0x88], 0x0
000258e0  7515               jne     0x258f7

000258e2  ba40000000         mov     edx, 0x40
000258e7  488d35221d0100     lea     rsi, [rel data_37610]  {"src/stream/chacha/chacha_crypt.c"}
000258ee  488d3d3c1d0100     lea     rdi, [rel data_37631]  {"st->ivlen != 0"}
000258f5  ebbf               jmp     0x258b6

000258f7  488b8780000000     mov     rax, qword [rdi+0x80]
000258fe  4989d4             mov     r12, rdx
00025901  4885c0             test    rax, rax
00025904  744a               je      0x25950

00025906  4839d0             cmp     rax, rdx
00025909  bf40000000         mov     edi, 0x40
0002590e  480f46d0           cmovbe  rdx, rax
00025912  31c9               xor     ecx, ecx  {0x0}

00025914  4889fe             mov     rsi, rdi  {0x40}
00025917  4829c6             sub     rsi, rax
0002591a  418a443240         mov     al, byte [r10+rsi+0x40]
0002591f  32440d00           xor     al, byte [rbp+rcx]
00025923  4188440d00         mov     byte [r13+rcx], al
00025928  498b8280000000     mov     rax, qword [r10+0x80]
0002592f  48ffc1             inc     rcx
00025932  48ffc8             dec     rax
00025935  49898280000000     mov     qword [r10+0x80], rax
0002593c  4839ca             cmp     rdx, rcx
0002593f  75d3               jne     0x25914

00025941  4929d4             sub     r12, rdx
00025944  0f843d040000       je      0x25d87

0002594a  4901d5             add     r13, rdx
0002594d  4801d5             add     rbp, rdx

00025950  488d442458         lea     rax, [rsp+0x58 {var_c0}]
00025955  4c89e3             mov     rbx, r12
00025958  4889442428         mov     qword [rsp+0x28 {var_f0_1}], rax {var_c0}

0002595d  488b7c2428         mov     rdi, qword [rsp+0x28 {var_f0_1}]
00025962  b910000000         mov     ecx, 0x10
00025967  4c89d6             mov     rsi, r10
0002596a  4b8d442500         lea     rax, [r13+r12]
0002596f  f3a5               rep movsd dword [rdi], [rsi]  {0x0}
00025971  4829d8             sub     rax, rbx
00025974  4889442448         mov     qword [rsp+0x48 {var_d0_1}], rax
00025979  4a8d442500         lea     rax, [rbp+r12]
0002597e  8b7c245c           mov     edi, dword [rsp+0x5c {var_bc}]
00025982  8b8c2494000000     mov     ecx, dword [rsp+0x94 {var_84}]
00025989  4829d8             sub     rax, rbx
0002598c  448b7c2458         mov     r15d, dword [rsp+0x58 {var_c0}]
00025991  448b742478         mov     r14d, dword [rsp+0x78 {var_a0}]
00025996  4889442430         mov     qword [rsp+0x30 {var_e8_1}], rax
0002599b  897c2418           mov     dword [rsp+0x18 {var_100_1}], edi
0002599f  8b7c246c           mov     edi, dword [rsp+0x6c {var_ac}]
000259a3  418b8290000000     mov     eax, dword [r10+0x90]
000259aa  894c2410           mov     dword [rsp+0x10 {var_108_1}], ecx
000259ae  8b8c2484000000     mov     ecx, dword [rsp+0x84 {var_94}]
000259b5  897c2414           mov     dword [rsp+0x14 {var_104_1}], edi
000259b9  8b7c2460           mov     edi, dword [rsp+0x60 {var_b8}]
000259bd  89442444           mov     dword [rsp+0x44 {i}], eax
000259c1  448b8c2488000000   mov     r9d, dword [rsp+0x88 {var_90}]
000259c9  8b442468           mov     eax, dword [rsp+0x68 {var_b0}]
000259cd  894c240c           mov     dword [rsp+0xc {var_10c_1}], ecx
000259d1  31c9               xor     ecx, ecx  {0x0}
000259d3  448b84248c000000   mov     r8d, dword [rsp+0x8c {var_8c}]
000259db  448b5c247c         mov     r11d, dword [rsp+0x7c {var_9c}]
000259e0  897c2404           mov     dword [rsp+0x4 {var_114_1}], edi
000259e4  8b7c2470           mov     edi, dword [rsp+0x70 {var_a8}]
000259e8  8b942490000000     mov     edx, dword [rsp+0x90 {var_88}]
000259ef  8b742464           mov     esi, dword [rsp+0x64 {var_b4}]
000259f3  897c241c           mov     dword [rsp+0x1c {var_fc_1}], edi
000259f7  8bbc2480000000     mov     edi, dword [rsp+0x80 {var_98}]
000259fe  897c2408           mov     dword [rsp+0x8 {var_110_1}], edi
00025a02  8b7c2474           mov     edi, dword [rsp+0x74 {var_a4}]

00025a06  837c244400         cmp     dword [rsp+0x44 {i}], 0x0
00025a0b  0f8e42020000       jle     0x25c53

00025a11  4101c7             add     r15d, eax
00025a14  b910000000         mov     ecx, 0x10
00025a19  4531f9             xor     r9d, r15d
00025a1c  41d3c1             rol     r9d, cl
00025a1f  4501ce             add     r14d, r9d
00025a22  b90c000000         mov     ecx, 0xc
00025a27  4431f0             xor     eax, r14d
00025a2a  d3c0               rol     eax, cl
00025a2c  4101c7             add     r15d, eax
00025a2f  b908000000         mov     ecx, 0x8
00025a34  4531f9             xor     r9d, r15d
00025a37  41d3c1             rol     r9d, cl
00025a3a  4501ce             add     r14d, r9d
00025a3d  b907000000         mov     ecx, 0x7
00025a42  44894c2420         mov     dword [rsp+0x20 {var_f8_1}], r9d
00025a47  4489742438         mov     dword [rsp+0x38 {var_e0_1}], r14d
00025a4c  4431f0             xor     eax, r14d
00025a4f  448b742414         mov     r14d, dword [rsp+0x14 {var_104_1}]
00025a54  d3c0               rol     eax, cl
00025a56  89442424           mov     dword [rsp+0x24 {var_f4_1}], eax
00025a5a  8b442418           mov     eax, dword [rsp+0x18 {var_100_1}]
00025a5e  b910000000         mov     ecx, 0x10
00025a63  4589f1             mov     r9d, r14d
00025a66  4401f0             add     eax, r14d
00025a69  4131c0             xor     r8d, eax
00025a6c  41d3c0             rol     r8d, cl
00025a6f  4501c3             add     r11d, r8d
00025a72  b90c000000         mov     ecx, 0xc
00025a77  4531d9             xor     r9d, r11d
00025a7a  41d3c1             rol     r9d, cl
00025a7d  4401c8             add     eax, r9d
00025a80  b908000000         mov     ecx, 0x8
00025a85  4131c0             xor     r8d, eax
00025a88  89442418           mov     dword [rsp+0x18 {var_100_2}], eax
00025a8c  4589c6             mov     r14d, r8d
00025a8f  448b442408         mov     r8d, dword [rsp+0x8 {var_110_1}]
00025a94  41d3c6             rol     r14d, cl
00025a97  438d0433           lea     eax, [r11+r14]
00025a9b  448b5c2404         mov     r11d, dword [rsp+0x4 {var_114_1}]
00025aa0  b907000000         mov     ecx, 0x7
00025aa5  8944243c           mov     dword [rsp+0x3c {var_dc_1}], eax
00025aa9  4131c1             xor     r9d, eax
00025aac  8b44241c           mov     eax, dword [rsp+0x1c {var_fc_1}]
00025ab0  41d3c1             rol     r9d, cl
00025ab3  4101c3             add     r11d, eax
00025ab6  b910000000         mov     ecx, 0x10
00025abb  4431da             xor     edx, r11d
00025abe  d3c2               rol     edx, cl
00025ac0  4101d0             add     r8d, edx
00025ac3  b90c000000         mov     ecx, 0xc
00025ac8  4431c0             xor     eax, r8d
00025acb  d3c0               rol     eax, cl
00025acd  4101c3             add     r11d, eax
00025ad0  b908000000         mov     ecx, 0x8
00025ad5  4431da             xor     edx, r11d
00025ad8  44895c2404         mov     dword [rsp+0x4 {var_114_2}], r11d
00025add  4189d3             mov     r11d, edx
00025ae0  41d3c3             rol     r11d, cl
00025ae3  4501d8             add     r8d, r11d
00025ae6  01fe               add     esi, edi
00025ae8  b907000000         mov     ecx, 0x7
00025aed  4501cf             add     r15d, r9d
00025af0  89742408           mov     dword [rsp+0x8 {var_110_2}], esi
00025af4  8b742410           mov     esi, dword [rsp+0x10 {var_108_1}]
00025af8  4431c0             xor     eax, r8d
00025afb  8b542408           mov     edx, dword [rsp+0x8 {var_110_2}]
00025aff  d3c0               rol     eax, cl
00025b01  31d6               xor     esi, edx
00025b03  8b54240c           mov     edx, dword [rsp+0xc {var_10c_1}]
00025b07  b910000000         mov     ecx, 0x10
00025b0c  d3c6               rol     esi, cl
00025b0e  01f2               add     edx, esi
00025b10  b90c000000         mov     ecx, 0xc
00025b15  31d7               xor     edi, edx
00025b17  d3c7               rol     edi, cl
00025b19  8b4c2408           mov     ecx, dword [rsp+0x8 {var_110_2}]
00025b1d  01f9               add     ecx, edi
00025b1f  894c2440           mov     dword [rsp+0x40 {var_d8_1}], ecx
00025b23  31ce               xor     esi, ecx
00025b25  b908000000         mov     ecx, 0x8
00025b2a  d3c6               rol     esi, cl
00025b2c  01f2               add     edx, esi
00025b2e  b907000000         mov     ecx, 0x7
00025b33  4431fe             xor     esi, r15d
00025b36  31d7               xor     edi, edx
00025b38  d3c7               rol     edi, cl
00025b3a  b910000000         mov     ecx, 0x10
00025b3f  d3c6               rol     esi, cl
00025b41  4101f0             add     r8d, esi
00025b44  b90c000000         mov     ecx, 0xc
00025b49  4531c1             xor     r9d, r8d
00025b4c  41d3c1             rol     r9d, cl
00025b4f  4501cf             add     r15d, r9d
00025b52  b908000000         mov     ecx, 0x8
00025b57  4431fe             xor     esi, r15d
00025b5a  d3c6               rol     esi, cl
00025b5c  89742410           mov     dword [rsp+0x10 {var_108_1}], esi
00025b60  4401c6             add     esi, r8d
00025b63  b907000000         mov     ecx, 0x7
00025b68  4131f1             xor     r9d, esi
00025b6b  89742408           mov     dword [rsp+0x8 {var_110_1}], esi
00025b6f  8b742418           mov     esi, dword [rsp+0x18 {var_100_2}]
00025b73  41d3c1             rol     r9d, cl
00025b76  44894c2414         mov     dword [rsp+0x14 {var_104_1}], r9d
00025b7b  448b4c2420         mov     r9d, dword [rsp+0x20 {var_f8_1}]
00025b80  01c6               add     esi, eax
00025b82  b910000000         mov     ecx, 0x10
00025b87  4131f1             xor     r9d, esi
00025b8a  41d3c1             rol     r9d, cl
00025b8d  4401ca             add     edx, r9d
00025b90  b90c000000         mov     ecx, 0xc
00025b95  31d0               xor     eax, edx
00025b97  d3c0               rol     eax, cl
00025b99  01c6               add     esi, eax
00025b9b  b908000000         mov     ecx, 0x8
00025ba0  4131f1             xor     r9d, esi
00025ba3  89742418           mov     dword [rsp+0x18 {var_100_1}], esi
00025ba7  41d3c1             rol     r9d, cl
00025baa  4401ca             add     edx, r9d
00025bad  b907000000         mov     ecx, 0x7
00025bb2  31d0               xor     eax, edx
00025bb4  8954240c           mov     dword [rsp+0xc {var_10c_1}], edx
00025bb8  8b542438           mov     edx, dword [rsp+0x38 {var_e0_1}]
00025bbc  d3c0               rol     eax, cl
00025bbe  8944241c           mov     dword [rsp+0x1c {var_fc_1}], eax
00025bc2  8b442404           mov     eax, dword [rsp+0x4 {var_114_2}]
00025bc6  b910000000         mov     ecx, 0x10
00025bcb  01f8               add     eax, edi
00025bcd  4131c6             xor     r14d, eax
00025bd0  4589f0             mov     r8d, r14d
00025bd3  41d3c0             rol     r8d, cl
00025bd6  468d3402           lea     r14d, [rdx+r8]
00025bda  b90c000000         mov     ecx, 0xc
00025bdf  8b542440           mov     edx, dword [rsp+0x40 {var_d8_1}]
00025be3  4431f7             xor     edi, r14d
00025be6  d3c7               rol     edi, cl
00025be8  01f8               add     eax, edi
00025bea  b908000000         mov     ecx, 0x8
00025bef  89442404           mov     dword [rsp+0x4 {var_114_1}], eax
00025bf3  4131c0             xor     r8d, eax
00025bf6  8b442424           mov     eax, dword [rsp+0x24 {var_f4_1}]
00025bfa  41d3c0             rol     r8d, cl
00025bfd  8d3410             lea     esi, [rax+rdx]
00025c00  8b44243c           mov     eax, dword [rsp+0x3c {var_dc_1}]
00025c04  4489da             mov     edx, r11d
00025c07  4501c6             add     r14d, r8d
00025c0a  b907000000         mov     ecx, 0x7
00025c0f  31f2               xor     edx, esi
00025c11  4431f7             xor     edi, r14d
00025c14  d3c7               rol     edi, cl
00025c16  b910000000         mov     ecx, 0x10
00025c1b  d3c2               rol     edx, cl
00025c1d  448d1c10           lea     r11d, [rax+rdx]
00025c21  8b442424           mov     eax, dword [rsp+0x24 {var_f4_1}]
00025c25  b90c000000         mov     ecx, 0xc
00025c2a  836c244402         sub     dword [rsp+0x44 {i}], 0x2
00025c2f  4431d8             xor     eax, r11d
00025c32  d3c0               rol     eax, cl
00025c34  01c6               add     esi, eax
00025c36  b908000000         mov     ecx, 0x8
00025c3b  31f2               xor     edx, esi
00025c3d  d3c2               rol     edx, cl
00025c3f  4101d3             add     r11d, edx
00025c42  b907000000         mov     ecx, 0x7
00025c47  4431d8             xor     eax, r11d
00025c4a  d3c0               rol     eax, cl
00025c4c  b101               mov     cl, 0x1
00025c4e  e9b3fdffff         jmp     0x25a06

00025c53  84c9               test    cl, cl
00025c55  7473               je      0x25cca

00025c57  8b4c2410           mov     ecx, dword [rsp+0x10 {var_108_1}]
00025c5b  44897c2458         mov     dword [rsp+0x58 {var_c0}], r15d
00025c60  44898c2488000000   mov     dword [rsp+0x88 {var_90}], r9d
00025c68  898c2494000000     mov     dword [rsp+0x94 {var_84}], ecx
00025c6f  8b4c2408           mov     ecx, dword [rsp+0x8 {var_110_1}]
00025c73  448984248c000000   mov     dword [rsp+0x8c {var_8c}], r8d
00025c7b  898c2480000000     mov     dword [rsp+0x80 {var_98}], ecx
00025c82  8b4c2414           mov     ecx, dword [rsp+0x14 {var_104_1}]
00025c86  4489742478         mov     dword [rsp+0x78 {var_a0}], r14d
00025c8b  894c246c           mov     dword [rsp+0x6c {var_ac}], ecx
00025c8f  8b4c2418           mov     ecx, dword [rsp+0x18 {var_100_1}]
00025c93  897c2474           mov     dword [rsp+0x74 {var_a4}], edi
00025c97  894c245c           mov     dword [rsp+0x5c {var_bc}], ecx
00025c9b  8b4c240c           mov     ecx, dword [rsp+0xc {var_10c_1}]
00025c9f  89742464           mov     dword [rsp+0x64 {var_b4}], esi
00025ca3  898c2484000000     mov     dword [rsp+0x84 {var_94}], ecx
00025caa  8b4c241c           mov     ecx, dword [rsp+0x1c {var_fc_1}]
00025cae  89942490000000     mov     dword [rsp+0x90 {var_88}], edx
00025cb5  894c2470           mov     dword [rsp+0x70 {var_a8}], ecx
00025cb9  8b4c2404           mov     ecx, dword [rsp+0x4 {var_114_1}]
00025cbd  44895c247c         mov     dword [rsp+0x7c {var_9c}], r11d
00025cc2  894c2460           mov     dword [rsp+0x60 {var_b8}], ecx
00025cc6  89442468           mov     dword [rsp+0x68 {var_b0}], eax

00025cca  31c0               xor     eax, eax  {0x0}
00025ccc  488d942498000000   lea     rdx, [rsp+0x98 {var_80}]

00025cd4  488b7c2428         mov     rdi, qword [rsp+0x28 {var_f0_1}]
00025cd9  418b0c02           mov     ecx, dword [r10+rax]
00025cdd  030c07             add     ecx, dword [rdi+rax]
00025ce0  4883c004           add     rax, 0x4
00025ce4  894c38fc           mov     dword [rax+rdi-0x4], ecx
00025ce8  894c10fc           mov     dword [rax+rdx-0x4 {var_84}], ecx
00025cec  4883f840           cmp     rax, 0x40
00025cf0  75e2               jne     0x25cd4

00025cf2  418b4230           mov     eax, dword [r10+0x30]
00025cf6  ffc0               inc     eax
00025cf8  4983ba8800000008   cmp     qword [r10+0x88], 0x8
00025d00  41894230           mov     dword [r10+0x30], eax
00025d04  751b               jne     0x25d21

00025d06  85c0               test    eax, eax
00025d08  740a               je      0x25d14

00025d0a  31c0               xor     eax, eax  {0x0}
00025d0c  4883fb40           cmp     rbx, 0x40
00025d10  7750               ja      0x25d62

00025d12  eb11               jmp     0x25d25

00025d14  41ff4234           inc     dword [r10+0x34]

00025d18  75f0               jne     0x25d0a

00025d1a  b813000000         mov     eax, 0x13
00025d1f  eb68               jmp     0x25d89

00025d21  85c0               test    eax, eax
00025d23  ebf3               jmp     0x25d18

00025d25  488b7c2430         mov     rdi, qword [rsp+0x30 {var_e8_1}]
00025d2a  8a0c07             mov     cl, byte [rdi+rax]
00025d2d  488b7c2448         mov     rdi, qword [rsp+0x48 {var_d0_1}]
00025d32  320c02             xor     cl, byte [rdx+rax] {var_80}
00025d35  880c07             mov     byte [rdi+rax], cl
00025d38  48ffc0             inc     rax
00025d3b  4839c3             cmp     rbx, rax
00025d3e  75e5               jne     0x25d25

00025d40  b940000000         mov     ecx, 0x40
00025d45  4829c1             sub     rcx, rax
00025d48  49898a80000000     mov     qword [r10+0x80], rcx

00025d4f  4883f840           cmp     rax, 0x40
00025d53  7432               je      0x25d87

00025d55  8a0c02             mov     cl, byte [rdx+rax] {var_80}
00025d58  41884c0240         mov     byte [r10+rax+0x40], cl
00025d5d  48ffc0             inc     rax
00025d60  ebed               jmp     0x25d4f

00025d62  488b7c2430         mov     rdi, qword [rsp+0x30 {var_e8_1}]
00025d67  8a0c07             mov     cl, byte [rdi+rax]
00025d6a  488b7c2448         mov     rdi, qword [rsp+0x48 {var_d0_1}]
00025d6f  320c02             xor     cl, byte [rdx+rax] {var_80}
00025d72  880c07             mov     byte [rdi+rax], cl
00025d75  48ffc0             inc     rax
00025d78  4883f840           cmp     rax, 0x40
00025d7c  75e4               jne     0x25d62

00025d7e  4883eb40           sub     rbx, 0x40
00025d82  e9d6fbffff         jmp     0x2595d

00025d87  31c0               xor     eax, eax  {0x0}

00025d89  488b9424d8000000   mov     rdx, qword [rsp+0xd8 {var_40}]
00025d91  64482b1425280000…  sub     rdx, qword [fs:0x28]
00025d9a  7405               je      0x25da1

00025d9c  e86ff4fdff         call    __stack_chk_fail
{ Does not return }

00025da1  4881c4e8000000     add     rsp, 0xe8
00025da8  5b                 pop     rbx {__saved_rbx}
00025da9  5d                 pop     rbp {__saved_rbp}
00025daa  415c               pop     r12 {__saved_r12}
00025dac  415d               pop     r13 {__saved_r13}
00025dae  415e               pop     r14 {__saved_r14}
00025db0  415f               pop     r15 {__saved_r15}
00025db2  e95209feff         jmp     __x86_return_thunk
{ Does not return }


00025db7    void chacha_ivctr64(void* arg1, int32_t* arg2, int64_t arg3, int64_t arg4) __noreturn

00025db7  4150               push    r8 {var_8}
00025db9  4885ff             test    rdi, rdi
00025dbc  7515               jne     0x25dd3

00025dbe  ba1d000000         mov     edx, 0x1d
00025dc3  488d3576180100     lea     rsi, [rel data_37640]  {"src/stream/chacha/chacha_ivctr64…"}
00025dca  488d3d8c0e0100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00025dd1  eb18               jmp     0x25deb

00025dd3  4885f6             test    rsi, rsi
00025dd6  7518               jne     0x25df0

00025dd8  ba1e000000         mov     edx, 0x1e
00025ddd  488d355c180100     lea     rsi, [rel data_37640]  {"src/stream/chacha/chacha_ivctr64…"}
00025de4  488d3d78180100     lea     rdi, [rel data_37663]  {"iv != NULL"}

00025deb  e893cdffff         call    crypt_argchk
{ Does not return }

00025df0  4883fa08           cmp     rdx, 0x8
00025df4  7415               je      0x25e0b

00025df6  ba20000000         mov     edx, 0x20
00025dfb  488d353e180100     lea     rsi, [rel data_37640]  {"src/stream/chacha/chacha_ivctr64…"}
00025e02  488d3d65180100     lea     rdi, [rel data_3766e]  {"ivlen == 8"}
00025e09  ebe0               jmp     0x25deb

00025e0b  48894f30           mov     qword [rdi+0x30], rcx
00025e0f  8b06               mov     eax, dword [rsi]
00025e11  894738             mov     dword [rdi+0x38], eax
00025e14  8b4604             mov     eax, dword [rsi+0x4]
00025e17  48c7878800000008…  mov     qword [rdi+0x88], 0x8
00025e22  89473c             mov     dword [rdi+0x3c], eax
00025e25  31c0               xor     eax, eax  {0x0}
00025e27  48898780000000     mov     qword [rdi+0x80], rax  {0x0}
00025e2e  31c0               xor     eax, eax  {0x0}
00025e30  5a                 pop     rdx {var_8}
00025e31  e9d308feff         jmp     __x86_return_thunk
{ Does not return }


00025e36    void chacha_keystream(int32_t* arg1, char* arg2, int64_t arg3) __noreturn

00025e36  4885d2             test    rdx, rdx
00025e39  7436               je      0x25e71

00025e3b  4885f6             test    rsi, rsi
00025e3e  7519               jne     0x25e59

00025e40  50                 push    rax {var_8}
00025e41  ba1d000000         mov     edx, 0x1d
00025e46  488d352c180100     lea     rsi, [rel data_37679]  {"src/stream/chacha/chacha_keystre…"}
00025e4d  488d3dbfe60000     lea     rdi, [rel data_34513]  {"out != NULL"}
00025e54  e82acdffff         call    crypt_argchk
{ Does not return }

00025e59  4989f8             mov     r8, rdi
00025e5c  31c0               xor     eax, eax  {0x0}
00025e5e  4889f7             mov     rdi, rsi
00025e61  4889d1             mov     rcx, rdx
00025e64  f3aa               rep stosb byte [rdi]  {0x0}
00025e66  4889f1             mov     rcx, rsi
00025e69  4c89c7             mov     rdi, r8
00025e6c  e9e0f9ffff         jmp     chacha_crypt
{ Does not return }

00025e71  31c0               xor     eax, eax  {0x0}
00025e73  e99108feff         jmp     __x86_return_thunk
{ Does not return }


00025e78    void chacha_setup(void* arg1, int32_t* arg2, int64_t arg3, int32_t arg4) __noreturn

00025e78  4150               push    r8 {var_8}
00025e7a  4885ff             test    rdi, rdi
00025e7d  7515               jne     0x25e94

00025e7f  ba22000000         mov     edx, 0x22
00025e84  488d3535180100     lea     rsi, [rel data_376c0]  {"src/stream/chacha/chacha_setup.c"}
00025e8b  488d3dcb0d0100     lea     rdi, [rel data_36c5d]  {"st != NULL"}
00025e92  eb18               jmp     0x25eac

00025e94  4885f6             test    rsi, rsi
00025e97  7518               jne     0x25eb1

00025e99  ba23000000         mov     edx, 0x23
00025e9e  488d351b180100     lea     rsi, [rel data_376c0]  {"src/stream/chacha/chacha_setup.c"}
00025ea5  488d3d9c0c0100     lea     rdi, [rel data_36b47[1]]  {"key != NULL"}

00025eac  e8d2ccffff         call    crypt_argchk
{ Does not return }

00025eb1  4889f8             mov     rax, rdi
00025eb4  488d7af0           lea     rdi, [rdx-0x10]
00025eb8  48f7c7efffffff     test    rdi, 0xffffffffffffffef
00025ebf  7415               je      0x25ed6

00025ec1  ba24000000         mov     edx, 0x24
00025ec6  488d35f3170100     lea     rsi, [rel data_376c0]  {"src/stream/chacha/chacha_setup.c"}
00025ecd  488d3d0d180100     lea     rdi, [rel data_376e1]  {"keylen == 32 || keylen == 16"}
00025ed4  ebd6               jmp     0x25eac

00025ed6  85c9               test    ecx, ecx
00025ed8  7505               jne     0x25edf

00025eda  b914000000         mov     ecx, 0x14

00025edf  8b3e               mov     edi, dword [rsi]
00025ee1  897810             mov     dword [rax+0x10], edi
00025ee4  8b7e04             mov     edi, dword [rsi+0x4]
00025ee7  897814             mov     dword [rax+0x14], edi
00025eea  8b7e08             mov     edi, dword [rsi+0x8]
00025eed  897818             mov     dword [rax+0x18], edi
00025ef0  8b7e0c             mov     edi, dword [rsi+0xc]
00025ef3  89781c             mov     dword [rax+0x1c], edi
00025ef6  488d3db2170100     lea     rdi, [rel data_376af]  {"expand 16-byte k"}
00025efd  4883fa20           cmp     rdx, 0x20
00025f01  750b               jne     0x25f0e

00025f03  4883c610           add     rsi, 0x10
00025f07  488d3d90170100     lea     rdi, [rel data_3769e]  {"expand 32-byte k"}

00025f0e  8b16               mov     edx, dword [rsi]
00025f10  895020             mov     dword [rax+0x20], edx
00025f13  8b5604             mov     edx, dword [rsi+0x4]
00025f16  895024             mov     dword [rax+0x24], edx
00025f19  8b5608             mov     edx, dword [rsi+0x8]
00025f1c  895028             mov     dword [rax+0x28], edx
00025f1f  8b560c             mov     edx, dword [rsi+0xc]
00025f22  c70065787061       mov     dword [rax], 0x61707865
00025f28  89502c             mov     dword [rax+0x2c], edx
00025f2b  488b5704           mov     rdx, qword [rdi+0x4]
00025f2f  c7400c7465206b     mov     dword [rax+0xc], 0x6b206574
00025f36  48895004           mov     qword [rax+0x4], rdx
00025f3a  31d2               xor     edx, edx  {0x0}
00025f3c  898890000000       mov     dword [rax+0x90], ecx
00025f42  48899088000000     mov     qword [rax+0x88], rdx  {0x0}
00025f49  31c0               xor     eax, eax  {0x0}
00025f4b  59                 pop     rcx {var_8}
00025f4c  e9b807feff         jmp     __x86_return_thunk
{ Does not return }


00025f51    void hash_memory(int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) __noreturn

00025f51  4157               push    r15 {var_8}
00025f53  4156               push    r14 {var_10}
00025f55  4155               push    r13 {var_18}
00025f57  4154               push    r12 {var_20}
00025f59  55                 push    rbp {var_28}
00025f5a  53                 push    rbx {var_30}
00025f5b  4883ec18           sub     rsp, 0x18
00025f5f  4885f6             test    rsi, rsi
00025f62  7515               jne     0x25f79

00025f64  ba1f000000         mov     edx, 0x1f
00025f69  488d358e170100     lea     rsi, [rel data_376fe]  {"src/hashes/helper/hash_memory.c"}
00025f70  488d3d2b0c0100     lea     rdi, [rel data_36ba2]  {"in != NULL"}
00025f77  eb1b               jmp     0x25f94

00025f79  4989cc             mov     r12, rcx
00025f7c  4885c9             test    rcx, rcx
00025f7f  7518               jne     0x25f99

00025f81  ba20000000         mov     edx, 0x20
00025f86  488d3571170100     lea     rsi, [rel data_376fe]  {"src/hashes/helper/hash_memory.c"}
00025f8d  488d3d7fe50000     lea     rdi, [rel data_34513]  {"out != NULL"}

00025f94  e8eacbffff         call    crypt_argchk
{ Does not return }

00025f99  4c89c5             mov     rbp, r8
00025f9c  4d85c0             test    r8, r8
00025f9f  7515               jne     0x25fb6

00025fa1  ba21000000         mov     edx, 0x21
00025fa6  488d3551170100     lea     rsi, [rel data_376fe]  {"src/hashes/helper/hash_memory.c"}
00025fad  488d3d50e50000     lea     rdi, [rel data_34504]  {"outlen != NULL"}
00025fb4  ebde               jmp     0x25f94

00025fb6  4863df             movsxd  rbx, edi
00025fb9  4989f5             mov     r13, rsi
00025fbc  4989d6             mov     r14, rdx
00025fbf  89df               mov     edi, ebx
00025fc1  e8a2ccffff         call    hash_is_valid
{ Does not return }

00025fc6                    85 c0 0f 85 93 00 00 00 48 69 db d0 00 00 00 4c 8d 3d c4 0b 02 00 49 01 df 49        ........Hi.....L.=....I..I
00025fe0  8b 47 10 48 39 45 00 73 0b 48 89 45 00 b8 06 00 00 00 eb 6d bf d0 00 00 00 e8 12 56 fe ff 48 89  .G.H9E.s.H.E.......m.......V..H.
00026000  c3 b8 0d 00 00 00 48 85 db 74 56 49 8b 87 a8 00 00 00 48 89 df e8 12 07 fe ff 85 c0 75 33 49 8b  ......H..tVI......H.........u3I.
00026020  87 b0 00 00 00 4c 89 f2 4c 89 ee 48 89 df e8 f9 06 fe ff 85 c0 75 1a 49 8b 87 b8 00 00 00 4c 89  .....L..L..H.........u.I......L.
00026040  e6 48 89 df e8 e3 06 fe ff 49 8b 57 10 48 89 55 00 48 89 df 89 44 24 0c e8 03 f0 fd ff 8b 44 24  .H.......I.W.H.U.H...D$.......D$
00026060  0c 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f e9 95 06 fe ff                                      .H...[]A\A]A^A_.....

00026074    void cipher_is_valid(int32_t arg1) __noreturn

00026074  b80a000000         mov     eax, 0xa
00026079  83ff04             cmp     edi, 0x4
0002607c  771a               ja      0x26098

0002607e  4863ff             movsxd  rdi, edi
00026081  488d15d8100200     lea     rdx, [rel cipher_descriptor]
00026088  4869ffc0000000     imul    rdi, rdi, 0xc0
0002608f  48833c3a00         cmp     qword [rdx+rdi], 0x0
00026094  7402               je      0x26098

00026096  31c0               xor     eax, eax  {0x0}

00026098  e96c06feff         jmp     __x86_return_thunk
{ Does not return }


0002609d    void prng_is_valid(int32_t arg1) __noreturn

0002609d  b80c000000         mov     eax, 0xc
000260a2  83ff04             cmp     edi, 0x4
000260a5  7717               ja      0x260be

000260a7  4863ff             movsxd  rdi, edi
000260aa  488d156f140200     lea     rdx, [rel prng_descriptor]
000260b1  486bff50           imul    rdi, rdi, 0x50
000260b5  48833c3a00         cmp     qword [rdx+rdi], 0x0
000260ba  7402               je      0x260be

000260bc  31c0               xor     eax, eax  {0x0}

000260be  e94606feff         jmp     __x86_return_thunk
{ Does not return }

000260c3           66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00                                                     f............

000260d0    void mp_2expt(int32_t* arg1, int32_t arg2) __noreturn

000260d0  85f6               test    esi, esi
000260d2  787c               js      0x26150

000260d4  4155               push    r13 {var_8}
000260d6  4154               push    r12 {var_10}
000260d8  4189f4             mov     r12d, esi
000260db  55                 push    rbp {var_18}
000260dc  4889fd             mov     rbp, rdi
000260df  53                 push    rbx {var_20}
000260e0  4963dc             movsxd  rbx, r12d
000260e3  4869db89888888     imul    rbx, rbx, 0xffffffff88888889
000260ea  4883ec08           sub     rsp, 0x8
000260ee  e88d650000         call    mp_zero
000260f3  48c1eb20           shr     rbx, 0x20
000260f7  4489e0             mov     eax, r12d
000260fa  4889ef             mov     rdi, rbp
000260fd  4401e3             add     ebx, r12d
00026100  c1f81f             sar     eax, 0x1f
00026103  c1fb05             sar     ebx, 0x5
00026106  29c3               sub     ebx, eax
00026108  448d6b01           lea     r13d, [rbx+0x1]
0002610c  4489ee             mov     esi, r13d
0002610f  e8dc230000         call    mp_grow
{ Does not return }

00026114                                                              85 c0 75 20 6b d3 3c 44 89 e1 48 8b                      ..u k.<D..H.
00026120  75 10 41 b8 01 00 00 00 48 63 fb 44 89 6d 00 29 d1 49 d3 e0 4c 89 04 fe 48 83 c4 08 5b 5d 41 5c  u.A.....Hc.D.m.).I..L...H...[]A\
00026140  41 5d e9 c2 05 fe ff 66 0f 1f 84 00 00 00 00 00                                                  A].....f........

00026150  b8fdffffff         mov     eax, 0xfffffffd
00026155  e9af05feff         jmp     __x86_return_thunk
{ Does not return }

0002615a                                                                                66 0f 1f 44 00 00                            f..D..

00026160    void mp_add(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00026160  4156               push    r14 {__saved_r14}
00026162  4155               push    r13 {__saved_r13}
00026164  4154               push    r12 {__saved_r12}
00026166  4989d4             mov     r12, rdx
00026169  55                 push    rbp {__saved_rbp}
0002616a  4889f5             mov     rbp, rsi
0002616d  53                 push    rbx {__saved_rbx}
0002616e  448b6f08           mov     r13d, dword [rdi+0x8]
00026172  4889fb             mov     rbx, rdi
00026175  448b7608           mov     r14d, dword [rsi+0x8]
00026179  4539f5             cmp     r13d, r14d
0002617c  744a               je      0x261c8

0002617e  e83d070000         call    mp_cmp_mag
{ Does not return }

00026183           83 f8 ff 74 20 45 89 6c 24 08 4c 89 e2 48 89 ee 48 89 df 5b 5d 41 5c 41 5d 41 5e e9 5d     ...t E.l$.L..H..H..[]A\A]A^.]
000261a0  b7 00 00 0f 1f 44 00 00 45 89 74 24 08 4c 89 e2 48 89 de 48 89 ef 5b 5d 41 5c 41 5d 41 5e e9 3d  .....D..E.t$.L..H..H..[]A\A]A^.=
000261c0  b7 00 00 0f 1f 44 00 00                                                                          .....D..

000261c8  44896a08           mov     dword [rdx+0x8], r13d
000261cc  5b                 pop     rbx {__saved_rbx}
000261cd  5d                 pop     rbp {__saved_rbp}
000261ce  415c               pop     r12 {__saved_r12}
000261d0  415d               pop     r13 {__saved_r13}
000261d2  415e               pop     r14 {__saved_r14}
000261d4  e9d7640000         jmp     s_mp_add
{ Does not return }

000261d9                                                                             0f 1f 80 00 00 00 00                           .......

000261e0    void mp_add_d(int32_t* arg1, uint64_t arg2, int32_t* arg3) __noreturn

000261e0  4154               push    r12 {var_8}
000261e2  4989fc             mov     r12, rdi
000261e5  55                 push    rbp {var_10}
000261e6  53                 push    rbx {var_18}
000261e7  4889f3             mov     rbx, rsi
000261ea  4883ec30           sub     rsp, 0x30
000261ee  8b07               mov     eax, dword [rdi]
000261f0  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000261f9  48896c2428         mov     qword [rsp+0x28 {var_20}], rbp
000261fe  4889d5             mov     rbp, rdx
00026201  8d7001             lea     esi, [rax+0x1]
00026204  397204             cmp     dword [rdx+0x4], esi
00026207  0f8c63020000       jl      0x26470

0002620d  418b7c2408         mov     edi, dword [r12+0x8]
00026212  83ff01             cmp     edi, 0x1
00026215  0f8415020000       je      0x26430

0002621b  8b5500             mov     edx, dword [rbp]
0002621e  498b742410         mov     rsi, qword [r12+0x10]
00026223  488b4d10           mov     rcx, qword [rbp+0x10]
00026227  85ff               test    edi, edi
00026229  0f8519020000       jne     0x26448

0002622f  458b0c24           mov     r9d, dword [r12]
00026233  4585c9             test    r9d, r9d
00026236  0f8eb2020000       jle     0x264ee

0002623c  49bcffffffffffff…  mov     r12, 0xfffffffffffffff
00026246  4d63d1             movsxd  r10, r9d
00026249  31c0               xor     eax, eax  {0x0}
0002624b  49c1e203           shl     r10, 0x3
0002624f  4d8d42f8           lea     r8, [r10-0x8]
00026253  49c1e803           shr     r8, 0x3
00026257  4983c001           add     r8, 0x1
0002625b  4183e007           and     r8d, 0x7
0002625f  0f84b9000000       je      0x2631e

00026265  4983f801           cmp     r8, 0x1
00026269  0f8490000000       je      0x262ff

0002626f  4983f802           cmp     r8, 0x2
00026273  7474               je      0x262e9

00026275  4983f803           cmp     r8, 0x3
00026279  7458               je      0x262d3

0002627b  4983f804           cmp     r8, 0x4
0002627f  743c               je      0x262bd

00026281  4983f805           cmp     r8, 0x5
00026285  7420               je      0x262a7

00026287  4983f806           cmp     r8, 0x6
0002628b  0f8540020000       jne     0x264d1

00026291  48031c06           add     rbx, qword [rsi+rax]
00026295  4889df             mov     rdi, rbx
00026298  48c1eb3c           shr     rbx, 0x3c
0002629c  4c21e7             and     rdi, r12
0002629f  48893c01           mov     qword [rcx+rax], rdi
000262a3  4883c008           add     rax, 0x8

000262a7  48031c06           add     rbx, qword [rsi+rax]
000262ab  4989d8             mov     r8, rbx
000262ae  48c1eb3c           shr     rbx, 0x3c
000262b2  4d21e0             and     r8, r12
000262b5  4c890401           mov     qword [rcx+rax], r8
000262b9  4883c008           add     rax, 0x8

000262bd  48031c06           add     rbx, qword [rsi+rax]
000262c1  4989db             mov     r11, rbx
000262c4  48c1eb3c           shr     rbx, 0x3c
000262c8  4d21e3             and     r11, r12
000262cb  4c891c01           mov     qword [rcx+rax], r11
000262cf  4883c008           add     rax, 0x8

000262d3  48031c06           add     rbx, qword [rsi+rax]
000262d7  4889df             mov     rdi, rbx
000262da  48c1eb3c           shr     rbx, 0x3c
000262de  4c21e7             and     rdi, r12
000262e1  48893c01           mov     qword [rcx+rax], rdi
000262e5  4883c008           add     rax, 0x8

000262e9  48031c06           add     rbx, qword [rsi+rax]
000262ed  4989d8             mov     r8, rbx
000262f0  48c1eb3c           shr     rbx, 0x3c
000262f4  4d21e0             and     r8, r12
000262f7  4c890401           mov     qword [rcx+rax], r8
000262fb  4883c008           add     rax, 0x8

000262ff  48031c06           add     rbx, qword [rsi+rax]
00026303  4989db             mov     r11, rbx
00026306  48c1eb3c           shr     rbx, 0x3c
0002630a  4d21e3             and     r11, r12
0002630d  4c891c01           mov     qword [rcx+rax], r11
00026311  4883c008           add     rax, 0x8
00026315  4939c2             cmp     r10, rax
00026318  0f84ab000000       je      0x263c9

0002631e  48031c06           add     rbx, qword [rsi+rax]
00026322  4889df             mov     rdi, rbx
00026325  4c21e3             and     rbx, r12
00026328  48891c01           mov     qword [rcx+rax], rbx
0002632c  48c1ef3c           shr     rdi, 0x3c
00026330  48037c0608         add     rdi, qword [rsi+rax+0x8]
00026335  4889fb             mov     rbx, rdi
00026338  4c21e7             and     rdi, r12
0002633b  48897c0108         mov     qword [rcx+rax+0x8], rdi
00026340  48c1eb3c           shr     rbx, 0x3c
00026344  48035c0610         add     rbx, qword [rsi+rax+0x10]
00026349  4989d8             mov     r8, rbx
0002634c  4c21e3             and     rbx, r12
0002634f  48895c0110         mov     qword [rcx+rax+0x10], rbx
00026354  49c1e83c           shr     r8, 0x3c
00026358  4c03440618         add     r8, qword [rsi+rax+0x18]
0002635d  4d89c3             mov     r11, r8
00026360  4d21e0             and     r8, r12
00026363  4c89440118         mov     qword [rcx+rax+0x18], r8
00026368  49c1eb3c           shr     r11, 0x3c
0002636c  4c035c0620         add     r11, qword [rsi+rax+0x20]
00026371  4c89df             mov     rdi, r11
00026374  4d21e3             and     r11, r12
00026377  4c895c0120         mov     qword [rcx+rax+0x20], r11
0002637c  48c1ef3c           shr     rdi, 0x3c
00026380  48037c0628         add     rdi, qword [rsi+rax+0x28]
00026385  4889fb             mov     rbx, rdi
00026388  4c21e7             and     rdi, r12
0002638b  48897c0128         mov     qword [rcx+rax+0x28], rdi
00026390  48c1eb3c           shr     rbx, 0x3c
00026394  48035c0630         add     rbx, qword [rsi+rax+0x30]
00026399  4989d8             mov     r8, rbx
0002639c  4c21e3             and     rbx, r12
0002639f  48895c0130         mov     qword [rcx+rax+0x30], rbx
000263a4  49c1e83c           shr     r8, 0x3c
000263a8  4c03440638         add     r8, qword [rsi+rax+0x38]
000263ad  4c89c3             mov     rbx, r8
000263b0  4d21e0             and     r8, r12
000263b3  4c89440138         mov     qword [rcx+rax+0x38], r8
000263b8  4883c040           add     rax, 0x40
000263bc  48c1eb3c           shr     rbx, 0x3c
000263c0  4939c2             cmp     r10, rax
000263c3  0f8555ffffff       jne     0x2631e

000263c9  418d71ff           lea     esi, [r9-0x1]
000263cd  4183c101           add     r9d, 0x1
000263d1  488d4cf108         lea     rcx, [rcx+rsi*8+0x8]
000263d6  4589ca             mov     r10d, r9d

000263d9  488919             mov     qword [rcx], rbx
000263dc  488d7908           lea     rdi, [rcx+0x8]
000263e0  44894d00           mov     dword [rbp], r9d

000263e4  4429d2             sub     edx, r10d
000263e7  c7450800000000     mov     dword [rbp+0x8], 0x0
000263ee  85d2               test    edx, edx
000263f0  7e0e               jle     0x26400

000263f2  4863d2             movsxd  rdx, edx
000263f5  31f6               xor     esi, esi  {0x0}
000263f7  48c1e203           shl     rdx, 0x3
000263fb  e8f0eefdff         call    memset

00026400  4889ef             mov     rdi, rbp
00026403  e8a8010000         call    mp_clamp
{ Does not return }


00026408    void sub_26408(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

00026408  31c0               xor     eax, eax  {0x0}
0002640a  488b542428         mov     rdx, qword [rsp+0x28 {arg1}]
0002640f  64482b1425280000…  sub     rdx, qword [fs:0x28]
00026418  0f85df000000       jne     0x264fd

0002641e  4883c430           add     rsp, 0x30
00026422  5b                 pop     rbx {arg2}
00026423  5d                 pop     rbp {arg3}
00026424  415c               pop     r12 {arg4}
00026426  e9de02feff         jmp     __x86_return_thunk
{ Does not return }

0002642b                                   0f 1f 44 00 00                                                             ..D..

{ Continuation of function mp_add_d }

00026430  41833c2401         cmp     dword [r12], 0x1
00026435  7f51               jg      0x26488

00026437  498b742410         mov     rsi, qword [r12+0x10]
0002643c  48391e             cmp     qword [rsi], rbx
0002643f  7347               jae     0x26488

00026441  8b5500             mov     edx, dword [rbp]
00026444  488b4d10           mov     rcx, qword [rbp+0x10]

00026448  c7450001000000     mov     dword [rbp], 0x1
0002644f  41833c2401         cmp     dword [r12], 0x1
00026454  7503               jne     0x26459

00026456  482b1e             sub     rbx, qword [rsi]

00026459  488919             mov     qword [rcx], rbx
0002645c  488d7908           lea     rdi, [rcx+0x8]
00026460  41ba01000000       mov     r10d, 0x1
00026466  e979ffffff         jmp     0x263e4

0002646b                                   0f 1f 44 00 00                                                             ..D..

00026470  4889ef             mov     rdi, rbp
00026473  e878200000         call    mp_grow
{ Does not return }

00026478                                                                          85 c0 0f 84 8d fd ff ff                          ........
00026480  eb 88 66 0f 1f 44 00 00                                                                          ..f..D..

00026488  498b542410         mov     rdx, qword [r12+0x10]
0002648d  f3410f6f0424       movdqu  xmm0, xmmword [r12]
00026493  488d7c2410         lea     rdi, [rsp+0x10 {var_38}]
00026498  4889de             mov     rsi, rbx
0002649b  4889542420         mov     qword [rsp+0x20 {var_28}], rdx
000264a0  4889ea             mov     rdx, rbp
000264a3  0f29442410         movaps  xmmword [rsp+0x10 {var_38}], xmm0
000264a8  c744241800000000   mov     dword [rsp+0x18 {var_38+0x8}], 0x0
000264b0  e8bb570000         call    mp_sub_d
{ Does not return }

000264b5                                                                 c7 45 08 01 00 00 00 48 89 ef 89                       .E.....H...
000264c0  44 24 0c e8 e8 00 00 00 8b 44 24 0c e9 39 ff ff ff                                               D$.......D$..9...

000264d1  4c8b1e             mov     r11, qword [rsi]
000264d4  b808000000         mov     eax, 0x8
000264d9  4901db             add     r11, rbx
000264dc  4c89db             mov     rbx, r11
000264df  4d21e3             and     r11, r12
000264e2  4c8919             mov     qword [rcx], r11
000264e5  48c1eb3c           shr     rbx, 0x3c
000264e9  e9a3fdffff         jmp     0x26291

000264ee  41ba01000000       mov     r10d, 0x1
000264f4  4183c101           add     r9d, 0x1
000264f8  e9dcfeffff         jmp     0x263d9


{ Continuation of function sub_26408 }

000264fd  e80eedfdff         call    __stack_chk_fail
{ Does not return }

00026502        66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                                                    f...........@.

00026510    void mp_addmod() __noreturn

00026510  4157               push    r15 {var_8}
00026512  4156               push    r14 {var_10}
00026514  4155               push    r13 {var_18}
00026516  4989d5             mov     r13, rdx
00026519  4154               push    r12 {var_20}
0002651b  4989f4             mov     r12, rsi
0002651e  55                 push    rbp {var_28}
0002651f  4889fd             mov     rbp, rdi
00026522  53                 push    rbx {var_30}
00026523  4883ec28           sub     rsp, 0x28
00026527  644c8b3425280000…  mov     r14, qword [fs:0x28]
00026530  4c89742418         mov     qword [rsp+0x18 {var_40}], r14
00026535  4989ce             mov     r14, rcx
00026538  4889e7             mov     rdi, rsp {var_58}
0002653b  e830200000         call    mp_init
{ Does not return }

00026540  89 c3 85 c0 74 2a 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 75 4b 48 83 c4 28 89 d8 5b 5d 41 5c  ....t*H.D$.dH+.%(...uKH..(..[]A\
00026560  41 5d 41 5e 41 5f e9 9e 01 fe ff 0f 1f 44 00 00 48 89 e2 4c 89 e6 48 89 ef 49 89 e7 e8 df fb ff  A]A^A_.......D..H..L..H..I......
00026580  ff 89 c3 85 c0 75 10 4c 89 f2 4c 89 ee 48 89 e7 e8 cb 28 00 00 89 c3 4c 89 ff e8 81 01 00 00 eb  .....u.L..L..H....(....L........
000265a0  a5 e8 6a ec fd ff 66 2e 0f 1f 84 00 00 00 00 00                                                  ..j...f.........

000265b0    void mp_clamp(int32_t* arg1) __noreturn

000265b0  8b37               mov     esi, dword [rdi]
000265b2  85f6               test    esi, esi
000265b4  0f8e37010000       jle     0x266f1

000265ba  8d46ff             lea     eax, [rsi-0x1]
000265bd  488b5710           mov     rdx, qword [rdi+0x10]
000265c1  4863c8             movsxd  rcx, eax
000265c4  4189c1             mov     r9d, eax
000265c7  4c8d04ca           lea     r8, [rdx+rcx*8]
000265cb  4183e107           and     r9d, 0x7
000265cf  0f849e000000       je      0x26673

000265d5  49833800           cmp     qword [r8], 0x0
000265d9  0f851b010000       jne     0x266fa

000265df  8907               mov     dword [rdi], eax
000265e1  4983e808           sub     r8, 0x8
000265e5  8d46fe             lea     eax, [rsi-0x2]
000265e8  4183f901           cmp     r9d, 0x1
000265ec  0f8481000000       je      0x26673

000265f2  4183f902           cmp     r9d, 0x2
000265f6  7468               je      0x26660

000265f8  4183f903           cmp     r9d, 0x3
000265fc  744f               je      0x2664d

000265fe  4183f904           cmp     r9d, 0x4
00026602  7436               je      0x2663a

00026604  4183f905           cmp     r9d, 0x5
00026608  741d               je      0x26627

0002660a  4183f906           cmp     r9d, 0x6
0002660e  0f85ec000000       jne     0x26700

00026614  49833800           cmp     qword [r8], 0x0
00026618  0f85dc000000       jne     0x266fa

0002661e  8907               mov     dword [rdi], eax
00026620  4983e808           sub     r8, 0x8
00026624  83e801             sub     eax, 0x1

00026627  49833800           cmp     qword [r8], 0x0
0002662b  0f85c9000000       jne     0x266fa

00026631  8907               mov     dword [rdi], eax
00026633  4983e808           sub     r8, 0x8
00026637  83e801             sub     eax, 0x1

0002663a  49833800           cmp     qword [r8], 0x0
0002663e  0f85b6000000       jne     0x266fa

00026644  8907               mov     dword [rdi], eax
00026646  4983e808           sub     r8, 0x8
0002664a  83e801             sub     eax, 0x1

0002664d  49833800           cmp     qword [r8], 0x0
00026651  0f85a3000000       jne     0x266fa

00026657  8907               mov     dword [rdi], eax
00026659  4983e808           sub     r8, 0x8
0002665d  83e801             sub     eax, 0x1

00026660  49833800           cmp     qword [r8], 0x0
00026664  0f8590000000       jne     0x266fa

0002666a  8907               mov     dword [rdi], eax
0002666c  4983e808           sub     r8, 0x8
00026670  83e801             sub     eax, 0x1

00026673  49833800           cmp     qword [r8], 0x0
00026677  7573               jne     0x266ec

00026679  8907               mov     dword [rdi], eax
0002667b  85c0               test    eax, eax
0002667d  7474               je      0x266f3

0002667f  498378f800         cmp     qword [r8-0x8], 0x0
00026684  448d50ff           lea     r10d, [rax-0x1]
00026688  0f8586000000       jne     0x26714

0002668e  498378f000         cmp     qword [r8-0x10], 0x0
00026693  448917             mov     dword [rdi], r10d
00026696  448d58fe           lea     r11d, [rax-0x2]
0002669a  755e               jne     0x266fa

0002669c  498378e800         cmp     qword [r8-0x18], 0x0
000266a1  44891f             mov     dword [rdi], r11d
000266a4  8d70fd             lea     esi, [rax-0x3]
000266a7  7551               jne     0x266fa

000266a9  498378e000         cmp     qword [r8-0x20], 0x0
000266ae  8937               mov     dword [rdi], esi
000266b0  8d48fc             lea     ecx, [rax-0x4]
000266b3  7545               jne     0x266fa

000266b5  498378d800         cmp     qword [r8-0x28], 0x0
000266ba  890f               mov     dword [rdi], ecx
000266bc  8d50fb             lea     edx, [rax-0x5]
000266bf  7539               jne     0x266fa

000266c1  498378d000         cmp     qword [r8-0x30], 0x0
000266c6  8917               mov     dword [rdi], edx
000266c8  448d48fa           lea     r9d, [rax-0x6]
000266cc  752c               jne     0x266fa

000266ce  498378c800         cmp     qword [r8-0x38], 0x0
000266d3  44890f             mov     dword [rdi], r9d
000266d6  448d50f9           lea     r10d, [rax-0x7]
000266da  751e               jne     0x266fa

000266dc  4983e840           sub     r8, 0x40
000266e0  83e808             sub     eax, 0x8
000266e3  448917             mov     dword [rdi], r10d
000266e6  49833800           cmp     qword [r8], 0x0
000266ea  748d               je      0x26679

000266ec  e91800feff         jmp     __x86_return_thunk
{ Does not return }

000266f1  7507               jne     0x266fa

000266f3  c7470800000000     mov     dword [rdi+0x8], 0x0

000266fa  e90a00feff         jmp     __x86_return_thunk
{ Does not return }

000266ff                                                                                               90                                 .

00026700  49833800           cmp     qword [r8], 0x0
00026704  75f4               jne     0x266fa

00026706  8907               mov     dword [rdi], eax
00026708  4983e808           sub     r8, 0x8
0002670c  83e801             sub     eax, 0x1
0002670f  e900ffffff         jmp     0x26614

00026714  e9f0fffdff         jmp     __x86_return_thunk
{ Does not return }

00026719                                                                             0f 1f 80 00 00 00 00                           .......

00026720    void mp_clear(int64_t* arg1) __noreturn

00026720  55                 push    rbp {__saved_rbp}
00026721  53                 push    rbx {__saved_rbx}
00026722  4889fb             mov     rbx, rdi
00026725  4883ec08           sub     rsp, 0x8
00026729  488b7f10           mov     rdi, qword [rdi+0x10]
0002672d  4885ff             test    rdi, rdi
00026730  7435               je      0x26767

00026732  48636b04           movsxd  rbp, dword [rbx+0x4]
00026736  48c1e503           shl     rbp, 0x3
0002673a  740d               je      0x26749

0002673c  4889ea             mov     rdx, rbp
0002673f  31f6               xor     esi, esi  {0x0}
00026741  e8aaebfdff         call    memset
00026746  4889c7             mov     rdi, rax

00026749  4889ee             mov     rsi, rbp
0002674c  e8594ffeff         call    m_free_ltm
00026751  48c7431000000000   mov     qword [rbx+0x10], 0x0
00026759  48c70300000000     mov     qword [rbx], 0x0
00026760  c7430800000000     mov     dword [rbx+0x8], 0x0

00026767  4883c408           add     rsp, 0x8
0002676b  5b                 pop     rbx {__saved_rbx}
0002676c  5d                 pop     rbp {__saved_rbp}
0002676d  e997fffdff         jmp     __x86_return_thunk
{ Does not return }

00026772                                                        66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                    f...........@.

00026780    void mp_clear_multi(int64_t* arg1) __noreturn

00026780  53                 push    rbx {__saved_rbx}
00026781  4883ec50           sub     rsp, 0x50
00026785  4889542430         mov     qword [rsp+0x30 {var_28}], rdx
0002678a  488d542420         lea     rdx, [rsp+0x20 {var_38}]
0002678f  4889742428         mov     qword [rsp+0x28 {var_30}], rsi
00026794  48894c2438         mov     qword [rsp+0x38 {var_20}], rcx
00026799  4c89442440         mov     qword [rsp+0x40 {var_18}], r8
0002679e  4c894c2448         mov     qword [rsp+0x48 {var_10}], r9
000267a3  64488b0425280000…  mov     rax, qword [fs:0x28]
000267ac  4889442418         mov     qword [rsp+0x18 {var_40}], rax
000267b1  31c0               xor     eax, eax  {0x0}
000267b3  488d442460         lea     rax, [rsp+0x60 {arg_8}]
000267b8  c7042408000000     mov     dword [rsp {var_58}], 0x8
000267bf  4889442408         mov     qword [rsp+0x8 {var_50}], rax {arg_8}
000267c4  4889542410         mov     qword [rsp+0x10 {var_48}], rdx {var_38}
000267c9  4885ff             test    rdi, rdi
000267cc  7424               je      0x267f2

000267ce  bb08000000         mov     ebx, 0x8
000267d3  e848ffffff         call    mp_clear
{ Does not return }

000267d8                                                                          83 fb 2f 77 33 89 d9 48                          ../w3..H
000267e0  03 4c 24 10 83 c3 08 48 8b 39 89 1c 24 48 85 ff 75 e1                                            .L$....H.9..$H..u.

000267f2  488b442418         mov     rax, qword [rsp+0x18 {var_40}]
000267f7  64482b0425280000…  sub     rax, qword [fs:0x28]
00026800  752b               jne     0x2682d

00026802  4883c450           add     rsp, 0x50
00026806  5b                 pop     rbx {__saved_rbx}
00026807  e9fdfefdff         jmp     __x86_return_thunk
{ Does not return }

0002680c                                      0f 1f 40 00 48 8b 74 24 08 48 8d 7e 08 48 89 7c 24 08 48 8b              ..@.H.t$.H.~.H.|$.H.
00026820  3e 48 85 ff 74 cc e8 f5 fe ff ff eb e3                                                           >H..t........

0002682d  e8dee9fdff         call    __stack_chk_fail
{ Does not return }

00026832                                                        66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                    f...........@.

00026840    void mp_cmp(int32_t* arg1, int32_t* arg2) __noreturn

00026840  8b5708             mov     edx, dword [rdi+0x8]
00026843  4889f0             mov     rax, rsi
00026846  3b5608             cmp     edx, dword [rsi+0x8]
00026849  7415               je      0x26860

0002684b  83fa01             cmp     edx, 0x1
0002684e  742b               je      0x2687b

00026850  b801000000         mov     eax, 0x1
00026855  e9affefdff         jmp     __x86_return_thunk
{ Does not return }

0002685a                                                                                66 0f 1f 44 00 00                            f..D..

00026860  83fa01             cmp     edx, 0x1
00026863  740b               je      0x26870

00026865  e956000000         jmp     mp_cmp_mag
{ Does not return }

0002686a                                66 0f 1f 44 00 00                                                            f..D..

00026870  4889fe             mov     rsi, rdi
00026873  4889c7             mov     rdi, rax
00026876  e945000000         jmp     mp_cmp_mag
{ Does not return }

0002687b  b8ffffffff         mov     eax, 0xffffffff
00026880  e984fefdff         jmp     __x86_return_thunk
{ Does not return }

00026885                 66 2e 0f 1f 84 00 00 00 00 00 90                                                       f..........

00026890    void mp_cmp_d(void* arg1, int64_t arg2) __noreturn

00026890  837f0801           cmp     dword [rdi+0x8], 0x1
00026894  b8ffffffff         mov     eax, 0xffffffff
00026899  741b               je      0x268b6

0002689b  833f01             cmp     dword [rdi], 0x1
0002689e  b801000000         mov     eax, 0x1
000268a3  7f11               jg      0x268b6

000268a5  488b5710           mov     rdx, qword [rdi+0x10]
000268a9  488b0a             mov     rcx, qword [rdx]
000268ac  4839ce             cmp     rsi, rcx
000268af  7205               jb      0x268b6

000268b1  4839f1             cmp     rcx, rsi
000268b4  19c0               sbb     eax, eax

000268b6  e94efefdff         jmp     __x86_return_thunk
{ Does not return }

000268bb                                                                                   0f 1f 44 00 00                             ..D..

000268c0    void mp_cmp_mag(int32_t* arg1, int32_t* arg2) __noreturn

000268c0  486307             movsxd  rax, dword [rdi]
000268c3  41ba01000000       mov     r10d, 0x1
000268c9  3b06               cmp     eax, dword [rsi]
000268cb  0f8f2b020000       jg      0x26afc

000268d1  41baffffffff       mov     r10d, 0xffffffff
000268d7  0f8c1f020000       jl      0x26afc

000268dd  8d50ff             lea     edx, [rax-0x1]
000268e0  488b7f10           mov     rdi, qword [rdi+0x10]
000268e4  4c63d2             movsxd  r10, edx
000268e7  49c1e203           shl     r10, 0x3
000268eb  4c01d7             add     rdi, r10
000268ee  4c035610           add     r10, qword [rsi+0x10]
000268f2  85c0               test    eax, eax
000268f4  0f8eff010000       jle     0x26af9

000268fa  48f7d8             neg     rax
000268fd  488d34c500000000   lea     rsi, [rax*8]
00026905  31c0               xor     eax, eax  {0x0}
00026907  4889f1             mov     rcx, rsi
0002690a  48f7d9             neg     rcx
0002690d  4883e908           sub     rcx, 0x8
00026911  48c1e903           shr     rcx, 0x3
00026915  4883c101           add     rcx, 0x1
00026919  83e107             and     ecx, 0x7
0002691c  0f840c010000       je      0x26a2e

00026922  4883f901           cmp     rcx, 0x1
00026926  0f84db000000       je      0x26a07

0002692c  4883f902           cmp     rcx, 0x2
00026930  0f84b3000000       je      0x269e9

00026936  4883f903           cmp     rcx, 0x3
0002693a  0f848b000000       je      0x269cb

00026940  4883f904           cmp     rcx, 0x4
00026944  7467               je      0x269ad

00026946  4883f905           cmp     rcx, 0x5
0002694a  7443               je      0x2698f

0002694c  4883f906           cmp     rcx, 0x6
00026950  741f               je      0x26971

00026952  4c8b07             mov     r8, qword [rdi]
00026955  4d8b0a             mov     r9, qword [r10]
00026958  4d39c1             cmp     r9, r8
0002695b  0f82bf010000       jb      0x26b20

00026961  4d39c8             cmp     r8, r9
00026964  0f829e010000       jb      0x26b08

0002696a  48c7c0f8ffffff     mov     rax, 0xfffffffffffffff8

00026971  4c8b1c07           mov     r11, qword [rdi+rax]
00026975  498b1402           mov     rdx, qword [r10+rax]
00026979  4c39da             cmp     rdx, r11
0002697c  0f829e010000       jb      0x26b20

00026982  4939d3             cmp     r11, rdx
00026985  0f827d010000       jb      0x26b08

0002698b  4883e808           sub     rax, 0x8

0002698f  4c8b0407           mov     r8, qword [rdi+rax]
00026993  498b0c02           mov     rcx, qword [r10+rax]
00026997  4c39c1             cmp     rcx, r8
0002699a  0f8280010000       jb      0x26b20

000269a0  4939c8             cmp     r8, rcx
000269a3  0f825f010000       jb      0x26b08

000269a9  4883e808           sub     rax, 0x8

000269ad  4c8b0c07           mov     r9, qword [rdi+rax]
000269b1  4d8b1c02           mov     r11, qword [r10+rax]
000269b5  4d39cb             cmp     r11, r9
000269b8  0f8262010000       jb      0x26b20

000269be  4d39d9             cmp     r9, r11
000269c1  0f8241010000       jb      0x26b08

000269c7  4883e808           sub     rax, 0x8

000269cb  488b1407           mov     rdx, qword [rdi+rax]
000269cf  4d8b0402           mov     r8, qword [r10+rax]
000269d3  4939d0             cmp     r8, rdx
000269d6  0f8244010000       jb      0x26b20

000269dc  4c39c2             cmp     rdx, r8
000269df  0f8223010000       jb      0x26b08

000269e5  4883e808           sub     rax, 0x8

000269e9  4c8b0c07           mov     r9, qword [rdi+rax]
000269ed  498b0c02           mov     rcx, qword [r10+rax]
000269f1  4c39c9             cmp     rcx, r9
000269f4  0f8226010000       jb      0x26b20

000269fa  4939c9             cmp     r9, rcx
000269fd  0f8205010000       jb      0x26b08

00026a03  4883e808           sub     rax, 0x8

00026a07  4c8b1c07           mov     r11, qword [rdi+rax]
00026a0b  498b1402           mov     rdx, qword [r10+rax]
00026a0f  4c39da             cmp     rdx, r11
00026a12  0f8208010000       jb      0x26b20

00026a18  4939d3             cmp     r11, rdx
00026a1b  0f82e7000000       jb      0x26b08

00026a21  4883e808           sub     rax, 0x8
00026a25  4839c6             cmp     rsi, rax
00026a28  0f84cb000000       je      0x26af9

00026a2e  4c8b0407           mov     r8, qword [rdi+rax]
00026a32  4d8b0c02           mov     r9, qword [r10+rax]
00026a36  4d39c1             cmp     r9, r8
00026a39  0f82e1000000       jb      0x26b20

00026a3f  4d39c8             cmp     r8, r9
00026a42  0f82c0000000       jb      0x26b08

00026a48  4c8b5c07f8         mov     r11, qword [rdi+rax-0x8]
00026a4d  498b5402f8         mov     rdx, qword [r10+rax-0x8]
00026a52  488d48f8           lea     rcx, [rax-0x8]
00026a56  4c39da             cmp     rdx, r11
00026a59  0f82c1000000       jb      0x26b20

00026a5f  4939d3             cmp     r11, rdx
00026a62  0f82a0000000       jb      0x26b08

00026a68  4c8b4c07f0         mov     r9, qword [rdi+rax-0x10]
00026a6d  4d8b4402f0         mov     r8, qword [r10+rax-0x10]
00026a72  4d39c8             cmp     r8, r9
00026a75  0f82a5000000       jb      0x26b20

00026a7b  4d39c1             cmp     r9, r8
00026a7e  0f8284000000       jb      0x26b08

00026a84  4c8b5c07e8         mov     r11, qword [rdi+rax-0x18]
00026a89  498b5402e8         mov     rdx, qword [r10+rax-0x18]
00026a8e  4c39da             cmp     rdx, r11
00026a91  0f8289000000       jb      0x26b20

00026a97  4939d3             cmp     r11, rdx
00026a9a  726c               jb      0x26b08

00026a9c  4c8b4c07e0         mov     r9, qword [rdi+rax-0x20]
00026aa1  498b4402e0         mov     rax, qword [r10+rax-0x20]
00026aa6  4c39c8             cmp     rax, r9
00026aa9  7275               jb      0x26b20

00026aab  4939c1             cmp     r9, rax
00026aae  7258               jb      0x26b08

00026ab0  4c8b440fe0         mov     r8, qword [rdi+rcx-0x20]
00026ab5  4d8b5c0ae0         mov     r11, qword [r10+rcx-0x20]
00026aba  4d39c3             cmp     r11, r8
00026abd  7261               jb      0x26b20

00026abf  4d39d8             cmp     r8, r11
00026ac2  7244               jb      0x26b08

00026ac4  488b540fd8         mov     rdx, qword [rdi+rcx-0x28]
00026ac9  4d8b4c0ad8         mov     r9, qword [r10+rcx-0x28]
00026ace  4939d1             cmp     r9, rdx
00026ad1  724d               jb      0x26b20

00026ad3  4c39ca             cmp     rdx, r9
00026ad6  7230               jb      0x26b08

00026ad8  4c8b440fd0         mov     r8, qword [rdi+rcx-0x30]
00026add  498b440ad0         mov     rax, qword [r10+rcx-0x30]
00026ae2  4c39c0             cmp     rax, r8
00026ae5  7239               jb      0x26b20

00026ae7  4939c0             cmp     r8, rax
00026aea  721c               jb      0x26b08

00026aec  488d41c8           lea     rax, [rcx-0x38]
00026af0  4839c6             cmp     rsi, rax
00026af3  0f8535ffffff       jne     0x26a2e

00026af9  4531d2             xor     r10d, r10d  {0x0}

00026afc  4489d0             mov     eax, r10d
00026aff  e905fcfdff         jmp     __x86_return_thunk
{ Does not return }

00026b04              0f 1f 40 00                                                                              ..@.

00026b08  41baffffffff       mov     r10d, 0xffffffff
00026b0e  4489d0             mov     eax, r10d  {0xffffffff}
00026b11  e9f3fbfdff         jmp     __x86_return_thunk
{ Does not return }

00026b16                                                                    66 2e 0f 1f 84 00 00 00 00 00                        f.........

00026b20  41ba01000000       mov     r10d, 0x1
00026b26  4489d0             mov     eax, r10d  {0x1}
00026b29  e9dbfbfdff         jmp     __x86_return_thunk
{ Does not return }

00026b2e                                            66 2e 0f 1f 84 00 00 00 00 00 0f 1f 84 00 00 00 00 00                f.................

00026b40    void mp_cnt_lsb(int32_t* arg1) __noreturn

00026b40  8b17               mov     edx, dword [rdi]
00026b42  85d2               test    edx, edx
00026b44  0f8443010000       je      0x26c8d

00026b4a  4c8b4710           mov     r8, qword [rdi+0x10]
00026b4e  be00000000         mov     esi, 0x0
00026b53  4c89c1             mov     rcx, r8
00026b56  0f8e7f010000       jle     0x26cdb

00026b5c  89d0               mov     eax, edx
00026b5e  83e007             and     eax, 0x7
00026b61  0f84ad000000       je      0x26c14

00026b67  83f801             cmp     eax, 0x1
00026b6a  0f848d000000       je      0x26bfd

00026b70  83f802             cmp     eax, 0x2
00026b73  7475               je      0x26bea

00026b75  83f803             cmp     eax, 0x3
00026b78  745d               je      0x26bd7

00026b7a  83f804             cmp     eax, 0x4
00026b7d  7445               je      0x26bc4

00026b7f  83f805             cmp     eax, 0x5
00026b82  742d               je      0x26bb1

00026b84  83f806             cmp     eax, 0x6
00026b87  7415               je      0x26b9e

00026b89  4d8b08             mov     r9, qword [r8]
00026b8c  4d85c9             test    r9, r9
00026b8f  0f8503010000       jne     0x26c98

00026b95  be01000000         mov     esi, 0x1
00026b9a  498d4808           lea     rcx, [r8+0x8]

00026b9e  4c8b09             mov     r9, qword [rcx]
00026ba1  4d85c9             test    r9, r9
00026ba4  0f85ee000000       jne     0x26c98

00026baa  83c601             add     esi, 0x1
00026bad  4883c108           add     rcx, 0x8

00026bb1  4c8b09             mov     r9, qword [rcx]
00026bb4  4d85c9             test    r9, r9
00026bb7  0f85db000000       jne     0x26c98

00026bbd  83c601             add     esi, 0x1
00026bc0  4883c108           add     rcx, 0x8

00026bc4  4c8b09             mov     r9, qword [rcx]
00026bc7  4d85c9             test    r9, r9
00026bca  0f85c8000000       jne     0x26c98

00026bd0  83c601             add     esi, 0x1
00026bd3  4883c108           add     rcx, 0x8

00026bd7  4c8b09             mov     r9, qword [rcx]
00026bda  4d85c9             test    r9, r9
00026bdd  0f85b5000000       jne     0x26c98

00026be3  83c601             add     esi, 0x1
00026be6  4883c108           add     rcx, 0x8

00026bea  4c8b09             mov     r9, qword [rcx]
00026bed  4d85c9             test    r9, r9
00026bf0  0f85a2000000       jne     0x26c98

00026bf6  83c601             add     esi, 0x1
00026bf9  4883c108           add     rcx, 0x8

00026bfd  4c8b09             mov     r9, qword [rcx]
00026c00  4d85c9             test    r9, r9
00026c03  0f858f000000       jne     0x26c98

00026c09  83c601             add     esi, 0x1
00026c0c  4883c108           add     rcx, 0x8
00026c10  39f2               cmp     edx, esi
00026c12  7469               je      0x26c7d

00026c14  4c8b09             mov     r9, qword [rcx]
00026c17  4d85c9             test    r9, r9
00026c1a  757c               jne     0x26c98

00026c1c  4c8b4908           mov     r9, qword [rcx+0x8]
00026c20  8d7e01             lea     edi, [rsi+0x1]
00026c23  89fe               mov     esi, edi
00026c25  4d85c9             test    r9, r9
00026c28  756e               jne     0x26c98

00026c2a  4c8b4910           mov     r9, qword [rcx+0x10]
00026c2e  83c601             add     esi, 0x1
00026c31  4d85c9             test    r9, r9
00026c34  7562               jne     0x26c98

00026c36  4c8b4918           mov     r9, qword [rcx+0x18]
00026c3a  8d7702             lea     esi, [rdi+0x2]
00026c3d  4d85c9             test    r9, r9
00026c40  7556               jne     0x26c98

00026c42  4c8b4920           mov     r9, qword [rcx+0x20]
00026c46  8d7703             lea     esi, [rdi+0x3]
00026c49  4d85c9             test    r9, r9
00026c4c  754a               jne     0x26c98

00026c4e  4c8b4928           mov     r9, qword [rcx+0x28]
00026c52  8d7704             lea     esi, [rdi+0x4]
00026c55  4d85c9             test    r9, r9
00026c58  753e               jne     0x26c98

00026c5a  4c8b4930           mov     r9, qword [rcx+0x30]
00026c5e  8d7705             lea     esi, [rdi+0x5]
00026c61  4d85c9             test    r9, r9
00026c64  7532               jne     0x26c98

00026c66  4c8b4938           mov     r9, qword [rcx+0x38]
00026c6a  8d7706             lea     esi, [rdi+0x6]
00026c6d  4d85c9             test    r9, r9
00026c70  7526               jne     0x26c98

00026c72  8d7707             lea     esi, [rdi+0x7]
00026c75  4883c140           add     rcx, 0x40
00026c79  39f2               cmp     edx, esi
00026c7b  7597               jne     0x26c14

00026c7d  4c63d2             movsxd  r10, edx
00026c80  6bd23c             imul    edx, edx, 0x3c
00026c83  4f8b0cd0           mov     r9, qword [r8+r10*8]
00026c87  41f6c101           test    r9b, 0x1
00026c8b  7414               je      0x26ca1

00026c8d  89d0               mov     eax, edx
00026c8f  e975fafdff         jmp     __x86_return_thunk
{ Does not return }

00026c94                                                              0f 1f 40 00                                              ..@.

00026c98  6bd63c             imul    edx, esi, 0x3c

00026c9b  41f6c101           test    r9b, 0x1
00026c9f  75ec               jne     0x26c8d

00026ca1  4c8d1d582d0100     lea     r11, [rel lnz]
00026ca8  66662e0f1f840000…  nop     word [rax+rax]
00026cb3  66662e0f1f840000…  nop     word [rax+rax]
00026cbe  6690               nop     

00026cc0  4d89c8             mov     r8, r9
00026cc3  49c1e904           shr     r9, 0x4
00026cc7  4183e00f           and     r8d, 0xf
00026ccb  43031483           add     edx, dword [r11+r8*4]
00026ccf  4d85c0             test    r8, r8
00026cd2  74ec               je      0x26cc0

00026cd4  89d0               mov     eax, edx
00026cd6  e92efafdff         jmp     __x86_return_thunk
{ Does not return }

00026cdb  4d8b08             mov     r9, qword [r8]
00026cde  31d2               xor     edx, edx  {0x0}
00026ce0  ebb9               jmp     0x26c9b

00026ce2        66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                                                    f...........@.

00026cf0    void mp_copy(int32_t* arg1, int32_t* arg2) __noreturn

00026cf0  4839f7             cmp     rdi, rsi
00026cf3  0f84d7020000       je      0x26fd0

00026cf9  4154               push    r12 {__saved_r12}
00026cfb  4989fc             mov     r12, rdi
00026cfe  55                 push    rbp {__saved_rbp}
00026cff  53                 push    rbx {__saved_rbx}
00026d00  4889f3             mov     rbx, rsi
00026d03  8b2f               mov     ebp, dword [rdi]
00026d05  396e04             cmp     dword [rsi+0x4], ebp
00026d08  0f8c9a010000       jl      0x26ea8

00026d0e  498b542410         mov     rdx, qword [r12+0x10]
00026d13  488b7b10           mov     rdi, qword [rbx+0x10]
00026d17  85ed               test    ebp, ebp
00026d19  0f8ea1020000       jle     0x26fc0

00026d1f  448d45ff           lea     r8d, [rbp-0x1]
00026d23  4183f802           cmp     r8d, 0x2
00026d27  0f8693010000       jbe     0x26ec0

00026d2d  488d4a08           lea     rcx, [rdx+0x8]
00026d31  4839cf             cmp     rdi, rcx
00026d34  0f8486010000       je      0x26ec0

00026d3a  89ee               mov     esi, ebp
00026d3c  4531d2             xor     r10d, r10d  {0x0}
00026d3f  d1ee               shr     esi, 0x1
00026d41  48c1e604           shl     rsi, 0x4
00026d45  4c8d4ef0           lea     r9, [rsi-0x10]
00026d49  49c1e904           shr     r9, 0x4
00026d4d  4983c101           add     r9, 0x1
00026d51  4183e107           and     r9d, 0x7
00026d55  0f8490000000       je      0x26deb

00026d5b  4983f901           cmp     r9, 0x1
00026d5f  7476               je      0x26dd7

00026d61  4983f902           cmp     r9, 0x2
00026d65  7461               je      0x26dc8

00026d67  4983f903           cmp     r9, 0x3
00026d6b  744c               je      0x26db9

00026d6d  4983f904           cmp     r9, 0x4
00026d71  7437               je      0x26daa

00026d73  4983f905           cmp     r9, 0x5
00026d77  7422               je      0x26d9b

00026d79  4983f906           cmp     r9, 0x6
00026d7d  740d               je      0x26d8c

00026d7f  f30f6f02           movdqu  xmm0, xmmword [rdx]
00026d83  41ba10000000       mov     r10d, 0x10
00026d89  0f1107             movups  xmmword [rdi], xmm0

00026d8c  f3420f6f0c12       movdqu  xmm1, xmmword [rdx+r10]
00026d92  420f110c17         movups  xmmword [rdi+r10], xmm1
00026d97  4983c210           add     r10, 0x10

00026d9b  f3420f6f1412       movdqu  xmm2, xmmword [rdx+r10]
00026da1  420f111417         movups  xmmword [rdi+r10], xmm2
00026da6  4983c210           add     r10, 0x10

00026daa  f3420f6f1c12       movdqu  xmm3, xmmword [rdx+r10]
00026db0  420f111c17         movups  xmmword [rdi+r10], xmm3
00026db5  4983c210           add     r10, 0x10

00026db9  f3420f6f2412       movdqu  xmm4, xmmword [rdx+r10]
00026dbf  420f112417         movups  xmmword [rdi+r10], xmm4
00026dc4  4983c210           add     r10, 0x10

00026dc8  f3420f6f2c12       movdqu  xmm5, xmmword [rdx+r10]
00026dce  420f112c17         movups  xmmword [rdi+r10], xmm5
00026dd3  4983c210           add     r10, 0x10

00026dd7  f3420f6f3412       movdqu  xmm6, xmmword [rdx+r10]
00026ddd  420f113417         movups  xmmword [rdi+r10], xmm6
00026de2  4983c210           add     r10, 0x10
00026de6  4939f2             cmp     r10, rsi
00026de9  746f               je      0x26e5a

00026deb  f3420f6f3c12       movdqu  xmm7, xmmword [rdx+r10]
00026df1  420f113c17         movups  xmmword [rdi+r10], xmm7
00026df6  f3460f6f441210     movdqu  xmm8, xmmword [rdx+r10+0x10]
00026dfd  460f11441710       movups  xmmword [rdi+r10+0x10], xmm8
00026e03  f3460f6f4c1220     movdqu  xmm9, xmmword [rdx+r10+0x20]
00026e0a  460f114c1720       movups  xmmword [rdi+r10+0x20], xmm9
00026e10  f3460f6f541230     movdqu  xmm10, xmmword [rdx+r10+0x30]
00026e17  460f11541730       movups  xmmword [rdi+r10+0x30], xmm10
00026e1d  f3460f6f5c1240     movdqu  xmm11, xmmword [rdx+r10+0x40]
00026e24  460f115c1740       movups  xmmword [rdi+r10+0x40], xmm11
00026e2a  f3460f6f641250     movdqu  xmm12, xmmword [rdx+r10+0x50]
00026e31  460f11641750       movups  xmmword [rdi+r10+0x50], xmm12
00026e37  f3460f6f6c1260     movdqu  xmm13, xmmword [rdx+r10+0x60]
00026e3e  460f116c1760       movups  xmmword [rdi+r10+0x60], xmm13
00026e44  f3460f6f741270     movdqu  xmm14, xmmword [rdx+r10+0x70]
00026e4b  460f11741770       movups  xmmword [rdi+r10+0x70], xmm14
00026e51  4983ea80           sub     r10, 0xffffffffffffff80
00026e55  4939f2             cmp     r10, rsi
00026e58  7591               jne     0x26deb

00026e5a  4189eb             mov     r11d, ebp
00026e5d  4183e3fe           and     r11d, 0xfffffffe
00026e61  40f6c501           test    bpl, 0x1
00026e65  7408               je      0x26e6f

00026e67  4a8b14da           mov     rdx, qword [rdx+r11*8]
00026e6b  4a8914df           mov     qword [rdi+r11*8], rdx

00026e6f  4589c0             mov     r8d, r8d
00026e72  89e8               mov     eax, ebp
00026e74  4a8d7cc708         lea     rdi, [rdi+r8*8+0x8]

00026e79  8b13               mov     edx, dword [rbx]
00026e7b  29c2               sub     edx, eax
00026e7d  85d2               test    edx, edx
00026e7f  7e0e               jle     0x26e8f

00026e81  4863d2             movsxd  rdx, edx
00026e84  31f6               xor     esi, esi  {0x0}
00026e86  48c1e203           shl     rdx, 0x3
00026e8a  e861e4fdff         call    memset

00026e8f  418b7c2408         mov     edi, dword [r12+0x8]
00026e94  892b               mov     dword [rbx], ebp
00026e96  31c0               xor     eax, eax  {0x0}
00026e98  897b08             mov     dword [rbx+0x8], edi
00026e9b  5b                 pop     rbx {__saved_rbx}
00026e9c  5d                 pop     rbp {__saved_rbp}
00026e9d  415c               pop     r12 {__saved_r12}
00026e9f  e965f8fdff         jmp     __x86_return_thunk
{ Does not return }

00026ea4              0f 1f 40 00                                                                              ..@.

00026ea8  89ee               mov     esi, ebp
00026eaa  4889df             mov     rdi, rbx
00026ead  e83e160000         call    mp_grow
{ Does not return }

00026eb2                                                        85 c0 75 e5 41 8b 2c 24 e9 4f fe ff ff 90                    ..u.A.,$.O....

00026ec0  4863f5             movsxd  rsi, ebp
00026ec3  4531c9             xor     r9d, r9d  {0x0}
00026ec6  48c1e603           shl     rsi, 0x3
00026eca  488d4ef8           lea     rcx, [rsi-0x8]
00026ece  48c1e903           shr     rcx, 0x3
00026ed2  4883c101           add     rcx, 0x1
00026ed6  83e107             and     ecx, 0x7
00026ed9  0f8481000000       je      0x26f60

00026edf  4883f901           cmp     rcx, 0x1
00026ee3  7466               je      0x26f4b

00026ee5  4883f902           cmp     rcx, 0x2
00026ee9  7454               je      0x26f3f

00026eeb  4883f903           cmp     rcx, 0x3
00026eef  7442               je      0x26f33

00026ef1  4883f904           cmp     rcx, 0x4
00026ef5  7430               je      0x26f27

00026ef7  4883f905           cmp     rcx, 0x5
00026efb  741e               je      0x26f1b

00026efd  4883f906           cmp     rcx, 0x6
00026f01  740c               je      0x26f0f

00026f03  488b02             mov     rax, qword [rdx]
00026f06  41b908000000       mov     r9d, 0x8
00026f0c  488907             mov     qword [rdi], rax

00026f0f  4e8b140a           mov     r10, qword [rdx+r9]
00026f13  4e89140f           mov     qword [rdi+r9], r10
00026f17  4983c108           add     r9, 0x8

00026f1b  4e8b1c0a           mov     r11, qword [rdx+r9]
00026f1f  4e891c0f           mov     qword [rdi+r9], r11
00026f23  4983c108           add     r9, 0x8

00026f27  4a8b0c0a           mov     rcx, qword [rdx+r9]
00026f2b  4a890c0f           mov     qword [rdi+r9], rcx
00026f2f  4983c108           add     r9, 0x8

00026f33  4a8b040a           mov     rax, qword [rdx+r9]
00026f37  4a89040f           mov     qword [rdi+r9], rax
00026f3b  4983c108           add     r9, 0x8

00026f3f  4e8b140a           mov     r10, qword [rdx+r9]
00026f43  4e89140f           mov     qword [rdi+r9], r10
00026f47  4983c108           add     r9, 0x8

00026f4b  4e8b1c0a           mov     r11, qword [rdx+r9]
00026f4f  4e891c0f           mov     qword [rdi+r9], r11
00026f53  4983c108           add     r9, 0x8
00026f57  4c39ce             cmp     rsi, r9
00026f5a  0f840fffffff       je      0x26e6f

00026f60  4a8b0c0a           mov     rcx, qword [rdx+r9]
00026f64  4a890c0f           mov     qword [rdi+r9], rcx
00026f68  4a8b440a08         mov     rax, qword [rdx+r9+0x8]
00026f6d  4a89440f08         mov     qword [rdi+r9+0x8], rax
00026f72  4e8b540a10         mov     r10, qword [rdx+r9+0x10]
00026f77  4e89540f10         mov     qword [rdi+r9+0x10], r10
00026f7c  4e8b5c0a18         mov     r11, qword [rdx+r9+0x18]
00026f81  4e895c0f18         mov     qword [rdi+r9+0x18], r11
00026f86  4a8b4c0a20         mov     rcx, qword [rdx+r9+0x20]
00026f8b  4a894c0f20         mov     qword [rdi+r9+0x20], rcx
00026f90  4a8b440a28         mov     rax, qword [rdx+r9+0x28]
00026f95  4a89440f28         mov     qword [rdi+r9+0x28], rax
00026f9a  4e8b540a30         mov     r10, qword [rdx+r9+0x30]
00026f9f  4e89540f30         mov     qword [rdi+r9+0x30], r10
00026fa4  4e8b5c0a38         mov     r11, qword [rdx+r9+0x38]
00026fa9  4e895c0f38         mov     qword [rdi+r9+0x38], r11
00026fae  4983c140           add     r9, 0x40
00026fb2  4c39ce             cmp     rsi, r9
00026fb5  75a9               jne     0x26f60

00026fb7  e9b3feffff         jmp     0x26e6f

00026fbc                                                                                      0f 1f 40 00                              ..@.

00026fc0  31c0               xor     eax, eax  {0x0}
00026fc2  e9b2feffff         jmp     0x26e79

00026fc7                       66 0f 1f 84 00 00 00 00 00                                                         f........

00026fd0  31c0               xor     eax, eax  {0x0}
00026fd2  e932f7fdff         jmp     __x86_return_thunk
{ Does not return }

00026fd7                                                                       66 0f 1f 84 00 00 00 00 00                         f........

00026fe0    void mp_count_bits(int32_t* arg1) __noreturn

00026fe0  8b07               mov     eax, dword [rdi]
00026fe2  85c0               test    eax, eax
00026fe4  7424               je      0x2700a

00026fe6  8d50ff             lea     edx, [rax-0x1]
00026fe9  488b4f10           mov     rcx, qword [rdi+0x10]
00026fed  4863f2             movsxd  rsi, edx
00026ff0  6bc23c             imul    eax, edx, 0x3c
00026ff3  488b3cf1           mov     rdi, qword [rcx+rsi*8]
00026ff7  4885ff             test    rdi, rdi
00026ffa  740e               je      0x2700a

00026ffc  4c0fbdc7           bsr     r8, rdi
00027000  83c040             add     eax, 0x40
00027003  4983f03f           xor     r8, 0x3f
00027007  4429c0             sub     eax, r8d

0002700a  e9faf6fdff         jmp     __x86_return_thunk
{ Does not return }

0002700f                                               90                                                                 .

00027010    void mp_div(int32_t* arg1, int32_t* arg2) __noreturn

00027010  4157               push    r15 {__saved_r15}
00027012  4156               push    r14 {__saved_r14}
00027014  4155               push    r13 {__saved_r13}
00027016  4154               push    r12 {__saved_r12}
00027018  55                 push    rbp {__saved_rbp}
00027019  53                 push    rbx {__saved_rbx}
0002701a  4881ec28010000     sub     rsp, 0x128
00027021  448b0e             mov     r9d, dword [rsi]
00027024  64488b0425280000…  mov     rax, qword [fs:0x28]
0002702d  4889842418010000   mov     qword [rsp+0x118 {var_40}], rax
00027035  31c0               xor     eax, eax  {0x0}
00027037  4585c9             test    r9d, r9d
0002703a  0f84a0030000       je      0x273e0

00027040  4989fc             mov     r12, rdi
00027043  4889f3             mov     rbx, rsi
00027046  4989d5             mov     r13, rdx
00027049  4989cf             mov     r15, rcx
0002704c  e86ff8ffff         call    mp_cmp_mag
{ Does not return }

00027051                                                     83 f8 ff 0f 84 86 00 00 00 41 8b 04 24 4c 8d                   .........A..$L.
00027060  b4 24 80 00 00 00 4c 89 f7 8d 70 02 e8 df 18 00 00 89 c5 85 c0 74 39                             .$....L...p..........t9

00027077  488b842418010000   mov     rax, qword [rsp+0x118 {var_40}]
0002707f  64482b0425280000…  sub     rax, qword [fs:0x28]
00027088  0f85cb070000       jne     0x27859

0002708e  4881c428010000     add     rsp, 0x128
00027095  89e8               mov     eax, ebp  {0xfffffffd}
00027097  5b                 pop     rbx {__saved_rbx}
00027098  5d                 pop     rbp {__saved_rbp}
00027099  415c               pop     r12 {__saved_r12}
0002709b  415d               pop     r13 {__saved_r13}
0002709d  415e               pop     r14 {__saved_r14}
0002709f  415f               pop     r15 {__saved_r15}
000270a1  e963f6fdff         jmp     __x86_return_thunk
{ Does not return }

000270a6                    66 2e 0f 1f 84 00 00 00 00 00 41 8b 14 24 48 8d bc 24 e0 00 00 00 48 89 7c 24        f.........A..$H..$....H.|$
000270c0  08 83 c2 02 89 94 24 80 00 00 00 e8 a0 14 00 00 89 c5 85 c0 74 3a 4c 89 f7 e8 42 f6 ff ff eb 97  ......$.............t:L...B.....
000270e0  31 ed 4d 85 ff 74 0d 4c 89 fe 4c 89 e7 e8 fe fb ff ff 89 c5 4d 85 ed 0f 84 7a ff ff ff 4c 89 ef  1.M..t.L..L.........M....z...L..
00027100  e8 7b 55 00 00 e9 6d ff ff ff 66 0f 1f 44 00 00 48 8d bc 24 00 01 00 00 48 89 7c 24 10 e8 4e 14  .{U...m...f..D..H..$....H.|$..N.
00027120  00 00 89 c5 85 c0 75 25 48 8d bc 24 a0 00 00 00 4c 89 e6 48 89 7c 24 18 e8 73 14 00 00 89 c5 85  ......u%H..$....L..H.|$..s......
00027140  c0 74 25 48 8b 7c 24 10 e8 d3 f5 ff ff 48 8b 7c 24 08 e8 c9 f5 ff ff 4c 89 f7 e8 c1 f5 ff ff e9  .t%H.|$......H.|$......L........
00027160  13 ff ff ff 0f 1f 40 00 48 8d bc 24 c0 00 00 00 48 89 de 48 89 7c 24 20 e8 33 14 00 00 89 c5 85  ......@.H..$....H..H.|$ .3......
00027180  c0 0f 85 43 02 00 00 8b 73 08 41 8b 4c 24 08 c7 84 24 c8 00 00 00 00 00 00 00 c7 84 24 a8 00 00  ...C....s.A.L$...$..........$...
000271a0  00 00 00 00 00 48 8b 7c 24 20 89 4c 24 3c 89 74 24 50 e8 29 fe ff ff 4c 63 d0 41 89 c1 41 89 c0  .....H.|$ .L$<.t$P.)...Lc.A..A..
000271c0  4d 69 da 89 88 88 88 41 c1 f9 1f 49 c1 eb 20 41 01 c3 41 c1 fb 05 45 29 cb 41 6b db 3c 41 29 d8  Mi.....A...I.. A..A...E).Ak.<A).
000271e0  41 83 f8 3b 74 3c 48 8b 54 24 18 bb 3b 00 00 00 44 29 c3 89 de 48 89 d7 e8 83 27 00 00 89 c5 85  A..;t<H.T$..;...D)...H....'.....
00027200  c0 0f 85 b9 01 00 00 48 8b 54 24 20 89 de 48 89 d7 e8 6a 27 00 00 89 c5 85 c0 0f 85 a0 01 00 00  .......H.T$ ..H...j'............
00027220  89 dd 8b 84 24 a0 00 00 00 8b 94 24 c0 00 00 00 48 8b 7c 24 20 89 44 24 28 29 d0 48 63 d8 89 54  ....$......$....H.|$ .D$().Hc..T
00027240  24 38 89 de 89 5c 24 30 e8 03 19 00 00 85 c0 0f 85 6c 02 00 00 89 6c 24 40 48 c1 e3 03 48 8b 6c  $8...\$0.........l....l$@H...H.l
00027260  24 18 4c 89 64 24 48 4c 8b 64 24 20 eb 27 66 90 48 8b bc 24 90 00 00 00 48 89 ea 4c 89 e6 48 01  $.L.d$HL.d$ .'f.H..$....H..L..H.
00027280  df 48 83 07 01 48 89 ef e8 63 49 00 00 85 c0 0f 85 2c 02 00 00 4c 89 e6 48 89 ef e8 a0 f5 ff ff  .H...H...cI......,...L..H.......
000272a0  83 f8 ff 75 cb 8b 5c 24 28 8b 74 24 30 48 8b 7c 24 20 8b 6c 24 40 4c 8b 64 24 48 83 eb 01 e8 6d  ...u..\$(.t$0H.|$ .l$@L.d$H....m
000272c0  44 00 00 8b 84 24 a0 00 00 00 39 5c 24 38 7f 7f 8b 4c 24 38 89 6c 24 64 4c 89 6c 24 70 44 8d 59  D....$....9\$8...L$8.l$dL.l$pD.Y
000272e0  fe 8d 79 ff 4c 89 7c 24 78 4d 63 d3 48 63 f7 4c 89 74 24 40 4e 8d 0c d5 00 00 00 00 44 89 5c 24  ..y.L.|$xMc.Hc.L.t$@N.......D.\$
00027300  54 41 89 db 4c 8d 04 f5 00 00 00 00 4c 89 4c 24 30 48 8b 5c 24 08 4c 89 64 24 68 4d 89 c4 44 89  TA..L.......L.L$0H.\$.L.d$hM..D.
00027320  dd 45 89 df 41 83 eb 01 39 c5 0f 8e 98 01 00 00 44 39 5c 24 38 7e e7 8b 6c 24 64 4c 8b 64 24 68  .E..A...9.......D9\$8~..l$dL.d$h
00027340  4c 8b 6c 24 70 4c 8b 7c 24 78 4c 8b 74 24 40 85 c0 74 05 41 8b 44 24 08 89 84 24 a8 00 00 00 4d  L.l$pL.|$xL.t$@..t.A.D$...$....M
00027360  85 ed 74 24 4c 89 f7 e8 44 f2 ff ff 4c 89 ee 4c 89 f7 e8 09 0b 00 00 31 c9 8b 5c 24 50 39 5c 24  ..t$L...D...L..L.......1..\$P9\$
00027380  3c 0f 95 c1 41 89 4d 08 4d 85 ff 0f 84 cd 04 00 00 4c 8b 64 24 18 89 ee 31 c9 4c 89 e2 4c 89 e7  <...A.M.M........L.d$...1.L..L..
000273a0  e8 8b 07 00 00 89 c5 85 c0 75 15 4c 89 fe 4c 89 e7 e8 ca 0a 00 00 66 2e 0f 1f 84 00 00 00 00 00  .........u.L..L.......f.........
000273c0  48 8b 7c 24 20 e8 56 f3 ff ff 48 8b 7c 24 18 e8 4c f3 ff ff e9 6a fd ff ff 0f 1f 80 00 00 00 00  H.|$ .V...H.|$..L....j..........

000273e0  bdfdffffff         mov     ebp, 0xfffffffd
000273e5  e98dfcffff         jmp     0x27077


000273ea    void sub_273ea(int64_t arg1, int32_t arg2, int64_t arg3, int64_t arg4, int64_t* arg5, int32_t* arg6 @ rbx, int64_t arg7 @ rbp, int64_t arg8 @ r10, int64_t arg9 @ r12, int64_t* arg10, int64_t* arg11, int64_t* arg12) __noreturn

000273ea  85f6               test    esi, esi
000273ec  0f8812030000       js      0x27704

000273f2  44895c2428         mov     dword [rsp+0x28 {arg_28}], r11d
000273f7  4c89d0             mov     rax, r10
000273fa  eb5a               jmp     0x27456

000273fc                                                                                      0f 1f 40 00                              ..@.

00027400    void sub_27400(int32_t* arg1 @ rbx, int64_t arg2 @ r13, int64_t arg3 @ r14, int64_t arg4 @ r15, int32_t* arg5, int64_t* arg6, int64_t* arg7) __noreturn

00027400  488bbc24b0000000   mov     rdi, qword [rsp+0xb0 {arg6}]
00027408  4c8b842410010000   mov     r8, qword [rsp+0x110 {arg7}]
00027410  488b742410         mov     rsi, qword [rsp+0x10 {arg5}]
00027415  4a8b143f           mov     rdx, qword [rdi+r15]
00027419  498910             mov     qword [r8], rdx
0002741c  4e8b1437           mov     r10, qword [rdi+r14]
00027420  4d895008           mov     qword [r8+0x8], r10
00027424  4e8b0c2f           mov     r9, qword [rdi+r13]
00027428  4889df             mov     rdi, rbx
0002742b  c784240001000003…  mov     dword [rsp+0x100 {arg_100}], 0x3
00027436  4d894810           mov     qword [r8+0x10], r9
0002743a  e881f4ffff         call    mp_cmp_mag
{ Does not return }

0002743f                                                                                               4c                                 L
00027440  8b 84 24 90 00 00 00 89 c6 49 8b 04 28 83 fe 01 0f 85 74 03 00 00                                ..$......I..(.....t...

{ Continuation of function sub_273ea }

00027456  4883e801           sub     rax, 0x1
0002745a  4889df             mov     rdi, rbx
0002745d  49b9ffffffffffff…  mov     r9, 0xfffffffffffffff
00027467  4c21c8             and     rax, r9
0002746a  49890428           mov     qword [r8+rbp], rax
0002746e  e80d520000         call    mp_zero
00027473  488bb424d0000000   mov     rsi, qword [rsp+0xd0 {arg11}]
0002747b  4889da             mov     rdx, rbx
0002747e  4889df             mov     rdi, rbx
00027481  488b8424f0000000   mov     rax, qword [rsp+0xf0 {arg12}]
00027489  488b8c2490000000   mov     rcx, qword [rsp+0x90 {arg10}]
00027491  48c70000000000     mov     qword [rax], 0x0
00027498  4e8b1c26           mov     r11, qword [rsi+r12]
0002749c  c78424e000000002…  mov     dword [rsp+0xe0 {arg_e0}], 0x2
000274a7  4c895808           mov     qword [rax+0x8], r11
000274ab  488b3429           mov     rsi, qword [rcx+rbp]
000274af  e81c270000         call    mp_mul_d
{ Does not return }

000274b4                                                              85 c0 0f 84 44 ff ff ff 4c 8b 74 24                      ....D...L.t$
000274c0  40 89 c5 e9 f8 fe ff ff 44 8b 54 24 38 48 8b b4 24 b0 00 00 00 4c 63 f5 49 63 fb 48 8b 8c 24 d0  @.......D.T$8H..$....Lc.Ic.H..$.
000274e0  00 00 00 4c 8b 84 24 90 00 00 00 4e 8d 2c f5 00 00 00 00 44 29 d5 4a 8b 04 f6 45 31 d2 4c 8d 34  ...L..$....N.,.....D).J...E1.L.4
00027500  fd 00 00 00 00 89 6c 24 48 4a 8b 0c 21 48 63 ed 48 c1 e5 03 4d 8d 0c 28 48 39 c8 74 70 4c 8b 14  ......l$HJ..!Hc.H...M..(H9.tpL..
00027520  fe 4c 89 44 24 28 45 31 c0 31 f6 49 0f a4 c0 3c 48 c1 e0 3c 44 89 5c 24 60 49 89 cb 49 09 c2 4c  .L.D$(E1.1.I...<H..<D.\$`I..I..L
00027540  09 c6 31 c9 4c 89 da 4c 89 d7 4c 89 4c 24 58 e8 ac c1 00 00 44 8b 5c 24 60 4c 8b 44 24 28 49 ba  ..1.L..L..L.L$X.....D.\$`L.D$(I.
00027560  ff ff ff ff ff ff ff 0f 49 89 d1 31 d2 49 39 c2 4c 19 ca 4c 8b 4c 24 58 4c 0f 43 d0 48 b8 ff ff  ........I..1.I9.L..L.L$XL.C.H...
00027580  ff ff ff ff ff 0f 49 83 c2 01 49 21 c2 41 8d 77 fe 8b 4c 24 54 4d 89 11 4c 63 fe 89 74 24 28 49  ......I...I!.A.w..L$TM..Lc..t$(I
000275a0  c1 e7 03 85 c9 0f 88 3f fe ff ff 44 89 5c 24 58 eb 52 66 0f 1f 44 00 00 4f 8b 04 3b 48 8b bc 24  .......?...D.\$X.Rf..D..O..;H..$
000275c0  10 01 00 00 4c 89 07 4f 8b 14 33 48 8b 74 24 10 4c 89 57 08 4b 8b 14 2b 48 89 57 10 48 89 df c7  ....L..O..3H.t$.L.W.K..+H.W.H...
000275e0  84 24 00 01 00 00 03 00 00 00 e8 d1 f2 ff ff 4c 8b 84 24 90 00 00 00 4d 8b 14 28 83 f8 01 0f 85  .$.............L..$....M..(.....
00027600  93 00 00 00 48 bf ff ff ff ff ff ff ff 0f 4d 8d 5a ff 49 21 fb 48 89 df 4d 89 1c 28 e8 5f 50 00  ....H.........M.Z.I!.H..M..(._P.
00027620  00 4c 8b 84 24 d0 00 00 00 48 89 df 4c 8b 54 24 30 48 8b 84 24 f0 00 00 00 48 8b b4 24 90 00 00  .L..$....H..L.T$0H..$....H..$...
00027640  00 4b 8b 14 10 48 89 10 4f 8b 0c 20 48 89 da c7 84 24 e0 00 00 00 02 00 00 00 4c 89 48 08 48 8b  .K...H..O.. H....$........L.H.H.
00027660  34 2e e8 69 25 00 00 85 c0 0f 85 4d fe ff ff 8b 4c 24 28 4c 8b 9c 24 b0 00 00 00 85 c9 0f 89 35  4..i%......M....L$(L..$........5
00027680  ff ff ff 48 8b bc 24 10 01 00 00 48 c7 07 00 00 00 00 e9 30 ff ff ff 44 8b 6c 24 58 48 8b 7c 24  ...H..$....H.......0...D.l$XH.|$
000276a0  20 48 89 da 4c 89 d6 44 89 6c 24 28 e8 1f 25 00 00 85 c0 0f 85 03 fe ff ff 8b 74 24 48 48 89 df   H..L..D.l$(..%...........t$HH..
000276c0  e8 8b 14 00 00 85 c0 0f 85 ef fd ff ff 48 8b 54 24 18 48 89 de 48 89 d7 e8 13 45 00 00 85 c0 0f  .............H.T$.H..H....E.....
000276e0  85 d7 fd ff ff 83 bc 24 a8 00 00 00 01 44 8b 5c 24 28 0f 84 df 00 00 00 8b 84 24 a0 00 00 00 e9  .......$.....D.\$(........$.....
00027700  2c fc ff ff                                                                                      ,...

00027704  49bfffffffffffff…  mov     r15, 0xfffffffffffffff
0002770e  44895c2428         mov     dword [rsp+0x28 {arg_28}], r11d
00027713  eb54               jmp     0x27769

00027715                                                                 4c 8b 84 24 b0 00 00 00 4c 8b 94                       L..$....L..
00027720  24 10 01 00 00 48 89 df 49 c7 02 00 00 00 00 4f 8b 0c 30 4d 89 4a 08 4b 8b 34 28 c7 84 24 00 01  $....H..I......O..0M.J.K.4(..$..
00027740  00 00 03 00 00 00 49 89 72 10 48 8b 74 24 10 e8 6c f1 ff ff 4c 8b 84 24 90 00 00 00 4d 8b 14 28  ......I.r.H.t$..l...L..$....M..(
00027760  83 f8 01 0f 85 e6 00 00 00                                                                       .........

00027769  4983ea01           sub     r10, 0x1
0002776d  4889df             mov     rdi, rbx
00027770  4d21fa             and     r10, r15
00027773  4d891428           mov     qword [r8+rbp], r10
00027777  e8044f0000         call    mp_zero
0002777c  4c8b9c24d0000000   mov     r11, qword [rsp+0xd0 {arg11}]
00027784  488b8c24f0000000   mov     rcx, qword [rsp+0xf0 {arg12}]
0002778c  488b942490000000   mov     rdx, qword [rsp+0x90 {arg10}]
00027794  48c70100000000     mov     qword [rcx], 0x0
0002779b  4b8b3c23           mov     rdi, qword [r11+r12]
0002779f  c78424e000000002…  mov     dword [rsp+0xe0 {arg_e0}], 0x2
000277aa  48897908           mov     qword [rcx+0x8], rdi
000277ae  488b342a           mov     rsi, qword [rdx+rbp]
000277b2  4889df             mov     rdi, rbx
000277b5  4889da             mov     rdx, rbx
000277b8  e813240000         call    mp_mul_d
{ Does not return }

000277bd                                                                                         85 c0 0f                               ...
000277c0  84 50 ff ff ff e9 f2 fc ff ff 44 8b 6c 24 28 49 89 c2 e9 c5 fe ff ff 48 8b 7c 24 20 48 89 de 44  .P........D.l$(I.......H.|$ H..D
000277e0  89 5c 24 28 e8 07 f5 ff ff 85 c0 0f 85 cb fc ff ff 8b 74 24 48 48 89 df e8 53 13 00 00 85 c0 0f  .\$(..............t$HH...S......
00027800  85 b7 fc ff ff 48 8b 54 24 18 48 89 de 48 89 d7 e8 4b e9 ff ff 85 c0 0f 85 9f fc ff ff 48 03 ac  .....H.T$.H..H...K...........H..
00027820  24 90 00 00 00 8b 84 24 a0 00 00 00 49 bd ff ff ff ff ff ff ff 0f 4c 8b 75 00 44 8b 5c 24 28 49  $......$....I.........L.u.D.\$(I
00027840  83 ee 01 4d 21 ee 4c 89 75 00 e9 e1 fa ff ff 44 8b 6c 24 28 e9 43 fe ff ff                       ...M!.L.u......D.l$(.C...

{ Continuation of function mp_div }

00027859  e8b2d9fdff         call    __stack_chk_fail
{ Does not return }

0002785e                                                                                            31 ed                                1.
00027860  e9 5b fb ff ff 66 2e 0f 1f 84 00 00 00 00 00 90                                                  .[...f..........

00027870    void mp_div_2(int32_t* arg1, int32_t* arg2) __noreturn

00027870  4155               push    r13 {var_8}
00027872  4154               push    r12 {var_10}
00027874  55                 push    rbp {var_18}
00027875  4889fd             mov     rbp, rdi
00027878  53                 push    rbx {var_20}
00027879  4889f3             mov     rbx, rsi
0002787c  4883ec08           sub     rsp, 0x8
00027880  448b0f             mov     r9d, dword [rdi]
00027883  44394e04           cmp     dword [rsi+0x4], r9d
00027887  0f8c83020000       jl      0x27b10

0002788d  4d63d9             movsxd  r11, r9d
00027890  488b7510           mov     rsi, qword [rbp+0x10]
00027894  4c8b6310           mov     r12, qword [rbx+0x10]
00027898  4489c8             mov     eax, r9d
0002789b  49c1e303           shl     r11, 0x3
0002789f  448b03             mov     r8d, dword [rbx]
000278a2  44890b             mov     dword [rbx], r9d
000278a5  498d53f8           lea     rdx, [r11-0x8]
000278a9  4801d6             add     rsi, rdx
000278ac  4c01e2             add     rdx, r12
000278af  83e801             sub     eax, 0x1
000278b2  0f8811020000       js      0x27ac9

000278b8  4589ca             mov     r10d, r9d
000278bb  31c0               xor     eax, eax  {0x0}
000278bd  31ff               xor     edi, edi  {0x0}
000278bf  49f7da             neg     r10
000278c2  49c1e203           shl     r10, 0x3
000278c6  4c89d1             mov     rcx, r10
000278c9  48f7d9             neg     rcx
000278cc  4883e908           sub     rcx, 0x8
000278d0  48c1e903           shr     rcx, 0x3
000278d4  4883c101           add     rcx, 0x1
000278d8  83e107             and     ecx, 0x7
000278db  0f8409010000       je      0x279ea

000278e1  4883f901           cmp     rcx, 0x1
000278e5  0f84d7000000       je      0x279c2

000278eb  4883f902           cmp     rcx, 0x2
000278ef  0f84ae000000       je      0x279a3

000278f5  4883f903           cmp     rcx, 0x3
000278f9  0f8485000000       je      0x27984

000278ff  4883f904           cmp     rcx, 0x4
00027903  7460               je      0x27965

00027905  4883f905           cmp     rcx, 0x5
00027909  743b               je      0x27946

0002790b  4883f906           cmp     rcx, 0x6
0002790f  7416               je      0x27927

00027911  4c8b2e             mov     r13, qword [rsi]
00027914  48c7c0f8ffffff     mov     rax, 0xfffffffffffffff8
0002791b  4c89ef             mov     rdi, r13
0002791e  49d1ed             shr     r13, 0x1
00027921  4c892a             mov     qword [rdx], r13
00027924  83e701             and     edi, 0x1

00027927  488b0c06           mov     rcx, qword [rsi+rax]
0002792b  4989fd             mov     r13, rdi
0002792e  49c1e53b           shl     r13, 0x3b
00027932  4889cf             mov     rdi, rcx
00027935  48d1e9             shr     rcx, 0x1
00027938  4c09e9             or      rcx, r13
0002793b  83e701             and     edi, 0x1
0002793e  48890c02           mov     qword [rdx+rax], rcx
00027942  4883e808           sub     rax, 0x8

00027946  488b0c06           mov     rcx, qword [rsi+rax]
0002794a  4989fd             mov     r13, rdi
0002794d  49c1e53b           shl     r13, 0x3b
00027951  4889cf             mov     rdi, rcx
00027954  48d1e9             shr     rcx, 0x1
00027957  4c09e9             or      rcx, r13
0002795a  83e701             and     edi, 0x1
0002795d  48890c02           mov     qword [rdx+rax], rcx
00027961  4883e808           sub     rax, 0x8

00027965  488b0c06           mov     rcx, qword [rsi+rax]
00027969  4989fd             mov     r13, rdi
0002796c  49c1e53b           shl     r13, 0x3b
00027970  4889cf             mov     rdi, rcx
00027973  48d1e9             shr     rcx, 0x1
00027976  4c09e9             or      rcx, r13
00027979  83e701             and     edi, 0x1
0002797c  48890c02           mov     qword [rdx+rax], rcx
00027980  4883e808           sub     rax, 0x8

00027984  488b0c06           mov     rcx, qword [rsi+rax]
00027988  4989fd             mov     r13, rdi
0002798b  49c1e53b           shl     r13, 0x3b
0002798f  4889cf             mov     rdi, rcx
00027992  48d1e9             shr     rcx, 0x1
00027995  4c09e9             or      rcx, r13
00027998  83e701             and     edi, 0x1
0002799b  48890c02           mov     qword [rdx+rax], rcx
0002799f  4883e808           sub     rax, 0x8

000279a3  488b0c06           mov     rcx, qword [rsi+rax]
000279a7  4989fd             mov     r13, rdi
000279aa  49c1e53b           shl     r13, 0x3b
000279ae  4889cf             mov     rdi, rcx
000279b1  48d1e9             shr     rcx, 0x1
000279b4  4c09e9             or      rcx, r13
000279b7  83e701             and     edi, 0x1
000279ba  48890c02           mov     qword [rdx+rax], rcx
000279be  4883e808           sub     rax, 0x8

000279c2  488b0c06           mov     rcx, qword [rsi+rax]
000279c6  4989fd             mov     r13, rdi
000279c9  49c1e53b           shl     r13, 0x3b
000279cd  4889cf             mov     rdi, rcx
000279d0  48d1e9             shr     rcx, 0x1
000279d3  4c09e9             or      rcx, r13
000279d6  83e701             and     edi, 0x1
000279d9  48890c02           mov     qword [rdx+rax], rcx
000279dd  4883e808           sub     rax, 0x8
000279e1  4939c2             cmp     r10, rax
000279e4  0f84df000000       je      0x27ac9

000279ea  488b0c06           mov     rcx, qword [rsi+rax]
000279ee  48c1e73b           shl     rdi, 0x3b
000279f2  4989cd             mov     r13, rcx
000279f5  48d1e9             shr     rcx, 0x1
000279f8  4809f9             or      rcx, rdi
000279fb  4183e501           and     r13d, 0x1
000279ff  48890c02           mov     qword [rdx+rax], rcx
00027a03  488b4c06f8         mov     rcx, qword [rsi+rax-0x8]
00027a08  49c1e53b           shl     r13, 0x3b
00027a0c  4889cf             mov     rdi, rcx
00027a0f  48d1e9             shr     rcx, 0x1
00027a12  4c09e9             or      rcx, r13
00027a15  83e701             and     edi, 0x1
00027a18  48894c02f8         mov     qword [rdx+rax-0x8], rcx
00027a1d  488b4c06f0         mov     rcx, qword [rsi+rax-0x10]
00027a22  48c1e73b           shl     rdi, 0x3b
00027a26  4989cd             mov     r13, rcx
00027a29  48d1e9             shr     rcx, 0x1
00027a2c  4809f9             or      rcx, rdi
00027a2f  4183e501           and     r13d, 0x1
00027a33  48894c02f0         mov     qword [rdx+rax-0x10], rcx
00027a38  488b4c06e8         mov     rcx, qword [rsi+rax-0x18]
00027a3d  49c1e53b           shl     r13, 0x3b
00027a41  4889cf             mov     rdi, rcx
00027a44  48d1e9             shr     rcx, 0x1
00027a47  4c09e9             or      rcx, r13
00027a4a  83e701             and     edi, 0x1
00027a4d  48894c02e8         mov     qword [rdx+rax-0x18], rcx
00027a52  488b4c06e0         mov     rcx, qword [rsi+rax-0x20]
00027a57  48c1e73b           shl     rdi, 0x3b
00027a5b  4989cd             mov     r13, rcx
00027a5e  48d1e9             shr     rcx, 0x1
00027a61  4809f9             or      rcx, rdi
00027a64  4183e501           and     r13d, 0x1
00027a68  48894c02e0         mov     qword [rdx+rax-0x20], rcx
00027a6d  488b4c06d8         mov     rcx, qword [rsi+rax-0x28]
00027a72  49c1e53b           shl     r13, 0x3b
00027a76  4889cf             mov     rdi, rcx
00027a79  48d1e9             shr     rcx, 0x1
00027a7c  4c09e9             or      rcx, r13
00027a7f  83e701             and     edi, 0x1
00027a82  48894c02d8         mov     qword [rdx+rax-0x28], rcx
00027a87  488b4c06d0         mov     rcx, qword [rsi+rax-0x30]
00027a8c  48c1e73b           shl     rdi, 0x3b
00027a90  4989cd             mov     r13, rcx
00027a93  48d1e9             shr     rcx, 0x1
00027a96  4809f9             or      rcx, rdi
00027a99  4183e501           and     r13d, 0x1
00027a9d  48894c02d0         mov     qword [rdx+rax-0x30], rcx
00027aa2  488b4c06c8         mov     rcx, qword [rsi+rax-0x38]
00027aa7  49c1e53b           shl     r13, 0x3b
00027aab  4889cf             mov     rdi, rcx
00027aae  48d1e9             shr     rcx, 0x1
00027ab1  4c09e9             or      rcx, r13
00027ab4  83e701             and     edi, 0x1
00027ab7  48894c02c8         mov     qword [rdx+rax-0x38], rcx
00027abc  4883e840           sub     rax, 0x40
00027ac0  4939c2             cmp     r10, rax
00027ac3  0f8521ffffff       jne     0x279ea

00027ac9  4529c8             sub     r8d, r9d
00027acc  4b8d3c1c           lea     rdi, [r12+r11]
00027ad0  4585c0             test    r8d, r8d
00027ad3  7e12               jle     0x27ae7

00027ad5  4d63c8             movsxd  r9, r8d
00027ad8  31f6               xor     esi, esi  {0x0}
00027ada  4a8d14cd00000000   lea     rdx, [r9*8]
00027ae2  e809d8fdff         call    memset

00027ae7  8b6d08             mov     ebp, dword [rbp+0x8]
00027aea  4889df             mov     rdi, rbx
00027aed  896b08             mov     dword [rbx+0x8], ebp
00027af0  e8bbeaffff         call    mp_clamp
{ Does not return }


00027af5    void sub_27af5(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

00027af5  31c0               xor     eax, eax  {0x0}
00027af7  4883c408           add     rsp, 0x8
00027afb  5b                 pop     rbx {arg1}
00027afc  5d                 pop     rbp {arg2}
00027afd  415c               pop     r12 {arg3}
00027aff  415d               pop     r13 {arg4}
00027b01  e903ecfdff         jmp     __x86_return_thunk
{ Does not return }

00027b06                    66 2e 0f 1f 84 00 00 00 00 00                                                        f.........

{ Continuation of function mp_div_2 }

00027b10  4489ce             mov     esi, r9d
00027b13  4889df             mov     rdi, rbx
00027b16  e8d5090000         call    mp_grow
{ Does not return }

00027b1b                                                                                   85 c0 75 d8 44                             ..u.D
00027b20  8b 4d 00 e9 65 fd ff ff 0f 1f 84 00 00 00 00 00                                                  .M..e...........

00027b30    void mp_div_2d(int32_t* arg1, int32_t arg2, int32_t* arg3) __noreturn

00027b30  4156               push    r14 {var_8}
00027b32  4989ce             mov     r14, rcx
00027b35  4155               push    r13 {var_10}
00027b37  4154               push    r12 {var_18}
00027b39  4989d4             mov     r12, rdx
00027b3c  55                 push    rbp {var_20}
00027b3d  4889fd             mov     rbp, rdi
00027b40  53                 push    rbx {var_28}
00027b41  85f6               test    esi, esi
00027b43  0f8ed7020000       jle     0x27e20

00027b49  89f3               mov     ebx, esi
00027b4b  4889d6             mov     rsi, rdx
00027b4e  e89df1ffff         call    mp_copy
{ Does not return }

00027b53                                                           41 89 c5 85 c0 0f 85 aa 02 00 00 4d 85                     A..........M.
00027b60  f6 74 15 4c 89 f2 89 de 48 89 ef e8 b0 13 00 00 85 c0 0f 85 d8 02 00 00 48 63 eb 83 fb 3b 0f 8f  .t.L....H...............Hc...;..
00027b80  d4 02 00 00 48 69 cd 89 88 88 88 89 da c1 fa 1f 48 c1 e9 20 01 d9 c1 f9 05 29 d1 6b f1 3c 29 f3  ....Hi..........H.. .....).k.<).
00027ba0  0f 84 5a 02 00 00 45 8b 04 24 4d 8b 5c 24 10 48 63 fb ba 3c 00 00 00 48 29 fa 45 8d 48 ff 4d 63  ..Z...E..$M.\$.Hc..<...H).E.H.Mc
00027bc0  d1 4f 8d 34 d3 45 85 c9 0f 88 32 02 00 00 49 f7 d8 4c 89 f6 48 c7 c5 ff ff ff ff 89 d9 4b 8d 04  .O.4.E....2...I..L..H........K..
00027be0  c6 48 d3 e5 31 ff 48 29 c6 48 f7 d5 48 83 ee 08 48 c1 ee 03 48 83 c6 01 83 e6 07 0f 84 13 01 00  .H..1.H).H..H...H...H...........
00027c00  00 48 83 fe 01 0f 84 df 00 00 00 48 83 fe 02 0f 84 b4 00 00 00 48 83 fe 03 0f 84 89 00 00 00 48  .H.........H.........H.........H
00027c20  83 fe 04 74 62 48 83 fe 05 74 3b 48 83 fe 06 74 14 4d 8b 06 49 83 ee 08 4c 89 c7 49 d3 e8 4d 89  ...tbH...t;H...t.M..I...L..I..M.
00027c40  46 08 48 21 ef 4d 8b 0e 89 d9 49 89 fa 49 83 ee 08 4c 89 cf 49 d3 e9 89 d1 49 d3 e2 48 21 ef 4d  F.H!.M....I..I...L..I....I..H!.M
00027c60  09 d1 4d 89 4e 08 4d 8b 1e 89 d9 48 89 fe 49 83 ee 08 4c 89 df 49 d3 eb 89 d1 48 d3 e6 48 21 ef  ..M.N.M....H..I...L..I....H..H!.
00027c80  49 09 f3 4d 89 5e 08 4d 8b 06 89 d9 49 89 f9 49 83 ee 08 4c 89 c7 49 d3 e8 89 d1 49 d3 e1 48 21  I..M.^.M....I..I...L..I....I..H!
00027ca0  ef 4d 09 c8 4d 89 46 08 4d 8b 1e 89 d9 49 89 fa 49 83 ee 08 4c 89 df 49 d3 eb 89 d1 49 d3 e2 48  .M..M.F.M....I..I...L..I....I..H
00027cc0  21 ef 4d 09 d3 4d 89 5e 08 49 8b 36 89 d9 49 89 f8 49 83 ee 08 48 89 f7 48 d3 ee 89 d1 49 d3 e0  !.M..M.^.I.6..I..I...H..H....I..
00027ce0  48 21 ef 4c 09 c6 49 89 76 08 4d 8b 0e 89 d9 49 89 fb 49 83 ee 08 4c 89 cf 49 d3 e9 89 d1 49 d3  H!.L..I.v.M....I..I...L..I....I.
00027d00  e3 48 21 ef 4d 09 d9 4d 89 4e 08 49 39 c6 0f 84 ec 00 00 00 49 8b 36 89 d9 4d 8b 4e f8 4d 8b 5e  .H!.M..M.N.I9.......I.6..M.N.M.^
00027d20  f0 49 89 f2 48 d3 ee 89 d1 4d 89 c8 48 d3 e7 89 d9 49 21 ea 49 21 e8 49 d3 e9 89 d1 48 09 fe 49  .I..H....M..H....I!.I!.I....H..I
00027d40  8b 7e e8 49 d3 e2 89 d9 49 89 36 4c 89 de 49 d3 eb 89 d1 4d 09 d1 48 21 ee 49 d3 e0 89 d9 4d 89  .~.I....I.6L..I....M..H!.I....M.
00027d60  4e f8 49 89 f9 4d 09 c3 48 d3 ef 4d 8b 46 e0 89 d1 48 d3 e6 89 d9 4d 89 5e f0 49 21 e9 4d 8b 5e  N.I..M..H..M.F...H....M.^.I!.M.^
00027d80  d8 4d 89 c2 49 d3 e8 89 d1 48 09 f7 49 d3 e1 89 d9 49 21 ea 49 89 7e e8 4c 89 de 49 8b 7e d0 49  .M..I....H..I....I!.I.~.L..I.~.I
00027da0  d3 eb 89 d1 4d 09 c8 48 21 ee 49 d3 e2 89 d9 49 89 f9 4d 89 46 e0 48 d3 ef 89 d1 4d 8b 46 c8 49  ....M..H!.I....I..M.F.H....M.F.I
00027dc0  21 e9 48 d3 e6 89 d9 4d 09 d3 48 09 f7 4d 89 5e d8 49 89 7e d0 4c 89 c7 49 d3 e8 89 d1 49 d3 e1  !.H....M..H..M.^.I.~.L..I....I..
00027de0  48 21 ef 4d 09 c8 49 83 ee 40 4d 89 46 08 49 39 c6 0f 85 1d ff ff ff 66 0f 1f 84 00 00 00 00 00  H!.M..I..@M.F.I9.......f........
00027e00  4c 89 e7 e8 a8 e7 ff ff 5b 44 89 e8 5d 41 5c 41 5d 41 5e e9 f1 e8 fd ff 0f 1f 84 00 00 00 00 00  L.......[D..]A\A]A^.............

00027e20  4889d6             mov     rsi, rdx
00027e23  e8c8eeffff         call    mp_copy
{ Does not return }

00027e28                          41 89 c5 4d 85 f6 74 d8 4c 89 f7 e8 48 48 00 00 5b 44 89 e8 5d 41 5c 41          A..M..t.L...HH..[D..]A\A
00027e40  5d 41 5e e9 c1 e8 fd ff 0f 1f 84 00 00 00 00 00 41 89 c5 eb b3 0f 1f 00 48 69 f5 89 88 88 88 89  ]A^.............A.......Hi......
00027e60  d8 4c 89 e7 c1 f8 1f 48 c1 ee 20 01 de c1 fe 05 29 c6 e8 b9 38 00 00 e9 08 fd ff ff 0f 1f 40 00  .L.....H.. .....)...8.........@.

00027e80    void mp_exch(int64_t* arg1, int128_t* arg2) __noreturn

00027e80  f30f6f06           movdqu  xmm0, xmmword [rsi]
00027e84  488b0f             mov     rcx, qword [rdi]
00027e87  8b5708             mov     edx, dword [rdi+0x8]
00027e8a  488b4710           mov     rax, qword [rdi+0x10]
00027e8e  0f1107             movups  xmmword [rdi], xmm0
00027e91  4c8b4610           mov     r8, qword [rsi+0x10]
00027e95  4c894710           mov     qword [rdi+0x10], r8
00027e99  48890e             mov     qword [rsi], rcx
00027e9c  895608             mov     dword [rsi+0x8], edx
00027e9f  48894610           mov     qword [rsi+0x10], rax
00027ea3  e961e8fdff         jmp     __x86_return_thunk
{ Does not return }

00027ea8                          0f 1f 84 00 00 00 00 00                                                          ........

00027eb0    void mp_exptmod(int64_t arg1, int64_t arg2, int32_t* arg3) __noreturn

00027eb0  4157               push    r15 {__saved_r15}
00027eb2  4156               push    r14 {__saved_r14}
00027eb4  4155               push    r13 {__saved_r13}
00027eb6  4154               push    r12 {__saved_r12}
00027eb8  55                 push    rbp {__saved_rbp}
00027eb9  53                 push    rbx {__saved_rbx}
00027eba  4883ec58           sub     rsp, 0x58
00027ebe  64488b0425280000…  mov     rax, qword [fs:0x28]
00027ec7  4889442448         mov     qword [rsp+0x48 {var_40}], rax
00027ecc  31c0               xor     eax, eax  {0x0}
00027ece  837a0801           cmp     dword [rdx+0x8], 0x1
00027ed2  0f84a5010000       je      0x2807d

00027ed8  837e0801           cmp     dword [rsi+0x8], 0x1
00027edc  4989fc             mov     r12, rdi
00027edf  4889f5             mov     rbp, rsi
00027ee2  4889d3             mov     rbx, rdx
00027ee5  4989cd             mov     r13, rcx
00027ee8  0f84ba000000       je      0x27fa8

00027eee  4889d7             mov     rdi, rdx
00027ef1  e86a350000         call    mp_reduce_is_2k_l
{ Does not return }

00027ef6                                                                    83 f8 01 0f 84 01 01 00 00 48                        .........H
00027f00  89 df e8 39 a2 00 00 41 89 c0 83 f8 01 75 39 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 0f 85 64  ...9...A.....u9H.D$HdH+.%(.....d
00027f20  01 00 00 48 83 c4 58 4c 89 e9 48 89 da 48 89 ee 5b 4c 89 e7 5d 41 5c 41 5d 41 5e 41 5f e9 de 64  ...H..XL..H..H..[L..]A\A]A^A_..d
00027f40  00 00 66 0f 1f 44 00 00 48 89 df e8 a0 33 00 00 83 f8 01 0f 84 97 00 00 00 8b 03 85 c0 7e 0c 48  ..f..D..H....3...............~.H
00027f60  8b 53 10 45 31 c0 f6 02 01 75 a4 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 0f 85 08 01 00 00 45  .S.E1....u.H.D$HdH+.%(.........E
00027f80  31 c0 48 83 c4 58 4c 89 e9 48 89 da 48 89 ee 5b 4c 89 e7 5d 41 5c 41 5d 41 5e 41 5f e9 6f 51 00  1.H..XL..H..H..[L..]A\A]A^A_.oQ.
00027fa0  00 0f 1f 80 00 00 00 00                                                                          ........

00027fa8  4c8d7c2430         lea     r15, [rsp+0x30 {var_58}]
00027fad  4c8d742410         lea     r14, [rsp+0x10 {var_78}]
00027fb2  31d2               xor     edx, edx  {0x0}
00027fb4  4c89fe             mov     rsi, r15 {var_58}
00027fb7  4c89f7             mov     rdi, r14 {var_78}
00027fba  e851060000         call    mp_init_multi
{ Does not return }

00027fbf                                                                                               89                                 .
00027fc0  c6 85 c0 74 5b                                                                                   ...t[

00027fc5  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00027fca  64482b0425280000…  sub     rax, qword [fs:0x28]
00027fd3  0f85ae000000       jne     0x28087

00027fd9  4883c458           add     rsp, 0x58
00027fdd  89f0               mov     eax, esi  {0xfffffffd}
00027fdf  5b                 pop     rbx {__saved_rbx}
00027fe0  5d                 pop     rbp {__saved_rbp}
00027fe1  415c               pop     r12 {__saved_r12}
00027fe3  415d               pop     r13 {__saved_r13}
00027fe5  415e               pop     r14 {__saved_r14}
00027fe7  415f               pop     r15 {__saved_r15}
00027fe9  e91be7fdff         jmp     __x86_return_thunk
{ Does not return }

00027fee                                            66 90 41 b8 02 00 00 00 e9 14 ff ff ff 0f 1f 44 00 00                f.A............D..
00028000  48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 75 77 41 b8 01 00 00 00 e9 67 ff ff ff 0f 1f 44 00 00  H.D$HdH+.%(...uwA......g.....D..
00028020  4c 89 f2 48 89 de 4c 89 e7 e8 92 09 00 00 89 c1 85 c0 75 11 4c 89 fe 48 89 ef e8 71 9d 00 00 89  L..H..L...........u.L..H...q....
00028040  c1 85 c0 74 23 4c 89 fe 31 d2 4c 89 f7 31 c0 89 4c 24 0c e8 28 e7 ff ff 8b 74 24 0c e9 64 ff ff  ...t#L..1.L..1..L$..(....t$..d..
00028060  ff 0f 1f 80 00 00 00 00 4c 89 e9 48 89 da 4c 89 fe 4c 89 f7 e8 37 fe ff ff 89 c1 eb c8           ........L..H..L..L...7.......

0002807d  befdffffff         mov     esi, 0xfffffffd
00028082  e93effffff         jmp     0x27fc5

00028087  e884d1fdff         call    __stack_chk_fail
{ Does not return }

0002808c                                      0f 1f 40 00                                                              ..@.

00028090    void mp_from_ubin(int32_t* arg1, int32_t arg2, int64_t arg3) __noreturn

00028090  4155               push    r13 {var_8}
00028092  4989d5             mov     r13, rdx
00028095  4154               push    r12 {var_10}
00028097  55                 push    rbp {var_18}
00028098  4889f5             mov     rbp, rsi
0002809b  53                 push    rbx {var_20}
0002809c  4889fb             mov     rbx, rdi
0002809f  4883ec08           sub     rsp, 0x8
000280a3  837f0401           cmp     dword [rdi+0x4], 0x1
000280a7  0f8e63010000       jle     0x28210

000280ad  4889df             mov     rdi, rbx
000280b0  4e8d642d00         lea     r12, [rbp+r13]
000280b5  e8c6450000         call    mp_zero
000280ba  4d85ed             test    r13, r13
000280bd  0f842d010000       je      0x281f0

000280c3  4c89e0             mov     rax, r12
000280c6  4829e8             sub     rax, rbp
000280c9  83e003             and     eax, 0x3
000280cc  0f8494000000       je      0x28166

000280d2  4883f801           cmp     rax, 0x1
000280d6  745a               je      0x28132

000280d8  4883f802           cmp     rax, 0x2
000280dc  742a               je      0x28108

000280de  4889da             mov     rdx, rbx
000280e1  be08000000         mov     esi, 0x8
000280e6  4889df             mov     rdi, rbx
000280e9  e892180000         call    mp_mul_2d
{ Does not return }

000280ee                                            85 c0 0f 85 04 01 00 00 48 8b 4b 10 0f b6 55 00 48 83                ........H.K...U.H.
00028100  c5 01 48 09 11 83 03 01                                                                          ..H.....

00028108  4889da             mov     rdx, rbx
0002810b  be08000000         mov     esi, 0x8
00028110  4889df             mov     rdi, rbx
00028113  e868180000         call    mp_mul_2d
{ Does not return }

00028118                                                                          85 c0 0f 85 da 00 00 00                          ........
00028120  48 8b 73 10 0f b6 7d 00 48 83 c5 01 48 09 3e 83 03 01                                            H.s...}.H...H.>...

00028132  4889da             mov     rdx, rbx
00028135  be08000000         mov     esi, 0x8
0002813a  4889df             mov     rdi, rbx
0002813d  e83e180000         call    mp_mul_2d
{ Does not return }

00028142        85 c0 0f 85 b0 00 00 00 48 83 c5 01 4c 8b 43 10 44 0f b6 4d ff 4d 09 08 83 03 01 49 39 ec    ........H...L.C.D..M.M.....I9.
00028160  0f 84 8a 00 00 00                                                                                ......

00028166  4889da             mov     rdx, rbx
00028169  be08000000         mov     esi, 0x8
0002816e  4889df             mov     rdi, rbx
00028171  e80a180000         call    mp_mul_2d
{ Does not return }

00028176                                                                    85 c0 0f 85 7c 00 00 00 4c 8b                        ....|...L.
00028180  53 10 44 0f b6 5d 00 48 89 da 48 89 df be 08 00 00 00 4d 09 1a 83 03 01 e8 e3 17 00 00 85 c0 75  S.D..].H..H.......M............u
000281a0  59 4c 8b 6b 10 0f b6 45 01 48 89 da be 08 00 00 00 48 89 df 49 09 45 00 83 03 01 e8 c0 17 00 00  YL.k...E.H.......H..I.E.........
000281c0  85 c0 75 36 48 8b 4b 10 0f b6 55 02 be 08 00 00 00 48 89 df 48 09 11 48 89 da 83 03 01 e8 9e 17  ..u6H.K...U......H..H..H........
000281e0  00 00 85 c0 75 14 48 83 c5 04 e9 5f ff ff ff 90                                                  ....u.H...._....

000281f0  4889df             mov     rdi, rbx
000281f3  e8b8e3ffff         call    mp_clamp
{ Does not return }


000281f8    void sub_281f8(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

000281f8  31c0               xor     eax, eax  {0x0}
000281fa  4883c408           add     rsp, 0x8
000281fe  5b                 pop     rbx {arg1}
000281ff  5d                 pop     rbp {arg2}
00028200  415c               pop     r12 {arg3}
00028202  415d               pop     r13 {arg4}
00028204  e900e5fdff         jmp     __x86_return_thunk
{ Does not return }

00028209                             0f 1f 80 00 00 00 00                                                           .......

{ Continuation of function mp_from_ubin }

00028210  be02000000         mov     esi, 0x2
00028215  e8d6020000         call    mp_grow
{ Does not return }

0002821a                                                                                85 c0 0f 84 8b fe                            ......
00028220  ff ff 48 83 c4 08 5b 5d 41 5c 41 5d e9 d8 e4 fd ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00  ..H...[]A\A].....f...........D..

00028240    void mp_gcd(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00028240  4157               push    r15 {__saved_r15}
00028242  4156               push    r14 {__saved_r14}
00028244  4989f6             mov     r14, rsi
00028247  4155               push    r13 {__saved_r13}
00028249  4154               push    r12 {__saved_r12}
0002824b  55                 push    rbp {__saved_rbp}
0002824c  53                 push    rbx {__saved_rbx}
0002824d  4883ec58           sub     rsp, 0x58
00028251  8b0f               mov     ecx, dword [rdi]
00028253  644c8b2425280000…  mov     r12, qword [fs:0x28]
0002825c  4c89642448         mov     qword [rsp+0x48 {var_40}], r12
00028261  4989d4             mov     r12, rdx
00028264  85c9               test    ecx, ecx
00028266  0f84a4000000       je      0x28310

0002826c  8b16               mov     edx, dword [rsi]
0002826e  85d2               test    edx, edx
00028270  746e               je      0x282e0

00028272  4c8d6c2410         lea     r13, [rsp+0x10 {var_78}]
00028277  4889fe             mov     rsi, rdi
0002827a  4c89ef             mov     rdi, r13 {var_78}
0002827d  e82e030000         call    mp_init_copy
{ Does not return }

00028282        89 c3 85 c0 74 30 48 8b 44 24 48 64 48 2b 04 25 28 00 00 00 0f 85 e6 01 00 00 48 83 c4 58    ....t0H.D$HdH+.%(.........H..X
000282a0  89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 58 e4 fd ff 0f 1f 80 00 00 00 00 48 8d 6c 24 30 4c 89 f6  ..[]A\A]A^A_.X..........H.l$0L..
000282c0  48 89 ef e8 e8 02 00 00 89 c3 85 c0 74 62 48 89 ef e8 4a e4 ff ff eb b0 0f 1f 84 00 00 00 00 00  H...........tbH...J.............

000282e0  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
000282e5  64482b0425280000…  sub     rax, qword [fs:0x28]
000282ee  0f858e010000       jne     0x28482

000282f4  4c89e6             mov     rsi, r12

000282f7  4883c458           add     rsp, 0x58
000282fb  5b                 pop     rbx {__saved_rbx}
000282fc  5d                 pop     rbp {__saved_rbp}
000282fd  415c               pop     r12 {__saved_r12}
000282ff  415d               pop     r13 {__saved_r13}
00028301  415e               pop     r14 {__saved_r14}
00028303  415f               pop     r15 {__saved_r15}
00028305  e9a69a0000         jmp     mp_abs
{ Does not return }

0002830a                                66 0f 1f 44 00 00                                                            f..D..

00028310  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00028315  64482b0425280000…  sub     rax, qword [fs:0x28]
0002831e  0f855e010000       jne     0x28482

00028324  4c89e6             mov     rsi, r12
00028327  4c89f7             mov     rdi, r14
0002832a  ebcb               jmp     0x282f7

0002832c                                      0f 1f 40 00                                                              ..@.

00028330    void sub_28330(int32_t* arg1 @ r13) __noreturn

00028330  4c89ef             mov     rdi, r13
00028333  c744243800000000   mov     dword [rsp+0x38 {arg_38}], 0x0
0002833b  c744241800000000   mov     dword [rsp+0x18 {arg_18}], 0x0
00028343  e8f8e7ffff         call    mp_cnt_lsb
{ Does not return }

00028348                          48 89 ef 41 89 c7 e8 ed e7 ff ff 41 39 c7 41 89 c6 41 89 c0 45 0f 4e f7          H..A.......A9.A..A..E.N.
00028360  45 85 f6 7f 7b 45 39 c7 0f 8f ca 00 00 00 7d 4c 44 89 c6 44 29 f6 eb 31 0f 1f 84 00 00 00 00 00  E...{E9.......}LD..D)..1........
00028380  48 89 ee 4c 89 ef e8 f5 fa ff ff 48 89 ea 4c 89 ee 48 89 ef e8 67 95 00 00 89 c3 85 c0 75 5b 48  H..L.......H..L..H...g.......u[H
000283a0  89 ef e8 99 e7 ff ff 89 c6 31 c9 48 89 ea 48 89 ef e8 7a f7 ff ff 89 c3 85 c0 75 3e 8b 44 24 30  .........1.H..H...z.......u>.D$0
000283c0  85 c0 0f 84 98 00 00 00 48 89 ee 4c 89 ef e8 ed e4 ff ff 83 f8 01 75 b3 eb a6 66 0f 1f 44 00 00  ........H..L..........u...f..D..
000283e0  31 c9 4c 89 ea 44 89 f6 4c 89 ef 89 44 24 0c e8 3c f7 ff ff 89 c3 85 c0 74 16 4c 89 ef e8 1e e3  1.L..D..L...D$..<.......t.L.....
00028400  ff ff 48 89 ef e8 16 e3 ff ff e9 79 fe ff ff 90 31 c9 48 89 ea 44 89 f6 48 89 ef e8 10 f7 ff ff  ..H........y....1.H..D..H.......
00028420  44 8b 44 24 0c 85 c0 89 c3 0f 84 36 ff ff ff eb c9 0f 1f 80 00 00 00 00 44 89 fe 31 c9 4c 89 ea  D.D$.......6............D..1.L..
00028440  4c 89 ef 44 29 f6 e8 e5 f6 ff ff 89 c3 85 c0 0f 84 67 ff ff ff eb a3 66 0f 1f 84 00 00 00 00 00  L..D)............g.....f........
00028460  4c 89 e2 44 89 f6 4c 89 ef e8 12 15 00 00 89 c3 85 c0 75 86 41 c7 44 24 08 00 00 00 00 e9 78 ff  L..D..L...........u.A.D$......x.
00028480  ff ff                                                                                            ..

{ Continuation of function mp_gcd }

00028482  e889cdfdff         call    __stack_chk_fail
{ Does not return }

00028487                       66 0f 1f 84 00 00 00 00 00                                                         f........

00028490    void mp_get_l(int32_t* arg1) __noreturn

00028490  53                 push    rbx {var_8}
00028491  4889fb             mov     rbx, rdi
00028494  e827000000         call    mp_get_mag_ul
{ Does not return }

00028499                                                                             83 7b 08 01 74 09 5b                           .{..t.[
000284a0  e9 64 e2 fd ff 0f 1f 00 48 f7 d8 5b e9 58 e2 fd ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00  .d......H..[.X...f...........D..

000284c0    void mp_get_mag_ul(int32_t* arg1) __noreturn

000284c0  8b17               mov     edx, dword [rdi]
000284c2  31c0               xor     eax, eax  {0x0}
000284c4  85d2               test    edx, edx
000284c6  7420               je      0x284e8

000284c8  b802000000         mov     eax, 0x2
000284cd  488b4f10           mov     rcx, qword [rdi+0x10]
000284d1  39c2               cmp     edx, eax
000284d3  0f47d0             cmova   edx, eax  {0x2}
000284d6  8d72ff             lea     esi, [rdx-0x1]
000284d9  488b04f1           mov     rax, qword [rcx+rsi*8]
000284dd  85f6               test    esi, esi
000284df  7407               je      0x284e8

000284e1  48c1e03c           shl     rax, 0x3c
000284e5  480b01             or      rax, qword [rcx]

000284e8  e91ce2fdff         jmp     __x86_return_thunk
{ Does not return }

000284ed                                         0f 1f 00                                                               ...

000284f0    void mp_grow(void* arg1, int32_t arg2) __noreturn

000284f0  85f6               test    esi, esi
000284f2  7866               js      0x2855a

000284f4  55                 push    rbp {__saved_rbp}
000284f5  4889fd             mov     rbp, rdi
000284f8  53                 push    rbx {__saved_rbx}
000284f9  89f3               mov     ebx, esi
000284fb  4883ec08           sub     rsp, 0x8
000284ff  48637704           movsxd  rsi, dword [rdi+0x4]
00028503  39de               cmp     esi, ebx
00028505  7c11               jl      0x28518

00028507  31c0               xor     eax, eax  {0x0}
00028509  4883c408           add     rsp, 0x8
0002850d  5b                 pop     rbx {__saved_rbx}
0002850e  5d                 pop     rbp {__saved_rbp}
0002850f  e9f5e1fdff         jmp     __x86_return_thunk
{ Does not return }

00028514                                                              0f 1f 40 00                                              ..@.

00028518  4863d3             movsxd  rdx, ebx
0002851b  488b7f10           mov     rdi, qword [rdi+0x10]
0002851f  48c1e603           shl     rsi, 0x3
00028523  48c1e203           shl     rdx, 0x3
00028527  e87931feff         call    m_realloc_ltm
{ Does not return }

0002852c                                      48 85 c0 74 33 48 63 55 04 89 5d 04 48 89 45 10 29 d3 48 8d              H..t3HcU..].H.E.).H.
00028540  3c d0 85 db 7e c1 48 63 c3 31 f6 48 8d 14 c5 00 00 00 00 e8 98 cd fd ff eb ad                    <...~.Hc.1.H..............

0002855a  b8fdffffff         mov     eax, 0xfffffffd
0002855f  e9a5e1fdff         jmp     __x86_return_thunk
{ Does not return }

00028564              b8 fe ff ff ff eb 9e 0f 1f 44 00 00                                                      .........D..

00028570    void mp_init() __noreturn

00028570  53                 push    rbx {var_8}
00028571  be08000000         mov     esi, 0x8
00028576  4889fb             mov     rbx, rdi
00028579  bf20000000         mov     edi, 0x20
0002857e  e8b930feff         call    m_calloc
{ Does not return }

00028583           48 89 43 10 48 85 c0 74 19 48 8b 05 ad 14 01 00 c7 43 08 00 00 00 00 48 89 03 31 c0 5b     H.C.H..t.H.......C.....H..1.[
000285a0  e9 64 e1 fd ff b8 fe ff ff ff 5b e9 59 e1 fd ff                                                  .d........[.Y...

000285b0    void mp_init_copy(int64_t arg1, int32_t* arg2) __noreturn

000285b0  55                 push    rbp {var_8}
000285b1  4889f5             mov     rbp, rsi
000285b4  53                 push    rbx {var_10}
000285b5  4889fb             mov     rbx, rdi
000285b8  4883ec18           sub     rsp, 0x18
000285bc  8b36               mov     esi, dword [rsi]
000285be  e88d030000         call    mp_init_size
{ Does not return }

000285c3           85 c0 74 11 48 83 c4 18 5b 5d e9 37 e1 fd ff 66 0f 1f 44 00 00 48 89 de 48 89 ef e8 0d     ..t.H...[].7...f..D..H..H....
000285e0  e7 ff ff 85 c0 74 e0 48 89 df 89 44 24 0c e8 2d e1 ff ff 8b 44 24 0c 48 83 c4 18 5b 5d e9 07 e1  .....t.H...D$..-....D$.H...[]...
00028600  fd ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00                                                  ..f...........@.

00028610    void mp_init_multi(int64_t arg1) __noreturn

00028610  4155               push    r13 {__saved_r13}
00028612  4154               push    r12 {__saved_r12}
00028614  55                 push    rbp {__saved_rbp}
00028615  4889fd             mov     rbp, rdi
00028618  53                 push    rbx {__saved_rbx}
00028619  31db               xor     ebx, ebx  {0x0}
0002861b  4883ec78           sub     rsp, 0x78
0002861f  4889542450         mov     qword [rsp+0x50 {var_48}], rdx
00028624  488d542440         lea     rdx, [rsp+0x40 {var_58}]
00028629  4889742448         mov     qword [rsp+0x48 {var_50}], rsi
0002862e  48894c2458         mov     qword [rsp+0x58 {var_40}], rcx
00028633  4c89442460         mov     qword [rsp+0x60 {var_38}], r8
00028638  4c894c2468         mov     qword [rsp+0x68 {var_30}], r9
0002863d  64488b0425280000…  mov     rax, qword [fs:0x28]
00028646  4889442438         mov     qword [rsp+0x38 {var_60}], rax
0002864b  31c0               xor     eax, eax  {0x0}
0002864d  488d8424a0000000   lea     rax, [rsp+0xa0 {arg_8}]
00028655  c744240808000000   mov     dword [rsp+0x8 {var_90}], 0x8
0002865d  4889442410         mov     qword [rsp+0x10 {var_88}], rax {arg_8}
00028662  4889542418         mov     qword [rsp+0x18 {var_80}], rdx {var_58}
00028667  4885ff             test    rdi, rdi
0002866a  742f               je      0x2869b

0002866c  0f1f4000           nop     dword [rax]
00028670  e8fbfeffff         call    mp_init
{ Does not return }

00028675                                                                 85 c0 75 66 8b 4c 24 08 83 c3 01                       ..uf.L$....
00028680  83 f9 2f 77 3b 89 ce 48 03 74 24 18 83 c1 08 48 8b 3e 89 4c 24 08 48 85 ff 75 d5                 ../w;..H.t$....H.>.L$.H..u.

0002869b  31c0               xor     eax, eax  {0x0}
0002869d  488b542438         mov     rdx, qword [rsp+0x38 {var_60}]
000286a2  64482b1425280000…  sub     rdx, qword [fs:0x28]
000286ab  0f858e020000       jne     0x2893f

000286b1  4883c478           add     rsp, 0x78
000286b5  5b                 pop     rbx {__saved_rbx}
000286b6  5d                 pop     rbp {__saved_rbp}
000286b7  415c               pop     r12 {__saved_r12}
000286b9  415d               pop     r13 {__saved_r13}
000286bb  e949e0fdff         jmp     __x86_return_thunk
{ Does not return }

000286c0  48 8b 7c 24 10 4c 8d 47 08 48 8b 3f 4c 89 44 24 10 48 85 ff 74 c5 e8 95 fe ff ff 85 c0 74 9a 4c  H.|$.L.G.H.?L.D$.H..t........t.L
000286e0  8d 54 24 40 41 bc 08 00 00 00 44 8d 6b fe c7 44 24 20 08 00 00 00 4c 8d 8c 24 a0 00 00 00 4c 89  .T$@A.....D.k..D$ ....L..$....L.
00028700  54 24 30 4c 89 4c 24 28 85 db 0f 84 d0 01 00 00 48 89 ef e8 08 e0 ff ff 41 83 fc 2f 0f 86 ce 01  T$0L.L$(........H.......A../....
00028720  00 00 48 8b 44 24 28 48 8d 50 08 48 8b 38 48 89 54 24 28 41 83 fd ff 0f 84 a3 01 00 00 41 8d 5d  ..H.D$(H.P.H.8H.T$(A.........A.]
00028740  01 83 e3 07 0f 84 ce 00 00 00 83 fb 01 0f 84 a5 00 00 00 83 fb 02 0f 84 82 00 00 00 83 fb 03 74  ...............................t
00028760  61 83 fb 04 74 42 83 fb 05 74 23 83 fb 06 0f 85 ac 01 00 00 e8 a7 df ff ff 48 8b 7c 24 28 41 83  a...tB...t#..............H.|$(A.
00028780  ed 01 4c 8d 47 08 48 8b 3f 4c 89 44 24 28 e8 8d df ff ff 4c 8b 4c 24 28 41 83 ed 01 4d 8d 51 08  ..L.G.H.?L.D$(.....L.L$(A...M.Q.
000287a0  49 8b 39 4c 89 54 24 28 e8 73 df ff ff 4c 8b 5c 24 28 41 83 ed 01 49 8d 6b 08 49 8b 3b 48 89 6c  I.9L.T$(.s...L.\$(A...I.k.I.;H.l
000287c0  24 28 e8 59 df ff ff 4c 8b 64 24 28 41 83 ed 01 49 8d 44 24 08 49 8b 3c 24 48 89 44 24 28 e8 3d  $(.Y...L.d$(A...I.D$.I.<$H.D$(.=
000287e0  df ff ff 48 8b 5c 24 28 41 83 ed 01 48 8d 53 08 48 8b 3b 48 89 54 24 28 e8 23 df ff ff 48 8b 4c  ...H.\$(A...H.S.H.;H.T$(.#...H.L
00028800  24 28 48 8d 71 08 48 8b 39 48 89 74 24 28 41 83 ed 01 0f 82 c8 00 00 00 e8 03 df ff ff 48 8b 7c  $(H.q.H.9H.t$(A..............H.|
00028820  24 28 41 83 ed 08 4c 8d 47 08 48 8b 3f 4c 89 44 24 28 e8 e9 de ff ff 4c 8b 4c 24 28 49 8b 39 4d  $(A...L.G.H.?L.D$(.....L.L$(I.9M
00028840  8d 51 08 4c 89 54 24 28 e8 d3 de ff ff 4c 8b 5c 24 28 49 8b 3b 49 8d 6b 08 48 89 6c 24 28 e8 bd  .Q.L.T$(.....L.\$(I.;I.k.H.l$(..
00028860  de ff ff 4c 8b 64 24 28 49 8b 3c 24 49 8d 44 24 08 48 89 44 24 28 e8 a5 de ff ff 48 8b 5c 24 28  ...L.d$(I.<$I.D$.H.D$(.....H.\$(
00028880  48 8b 3b 48 8d 53 08 48 89 54 24 28 e8 8f de ff ff 48 8b 4c 24 28 48 8b 39 48 8d 71 08 48 89 74  H.;H.S.H.T$(.....H.L$(H.9H.q.H.t
000288a0  24 28 e8 79 de ff ff 48 8b 7c 24 28 4c 8d 47 08 48 8b 3f 4c 89 44 24 28 e8 63 de ff ff 4c 8b 4c  $(.y...H.|$(L.G.H.?L.D$(.c...L.L
000288c0  24 28 4d 8d 51 08 49 8b 39 4c 89 54 24 28 41 83 fd ff 0f 85 40 ff ff ff 0f 1f 84 00 00 00 00 00  $(M.Q.I.9L.T$(A.....@...........
000288e0  b8 fe ff ff ff e9 b3 fd ff ff 66 0f 1f 44 00 00 45 8d 5c 24 08 48 8b 6c 24 30 44 89 5c 24 20 41  ..........f..D..E.\$.H.l$0D.\$ A
00028900  83 fd ff 74 db 4a 8b 6c 25 00 41 83 ed 01 45 89 dc e9 fa fd ff ff 66 2e 0f 1f 84 00 00 00 00 00  ...t.J.l%.A...E.......f.........
00028920  e8 fb dd ff ff 48 8b 4c 24 28 41 83 ed 01 48 8d 71 08 48 8b 39 48 89 74 24 28 e9 35 fe ff ff     .....H.L$(A...H.q.H.9H.t$(.5...

0002893f  e8ccc8fdff         call    __stack_chk_fail
{ Does not return }

00028944              66 2e 0f 1f 84 00 00 00 00 00 66 90                                                      f.........f.

00028950    void mp_init_size(int64_t arg1, int32_t arg2) __noreturn

00028950  85f6               test    esi, esi
00028952  784c               js      0x289a0

00028954  55                 push    rbp {var_8}
00028955  b802000000         mov     eax, 0x2
0002895a  4889fd             mov     rbp, rdi
0002895d  53                 push    rbx {var_10}
0002895e  4883ec08           sub     rsp, 0x8
00028962  39c6               cmp     esi, eax
00028964  0f4dc6             cmovge  eax, esi
00028967  be08000000         mov     esi, 0x8
0002896c  4863f8             movsxd  rdi, eax
0002896f  4889fb             mov     rbx, rdi
00028972  e8c52cfeff         call    m_calloc
{ Does not return }

00028977                                                                       48 89 45 10 48 85 c0 74 2a                         H.E.H..t*
00028980  c7 45 00 00 00 00 00 31 c0 89 5d 04 c7 45 08 00 00 00 00 48 83 c4 08 5b 5d e9 6b dd fd ff 66 90  .E.....1..]..E.....H...[].k...f.

000289a0  b8fdffffff         mov     eax, 0xfffffffd
000289a5  e95fddfdff         jmp     __x86_return_thunk
{ Does not return }

000289aa                                b8 fe ff ff ff eb e2 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00            .......f...........D..

000289c0    void mp_invmod(int64_t arg1, void* arg2) __noreturn

000289c0  837e0801           cmp     dword [rsi+0x8], 0x1
000289c4  7468               je      0x28a2e

000289c6  4154               push    r12 {var_8}
000289c8  4989fc             mov     r12, rdi
000289cb  55                 push    rbp {var_10}
000289cc  4889d5             mov     rbp, rdx
000289cf  53                 push    rbx {var_18}
000289d0  4889f3             mov     rbx, rsi
000289d3  be01000000         mov     esi, 0x1
000289d8  4889df             mov     rdi, rbx
000289db  e8b0deffff         call    mp_cmp_d
{ Does not return }

000289e0  83 f8 01 75 3b 8b 03 48 89 ea 48 89 de 4c 89 e7 85 c0 7e 09 48 8b 4b 10 f6 01 01 75 13 5b 5d 41  ...u;..H..H..L....~.H.K....u.[]A
00028a00  5c e9 1a 71 00 00 66 2e 0f 1f 84 00 00 00 00 00 5b 5d 41 5c e9 67 6d 00 00 0f 1f 80 00 00 00 00  \..q..f.........[]A\.gm.........
00028a20  5b b8 fd ff ff ff 5d 41 5c e9 db dc fd ff                                                        [.....]A\.....

00028a2e  b8fdffffff         mov     eax, 0xfffffffd
00028a33  e9d1dcfdff         jmp     __x86_return_thunk
{ Does not return }

00028a38                                                                          0f 1f 84 00 00 00 00 00                          ........

00028a40    void mp_lcm() __noreturn

00028a40  4157               push    r15 {var_8}
00028a42  4156               push    r14 {var_10}
00028a44  4155               push    r13 {var_18}
00028a46  4989d5             mov     r13, rdx
00028a49  31d2               xor     edx, edx  {0x0}
00028a4b  4154               push    r12 {var_20}
00028a4d  4989fc             mov     r12, rdi
00028a50  55                 push    rbp {var_28}
00028a51  4889f5             mov     rbp, rsi
00028a54  53                 push    rbx {var_30}
00028a55  4883ec48           sub     rsp, 0x48
00028a59  64488b0425280000…  mov     rax, qword [fs:0x28]
00028a62  4889442438         mov     qword [rsp+0x38 {var_40}], rax
00028a67  31c0               xor     eax, eax  {0x0}
00028a69  4c8d7c2420         lea     r15, [rsp+0x20 {var_58}]
00028a6e  4889e7             mov     rdi, rsp {var_78}
00028a71  4c89fe             mov     rsi, r15 {var_58}
00028a74  e897fbffff         call    mp_init_multi
{ Does not return }

00028a79                                                                             89 c3 85 c0 74 31 48                           ....t1H
00028a80  8b 44 24 38 64 48 2b 04 25 28 00 00 00 0f 85 ad 00 00 00 48 83 c4 48 89 d8 5b 5d 41 5c 41 5d 41  .D$8dH+.%(.........H..H..[]A\A]A
00028aa0  5e 41 5f e9 61 dc fd ff 0f 1f 84 00 00 00 00 00 48 89 e2 48 89 ee 4c 89 e7 49 89 e6 e8 7f f7 ff  ^A_.a...........H..H..L..I......
00028ac0  ff 89 c3 85 c0 75 3e 48 89 ee 4c 89 e7 e8 ee dd ff ff 31 c9 4c 89 fa 48 89 e6 83 f8 ff 74 41 48  .....u>H..L.......1.L..H.....tAH
00028ae0  89 ef e8 29 e5 ff ff 89 c3 85 c0 75 18 4c 89 ea 4c 89 fe 4c 89 e7 e8 15 0b 00 00 89 c3 41 c7 45  ...).......u.L..L..L.........A.E
00028b00  08 00 00 00 00 31 d2 4c 89 fe 4c 89 f7 31 c0 e8 6c dc ff ff e9 66 ff ff ff 0f 1f 80 00 00 00 00  .....1.L..L..1..l....f..........
00028b20  4c 89 e7 e8 e8 e4 ff ff 89 c3 85 c0 75 d7 4c 89 ea 4c 89 fe 48 89 ef e8 d4 0a 00 00 89 c3 eb bd  L...........u.L..L..H...........
00028b40  e8 cb c6 fd ff 66 2e 0f 1f 84 00 00 00 00 00 90                                                  .....f..........

00028b50    void mp_lshd(int32_t* arg1, int32_t arg2) __noreturn

00028b50  85f6               test    esi, esi
00028b52  0f8eb0010000       jle     0x28d08

00028b58  53                 push    rbx {__saved_rbx}
00028b59  89f3               mov     ebx, esi
00028b5b  4883ec10           sub     rsp, 0x10
00028b5f  8b37               mov     esi, dword [rdi]
00028b61  85f6               test    esi, esi
00028b63  0f848d010000       je      0x28cf6

00028b69  01de               add     esi, ebx
00028b6b  397704             cmp     dword [rdi+0x4], esi
00028b6e  0f8c9c010000       jl      0x28d10

00028b74  4863c6             movsxd  rax, esi
00028b77  4c63cb             movsxd  r9, ebx
00028b7a  4c8b4710           mov     r8, qword [rdi+0x10]
00028b7e  8d4eff             lea     ecx, [rsi-0x1]
00028b81  488d14c500000000   lea     rdx, [rax*8]
00028b89  4c29c8             sub     rax, r9
00028b8c  8937               mov     dword [rdi], esi
00028b8e  48c1e003           shl     rax, 0x3
00028b92  4d8d5410f8         lea     r10, [r8+rdx-0x8]
00028b97  4d8d5c00f8         lea     r11, [r8+rax-0x8]
00028b9c  39cb               cmp     ebx, ecx
00028b9e  0f8f40010000       jg      0x28ce4

00028ba4  29de               sub     esi, ebx
00028ba6  8d7eff             lea     edi, [rsi-0x1]
00028ba9  83ff03             cmp     edi, 0x3
00028bac  0f867e010000       jbe     0x28d30

00028bb2  89f3               mov     ebx, esi
00028bb4  498d4c10f0         lea     rcx, [r8+rdx-0x10]
00028bb9  498d7c00f0         lea     rdi, [r8+rax-0x10]
00028bbe  31c0               xor     eax, eax  {0x0}
00028bc0  d1eb               shr     ebx, 0x1
00028bc2  48f7db             neg     rbx
00028bc5  48c1e304           shl     rbx, 0x4
00028bc9  4889da             mov     rdx, rbx
00028bcc  48f7da             neg     rdx
00028bcf  4883ea10           sub     rdx, 0x10
00028bd3  48c1ea04           shr     rdx, 0x4
00028bd7  4883c201           add     rdx, 0x1
00028bdb  83e207             and     edx, 0x7
00028bde  747b               je      0x28c5b

00028be0  4883fa01           cmp     rdx, 0x1
00028be4  7463               je      0x28c49

00028be6  4883fa02           cmp     rdx, 0x2
00028bea  7450               je      0x28c3c

00028bec  4883fa03           cmp     rdx, 0x3
00028bf0  743d               je      0x28c2f

00028bf2  4883fa04           cmp     rdx, 0x4
00028bf6  742a               je      0x28c22

00028bf8  4883fa05           cmp     rdx, 0x5
00028bfc  7417               je      0x28c15

00028bfe  4883fa06           cmp     rdx, 0x6
00028c02  0f8538020000       jne     0x28e40

00028c08  f30f6f0c07         movdqu  xmm1, xmmword [rdi+rax]
00028c0d  0f110c01           movups  xmmword [rcx+rax], xmm1
00028c11  4883e810           sub     rax, 0x10

00028c15  f30f6f1407         movdqu  xmm2, xmmword [rdi+rax]
00028c1a  0f111401           movups  xmmword [rcx+rax], xmm2
00028c1e  4883e810           sub     rax, 0x10

00028c22  f30f6f1c07         movdqu  xmm3, xmmword [rdi+rax]
00028c27  0f111c01           movups  xmmword [rcx+rax], xmm3
00028c2b  4883e810           sub     rax, 0x10

00028c2f  f30f6f2407         movdqu  xmm4, xmmword [rdi+rax]
00028c34  0f112401           movups  xmmword [rcx+rax], xmm4
00028c38  4883e810           sub     rax, 0x10

00028c3c  f30f6f2c07         movdqu  xmm5, xmmword [rdi+rax]
00028c41  0f112c01           movups  xmmword [rcx+rax], xmm5
00028c45  4883e810           sub     rax, 0x10

00028c49  f30f6f3407         movdqu  xmm6, xmmword [rdi+rax]
00028c4e  0f113401           movups  xmmword [rcx+rax], xmm6
00028c52  4883e810           sub     rax, 0x10
00028c56  4839c3             cmp     rbx, rax
00028c59  746d               je      0x28cc8

00028c5b  f30f6f3c07         movdqu  xmm7, xmmword [rdi+rax]
00028c60  0f113c01           movups  xmmword [rcx+rax], xmm7
00028c64  f3440f6f4407f0     movdqu  xmm8, xmmword [rdi+rax-0x10]
00028c6b  440f114401f0       movups  xmmword [rcx+rax-0x10], xmm8
00028c71  f3440f6f4c07e0     movdqu  xmm9, xmmword [rdi+rax-0x20]
00028c78  440f114c01e0       movups  xmmword [rcx+rax-0x20], xmm9
00028c7e  f3440f6f5407d0     movdqu  xmm10, xmmword [rdi+rax-0x30]
00028c85  440f115401d0       movups  xmmword [rcx+rax-0x30], xmm10
00028c8b  f3440f6f5c07c0     movdqu  xmm11, xmmword [rdi+rax-0x40]
00028c92  440f115c01c0       movups  xmmword [rcx+rax-0x40], xmm11
00028c98  f3440f6f6407b0     movdqu  xmm12, xmmword [rdi+rax-0x50]
00028c9f  440f116401b0       movups  xmmword [rcx+rax-0x50], xmm12
00028ca5  f3440f6f6c07a0     movdqu  xmm13, xmmword [rdi+rax-0x60]
00028cac  440f116c01a0       movups  xmmword [rcx+rax-0x60], xmm13
00028cb2  f3440f6f740790     movdqu  xmm14, xmmword [rdi+rax-0x70]
00028cb9  440f11740190       movups  xmmword [rcx+rax-0x70], xmm14
00028cbf  4883c080           add     rax, 0xffffffffffffff80
00028cc3  4839c3             cmp     rbx, rax
00028cc6  7593               jne     0x28c5b

00028cc8  40f6c601           test    sil, 0x1
00028ccc  7416               je      0x28ce4

00028cce  83e6fe             and     esi, 0xfffffffe
00028cd1  48f7de             neg     rsi
00028cd4  488d34f500000000   lea     rsi, [rsi*8]
00028cdc  4d8b1c33           mov     r11, qword [r11+rsi]
00028ce0  4d891c32           mov     qword [r10+rsi], r11

00028ce4  4a8d14cd00000000   lea     rdx, [r9*8]
00028cec  31f6               xor     esi, esi  {0x0}
00028cee  4c89c7             mov     rdi, r8
00028cf1  e8fac5fdff         call    memset

00028cf6  31c0               xor     eax, eax  {0x0}
00028cf8  4883c410           add     rsp, 0x10
00028cfc  5b                 pop     rbx {__saved_rbx}
00028cfd  e907dafdff         jmp     __x86_return_thunk
{ Does not return }

00028d02        66 0f 1f 44 00 00                                                                            f..D..

00028d08  31c0               xor     eax, eax  {0x0}
00028d0a  e9fad9fdff         jmp     __x86_return_thunk
{ Does not return }

00028d0f                                               90                                                                 .

00028d10  48897c2408         mov     qword [rsp+0x8 {var_10}], rdi
00028d15  e8d6f7ffff         call    mp_grow
{ Does not return }

00028d1a                                                                                85 c0 75 da 48 8b                            ..u.H.
00028d20  7c 24 08 89 de 03 37 e9 48 fe ff ff 0f 1f 40 00                                                  |$....7.H.....@.

00028d30  48f7d7             not     rdi
00028d33  31d2               xor     edx, edx  {0x0}
00028d35  488d34fd00000000   lea     rsi, [rdi*8]
00028d3d  4889f3             mov     rbx, rsi
00028d40  48f7db             neg     rbx
00028d43  4883eb08           sub     rbx, 0x8
00028d47  48c1eb03           shr     rbx, 0x3
00028d4b  4883c301           add     rbx, 0x1
00028d4f  83e307             and     ebx, 0x7
00028d52  0f8482000000       je      0x28dda

00028d58  4883fb01           cmp     rbx, 0x1
00028d5c  7467               je      0x28dc5

00028d5e  4883fb02           cmp     rbx, 0x2
00028d62  7455               je      0x28db9

00028d64  4883fb03           cmp     rbx, 0x3
00028d68  7443               je      0x28dad

00028d6a  4883fb04           cmp     rbx, 0x4
00028d6e  7431               je      0x28da1

00028d70  4883fb05           cmp     rbx, 0x5
00028d74  741f               je      0x28d95

00028d76  4883fb06           cmp     rbx, 0x6
00028d7a  740d               je      0x28d89

00028d7c  498b03             mov     rax, qword [r11]
00028d7f  48c7c2f8ffffff     mov     rdx, 0xfffffffffffffff8
00028d86  498902             mov     qword [r10], rax

00028d89  498b0c13           mov     rcx, qword [r11+rdx]
00028d8d  49890c12           mov     qword [r10+rdx], rcx
00028d91  4883ea08           sub     rdx, 0x8

00028d95  498b3c13           mov     rdi, qword [r11+rdx]
00028d99  49893c12           mov     qword [r10+rdx], rdi
00028d9d  4883ea08           sub     rdx, 0x8

00028da1  498b1c13           mov     rbx, qword [r11+rdx]
00028da5  49891c12           mov     qword [r10+rdx], rbx
00028da9  4883ea08           sub     rdx, 0x8

00028dad  498b0413           mov     rax, qword [r11+rdx]
00028db1  49890412           mov     qword [r10+rdx], rax
00028db5  4883ea08           sub     rdx, 0x8

00028db9  498b0c13           mov     rcx, qword [r11+rdx]
00028dbd  49890c12           mov     qword [r10+rdx], rcx
00028dc1  4883ea08           sub     rdx, 0x8

00028dc5  498b3c13           mov     rdi, qword [r11+rdx]
00028dc9  49893c12           mov     qword [r10+rdx], rdi
00028dcd  4883ea08           sub     rdx, 0x8
00028dd1  4839d6             cmp     rsi, rdx
00028dd4  0f840affffff       je      0x28ce4

00028dda  498b1c13           mov     rbx, qword [r11+rdx]
00028dde  49891c12           mov     qword [r10+rdx], rbx
00028de2  498b4413f8         mov     rax, qword [r11+rdx-0x8]
00028de7  49894412f8         mov     qword [r10+rdx-0x8], rax
00028dec  498b4c13f0         mov     rcx, qword [r11+rdx-0x10]
00028df1  49894c12f0         mov     qword [r10+rdx-0x10], rcx
00028df6  498b7c13e8         mov     rdi, qword [r11+rdx-0x18]
00028dfb  49897c12e8         mov     qword [r10+rdx-0x18], rdi
00028e00  498b5c13e0         mov     rbx, qword [r11+rdx-0x20]
00028e05  49895c12e0         mov     qword [r10+rdx-0x20], rbx
00028e0a  498b4413d8         mov     rax, qword [r11+rdx-0x28]
00028e0f  49894412d8         mov     qword [r10+rdx-0x28], rax
00028e14  498b4c13d0         mov     rcx, qword [r11+rdx-0x30]
00028e19  49894c12d0         mov     qword [r10+rdx-0x30], rcx
00028e1e  498b7c13c8         mov     rdi, qword [r11+rdx-0x38]
00028e23  49897c12c8         mov     qword [r10+rdx-0x38], rdi
00028e28  4883ea40           sub     rdx, 0x40
00028e2c  4839d6             cmp     rsi, rdx
00028e2f  75a9               jne     0x28dda

00028e31  e9aefeffff         jmp     0x28ce4

00028e36                                                                    66 2e 0f 1f 84 00 00 00 00 00                        f.........

00028e40  f30f6f07           movdqu  xmm0, xmmword [rdi]
00028e44  48c7c0f0ffffff     mov     rax, 0xfffffffffffffff0
00028e4b  0f1101             movups  xmmword [rcx], xmm0
00028e4e  e9b5fdffff         jmp     0x28c08

00028e53                                                           66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00                     f............

00028e60    void mp_mod(int64_t arg1, int32_t* arg2) __noreturn

00028e60  4156               push    r14 {var_8}
00028e62  4989fe             mov     r14, rdi
00028e65  4155               push    r13 {var_10}
00028e67  4154               push    r12 {var_18}
00028e69  55                 push    rbp {var_20}
00028e6a  4889f5             mov     rbp, rsi
00028e6d  53                 push    rbx {var_28}
00028e6e  4883ec20           sub     rsp, 0x20
00028e72  8b36               mov     esi, dword [rsi]
00028e74  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00028e7d  4c896c2418         mov     qword [rsp+0x18 {var_30}], r13
00028e82  4989d5             mov     r13, rdx
00028e85  4889e7             mov     rdi, rsp {var_48}
00028e88  e8c3faffff         call    mp_init_size
{ Does not return }

00028e8d                                         89 c3 85 c0 74 2d 48 8b 44 24 18 64 48 2b 04 25 28 00 00               ....t-H.D$.dH+.%(..
00028ea0  00 75 6f 48 83 c4 20 89 d8 5b 5d 41 5c 41 5d 41 5e e9 53 d8 fd ff 66 2e 0f 1f 84 00 00 00 00 00  .uoH.. ..[]A\A]A^.S...f.........
00028ec0  48 89 e1 31 d2 48 89 ee 4c 89 f7 e8 40 e1 ff ff 49 89 e4 89 c3 85 c0 75 1b 8b 04 24 85 c0 74 09  H..1.H..L...@...I......u...$..t.
00028ee0  8b 55 08 39 54 24 08 75 17 4c 89 ee 4c 89 e7 e8 8c ef ff ff 4c 89 e7 e8 24 d8 ff ff eb 95 66 90  .U.9T$.u.L..L.......L...$.....f.
00028f00  4c 89 ea 48 89 e6 48 89 ef e8 52 d2 ff ff 89 c3 eb e2 e8 f9 c2 fd ff 66 0f 1f 84 00 00 00 00 00  L..H..H...R............f........

00028f20    void mp_mod_2d(int32_t* arg1, int32_t arg2, int32_t* arg3) __noreturn

00028f20  4155               push    r13 {__saved_r13}
00028f22  4154               push    r12 {__saved_r12}
00028f24  4989d4             mov     r12, rdx
00028f27  55                 push    rbp {__saved_rbp}
00028f28  53                 push    rbx {__saved_rbx}
00028f29  4883ec08           sub     rsp, 0x8
00028f2d  85f6               test    esi, esi
00028f2f  0f8eab000000       jle     0x28fe0

00028f35  6b073c             imul    eax, dword [rdi], 0x3c
00028f38  89f3               mov     ebx, esi
00028f3a  4889d6             mov     rsi, rdx
00028f3d  39d8               cmp     eax, ebx
00028f3f  0f8e8b000000       jle     0x28fd0

00028f45  e8a6ddffff         call    mp_copy
{ Does not return }

00028f4a                                85 c0 75 70 48 63 eb 89 da 45 8b 04 24 4d 8b 6c 24 10 48 69 ed 89            ..upHc...E..$M.l$.Hi..
00028f60  88 88 88 c1 fa 1f 48 c1 ed 20 01 dd c1 fd 05 29 d5 6b cd 3c 29 cb 40 0f 95 c6 40 0f b6 c6 01 e8  ......H.. .....).k.<).@...@.....
00028f80  41 29 c0 48 98 49 8d 7c c5 00 45 85 c0 7e 0e 49 63 d0 31 f6 48 c1 e2 03 e8 53 c3 fd ff 89 d9 49  A).H.I.|..E..~.Ic.1.H....S.....I
00028fa0  c7 c1 ff ff ff ff 48 63 fd 49 d3 e1 49 f7 d1 4d 21 4c fd 00 4c 89 e7 e8 f4 d5 ff ff 31 c0        ......Hc.I..I..M!L..L.......1.

00028fbe  4883c408           add     rsp, 0x8
00028fc2  5b                 pop     rbx {__saved_rbx}
00028fc3  5d                 pop     rbp {__saved_rbp}
00028fc4  415c               pop     r12 {__saved_r12}
00028fc6  415d               pop     r13 {__saved_r13}
00028fc8  e93cd7fdff         jmp     __x86_return_thunk
{ Does not return }

00028fcd                                         0f 1f 00                                                               ...

00028fd0  4883c408           add     rsp, 0x8
00028fd4  5b                 pop     rbx {__saved_rbx}
00028fd5  5d                 pop     rbp {__saved_rbp}
00028fd6  415c               pop     r12 {__saved_r12}
00028fd8  415d               pop     r13 {__saved_r13}
00028fda  e911ddffff         jmp     mp_copy
{ Does not return }

00028fdf                                                                                               90                                 .

00028fe0  4889d7             mov     rdi, rdx
00028fe3  e898360000         call    mp_zero
00028fe8  31c0               xor     eax, eax  {0x0}
00028fea  ebd2               jmp     0x28fbe

00028fec                                      0f 1f 40 00                                                              ..@.

00028ff0    void mp_mod_d(int32_t* arg1, int64_t arg2, int64_t* arg3) __noreturn

00028ff0  4889d1             mov     rcx, rdx
00028ff3  31d2               xor     edx, edx  {0x0}
00028ff5  e9e68d0000         jmp     mp_div_d
{ Does not return }

00028ffa                                                                                66 0f 1f 44 00 00                            f..D..

00029000    void mp_montgomery_calc_normalization(int64_t arg1, int32_t* arg2) __noreturn

00029000  4156               push    r14 {var_8}
00029002  4155               push    r13 {var_10}
00029004  4154               push    r12 {var_18}
00029006  4989f4             mov     r12, rsi
00029009  55                 push    rbp {var_20}
0002900a  4889fd             mov     rbp, rdi
0002900d  4889f7             mov     rdi, rsi
00029010  53                 push    rbx {var_28}
00029011  e8cadfffff         call    mp_count_bits
{ Does not return }

00029016                                                                    41 8b 0c 24 83 f9 01 0f 8e 2d                        A..$.....-
00029020  02 00 00 48 63 d0 89 c6 48 69 da 89 88 88 88 c1 fe 1f 48 c1 eb 20 01 c3 c1 fb 05 29 f3 6b fb 3c  ...Hc...Hi........H.. .....).k.<
00029040  29 f8 48 89 ef 41 89 c6 6b c1 3c 42 8d 74 30 c3 41 83 ee 01 e8 77 d0 ff ff 89 c3 85 c0 0f 85 ad  ).H..A..k.<B.t0.A....w..........
00029060  01 00 00                                                                                         ...

00029063    void sub_29063(int32_t* arg1 @ rbp, int32_t arg2 @ r14) __noreturn

00029063  4589f0             mov     r8d, r14d
00029066  41f7d8             neg     r8d
00029069  4183e003           and     r8d, 0x3
0002906d  0f84af000000       je      0x29122

00029073  4183f801           cmp     r8d, 0x1
00029077  7472               je      0x290eb

00029079  4183f802           cmp     r8d, 0x2
0002907d  743f               je      0x290be

0002907f  4889ee             mov     rsi, rbp
00029082  4889ef             mov     rdi, rbp
00029085  e836060000         call    mp_mul_2
{ Does not return }

0002908a                                89 c3 85 c0 0f 85 7c 01 00 00 4c 89 e6 48 89 ef e8 21 d8 ff ff 83            ......|...L..H...!....
000290a0  f8 ff 74 16 48 89 ea 4c 89 e6 48 89 ef e8 4e 88 00 00 85 c0 0f 85 7c 01 00 00 41 83 c6 01        ..t.H..L..H...N.......|...A...

000290be  4889ee             mov     rsi, rbp
000290c1  4889ef             mov     rdi, rbp
000290c4  e8f7050000         call    mp_mul_2
{ Does not return }

000290c9                             89 c3 85 c0 0f 85 3d 01 00 00 4c 89 e6 48 89 ef e8 e2 d7 ff ff 83 f8           ......=...L..H.........
000290e0  ff 0f 85 81 01 00 00 41 83 c6 01                                                                 .......A...

000290eb  4889ee             mov     rsi, rbp
000290ee  4889ef             mov     rdi, rbp
000290f1  e8ca050000         call    mp_mul_2
{ Does not return }

000290f6                                                                    89 c3 85 c0 0f 85 10 01 00 00                        ..........
00029100  4c 89 e6 48 89 ef e8 b5 d7 ff ff 83 f8 ff 0f 85 0c 01 00 00 41 83 c6 01 41 83 fe 3c 0f 84 ee 00  L..H................A...A..<....
00029120  00 00                                                                                            ..

00029122  4889ee             mov     rsi, rbp
00029125  4889ef             mov     rdi, rbp
00029128  e893050000         call    mp_mul_2
{ Does not return }

0002912d                                         89 c3 85 c0 0f 85 d9 00 00 00 4c 89 e6 48 89 ef e8 7e d7               ..........L..H...~.
00029140  ff ff 83 f8 ff 74 16 48 89 ea 4c 89 e6 48 89 ef e8 ab 87 00 00 85 c0 0f 85 d9 00 00 00 48 89 ee  .....t.H..L..H...............H..
00029160  48 89 ef 45 8d 6e 01 e8 54 05 00 00 89 c3 85 c0 0f 85 9a 00 00 00 4c 89 e6 48 89 ef e8 3f d7 ff  H..E.n..T.............L..H...?..
00029180  ff 83 f8 ff 74 16 48 89 ea 4c 89 e6 48 89 ef e8 6c 87 00 00 85 c0 0f 85 9a 00 00 00 48 89 ee 48  ....t.H..L..H...l...........H..H
000291a0  89 ef e8 19 05 00 00 89 c3 85 c0 75 63 4c 89 e6 48 89 ef e8 08 d7 ff ff 83 f8 ff 74 12 48 89 ea  ...........ucL..H..........t.H..
000291c0  4c 89 e6 48 89 ef e8 35 87 00 00 85 c0 75 67 48 89 ee 48 89 ef e8 e6 04 00 00 89 c3 85 c0 75 30  L..H...5.....ugH..H...........u0
000291e0  4c 89 e6 48 89 ef e8 d5 d6 ff ff 83 f8 ff 74 12 48 89 ea 4c 89 e6 48 89 ef e8 02 87 00 00 85 c0  L..H..........t.H..L..H.........
00029200  75 34 45 8d 75 03 41 83 fd 39 0f 85 12 ff ff ff 89 d8 5b 5d 41 5c 41 5d 41 5e e9 ea d4 fd ff 90  u4E.u.A..9........[]A\A]A^......
00029220  48 89 ea 4c 89 e6 48 89 ef e8 d2 86 00 00 85 c0 0f 84 de fe ff ff 89 c3 89 d8 5b 5d 41 5c 41 5d  H..L..H...................[]A\A]
00029240  41 5e e9 c2 d4 fd ff 66 0f 1f 84 00 00 00 00 00                                                  A^.....f........

00029250    void sub_29250(int32_t* arg1 @ rbp) __noreturn

00029250  be01000000         mov     esi, 0x1
00029255  4889ef             mov     rdi, rbp
00029258  4531f6             xor     r14d, r14d  {0x0}
0002925b  e890270000         call    mp_set
00029260  e9fefdffff         jmp     sub_29063
{ Does not return }

00029265                 0f 1f 00 48 89 ea 4c 89 e6 48 89 ef e8 8a 86 00 00 85 c0 75 bc 41 83 c6 01 e9 68       ...H..L..H.........u.A....h
00029280  fe ff ff 66 2e 0f 1f 84 00 00 00 00 00 66 2e 0f 1f 84 00 00 00 00 00 66 0f 1f 84 00 00 00 00 00  ...f.........f.........f........

000292a0    void mp_montgomery_reduce(int32_t* arg1, int32_t* arg2, int64_t arg3) __noreturn

000292a0  4157               push    r15 {__saved_r15}
000292a2  4989f1             mov     r9, rsi
000292a5  4989ff             mov     r15, rdi
000292a8  4156               push    r14 {__saved_r14}
000292aa  4155               push    r13 {__saved_r13}
000292ac  4154               push    r12 {__saved_r12}
000292ae  4989d4             mov     r12, rdx
000292b1  55                 push    rbp {__saved_rbp}
000292b2  53                 push    rbx {__saved_rbx}
000292b3  4883ec18           sub     rsp, 0x18
000292b7  8b06               mov     eax, dword [rsi]
000292b9  8d5c0001           lea     ebx, [rax+rax+0x1]
000292bd  81fbff010000       cmp     ebx, 0x1ff
000292c3  7f13               jg      0x292d8

000292c5  813f00020000       cmp     dword [rdi], 0x200
000292cb  7f0b               jg      0x292d8

000292cd  3dff000000         cmp     eax, 0xff
000292d2  0f8e88020000       jle     0x29560

000292d8  41395f04           cmp     dword [r15+0x4], ebx
000292dc  0f8c33020000       jl      0x29515

000292e2  41891f             mov     dword [r15], ebx
000292e5  418b09             mov     ecx, dword [r9]
000292e8  85c9               test    ecx, ecx
000292ea  0f8edb010000       jle     0x294cb

000292f0  498b6910           mov     rbp, qword [r9+0x10]
000292f4  4d8b5f10           mov     r11, qword [r15+0x10]
000292f8  4863d1             movsxd  rdx, ecx
000292fb  4c897c2408         mov     qword [rsp+0x8 {var_40_1}], r15
00029300  49baffffffffffff…  mov     r10, 0xfffffffffffffff
0002930a  48c1e203           shl     rdx, 0x3
0002930e  89ce               mov     esi, ecx
00029310  4e8d341a           lea     r14, [rdx+r11]
00029314  488d5c1500         lea     rbx, [rbp+rdx]
00029319  4c8d2cf500000000   lea     r13, [rsi*8]
00029321  66662e0f1f840000…  nop     word [rax+rax]
0002932c  0f1f4000           nop     dword [rax]

00029330  4d8b03             mov     r8, qword [r11]
00029333  4989df             mov     r15, rbx
00029336  4c89de             mov     rsi, r11
00029339  4889ef             mov     rdi, rbp
0002933c  4929ef             sub     r15, rbp
0002933f  31c9               xor     ecx, ecx  {0x0}
00029341  4d0fafc4           imul    r8, r12
00029345  4983ef08           sub     r15, 0x8
00029349  49c1ef03           shr     r15, 0x3
0002934d  4983c701           add     r15, 0x1
00029351  4d21d0             and     r8, r10
00029354  4183e703           and     r15d, 0x3
00029358  0f848f000000       je      0x293ed

0002935e  4983ff01           cmp     r15, 0x1
00029362  7455               je      0x293b9

00029364  4983ff02           cmp     r15, 0x2
00029368  7424               je      0x2938e

0002936a  488b4500           mov     rax, qword [rbp]
0002936e  488d7d08           lea     rdi, [rbp+0x8]
00029372  498d7308           lea     rsi, [r11+0x8]
00029376  49f7e0             mul     r8
00029379  490303             add     rax, qword [r11]
0002937c  4889c1             mov     rcx, rax
0002937f  4883d200           adc     rdx, 0x0
00029383  4c21d0             and     rax, r10
00029386  498903             mov     qword [r11], rax
00029389  480facd13c         shrd    rcx, rdx, 0x3c

0002938e  488b07             mov     rax, qword [rdi]
00029391  4883c708           add     rdi, 0x8
00029395  49f7e0             mul     r8
00029398  480306             add     rax, qword [rsi]
0002939b  4883d200           adc     rdx, 0x0
0002939f  4801c8             add     rax, rcx
000293a2  4883d200           adc     rdx, 0x0
000293a6  4889c1             mov     rcx, rax
000293a9  4c21d0             and     rax, r10
000293ac  4883c608           add     rsi, 0x8
000293b0  488946f8           mov     qword [rsi-0x8], rax
000293b4  480facd13c         shrd    rcx, rdx, 0x3c

000293b9  488b07             mov     rax, qword [rdi]
000293bc  4883c708           add     rdi, 0x8
000293c0  49f7e0             mul     r8
000293c3  480306             add     rax, qword [rsi]
000293c6  4883d200           adc     rdx, 0x0
000293ca  4801c8             add     rax, rcx
000293cd  4883d200           adc     rdx, 0x0
000293d1  4889c1             mov     rcx, rax
000293d4  4883c608           add     rsi, 0x8
000293d8  4c21d0             and     rax, r10
000293db  488946f8           mov     qword [rsi-0x8], rax
000293df  480facd13c         shrd    rcx, rdx, 0x3c
000293e4  4839df             cmp     rdi, rbx
000293e7  0f84a2000000       je      0x2948f

000293ed  488b07             mov     rax, qword [rdi]
000293f0  49f7e0             mul     r8
000293f3  480306             add     rax, qword [rsi]
000293f6  4883d200           adc     rdx, 0x0
000293fa  4801c8             add     rax, rcx
000293fd  4883d200           adc     rdx, 0x0
00029401  4989c7             mov     r15, rax
00029404  4c21d0             and     rax, r10
00029407  488906             mov     qword [rsi], rax
0002940a  488b4708           mov     rax, qword [rdi+0x8]
0002940e  490facd73c         shrd    r15, rdx, 0x3c
00029413  49f7e0             mul     r8
00029416  48034608           add     rax, qword [rsi+0x8]
0002941a  4883d200           adc     rdx, 0x0
0002941e  4c01f8             add     rax, r15
00029421  4883d200           adc     rdx, 0x0
00029425  4889c1             mov     rcx, rax
00029428  4c21d0             and     rax, r10
0002942b  48894608           mov     qword [rsi+0x8], rax
0002942f  488b4710           mov     rax, qword [rdi+0x10]
00029433  480facd13c         shrd    rcx, rdx, 0x3c
00029438  49f7e0             mul     r8
0002943b  48034610           add     rax, qword [rsi+0x10]
0002943f  4883d200           adc     rdx, 0x0
00029443  4801c8             add     rax, rcx
00029446  4883d200           adc     rdx, 0x0
0002944a  4989c7             mov     r15, rax
0002944d  4883c720           add     rdi, 0x20
00029451  4c21d0             and     rax, r10
00029454  48894610           mov     qword [rsi+0x10], rax
00029458  488b47f8           mov     rax, qword [rdi-0x8]
0002945c  490facd73c         shrd    r15, rdx, 0x3c
00029461  49f7e0             mul     r8
00029464  48034618           add     rax, qword [rsi+0x18]
00029468  4883d200           adc     rdx, 0x0
0002946c  4c01f8             add     rax, r15
0002946f  4883d200           adc     rdx, 0x0
00029473  4889c1             mov     rcx, rax
00029476  4883c620           add     rsi, 0x20
0002947a  4c21d0             and     rax, r10
0002947d  488946f8           mov     qword [rsi-0x8], rax
00029481  480facd13c         shrd    rcx, rdx, 0x3c
00029486  4839df             cmp     rdi, rbx
00029489  0f855effffff       jne     0x293ed

0002948f  4f8d441d00         lea     r8, [r13+r11]
00029494  4885c9             test    rcx, rcx
00029497  7420               je      0x294b9

00029499  0f1f8000000000     nop     dword [rax]

000294a0  490308             add     rcx, qword [r8]
000294a3  4c89c2             mov     rdx, r8
000294a6  4983c008           add     r8, 0x8
000294aa  4889cf             mov     rdi, rcx
000294ad  4c21d7             and     rdi, r10
000294b0  48c1e93c           shr     rcx, 0x3c
000294b4  48893a             mov     qword [rdx], rdi
000294b7  75e7               jne     0x294a0

000294b9  4983c308           add     r11, 0x8
000294bd  4d39de             cmp     r14, r11
000294c0  0f856afeffff       jne     0x29330

000294c6  4c8b7c2408         mov     r15, qword [rsp+0x8 {var_40_1}]

000294cb  4c89ff             mov     rdi, r15
000294ce  4c894c2408         mov     qword [rsp+0x8 {var_40_2}], r9
000294d3  e8d8d0ffff         call    mp_clamp
{ Does not return }

000294d8                                                                          4c 8b 64 24 08 4c 89 ff                          L.d$.L..
000294e0  41 8b 34 24 e8 47 22 00 00 48 8b 74 24 08 4c 89 ff e8 ca d3 ff ff 48 8b 6c 24 08 83 f8 ff 75 44  A.4$.G"..H.t$.L.......H.l$....uD
00029500  48 83 c4 18 31 c0 5b 5d 41 5c 41 5d 41 5e 41 5f e9 f4 d1 fd ff                                   H...1.[]A\A]A^A_.....

00029515  89de               mov     esi, ebx
00029517  4c89ff             mov     rdi, r15
0002951a  4c894c2408         mov     qword [rsp+0x8 {var_40_3}], r9
0002951f  e8ccefffff         call    mp_grow
{ Does not return }

00029524              4c 8b 4c 24 08 85 c0 0f 84 b1 fd ff ff 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f e9      L.L$.........H...[]A\A]A^A_.
00029540  c5 d1 fd ff 48 83 c4 18 4c 89 fa 48 89 ee 4c 89 ff 5b 5d 41 5c 41 5d 41 5e 41 5f e9 a0 83 00 00  ....H...L..H..L..[]A\A]A^A_.....

00029560  4883c418           add     rsp, 0x18
00029564  5b                 pop     rbx {__saved_rbx}
00029565  5d                 pop     rbp {__saved_rbp}
00029566  415c               pop     r12 {__saved_r12}
00029568  415d               pop     r13 {__saved_r13}
0002956a  415e               pop     r14 {__saved_r14}
0002956c  415f               pop     r15 {__saved_r15}
0002956e  e95d6a0000         jmp     s_mp_montgomery_reduce_fast
{ Does not return }

00029573                                                           66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00                     f............

00029580    void mp_montgomery_setup(void* arg1, int64_t* arg2) __noreturn

00029580  4889f8             mov     rax, rdi
00029583  4889f7             mov     rdi, rsi
00029586  488b5010           mov     rdx, qword [rax+0x10]
0002958a  4c8b0a             mov     r9, qword [rdx]
0002958d  41f6c101           test    r9b, 0x1
00029591  746d               je      0x29600

00029593  4f8d540904         lea     r10, [r9+r9+0x4]
00029598  4d89c8             mov     r8, r9
0002959b  b902000000         mov     ecx, 0x2
000295a0  4d89cb             mov     r11, r9
000295a3  4183e208           and     r10d, 0x8
000295a7  4889ce             mov     rsi, rcx  {0x2}
000295aa  4889c8             mov     rax, rcx  {0x2}
000295ad  4889ca             mov     rdx, rcx  {0x2}
000295b0  4d01ca             add     r10, r9
000295b3  4d0fafc2           imul    r8, r10
000295b7  4c29c6             sub     rsi, r8
000295ba  49b8ffffffffffff…  mov     r8, 0xfffffffffffffff
000295c4  4c0fafd6           imul    r10, rsi
000295c8  4d0fafda           imul    r11, r10
000295cc  4c29d8             sub     rax, r11
000295cf  490fafc2           imul    rax, r10
000295d3  4d89ca             mov     r10, r9
000295d6  4c0fafd0           imul    r10, rax
000295da  4c29d2             sub     rdx, r10
000295dd  480fafd0           imul    rdx, rax
000295e1  31c0               xor     eax, eax  {0x0}
000295e3  4c0fafca           imul    r9, rdx
000295e7  4929c9             sub     r9, rcx
000295ea  4c0fafca           imul    r9, rdx
000295ee  4d21c1             and     r9, r8
000295f1  4c890f             mov     qword [rdi], r9
000295f4  e910d1fdff         jmp     __x86_return_thunk
{ Does not return }

000295f9                                                                             0f 1f 80 00 00 00 00                           .......

00029600  b8fdffffff         mov     eax, 0xfffffffd
00029605  e9ffd0fdff         jmp     __x86_return_thunk
{ Does not return }

0002960a                                66 0f 1f 44 00 00                                                            f..D..

00029610    void mp_mul(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00029610  55                 push    rbp {var_8}
00029611  53                 push    rbx {var_10}
00029612  4889d3             mov     rbx, rdx
00029615  4883ec08           sub     rsp, 0x8
00029619  8b06               mov     eax, dword [rsi]
0002961b  8b17               mov     edx, dword [rdi]
0002961d  448b0dd0d00100     mov     r9d, dword [rel KARATSUBA_MUL_CUTOFF]
00029624  448b5608           mov     r10d, dword [rsi+0x8]
00029628  39d0               cmp     eax, edx
0002962a  89d1               mov     ecx, edx
0002962c  448d441001         lea     r8d, [rax+rdx+0x1]
00029631  0f4ec8             cmovle  ecx, eax
00029634  44395708           cmp     dword [rdi+0x8], r10d
00029638  400f95c5           setne   bpl
0002963c  4139c9             cmp     r9d, ecx
0002963f  7f17               jg      0x29658

00029641  39d0               cmp     eax, edx
00029643  0f4cc2             cmovl   eax, edx
00029646  4189c3             mov     r11d, eax
00029649  41c1eb1f           shr     r11d, 0x1f
0002964d  4101c3             add     r11d, eax
00029650  41d1fb             sar     r11d, 0x1
00029653  4539d9             cmp     r9d, r11d
00029656  7e38               jle     0x29690

00029658  4181f8ff010000     cmp     r8d, 0x1ff
0002965f  7f47               jg      0x296a8

00029661  81f900010000       cmp     ecx, 0x100
00029667  7f3f               jg      0x296a8

00029669  4489c1             mov     ecx, r8d
0002966c  4889da             mov     rdx, rbx
0002966f  e88c750000         call    s_mp_mul_digs_fast
{ Does not return }

00029674                                                              8b 3b 31 f6 85 ff 40 0f 9f c6 21 ee                      .;1...@...!.
00029680  89 73 08 48 83 c4 08 5b 5d e9 7b d0 fd ff 66 90                                                  .s.H...[].{...f.

00029690  8d1409             lea     edx, [rcx+rcx]
00029693  39c2               cmp     edx, eax
00029695  7fc1               jg      0x29658

00029697  4889da             mov     rdx, rbx
0002969a  e8d1340000         call    s_mp_balance_mul
{ Does not return }

0002969f                                                                                               eb                                 .
000296a0  d3 0f 1f 80 00 00 00 00                                                                          ........

000296a8  4489c1             mov     ecx, r8d
000296ab  4889da             mov     rdx, rbx
000296ae  e83d720000         call    s_mp_mul_digs
{ Does not return }

000296b3                                                           eb bf 66 2e 0f 1f 84 00 00 00 00 00 90                     ..f..........

000296c0    void mp_mul_2(int32_t* arg1, int32_t* arg2) __noreturn

000296c0  4155               push    r13 {__saved_r13}
000296c2  4154               push    r12 {__saved_r12}
000296c4  55                 push    rbp {__saved_rbp}
000296c5  4889fd             mov     rbp, rdi
000296c8  53                 push    rbx {__saved_rbx}
000296c9  4889f3             mov     rbx, rsi
000296cc  4883ec08           sub     rsp, 0x8
000296d0  448b0f             mov     r9d, dword [rdi]
000296d3  418d7101           lea     esi, [r9+0x1]
000296d7  397304             cmp     dword [rbx+0x4], esi
000296da  0f8c80020000       jl      0x29960

000296e0  448b13             mov     r10d, dword [rbx]
000296e3  488b5510           mov     rdx, qword [rbp+0x10]
000296e7  44890b             mov     dword [rbx], r9d
000296ea  4d63e1             movsxd  r12, r9d
000296ed  488b4b10           mov     rcx, qword [rbx+0x10]
000296f1  4585c9             test    r9d, r9d
000296f4  0f8e2e020000       jle     0x29928

000296fa  4e8d1ce500000000   lea     r11, [r12*8]
00029702  31c0               xor     eax, eax  {0x0}
00029704  4531c0             xor     r8d, r8d  {0x0}
00029707  48beffffffffffff…  mov     rsi, 0xfffffffffffffff
00029711  498d7bf8           lea     rdi, [r11-0x8]
00029715  48c1ef03           shr     rdi, 0x3
00029719  4883c701           add     rdi, 0x1
0002971d  83e707             and     edi, 0x7
00029720  0f840b010000       je      0x29831

00029726  4883ff01           cmp     rdi, 0x1
0002972a  0f84d9000000       je      0x29809

00029730  4883ff02           cmp     rdi, 0x2
00029734  0f84b0000000       je      0x297ea

0002973a  4883ff03           cmp     rdi, 0x3
0002973e  0f8487000000       je      0x297cb

00029744  4883ff04           cmp     rdi, 0x4
00029748  7462               je      0x297ac

0002974a  4883ff05           cmp     rdi, 0x5
0002974e  743d               je      0x2978d

00029750  4883ff06           cmp     rdi, 0x6
00029754  7418               je      0x2976e

00029756  488b02             mov     rax, qword [rdx]
00029759  4989c0             mov     r8, rax
0002975c  4801c0             add     rax, rax
0002975f  4821f0             and     rax, rsi
00029762  49c1e83b           shr     r8, 0x3b
00029766  488901             mov     qword [rcx], rax
00029769  b808000000         mov     eax, 0x8

0002976e  488b3c02           mov     rdi, qword [rdx+rax]
00029772  4d89c5             mov     r13, r8
00029775  4989f8             mov     r8, rdi
00029778  4801ff             add     rdi, rdi
0002977b  4c09ef             or      rdi, r13
0002977e  49c1e83b           shr     r8, 0x3b
00029782  4821f7             and     rdi, rsi
00029785  48893c01           mov     qword [rcx+rax], rdi
00029789  4883c008           add     rax, 0x8

0002978d  488b3c02           mov     rdi, qword [rdx+rax]
00029791  4d89c5             mov     r13, r8
00029794  4989f8             mov     r8, rdi
00029797  4801ff             add     rdi, rdi
0002979a  4c09ef             or      rdi, r13
0002979d  49c1e83b           shr     r8, 0x3b
000297a1  4821f7             and     rdi, rsi
000297a4  48893c01           mov     qword [rcx+rax], rdi
000297a8  4883c008           add     rax, 0x8

000297ac  488b3c02           mov     rdi, qword [rdx+rax]
000297b0  4d89c5             mov     r13, r8
000297b3  4989f8             mov     r8, rdi
000297b6  4801ff             add     rdi, rdi
000297b9  4c09ef             or      rdi, r13
000297bc  49c1e83b           shr     r8, 0x3b
000297c0  4821f7             and     rdi, rsi
000297c3  48893c01           mov     qword [rcx+rax], rdi
000297c7  4883c008           add     rax, 0x8

000297cb  488b3c02           mov     rdi, qword [rdx+rax]
000297cf  4d89c5             mov     r13, r8
000297d2  4989f8             mov     r8, rdi
000297d5  4801ff             add     rdi, rdi
000297d8  4c09ef             or      rdi, r13
000297db  49c1e83b           shr     r8, 0x3b
000297df  4821f7             and     rdi, rsi
000297e2  48893c01           mov     qword [rcx+rax], rdi
000297e6  4883c008           add     rax, 0x8

000297ea  488b3c02           mov     rdi, qword [rdx+rax]
000297ee  4d89c5             mov     r13, r8
000297f1  4989f8             mov     r8, rdi
000297f4  4801ff             add     rdi, rdi
000297f7  4c09ef             or      rdi, r13
000297fa  49c1e83b           shr     r8, 0x3b
000297fe  4821f7             and     rdi, rsi
00029801  48893c01           mov     qword [rcx+rax], rdi
00029805  4883c008           add     rax, 0x8

00029809  488b3c02           mov     rdi, qword [rdx+rax]
0002980d  4d89c5             mov     r13, r8
00029810  4989f8             mov     r8, rdi
00029813  4801ff             add     rdi, rdi
00029816  4c09ef             or      rdi, r13
00029819  49c1e83b           shr     r8, 0x3b
0002981d  4821f7             and     rdi, rsi
00029820  48893c01           mov     qword [rcx+rax], rdi
00029824  4883c008           add     rax, 0x8
00029828  4939c3             cmp     r11, rax
0002982b  0f84db000000       je      0x2990c

00029831  488b3c02           mov     rdi, qword [rdx+rax]
00029835  4989fd             mov     r13, rdi
00029838  4801ff             add     rdi, rdi
0002983b  4c09c7             or      rdi, r8
0002983e  49c1ed3b           shr     r13, 0x3b
00029842  4821f7             and     rdi, rsi
00029845  48893c01           mov     qword [rcx+rax], rdi
00029849  488b7c0208         mov     rdi, qword [rdx+rax+0x8]
0002984e  4989f8             mov     r8, rdi
00029851  4801ff             add     rdi, rdi
00029854  4c09ef             or      rdi, r13
00029857  49c1e83b           shr     r8, 0x3b
0002985b  4821f7             and     rdi, rsi
0002985e  48897c0108         mov     qword [rcx+rax+0x8], rdi
00029863  488b7c0210         mov     rdi, qword [rdx+rax+0x10]
00029868  4989fd             mov     r13, rdi
0002986b  4801ff             add     rdi, rdi
0002986e  4c09c7             or      rdi, r8
00029871  49c1ed3b           shr     r13, 0x3b
00029875  4821f7             and     rdi, rsi
00029878  48897c0110         mov     qword [rcx+rax+0x10], rdi
0002987d  488b7c0218         mov     rdi, qword [rdx+rax+0x18]
00029882  4989f8             mov     r8, rdi
00029885  4801ff             add     rdi, rdi
00029888  4c09ef             or      rdi, r13
0002988b  49c1e83b           shr     r8, 0x3b
0002988f  4821f7             and     rdi, rsi
00029892  48897c0118         mov     qword [rcx+rax+0x18], rdi
00029897  488b7c0220         mov     rdi, qword [rdx+rax+0x20]
0002989c  4989fd             mov     r13, rdi
0002989f  4801ff             add     rdi, rdi
000298a2  4c09c7             or      rdi, r8
000298a5  49c1ed3b           shr     r13, 0x3b
000298a9  4821f7             and     rdi, rsi
000298ac  48897c0120         mov     qword [rcx+rax+0x20], rdi
000298b1  488b7c0228         mov     rdi, qword [rdx+rax+0x28]
000298b6  4989f8             mov     r8, rdi
000298b9  4801ff             add     rdi, rdi
000298bc  4c09ef             or      rdi, r13
000298bf  49c1e83b           shr     r8, 0x3b
000298c3  4821f7             and     rdi, rsi
000298c6  48897c0128         mov     qword [rcx+rax+0x28], rdi
000298cb  488b7c0230         mov     rdi, qword [rdx+rax+0x30]
000298d0  4989fd             mov     r13, rdi
000298d3  4801ff             add     rdi, rdi
000298d6  4c09c7             or      rdi, r8
000298d9  49c1ed3b           shr     r13, 0x3b
000298dd  4821f7             and     rdi, rsi
000298e0  48897c0130         mov     qword [rcx+rax+0x30], rdi
000298e5  488b7c0238         mov     rdi, qword [rdx+rax+0x38]
000298ea  4989f8             mov     r8, rdi
000298ed  4801ff             add     rdi, rdi
000298f0  4c09ef             or      rdi, r13
000298f3  49c1e83b           shr     r8, 0x3b
000298f7  4821f7             and     rdi, rsi
000298fa  48897c0138         mov     qword [rcx+rax+0x38], rdi
000298ff  4883c040           add     rax, 0x40
00029903  4939c3             cmp     r11, rax
00029906  0f8525ffffff       jne     0x29831

0002990c  4d85c0             test    r8, r8
0002990f  7417               je      0x29928

00029911  458d61ff           lea     r12d, [r9-0x1]
00029915  4183c101           add     r9d, 0x1
00029919  4ac744e108010000…  mov     qword [rcx+r12*8+0x8], 0x1
00029922  4d63e1             movsxd  r12, r9d
00029925  44890b             mov     dword [rbx], r9d

00029928  4529ca             sub     r10d, r9d
0002992b  4a8d3ce1           lea     rdi, [rcx+r12*8]
0002992f  4585d2             test    r10d, r10d
00029932  7e12               jle     0x29946

00029934  4d63ca             movsxd  r9, r10d
00029937  31f6               xor     esi, esi  {0x0}
00029939  4a8d14cd00000000   lea     rdx, [r9*8]
00029941  e8aab9fdff         call    memset

00029946  8b6d08             mov     ebp, dword [rbp+0x8]
00029949  31c0               xor     eax, eax  {0x0}
0002994b  896b08             mov     dword [rbx+0x8], ebp
0002994e  4883c408           add     rsp, 0x8
00029952  5b                 pop     rbx {__saved_rbx}
00029953  5d                 pop     rbp {__saved_rbp}
00029954  415c               pop     r12 {__saved_r12}
00029956  415d               pop     r13 {__saved_r13}
00029958  e9accdfdff         jmp     __x86_return_thunk
{ Does not return }

0002995d                                                                                         0f 1f 00                               ...

00029960  4889df             mov     rdi, rbx
00029963  e888ebffff         call    mp_grow
{ Does not return }

00029968                          85 c0 75 e2 44 8b 4d 00 e9 6b fd ff ff 66 2e 0f 1f 84 00 00 00 00 00 90          ..u.D.M..k...f..........

00029980    void mp_mul_2d(int32_t* arg1, int32_t arg2, int32_t* arg3) __noreturn

00029980  85f6               test    esi, esi
00029982  0f883a020000       js      0x29bc2

00029988  4155               push    r13 {var_8}
0002998a  4989d5             mov     r13, rdx
0002998d  4154               push    r12 {var_10}
0002998f  55                 push    rbp {var_18}
00029990  53                 push    rbx {var_20}
00029991  89f3               mov     ebx, esi
00029993  4883ec08           sub     rsp, 0x8
00029997  4839d7             cmp     rdi, rdx
0002999a  7410               je      0x299ac

0002999c  4889d6             mov     rsi, rdx
0002999f  e84cd3ffff         call    mp_copy
{ Does not return }

000299a4              85 c0 0f 85 da 01 00 00                                                                  ........

000299ac  4863eb             movsxd  rbp, ebx
000299af  89d8               mov     eax, ebx
000299b1  418b5500           mov     edx, dword [r13]
000299b5  4c69e589888888     imul    r12, rbp, 0xffffffff88888889
000299bc  c1f81f             sar     eax, 0x1f
000299bf  49c1ec20           shr     r12, 0x20
000299c3  4101dc             add     r12d, ebx
000299c6  41c1fc05           sar     r12d, 0x5
000299ca  4129c4             sub     r12d, eax
000299cd  418d741401         lea     esi, [r12+rdx+0x1]
000299d2  41397504           cmp     dword [r13+0x4], esi
000299d6  0f8cd4010000       jl      0x29bb0

000299dc  83fb3b             cmp     ebx, 0x3b
000299df  0f8fb3010000       jg      0x29b98

000299e5  4869cd89888888     imul    rcx, rbp, 0xffffffff88888889
000299ec  89de               mov     esi, ebx
000299ee  c1fe1f             sar     esi, 0x1f
000299f1  48c1e920           shr     rcx, 0x20
000299f5  01d9               add     ecx, ebx
000299f7  c1f905             sar     ecx, 0x5
000299fa  29f1               sub     ecx, esi
000299fc  6bf93c             imul    edi, ecx, 0x3c
000299ff  29fb               sub     ebx, edi
00029a01  0f8475010000       je      0x29b7c

00029a07  458b4d00           mov     r9d, dword [r13]
00029a0b  4c63c3             movsxd  r8, ebx
00029a0e  be3c000000         mov     esi, 0x3c
00029a13  4d8b6510           mov     r12, qword [r13+0x10]
00029a17  4c29c6             sub     rsi, r8
00029a1a  4585c9             test    r9d, r9d
00029a1d  0f8e59010000       jle     0x29b7c

00029a23  4d63d9             movsxd  r11, r9d
00029a26  48c7c0ffffffff     mov     rax, 0xffffffffffffffff
00029a2d  89d9               mov     ecx, ebx
00029a2f  31ed               xor     ebp, ebp  {0x0}
00029a31  4a8d14ddf8ffffff   lea     rdx, [r11*8-0x8]
00029a39  48d3e0             shl     rax, cl
00029a3c  4f8d14dc           lea     r10, [r12+r11*8]
00029a40  48bfffffffffffff…  mov     rdi, 0xfffffffffffffff
00029a4a  48c1ea03           shr     rdx, 0x3
00029a4e  48f7d0             not     rax
00029a51  4883c201           add     rdx, 0x1
00029a55  83e203             and     edx, 0x3
00029a58  0f8481000000       je      0x29adf

00029a5e  4883fa01           cmp     rdx, 0x1
00029a62  744c               je      0x29ab0

00029a64  4883fa02           cmp     rdx, 0x2
00029a68  7420               je      0x29a8a

00029a6a  4d8b0424           mov     r8, qword [r12]
00029a6e  89f1               mov     ecx, esi
00029a70  4983c408           add     r12, 0x8
00029a74  4c89c5             mov     rbp, r8
00029a77  48d3ed             shr     rbp, cl
00029a7a  89d9               mov     ecx, ebx
00029a7c  49d3e0             shl     r8, cl
00029a7f  4821c5             and     rbp, rax
00029a82  4921f8             and     r8, rdi
00029a85  4d894424f8         mov     qword [r12-0x8], r8

00029a8a  498b1424           mov     rdx, qword [r12]
00029a8e  4989eb             mov     r11, rbp
00029a91  89f1               mov     ecx, esi
00029a93  4983c408           add     r12, 0x8
00029a97  4889d5             mov     rbp, rdx
00029a9a  48d3ed             shr     rbp, cl
00029a9d  89d9               mov     ecx, ebx
00029a9f  48d3e2             shl     rdx, cl
00029aa2  4821c5             and     rbp, rax
00029aa5  4c09da             or      rdx, r11
00029aa8  4821fa             and     rdx, rdi
00029aab  49895424f8         mov     qword [r12-0x8], rdx

00029ab0  4d8b0424           mov     r8, qword [r12]
00029ab4  4889ea             mov     rdx, rbp
00029ab7  89f1               mov     ecx, esi
00029ab9  4983c408           add     r12, 0x8
00029abd  4c89c5             mov     rbp, r8
00029ac0  48d3ed             shr     rbp, cl
00029ac3  89d9               mov     ecx, ebx
00029ac5  49d3e0             shl     r8, cl
00029ac8  4821c5             and     rbp, rax
00029acb  4909d0             or      r8, rdx
00029ace  4921f8             and     r8, rdi
00029ad1  4d894424f8         mov     qword [r12-0x8], r8
00029ad6  4d39d4             cmp     r12, r10
00029ad9  0f848c000000       je      0x29b6b

00029adf  4d8b0424           mov     r8, qword [r12]
00029ae3  89f1               mov     ecx, esi
00029ae5  498b542408         mov     rdx, qword [r12+0x8]
00029aea  4983c420           add     r12, 0x20
00029aee  4d89c3             mov     r11, r8
00029af1  49d3eb             shr     r11, cl
00029af4  89d9               mov     ecx, ebx
00029af6  49d3e0             shl     r8, cl
00029af9  89f1               mov     ecx, esi
00029afb  4921c3             and     r11, rax
00029afe  4909e8             or      r8, rbp
00029b01  4889d5             mov     rbp, rdx
00029b04  4921f8             and     r8, rdi
00029b07  48d3ed             shr     rbp, cl
00029b0a  89d9               mov     ecx, ebx
00029b0c  48d3e2             shl     rdx, cl
00029b0f  4d894424e0         mov     qword [r12-0x20], r8
00029b14  4d8b4424f0         mov     r8, qword [r12-0x10]
00029b19  89f1               mov     ecx, esi
00029b1b  4c09da             or      rdx, r11
00029b1e  4821c5             and     rbp, rax
00029b21  4821fa             and     rdx, rdi
00029b24  4d89c3             mov     r11, r8
00029b27  49d3eb             shr     r11, cl
00029b2a  49895424e8         mov     qword [r12-0x18], rdx
00029b2f  89d9               mov     ecx, ebx
00029b31  498b5424f8         mov     rdx, qword [r12-0x8]
00029b36  49d3e0             shl     r8, cl
00029b39  89f1               mov     ecx, esi
00029b3b  4921c3             and     r11, rax
00029b3e  4909e8             or      r8, rbp
00029b41  4889d5             mov     rbp, rdx
00029b44  48d3ed             shr     rbp, cl
00029b47  89d9               mov     ecx, ebx
00029b49  4921f8             and     r8, rdi
00029b4c  48d3e2             shl     rdx, cl
00029b4f  4d894424f0         mov     qword [r12-0x10], r8
00029b54  4821c5             and     rbp, rax
00029b57  4c09da             or      rdx, r11
00029b5a  4821fa             and     rdx, rdi
00029b5d  49895424f8         mov     qword [r12-0x8], rdx
00029b62  4d39d4             cmp     r12, r10
00029b65  0f8574ffffff       jne     0x29adf

00029b6b  4885ed             test    rbp, rbp
00029b6e  740c               je      0x29b7c

00029b70  4183c101           add     r9d, 0x1
00029b74  45894d00           mov     dword [r13], r9d
00029b78  49892c24           mov     qword [r12], rbp

00029b7c  4c89ef             mov     rdi, r13
00029b7f  e82ccaffff         call    mp_clamp
{ Does not return }


00029b84    void sub_29b84(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

00029b84  31c0               xor     eax, eax  {0x0}
00029b86  4883c408           add     rsp, 0x8
00029b8a  5b                 pop     rbx {arg1}
00029b8b  5d                 pop     rbp {arg2}
00029b8c  415c               pop     r12 {arg3}
00029b8e  415d               pop     r13 {arg4}
00029b90  e974cbfdff         jmp     __x86_return_thunk
{ Does not return }

00029b95                                                                 0f 1f 00                                               ...

{ Continuation of function mp_mul_2d }

00029b98  4489e6             mov     esi, r12d
00029b9b  4c89ef             mov     rdi, r13
00029b9e  e8adefffff         call    mp_lshd
{ Does not return }

00029ba3           85 c0 0f 84 3a fe ff ff eb d9 0f 1f 00                                                     ....:........

00029bb0  4c89ef             mov     rdi, r13
00029bb3  e838e9ffff         call    mp_grow
{ Does not return }

00029bb8                                                                          85 c0 0f 84 1c fe ff ff                          ........
00029bc0  eb c4                                                                                            ..

00029bc2  b8fdffffff         mov     eax, 0xfffffffd
00029bc7  e93dcbfdff         jmp     __x86_return_thunk
{ Does not return }

00029bcc                                      0f 1f 40 00                                                              ..@.

00029bd0    void mp_mul_d(int32_t* arg1, int64_t arg2, int32_t* arg3) __noreturn

00029bd0  4156               push    r14 {var_8}
00029bd2  4989f6             mov     r14, rsi
00029bd5  4155               push    r13 {var_10}
00029bd7  4154               push    r12 {var_18}
00029bd9  55                 push    rbp {var_20}
00029bda  4889fd             mov     rbp, rdi
00029bdd  53                 push    rbx {var_28}
00029bde  448b27             mov     r12d, dword [rdi]
00029be1  4889d3             mov     rbx, rdx
00029be4  458d6c2401         lea     r13d, [r12+0x1]
00029be9  44396a04           cmp     dword [rdx+0x4], r13d
00029bed  0f8c9d010000       jl      0x29d90

00029bf3  8b4508             mov     eax, dword [rbp+0x8]
00029bf6  448b0b             mov     r9d, dword [rbx]
00029bf9  4c8b5510           mov     r10, qword [rbp+0x10]
00029bfd  4c8b4310           mov     r8, qword [rbx+0x10]
00029c01  894308             mov     dword [rbx+0x8], eax
00029c04  4585e4             test    r12d, r12d
00029c07  0f8ea3010000       jle     0x29db0

00029c0d  4963fc             movsxd  rdi, r12d
00029c10  4c89f6             mov     rsi, r14
00029c13  31ed               xor     ebp, ebp  {0x0}
00029c15  4531f6             xor     r14d, r14d  {0x0}
00029c18  49bbffffffffffff…  mov     r11, 0xfffffffffffffff
00029c22  48c1e703           shl     rdi, 0x3
00029c26  488d57f8           lea     rdx, [rdi-0x8]
00029c2a  48c1ea03           shr     rdx, 0x3
00029c2e  4883c201           add     rdx, 0x1
00029c32  83e203             and     edx, 0x3
00029c35  747a               je      0x29cb1

00029c37  4883fa01           cmp     rdx, 0x1
00029c3b  7447               je      0x29c84

00029c3d  4883fa02           cmp     rdx, 0x2
00029c41  741d               je      0x29c60

00029c43  498b02             mov     rax, qword [r10]
00029c46  41be08000000       mov     r14d, 0x8
00029c4c  48f7e6             mul     rsi
00029c4f  4889c1             mov     rcx, rax
00029c52  4889c5             mov     rbp, rax
00029c55  4c21d9             and     rcx, r11
00029c58  480facd53c         shrd    rbp, rdx, 0x3c
00029c5d  498908             mov     qword [r8], rcx

00029c60  4b8b0432           mov     rax, qword [r10+r14]
00029c64  48f7e6             mul     rsi
00029c67  4801e8             add     rax, rbp
00029c6a  4889c5             mov     rbp, rax
00029c6d  4883d200           adc     rdx, 0x0
00029c71  4c21dd             and     rbp, r11
00029c74  4b892c30           mov     qword [r8+r14], rbp
00029c78  4889c5             mov     rbp, rax
00029c7b  4983c608           add     r14, 0x8
00029c7f  480facd53c         shrd    rbp, rdx, 0x3c

00029c84  4b8b0432           mov     rax, qword [r10+r14]
00029c88  48f7e6             mul     rsi
00029c8b  4801e8             add     rax, rbp
00029c8e  4889c1             mov     rcx, rax
00029c91  4883d200           adc     rdx, 0x0
00029c95  4889c5             mov     rbp, rax
00029c98  4c21d9             and     rcx, r11
00029c9b  480facd53c         shrd    rbp, rdx, 0x3c
00029ca0  4b890c30           mov     qword [r8+r14], rcx
00029ca4  4983c608           add     r14, 0x8
00029ca8  4c39f7             cmp     rdi, r14
00029cab  0f8493000000       je      0x29d44

00029cb1  4b8b0432           mov     rax, qword [r10+r14]
00029cb5  48f7e6             mul     rsi
00029cb8  4801e8             add     rax, rbp
00029cbb  4889c1             mov     rcx, rax
00029cbe  4883d200           adc     rdx, 0x0
00029cc2  4889c5             mov     rbp, rax
00029cc5  4c21d9             and     rcx, r11
00029cc8  480facd53c         shrd    rbp, rdx, 0x3c
00029ccd  4b890c30           mov     qword [r8+r14], rcx
00029cd1  4b8b443208         mov     rax, qword [r10+r14+0x8]
00029cd6  48f7e6             mul     rsi
00029cd9  4801e8             add     rax, rbp
00029cdc  4889c1             mov     rcx, rax
00029cdf  4883d200           adc     rdx, 0x0
00029ce3  4889c5             mov     rbp, rax
00029ce6  4c21d9             and     rcx, r11
00029ce9  480facd53c         shrd    rbp, rdx, 0x3c
00029cee  4b894c3008         mov     qword [r8+r14+0x8], rcx
00029cf3  4b8b443210         mov     rax, qword [r10+r14+0x10]
00029cf8  48f7e6             mul     rsi
00029cfb  4801e8             add     rax, rbp
00029cfe  4889c1             mov     rcx, rax
00029d01  4883d200           adc     rdx, 0x0
00029d05  4889c5             mov     rbp, rax
00029d08  4c21d9             and     rcx, r11
00029d0b  480facd53c         shrd    rbp, rdx, 0x3c
00029d10  4b894c3010         mov     qword [r8+r14+0x10], rcx
00029d15  4b8b443218         mov     rax, qword [r10+r14+0x18]
00029d1a  48f7e6             mul     rsi
00029d1d  4801e8             add     rax, rbp
00029d20  4889c1             mov     rcx, rax
00029d23  4883d200           adc     rdx, 0x0
00029d27  4889c5             mov     rbp, rax
00029d2a  4c21d9             and     rcx, r11
00029d2d  480facd53c         shrd    rbp, rdx, 0x3c
00029d32  4b894c3018         mov     qword [r8+r14+0x18], rcx
00029d37  4983c620           add     r14, 0x20
00029d3b  4c39f7             cmp     rdi, r14
00029d3e  0f856dffffff       jne     0x29cb1

00029d44  458d5424ff         lea     r10d, [r12-0x1]
00029d49  4f8d44d008         lea     r8, [r8+r10*8+0x8]

00029d4e  4183e901           sub     r9d, 0x1
00029d52  498928             mov     qword [r8], rbp
00029d55  498d7808           lea     rdi, [r8+0x8]
00029d59  4529e1             sub     r9d, r12d
00029d5c  4585c9             test    r9d, r9d
00029d5f  7e12               jle     0x29d73

00029d61  4d63c9             movsxd  r9, r9d
00029d64  31f6               xor     esi, esi  {0x0}
00029d66  4a8d14cd00000000   lea     rdx, [r9*8]
00029d6e  e87db5fdff         call    memset

00029d73  44892b             mov     dword [rbx], r13d
00029d76  4889df             mov     rdi, rbx
00029d79  e832c8ffff         call    mp_clamp
{ Does not return }

00029d7e                                                                                            31 c0                                1.
00029d80  5b 5d 41 5c 41 5d 41 5e e9 7c c9 fd ff 0f 1f 00                                                  []A\A]A^.|......

00029d90  4489ee             mov     esi, r13d
00029d93  4889d7             mov     rdi, rdx
00029d96  e855e7ffff         call    mp_grow
{ Does not return }

00029d9b                                                                                   85 c0 75 e1 44                             ..u.D
00029da0  8b 65 00 45 8d 6c 24 01 e9 46 fe ff ff 0f 1f 00                                                  .e.E.l$..F......

00029db0  4531e4             xor     r12d, r12d  {0x0}
00029db3  31ed               xor     ebp, ebp  {0x0}
00029db5  eb97               jmp     0x29d4e

00029db7                                                                       66 0f 1f 84 00 00 00 00 00                         f........

00029dc0    void mp_mulmod(int64_t arg1, int64_t arg2, int32_t* arg3) __noreturn

00029dc0  4157               push    r15 {var_8}
00029dc2  4989d7             mov     r15, rdx
00029dc5  4156               push    r14 {var_10}
00029dc7  4989f6             mov     r14, rsi
00029dca  4155               push    r13 {var_18}
00029dcc  4154               push    r12 {var_20}
00029dce  55                 push    rbp {var_28}
00029dcf  4889fd             mov     rbp, rdi
00029dd2  53                 push    rbx {var_30}
00029dd3  4883ec28           sub     rsp, 0x28
00029dd7  8b32               mov     esi, dword [rdx]
00029dd9  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00029de2  4c896c2418         mov     qword [rsp+0x18 {var_40}], r13
00029de7  4989cd             mov     r13, rcx
00029dea  4889e7             mov     rdi, rsp {var_58}
00029ded  e85eebffff         call    mp_init_size
{ Does not return }

00029df2                                                        89 c3 85 c0 74 28 48 8b 44 24 18 64 48 2b                    ....t(H.D$.dH+
00029e00  04 25 28 00 00 00 75 49 48 83 c4 28 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 ec c8 fd ff 0f 1f 00  .%(...uIH..(..[]A\A]A^A_........
00029e20  48 89 e2 4c 89 f6 48 89 ef 49 89 e4 e8 df f7 ff ff 89 c3 85 c0 75 10 4c 89 ea 4c 89 fe 48 89 e7  H..L..H..I...........u.L..L..H..
00029e40  e8 1b f0 ff ff 89 c3 4c 89 e7 e8 d1 c8 ff ff eb a7 e8 ba b3 fd ff 66 2e 0f 1f 84 00 00 00 00 00  .......L..............f.........

00029e60    void mp_neg(int32_t* arg1, int32_t* arg2) __noreturn

00029e60  55                 push    rbp {__saved_rbp}
00029e61  4889fd             mov     rbp, rdi
00029e64  53                 push    rbx {__saved_rbx}
00029e65  4889f3             mov     rbx, rsi
00029e68  4883ec08           sub     rsp, 0x8
00029e6c  4839f7             cmp     rdi, rsi
00029e6f  7409               je      0x29e7a

00029e71  e87aceffff         call    mp_copy
{ Does not return }

00029e76                                                                    85 c0 75 15                                          ..u.

00029e7a  8b0b               mov     ecx, dword [rbx]
00029e7c  85c9               test    ecx, ecx
00029e7e  7420               je      0x29ea0

00029e80  8b5508             mov     edx, dword [rbp+0x8]
00029e83  31c0               xor     eax, eax  {0x0}
00029e85  85d2               test    edx, edx
00029e87  0f94c0             sete    al
00029e8a  894308             mov     dword [rbx+0x8], eax
00029e8d  31c0               xor     eax, eax  {0x0}

00029e8f  4883c408           add     rsp, 0x8
00029e93  5b                 pop     rbx {__saved_rbx}
00029e94  5d                 pop     rbp {__saved_rbp}
00029e95  e96fc8fdff         jmp     __x86_return_thunk
{ Does not return }

00029e9a                                                                                66 0f 1f 44 00 00                            f..D..

00029ea0  c7430800000000     mov     dword [rbx+0x8], 0x0
00029ea7  31c0               xor     eax, eax  {0x0}
00029ea9  ebe4               jmp     0x29e8f

00029eab                                   0f 1f 44 00 00                                                             ..D..

00029eb0    void mp_prime_is_prime(int32_t* arg1, int32_t arg2, int32_t* arg3) __noreturn

00029eb0  4157               push    r15 {__saved_r15}
00029eb2  4156               push    r14 {__saved_r14}
00029eb4  4155               push    r13 {__saved_r13}
00029eb6  4154               push    r12 {__saved_r12}
00029eb8  4189f4             mov     r12d, esi
00029ebb  55                 push    rbp {__saved_rbp}
00029ebc  53                 push    rbx {__saved_rbx}
00029ebd  4889fb             mov     rbx, rdi
00029ec0  4883ec48           sub     rsp, 0x48
00029ec4  64488b2c25280000…  mov     rbp, qword [fs:0x28]
00029ecd  48896c2438         mov     qword [rsp+0x38 {var_40}], rbp
00029ed2  4889d5             mov     rbp, rdx
00029ed5  c70200000000       mov     dword [rdx], 0x0
00029edb  8b07               mov     eax, dword [rdi]
00029edd  83f801             cmp     eax, 0x1
00029ee0  0f84da020000       je      0x2a1c0

00029ee6  85c0               test    eax, eax
00029ee8  0f8402030000       je      0x2a1f0

00029eee  488b5710           mov     rdx, qword [rdi+0x10]
00029ef2  488b0a             mov     rcx, qword [rdx]

00029ef5  f6c101             test    cl, 0x1
00029ef8  0f84f2020000       je      0x2a1f0

00029efe  4c8d6c241c         lea     r13, [rsp+0x1c {var_5c}]
00029f03  4889df             mov     rdi, rbx
00029f06  4c89ee             mov     rsi, r13 {var_5c}
00029f09  e8f2850000         call    mp_is_square
{ Does not return }

00029f0e                                            41 89 c7 85 c0 0f 85 da 02 00 00 8b 7c 24 1c 85 ff 0f                A...........|$....
00029f20  85 cb 02 00 00 45 31 f6 0f 1f 84 00 00 00 00 00 4c 8b 05 a9 c7 01 00 48 89 df 4b 8b 34 30 e8 4d  .....E1.........L......H..K.40.M
00029f40  c9 ff ff 85 c0 0f 84 95 02 00 00 4c 8b 0d 8e c7 01 00 48 89 df 4b 8b 74 31 08 e8 31 c9 ff ff 85  ...........L......H..K.t1..1....
00029f60  c0 0f 84 79 02 00 00 4c 8b 15 72 c7 01 00 48 89 df 4b 8b 74 32 10 e8 15 c9 ff ff 85 c0 0f 84 5d  ...y...L..r...H..K.t2..........]
00029f80  02 00 00 4c 8b 1d 56 c7 01 00 48 89 df 4b 8b 74 33 18 e8 f9 c8 ff ff 85 c0 0f 84 41 02 00 00 4c  ...L..V...H..K.t3..........A...L
00029fa0  8b 3d 3a c7 01 00 48 89 df 4b 8b 74 37 20 e8 dd c8 ff ff 85 c0 0f 84 25 02 00 00 48 8b 05 1e c7  .=:...H..K.t7 .........%...H....
00029fc0  01 00 48 89 df 4a 8b 74 30 28 e8 c1 c8 ff ff 85 c0 0f 84 09 02 00 00 48 8b 15 02 c7 01 00 48 89  ..H..J.t0(.............H......H.
00029fe0  df 4a 8b 74 32 30 e8 a5 c8 ff ff 85 c0 0f 84 ed 01 00 00 48 8b 0d e6 c6 01 00 48 89 df 4a 8b 74  .J.t20.............H......H..J.t
0002a000  31 38 e8 89 c8 ff ff 85 c0 0f 84 d1 01 00 00 49 83 c6 40 49 81 fe 00 08 00 00 0f 85 10 ff ff ff  18.............I..@I............
0002a020  4c 89 ee 48 89 df e8 35 6f 00 00 41 89 c7 85 c0 0f 85 bd 01 00 00 83 7c 24 1c 01 0f 84 af 01 00  L..H...5o..A...........|$.......
0002a040  00 4c 8d 74 24 20 be 02 00 00 00 4c 89 f7 e8 7d 84 00 00 41 89 c7 85 c0 0f 85 95 01 00 00 4c 89  .L.t$ .....L...}...A..........L.
0002a060  ea 4c 89 f6 48 89 df e8 94 02 00 00 41 89 c7 85 c0 0f 85 a7 01 00 00 8b 74 24 1c 85 f6 0f 84 9b  .L..H.......A...........t$......
0002a080  01 00 00 48 8b 7c 24 30 4c 89 ea 4c 89 f6 48 83 07 01 48 89 df e8 66 02 00 00 89 44 24 04 85 c0  ...H.|$0L..L..H...H...f....D$...
0002a0a0  0f 85 73 01 00 00 83 7c 24 1c 00 0f 84 6d 01 00 00 45 85 e4 0f 84 78 01 00 00 0f 88 7d 01 00 00  ..s....|$....m...E....x.....}...
0002a0c0  48 89 df e8 18 cf ff ff 31 c9 89 44 24 08 d1 f8 74 07 83 c1 01 d1 f8 75 f9 41 83 cb ff 41 d3 e3  H.......1..D$...t......u.A...A..
0002a0e0  41 f7 d3 44 89 5c 24 0c eb 14 66 0f 1f 44 00 00 44 8b 54 24 04 45 39 d4 0f 8e eb 01 00 00 be 01  A..D.\$...f..D..D.T$.E9.........
0002a100  00 00 00 4c 89 f7 e8 c5 0d 00 00 85 c0 0f 85 15 01 00 00 48 8b 44 24 30 8b 54 24 0c be 22 22 22  ...L...............H.D$0.T$.."""
0002a120  02 23 10 89 d7 81 ff c3 ff ff 7f 77 10 be 89 88 88 88 48 0f af fe 48 c1 ef 25 8d 77 01 4c 89 f7  .#.........w......H...H..%.w.L..
0002a140  e8 8b 0d 00 00 85 c0 0f 85 db 00 00 00 4c 89 f7 e8 8b ce ff ff 39 44 24 08 7f 20 44 8b 44 24 08  .............L.......9D$.. D.D$.
0002a160  31 c9 4c 89 f2 4c 89 f7 44 29 c0 8d 70 01 e8 bd d9 ff ff 85 c0 0f 85 ad 00 00 00 be 03 00 00 00  1.L..L..D)..p...................
0002a180  4c 89 f7 e8 08 c7 ff ff 83 f8 01 0f 85 5f ff ff ff 4c 89 ea 4c 89 f6 48 89 df e8 61 01 00 00 85  L............_...L..L..H...a....
0002a1a0  c0 0f 85 81 00 00 00 44 8b 4c 24 1c 45 85 c9 74 6d 83 44 24 04 01 e9 35 ff ff ff 0f 1f 44 00 00  .......D.L$.E..tm.D$...5.....D..

0002a1c0  488b7710           mov     rsi, qword [rdi+0x10]
0002a1c4  488b0e             mov     rcx, qword [rsi]
0002a1c7  4883f901           cmp     rcx, 0x1
0002a1cb  7623               jbe     0x2a1f0

0002a1cd  4883f902           cmp     rcx, 0x2
0002a1d1  0f851efdffff       jne     0x29ef5

0002a1d7  660f1f8400000000…  nop     word [rax+rax]
0002a1e0  c7450001000000     mov     dword [rbp], 0x1
0002a1e7  660f1f8400000000…  nop     word [rax+rax]

0002a1f0  4531ff             xor     r15d, r15d
0002a1f3  488b442438         mov     rax, qword [rsp+0x38 {var_40}]
0002a1f8  64482b0425280000…  sub     rax, qword [fs:0x28]
0002a201  752a               jne     0x2a22d

0002a203  4883c448           add     rsp, 0x48
0002a207  4489f8             mov     eax, r15d  {0x0}
0002a20a  5b                 pop     rbx {__saved_rbx}
0002a20b  5d                 pop     rbp {__saved_rbp}
0002a20c  415c               pop     r12 {__saved_r12}
0002a20e  415d               pop     r13 {__saved_r13}
0002a210  415e               pop     r14 {__saved_r14}
0002a212  415f               pop     r15 {__saved_r15}
0002a214  e9f0c4fdff         jmp     __x86_return_thunk
{ Does not return }

0002a219                                                                             44 8b 7c 24 04 4c 89                           D.|$.L.
0002a220  f7 e8 fa c4 ff ff eb cb 41 89 c7 eb f1                                                           ........A....

0002a22d  e8deaffdff         call    __stack_chk_fail
{ Does not return }

0002a232                                                        41 bc 01 00 00 00 e9 83 fe ff ff ba 10 00                    A.............
0002a240  00 00 48 8d 35 d5 d4 00 00 4c 89 f7 e8 ef 0e 00 00 85 c0 75 d3 4c 89 f6 48 89 df e8 e0 c5 ff ff  ..H.5....L.........u.L..H.......
0002a260  41 ba 0c 00 00 00 83 c0 01 74 2e ba 10 00 00 00 48 8d 35 bc d4 00 00 4c 89 f7 e8 c1 0e 00 00 85  A........t......H.5....L........
0002a280  c0 75 a5 4c 89 f6 48 89 df e8 b2 c5 ff ff 83 c0 01 75 62 41 ba 0d 00 00 00 45 31 e4 4c 8b 05 3d  .u.L..H..........ubA.....E1.L..=
0002a2a0  c4 01 00 4c 89 f7 44 89 54 24 04 4b 8b 74 e0 10 e8 3b 17 00 00 4c 89 ea 4c 89 f6 48 89 df e8 3d  ...L..D.T$.K.t...;...L..L..H...=
0002a2c0  00 00 00 85 c0 0f 85 5d ff ff ff 83 7c 24 1c 00 0f 84 48 ff ff ff 49 83 c4 01 44 8b 54 24 04 45  .......]....|$....H...I...D.T$.E
0002a2e0  8d 4c 24 02 45 39 d1 7c b3 c7 45 00 01 00 00 00 e9 29 ff ff ff 41 bf fd ff ff ff e9 1e ff ff ff  .L$.E9.|..E......)...A..........

0002a300    void mp_prime_miller_rabin(int64_t arg1, void* arg2, int32_t* arg3) __noreturn

0002a300  4157               push    r15 {var_8}
0002a302  4156               push    r14 {var_10}
0002a304  4155               push    r13 {var_18}
0002a306  4154               push    r12 {var_20}
0002a308  4989fc             mov     r12, rdi
0002a30b  55                 push    rbp {var_28}
0002a30c  53                 push    rbx {var_30}
0002a30d  4889f3             mov     rbx, rsi
0002a310  be01000000         mov     esi, 0x1
0002a315  4889df             mov     rdi, rbx
0002a318  4883ec78           sub     rsp, 0x78
0002a31c  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0002a325  48896c2468         mov     qword [rsp+0x68 {var_40}], rbp
0002a32a  4889d5             mov     rbp, rdx
0002a32d  c70200000000       mov     dword [rdx], 0x0
0002a333  e858c5ffff         call    mp_cmp_d
{ Does not return }

0002a338                                                                          83 f8 01 0f 85 0f 01 00                          ........
0002a340  00 4c 8d 6c 24 10 4c 89 e6 4c 89 ef e8 5f e2 ff ff 41 89 c7 85 c0 74 30 48 8b 44 24 68 64 48 2b  .L.l$.L..L..._...A....t0H.D$hdH+
0002a360  04 25 28 00 00 00 0f 85 84 02 00 00 48 83 c4 78 44 89 f8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 87 c3  .%(.........H..xD..[]A\A]A^A_...
0002a380  fd ff 66 0f 1f 44 00 00 4c 89 ea be 01 00 00 00 4c 89 ef e8 d8 18 00 00 41 89 c7 85 c0 75 17 4c  ..f..D..L.......L.......A....u.L
0002a3a0  8d 74 24 50 4c 89 ee 4c 89 f7 e8 01 e2 ff ff 41 89 c7 85 c0 74 0a 4c 89 ef e8 62 c3 ff ff eb 98  .t$PL..L.......A....t.L...b.....
0002a3c0  4c 89 f7 e8 78 c7 ff ff 31 c9 4c 89 f2 4c 89 f7 89 c6 89 44 24 08 e8 55 d7 ff ff 41 89 c7 85 c0  L...x...1.L..L.....D$..U...A....
0002a3e0  75 15 48 8d 7c 24 30 48 89 3c 24 e8 80 e1 ff ff 41 89 c7 85 c0 74 19 4c 89 f7 e8 21 c3 ff ff 4c  u.H.|$0H.<$.....A....t.L...!...L
0002a400  89 ef e8 19 c3 ff ff e9 4c ff ff ff 0f 1f 40 00 48 8b 0c 24 4c 89 e2 4c 89 f6 48 89 df e8 8e da  ........L.....@.H..$L..L..H.....
0002a420  ff ff 41 89 c7 85 c0 75 19 48 8b 3c 24 be 01 00 00 00 e8 59 c4 ff ff 85 c0 75 20 c7 45 00 01 00  ..A....u.H.<$......Y.....u .E...
0002a440  00 00 48 8b 3c 24 e8 d5 c2 ff ff eb aa 0f 1f 00 41 bf fd ff ff ff e9 fd fe ff ff 48 8b 1c 24 4c  ..H.<$..........A..........H..$L
0002a460  89 ee 48 89 df e8 d6 c3 ff ff 85 c0 74 cd 8b 44 24 08 83 e8 01 89 44 24 08 85 c0 0f 8e 4e 01 00  ..H.........t..D$.....D$.....N..
0002a480  00 83 e8 01 4c 89 ee 48 89 df 83 e0 01 89 44 24 0c e8 aa c3 ff ff 85 c0 0f 84 31 01 00 00 48 8b  ....L..H......D$..........1...H.
0002a4a0  1c 24 4c 89 e6 48 89 da 48 89 df e8 b0 16 00 00 85 c0 0f 85 30 01 00 00 be 01 00 00 00 48 89 df  .$L..H..H...........0........H..
0002a4c0  48 89 1c 24 e8 c7 c3 ff ff 85 c0 0f 84 71 ff ff ff 8b 54 24 08 bb 02 00 00 00 39 d3 0f 8f ed 00  H..$.........q....T$......9.....
0002a4e0  00 00 8b 4c 24 0c 85 c9 0f 84 cd 00 00 00 48 8b 1c 24 4c 89 ee 48 89 df e8 43 c3 ff ff 85 c0 0f  ...L$.........H..$L..H...C......
0002a500  84 ca 00 00 00 48 89 da 4c 89 e6 48 89 df e8 4d 16 00 00 85 c0 0f 85 cd 00 00 00 be 01 00 00 00  .....H..L..H...M................
0002a520  48 89 df e8 68 c3 ff ff 85 c0 0f 84 12 ff ff ff 8b 74 24 08 bb 03 00 00 00 39 f3 7e 7e e9 8d 00  H...h............t$......9.~~...
0002a540  00 00 66 0f 1f 44 00 00 48 8b 14 24 4c 89 e6 48 89 d7 e8 09 16 00 00 85 c0 0f 85 89 00 00 00 48  ..f..D..H..$L..H...............H
0002a560  8b 3c 24 be 01 00 00 00 e8 23 c3 ff ff 85 c0 0f 84 cd fe ff ff 48 8b 3c 24 4c 89 ee e8 bf c2 ff  .<$......#...........H.<$L......
0002a580  ff 85 c0 74 4a 48 8b 14 24 4c 89 e6 48 89 d7 e8 cc 15 00 00 85 c0 75 50 48 8b 3c 24 be 01 00 00  ...tJH..$L..H.........uPH.<$....
0002a5a0  00 e8 ea c2 ff ff 85 c0 0f 84 94 fe ff ff 44 8b 44 24 08 83 c3 02 44 39 c3 7f 14 48 8b 3c 24 4c  ..............D.D$....D9...H.<$L
0002a5c0  89 ee e8 79 c2 ff ff 85 c0 0f 85 79 ff ff ff 48 8b 3c 24 4c 89 ee e8 65 c2 ff ff 85 c0 0f 84 58  ...y.......y...H.<$L...e.......X
0002a5e0  fe ff ff e9 5a fe ff ff 41 89 c7 e9 52 fe ff ff e8 1b ac fd ff 66 2e 0f 1f 84 00 00 00 00 00 90  ....Z...A...R........f..........

0002a600    void mp_prime_next_prime(void* arg1, int32_t arg2, int32_t arg3) __noreturn

0002a600  4157               push    r15 {var_8}
0002a602  4156               push    r14 {var_10}
0002a604  4155               push    r13 {var_18}
0002a606  4154               push    r12 {var_20}
0002a608  55                 push    rbp {var_28}
0002a609  53                 push    rbx {var_30}
0002a60a  4889fb             mov     rbx, rdi
0002a60d  4881ec58080000     sub     rsp, 0x858
0002a614  488b05c5c00100     mov     rax, qword [rel s_mp_prime_tab]
0002a61b  89742404           mov     dword [rsp+0x4 {var_884}], esi
0002a61f  488bb0f8070000     mov     rsi, qword [rax+0x7f8]
0002a626  64488b2c25280000…  mov     rbp, qword [fs:0x28]
0002a62f  4889ac2448080000   mov     qword [rsp+0x848 {var_40}], rbp
0002a637  89d5               mov     ebp, edx
0002a639  c7470800000000     mov     dword [rdi+0x8], 0x0
0002a640  c744241c00000000   mov     dword [rsp+0x1c {var_86c}], 0x0
0002a648  e843c2ffff         call    mp_cmp_d
{ Does not return }

0002a64d                                         83 f8 ff 0f 84 a8 03 00 00 83 fd 01 0f 84 a8 04 00 00 44               ..................D
0002a660  8b 1b 45 85 db 0f 84 bc 04 00 00 4c 8b 7b 10 41 f6 07 01 0f 84 ae 04 00 00 41 bd 02 00 00 00 48  ..E........L.{.A.........A.....H
0002a680  8b 2d 5a c0 01 00 48 8d 54 24 48 48 89 df 4c 8d 64 24 40 48 8b 75 08 e8 54 e9 ff ff 85 c0 0f 85  .-Z...H.T$HH..L.d$@H.u..T.......
0002a6a0  2d 03 00 00 48 8b 05 35 c0 01 00 48 8d 54 24 50 48 89 df 48 8b 70 10 e8 34 e9 ff ff 85 c0 0f 85  -...H..5...H.T$PH..H.p..4.......
0002a6c0  0d 03 00 00 4c 8b 35 15 c0 01 00 48 8d 54 24 58 48 89 df 49 8b 76 18 e8 14 e9 ff ff 85 c0 0f 85  ....L.5....H.T$XH..I.v..........
0002a6e0  ed 02 00 00 41 bf 20 00 00 00 48 8b 0d ef bf 01 00 4b 8d 14 3c 48 89 df 4a 8b 34 39 e8 ef e8 ff  ....A. ...H......K..<H..J.49....
0002a700  ff 85 c0 0f 85 c8 02 00 00 48 8b 3d d0 bf 01 00 4b 8d 54 3c 08 4a 8b 74 3f 08 48 89 df e8 ce e8  .........H.=....K.T<.J.t?.H.....
0002a720  ff ff 85 c0 0f 85 a7 02 00 00 48 8b 35 af bf 01 00 4b 8d 54 3c 10 48 89 df 4a 8b 74 3e 10 e8 ad  ..........H.5....K.T<.H..J.t>...
0002a740  e8 ff ff 85 c0 0f 85 86 02 00 00 4c 8b 05 8e bf 01 00 4b 8d 54 3c 18 48 89 df 4b 8b 74 38 18 e8  ...........L......K.T<.H..K.t8..
0002a760  8c e8 ff ff 85 c0 0f 85 65 02 00 00 4c 8b 0d 6d bf 01 00 4b 8d 54 3c 20 48 89 df 4b 8b 74 39 20  ........e...L..m...K.T< H..K.t9 
0002a780  e8 6b e8 ff ff 85 c0 0f 85 44 02 00 00 4c 8b 15 4c bf 01 00 4b 8d 54 3c 28 48 89 df 4b 8b 74 3a  .k.......D...L..L...K.T<(H..K.t:
0002a7a0  28 e8 4a e8 ff ff 85 c0 0f 85 23 02 00 00 49 83 c7 30 49 81 ff 00 08 00 00 0f 85 2b ff ff ff 48  (.J.......#...I..0I........+...H
0002a7c0  8d 7c 24 20 48 89 7c 24 08 e8 a2 dd ff ff 85 c0 0f 85 fb 01 00 00 49 83 fd 02 4d 8d b4 24 00 08  .|$ H.|$..............I...M..$..
0002a7e0  00 00 48 ba fe ff ff ff ff ff ff 0f 48 bd fc ff ff ff ff ff ff 0f 48 0f 44 ea 4c 8d 7c 24 48 4c  ..H.........H.........H.D.L.|$HL
0002a800  8d 64 24 1c 4c 8b 1d d5 be 01 00 31 c9 49 8d 7b 08 4c 89 f6 4c 01 e9 4c 89 fa 49 89 fa 4c 29 fe  .d$.L......1.I.{.L..L..L..I..L).
0002a820  45 31 db 48 83 ee 08 48 c1 ee 03 48 83 c6 01 83 e6 03 0f 84 a8 00 00 00 48 83 fe 01 74 5d 48 83  E1.H...H...H............H...t]H.
0002a840  fe 02 74 2a 49 8b 07 4c 01 e8 49 89 07 4c 8b 07 4c 39 c0 72 06 4c 29 c0 49 89 07 48 85 c0 49 8d  ..t*I..L..I..L..L9.r.L).I..H..I.
0002a860  57 08 4c 8d 57 08 41 0f 94 c1 45 0f b6 d9 48 8b 32 4c 01 ee 48 89 32 49 8b 02 48 39 c6 72 06 48  W.L.W.A...E...H.2L..H.2I..H9.r.H
0002a880  29 c6 48 89 32 48 85 f6 41 0f 94 c0 48 83 c2 08 49 83 c2 08 45 0f b6 c8 45 09 cb 48 8b 32 4c 01  ).H.2H..A...H...I...E...E..H.2L.
0002a8a0  ee 48 89 32 49 8b 02 48 39 c6 72 06 48 29 c6 48 89 32 48 85 f6 41 0f 94 c0 48 83 c2 08 49 83 c2  .H.2I..H9.r.H).H.2H..A...H...I..
0002a8c0  08 45 0f b6 c8 45 09 cb 4c 39 f2 0f 84 c5 00 00 00 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00  .E...E..L9.......ff...........@.
0002a8e0  48 8b 32 4c 01 ee 48 89 32 49 8b 02 48 39 c6 72 06 48 29 c6 48 89 32 48 85 f6 49 8d 42 08 48 8d  H.2L..H.2I..H9.r.H).H.2H..I.B.H.
0002a900  72 08 41 0f 94 c0 45 0f b6 c8 4c 8b 42 08 45 09 cb 4d 01 e8 4c 89 42 08 4d 8b 52 08 4d 39 d0 72  r.A...E...L.B.E..M..L.B.M.R.M9.r
0002a920  07 4d 29 d0 4c 89 42 08 31 d2 4d 85 c0 4c 8b 46 08 0f 94 c2 4d 01 e8 41 09 d3 4c 89 46 08 4c 8b  .M).L.B.1.M..L.F....M..A..L.F.L.
0002a940  48 08 4d 39 c8 72 07 4d 29 c8 4c 89 46 08 4d 85 c0 4c 8b 46 10 41 0f 94 c2 4d 01 e8 41 0f b6 d2  H.M9.r.M).L.F.M..L.F.A...M..A...
0002a960  4c 89 46 10 4c 8b 48 10 41 09 d3 4d 39 c8 72 07 4d 29 c8 4c 89 46 10 4d 85 c0 41 0f 94 c2 41 0f  L.F.L.H.A..M9.r.M).L.F.M..A...A.
0002a980  b6 d2 4c 8d 50 18 41 09 d3 48 8d 56 18 4c 39 f2 0f 85 4a ff ff ff 41 83 fb 01 0f 85 c7 02 00 00  ..L.P.A..H.V.L9...J...A.........
0002a9a0  48 39 e9 0f 82 68 fe ff ff 48 89 da 48 89 ce 48 89 df e8 29 b8 ff ff 85 c0 0f 84 45 fe ff ff 48  H9...h...H..H..H...).......E...H
0002a9c0  8b 7c 24 08 89 44 24 04 e8 53 bd ff ff 8b 44 24 04 48 8b 94 24 48 08 00 00 64 48 2b 14 25 28 00  .|$..D$..S....D$.H..$H...dH+.%(.
0002a9e0  00 00 0f 85 d7 03 00 00 48 81 c4 58 08 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f e9 0b bd fd ff 45 31  ........H..X...[]A\A]A^A_.....E1
0002aa00  e4 83 fd 01 0f 85 88 03 00 00 48 8b 15 cf bc 01 00 48 89 df 4a 8b 34 22 e8 73 be ff ff 83 f8 01  ..........H......H..J.4".s......
0002aa20  0f 87 1e 01 00 00 48 8b 35 b3 bc 01 00 48 89 df 4d 8d 6c 24 08 4a 8b 74 26 08 e8 51 be ff ff 83  ......H.5....H..M.l$.J.t&..Q....
0002aa40  f8 01 0f 87 26 01 00 00 4c 8b 15 91 bc 01 00 48 89 df 4b 8b 74 2a 08 e8 34 be ff ff 83 f8 01 0f  ....&...L......H..K.t*..4.......
0002aa60  87 27 01 00 00 4c 8b 35 74 bc 01 00 48 89 df 4b 8b 74 2e 10 e8 17 be ff ff 83 f8 01 0f 87 28 01  .'...L.5t...H..K.t............(.
0002aa80  00 00 48 8b 05 57 bc 01 00 48 89 df 4a 8b 74 28 18 e8 fa bd ff ff 83 f8 01 0f 87 29 01 00 00 48  ..H..W...H..J.t(...........)...H
0002aaa0  8b 3d 3a bc 01 00 4a 8b 74 2f 20 48 89 df e8 dd bd ff ff 83 f8 01 0f 87 2c 01 00 00 4c 8b 0d 1d  .=:...J.t/ H............,...L...
0002aac0  bc 01 00 48 89 df 4b 8b 74 29 28 e8 c0 bd ff ff 83 f8 01 0f 87 30 01 00 00 4c 8b 25 00 bc 01 00  ...H..K.t)(..........0...L.%....
0002aae0  48 89 df 4b 8b 74 2c 30 e8 a3 bd ff ff 83 f8 01 0f 87 34 01 00 00 4d 8d 65 38 49 81 fd c8 07 00  H..K.t,0..........4...M.e8I.....
0002ab00  00 0f 85 03 ff ff ff 4c 8b 6b 10 49 8b 6d 00 83 e5 03 48 83 fd 03 0f 85 2f 01 00 00 41 bd 04 00  .......L.k.I.m....H...../...A...
0002ab20  00 00 e9 58 fb ff ff 48 89 da be 01 00 00 00 48 89 df e8 39 11 00 00 85 c0 0f 84 3a fb ff ff e9  ...X...H.......H...9.......:....
0002ab40  8d fe ff ff 48 8b 0d 95 bb 01 00 4a 8b 34 21 48 89 f7 48 f7 d7 40 f6 c7 03 0f 85 c7 fe ff ff 48  ....H......J.4!H..H..@.........H
0002ab60  89 df e8 89 0e 00 00 31 c0 e9 63 fe ff ff 4c 8b 05 6b bb 01 00 4b 8b 74 20 08 49 89 f1 49 f7 d1  .......1..c...L..k...K.t .I..I..
0002ab80  41 f6 c1 03 0f 85 be fe ff ff eb d3 4c 8b 1d 4d bb 01 00 4b 8b 74 2b 08 49 89 f4 49 f7 d4 41 f6  A...........L..M...K.t+.I..I..A.
0002aba0  c4 03 0f 85 bd fe ff ff eb b5 4c 8b 3d 2f bb 01 00 4b 8b 74 2f 10 48 89 f5 48 f7 d5 40 f6 c5 03  ..........L.=/...K.t/.H..H..@...
0002abc0  0f 85 bc fe ff ff eb 97 48 8b 15 11 bb 01 00 4a 8b 74 2a 18 48 89 f1 48 f7 d1 f6 c1 03 0f 85 bc  ........H......J.t*.H..H........
0002abe0  fe ff ff e9 77 ff ff ff 48 8b 35 f1 ba 01 00 4a 8b 74 2e 20 49 89 f0 49 f7 d0 41 f6 c0 03 0f 85  ....w...H.5....J.t. I..I..A.....
0002ac00  b8 fe ff ff e9 56 ff ff ff 4c 8b 15 d0 ba 01 00 4b 8b 74 2a 28 49 89 f3 49 f7 d3 41 f6 c3 03 0f  .....V...L......K.t*(I..I..A....
0002ac20  85 b4 fe ff ff e9 35 ff ff ff 4c 8b 35 af ba 01 00 4b 8b 74 2e 30 49 89 f7 49 f7 d7 41 f6 c7 03  ......5...L.5....K.t.0I..I..A...
0002ac40  0f 85 b0 fe ff ff e9 14 ff ff ff 48 8d 75 01 48 89 da 48 89 df e8 16 10 00 00 85 c0 0f 84 ba fe  ...........H.u.H..H.............
0002ac60  ff ff e9 6a fd ff ff 48 89 da 48 89 ce 48 89 df e8 6b b5 ff ff 85 c0 0f 85 42 fd ff ff 8b 74 24  ...j...H..H..H...k.......B....t$
0002ac80  04 4c 89 e2 48 89 df e8 24 f2 ff ff 85 c0 0f 85 2b fd ff ff 83 7c 24 1c 01 0f 85 65 fb ff ff e9  .L..H...$.......+....|$....e....
0002aca0  1b fd ff ff 48 8b 15 35 ba 01 00 4d 8d 74 24 08 48 89 df 4d 89 f4 4a 8b 34 32 e8 d1 bb ff ff 83  ....H..5...M.t$.H..M..J.42......
0002acc0  f8 01 0f 87 e6 00 00 00 48 8b 0d 11 ba 01 00 49 83 c4 08 48 89 df 4a 8b 34 21 e8 b1 bb ff ff 83  ........H......I...H..J.4!......
0002ace0  f8 01 0f 87 c6 00 00 00 48 8b 3d f1 b9 01 00 4d 8d 66 10 4a 8b 74 37 10 48 89 df e8 90 bb ff ff  ........H.=....M.f.J.t7.H.......
0002ad00  83 f8 01 0f 87 a5 00 00 00 48 8b 35 d0 b9 01 00 48 89 df 4d 8d 66 18 4a 8b 74 36 18 e8 6f bb ff  .........H.5....H..M.f.J.t6..o..
0002ad20  ff 83 f8 01 0f 87 84 00 00 00 4c 8b 05 af b9 01 00 48 89 df 4d 8d 66 20 4b 8b 74 30 20 e8 4e bb  ..........L......H..M.f K.t0 .N.
0002ad40  ff ff 83 f8 01 77 67 4c 8b 0d 92 b9 01 00 48 89 df 4d 8d 66 28 4b 8b 74 31 28 e8 31 bb ff ff 83  .....wgL......H..M.f(K.t1(.1....
0002ad60  f8 01 77 4a 4c 8b 15 75 b9 01 00 48 89 df 4d 8d 66 30 4b 8b 74 32 30 e8 14 bb ff ff 83 f8 01 77  ..wJL..u...H..M.f0K.t20........w
0002ad80  2d 4d 8d 66 38 49 81 fe c8 07 00 00 0f 84 cd f8 ff ff 48 8b 05 47 b9 01 00 48 89 df 4a 8b 34 20  -M.f8I............H..G...H..J.4 
0002ada0  e8 eb ba ff ff 83 f8 01 0f 86 f6 fe ff ff 4c 8b 2d 2b b9 01 00 4b 8b 74 25 00 e9 a0 fd ff ff e8  ..............L.-+...K.t%.......
0002adc0  4c a4 fd ff 66 2e 0f 1f 84 00 00 00 00 00 66 90                                                  L...f.........f.

0002add0    void mp_prime_rabin_miller_trials(int32_t arg1) __noreturn

0002add0  31c0               xor     eax, eax  {0x0}
0002add2  488d0d87ec0000     lea     rcx, [rel sizes]

0002add9  89c6               mov     esi, eax
0002addb  393cc1             cmp     dword [rcx+rax*8], edi
0002adde  0f84ac000000       je      0x2ae90

0002ade4  0f8fb6000000       jg      0x2aea0

0002adea  488d5001           lea     rdx, [rax+0x1]
0002adee  4889d0             mov     rax, rdx
0002adf1  89d6               mov     esi, edx
0002adf3  393cd1             cmp     dword [rcx+rdx*8], edi
0002adf6  0f8494000000       je      0x2ae90

0002adfc  0f8f9e000000       jg      0x2aea0

0002ae02  4883c001           add     rax, 0x1
0002ae06  89c6               mov     esi, eax
0002ae08  393cc1             cmp     dword [rcx+rax*8], edi
0002ae0b  0f847f000000       je      0x2ae90

0002ae11  0f8f89000000       jg      0x2aea0

0002ae17  488d4202           lea     rax, [rdx+0x2]
0002ae1b  89c6               mov     esi, eax
0002ae1d  393cc1             cmp     dword [rcx+rax*8], edi
0002ae20  746e               je      0x2ae90

0002ae22  7f7c               jg      0x2aea0

0002ae24  488d4203           lea     rax, [rdx+0x3]
0002ae28  89c6               mov     esi, eax
0002ae2a  393cc1             cmp     dword [rcx+rax*8], edi
0002ae2d  7461               je      0x2ae90

0002ae2f  7f6f               jg      0x2aea0

0002ae31  488d4204           lea     rax, [rdx+0x4]
0002ae35  89c6               mov     esi, eax
0002ae37  393cc1             cmp     dword [rcx+rax*8], edi
0002ae3a  7454               je      0x2ae90

0002ae3c  7f62               jg      0x2aea0

0002ae3e  488d4205           lea     rax, [rdx+0x5]
0002ae42  89c6               mov     esi, eax
0002ae44  393cc1             cmp     dword [rcx+rax*8], edi
0002ae47  7447               je      0x2ae90

0002ae49  7f55               jg      0x2aea0

0002ae4b  488d4206           lea     rax, [rdx+0x6]
0002ae4f  89c6               mov     esi, eax
0002ae51  393cc1             cmp     dword [rcx+rax*8], edi
0002ae54  743a               je      0x2ae90

0002ae56  7f48               jg      0x2aea0

0002ae58  488d4207           lea     rax, [rdx+0x7]
0002ae5c  89c6               mov     esi, eax
0002ae5e  393cc1             cmp     dword [rcx+rax*8], edi
0002ae61  742d               je      0x2ae90

0002ae63  7f3b               jg      0x2aea0

0002ae65  488d4208           lea     rax, [rdx+0x8]
0002ae69  89c6               mov     esi, eax
0002ae6b  393cc1             cmp     dword [rcx+rax*8], edi
0002ae6e  7420               je      0x2ae90

0002ae70  7f2e               jg      0x2aea0

0002ae72  488d4209           lea     rax, [rdx+0x9]
0002ae76  4883fa0b           cmp     rdx, 0xb
0002ae7a  0f8559ffffff       jne     0x2add9

0002ae80  b802000000         mov     eax, 0x2

0002ae85  e97fb8fdff         jmp     __x86_return_thunk
{ Does not return }

0002ae8a                                66 0f 1f 44 00 00                                                            f..D..

0002ae90  4898               cdqe    
0002ae92  8b44c104           mov     eax, dword [rcx+rax*8+0x4]
0002ae96  e96eb8fdff         jmp     __x86_return_thunk
{ Does not return }

0002ae9b                                                                                   0f 1f 44 00 00                             ..D..

0002aea0  b8ffffffff         mov     eax, 0xffffffff
0002aea5  85f6               test    esi, esi
0002aea7  74dc               je      0x2ae85

0002aea9  83ee01             sub     esi, 0x1
0002aeac  4863fe             movsxd  rdi, esi
0002aeaf  8b44f904           mov     eax, dword [rcx+rdi*8+0x4]
0002aeb3  e951b8fdff         jmp     __x86_return_thunk
{ Does not return }

0002aeb8                                                                          0f 1f 84 00 00 00 00 00                          ........

0002aec0    void mp_rand_source(uint64_t arg1) __noreturn

0002aec0  48893de9c70100     mov     qword [rel s_mp_rand_source], rdi
0002aec7  e93db8fdff         jmp     __x86_return_thunk
{ Does not return }

0002aecc                                      0f 1f 40 00                                                              ..@.

0002aed0    void mp_rand(int32_t* arg1, int32_t arg2) __noreturn

0002aed0  4157               push    r15 {__saved_r15}
0002aed2  4156               push    r14 {__saved_r14}
0002aed4  4155               push    r13 {__saved_r13}
0002aed6  4154               push    r12 {__saved_r12}
0002aed8  4189f4             mov     r12d, esi
0002aedb  55                 push    rbp {__saved_rbp}
0002aedc  53                 push    rbx {__saved_rbx}
0002aedd  4889fb             mov     rbx, rdi
0002aee0  4883ec08           sub     rsp, 0x8
0002aee4  e897170000         call    mp_zero
0002aee9  4585e4             test    r12d, r12d
0002aeec  0f8e1e020000       jle     0x2b110

0002aef2  4489e6             mov     esi, r12d
0002aef5  4889df             mov     rdi, rbx
0002aef8  e8f3d5ffff         call    mp_grow
{ Does not return }

0002aefd                                                                                         89 c5 85                               ...
0002af00  c0 0f 85 0b 02 00 00 4d 63 ec 48 8b 7b 10 48 8b 05 9b c7 01 00 49 c1 e5 03 4c 89 ee e8 0b b8 fd  .......Mc.H.{.H......I...L......
0002af20  ff 89 c5 85 c0 0f 85 e7 01 00 00 49 bf ff ff ff ff ff ff ff 0f 45 8d 74 24 ff 4d 63 f6 49 c1 e6  ...........I.........E.t$.Mc.I..
0002af40  03 eb 23 0f 1f 44 00 00 48 8b 05 61 c7 01 00 4a 8d 7c 2f f8 be 08 00 00 00 e8 ce b7 fd ff 85 c0  ..#..D..H..a...J.|/.............
0002af60  0f 85 ca 01 00 00 48 8b 7b 10 4c 89 fa 4a 23 14 37 74 d5 44 89 23 41 83 fc 01 0f 84 77 01 00 00  ......H.{.L..J#.7t.D.#A.....w...
0002af80  48 bb ff ff ff ff ff ff ff 0f 44 89 e1 48 89 fd d1 e9 66 48 0f 6e c3 48 c1 e1 04 66 0f 6c c0 48  H.........D..H....fH.n.H...f.l.H
0002afa0  8d 34 39 48 83 e9 10 48 c1 e9 04 48 83 c1 01 83 e1 07 0f 84 a6 00 00 00 48 83 f9 01 0f 84 82 00  .49H...H...H............H.......
0002afc0  00 00 48 83 f9 02 74 6b 48 83 f9 03 74 54 48 83 f9 04 74 3d 48 83 f9 05 74 26 48 83 f9 06 74 0f  ..H...tkH...tTH...t=H...t&H...t.
0002afe0  f3 0f 6f 0f 48 8d 6f 10 66 0f db c8 0f 11 0f f3 0f 6f 55 00 48 83 c5 10 66 0f db d0 0f 11 55 f0  ..o.H.o.f........oU.H...f.....U.
0002b000  f3 0f 6f 5d 00 48 83 c5 10 66 0f db d8 0f 11 5d f0 f3 0f 6f 65 00 48 83 c5 10 66 0f db e0 0f 11  ..o].H...f.....]...oe.H...f.....
0002b020  65 f0 f3 0f 6f 6d 00 48 83 c5 10 66 0f db e8 0f 11 6d f0 f3 0f 6f 75 00 48 83 c5 10 66 0f db f0  e...om.H...f.....m...ou.H...f...
0002b040  0f 11 75 f0 f3 0f 6f 7d 00 48 83 c5 10 66 0f db f8 0f 11 7d f0 48 39 ee 0f 84 8d 00 00 00 f3 44  ..u...o}.H...f.....}.H9........D
0002b060  0f 6f 45 00 f3 44 0f 6f 4d 10 48 83 ed 80 f3 44 0f 6f 55 a0 f3 44 0f 6f 5d b0 f3 44 0f 6f 65 c0  .oE..D.oM.H....D.oU..D.o]..D.oe.
0002b080  66 44 0f db c0 66 44 0f db c8 f3 44 0f 6f 6d d0 f3 44 0f 6f 75 e0 f3 44 0f 6f 7d f0 66 44 0f db  fD...fD....D.om..D.ou..D.o}.fD..
0002b0a0  d0 66 44 0f db d8 66 44 0f db e0 66 44 0f db e8 44 0f 11 45 80 66 44 0f db f0 66 44 0f db f8 44  .fD...fD...fD...D..E.fD...fD...D
0002b0c0  0f 11 4d 90 44 0f 11 55 a0 44 0f 11 5d b0 44 0f 11 65 c0 44 0f 11 6d d0 44 0f 11 75 e0 44 0f 11  ..M.D..U.D..].D..e.D..m.D..u.D..
0002b0e0  7d f0 48 39 ee 0f 85 73 ff ff ff 44 89 e5 83 e5 fe 41 83 e4 01 74 19 49 b9 ff ff ff ff ff ff ff  }.H9...s...D.....A...t.I........
0002b100  0f 4c 63 c5 4e 21 0c c7 0f 1f 84 00 00 00 00 00                                                  .Lc.N!..........

0002b110  31ed               xor     ebp, ebp
0002b112  4883c408           add     rsp, 0x8
0002b116  89e8               mov     eax, ebp  {0x0}
0002b118  5b                 pop     rbx {__saved_rbx}
0002b119  5d                 pop     rbp {__saved_rbp}
0002b11a  415c               pop     r12 {__saved_r12}
0002b11c  415d               pop     r13 {__saved_r13}
0002b11e  415e               pop     r14 {__saved_r14}
0002b120  415f               pop     r15 {__saved_r15}
0002b122  e9e2b5fdff         jmp     __x86_return_thunk
{ Does not return }

0002b127                       66 0f 1f 84 00 00 00 00 00 89 c5 eb de 66 2e 0f 1f 84 00 00 00 00 00 66 90         f............f.........f.

0002b140    void mp_read_radix(int32_t* arg1, char* arg2, int32_t arg3) __noreturn

0002b140  4157               push    r15 {__saved_r15}
0002b142  4156               push    r14 {__saved_r14}
0002b144  4155               push    r13 {__saved_r13}
0002b146  4154               push    r12 {__saved_r12}
0002b148  4189d4             mov     r12d, edx
0002b14b  55                 push    rbp {__saved_rbp}
0002b14c  4889f5             mov     rbp, rsi
0002b14f  53                 push    rbx {__saved_rbx}
0002b150  4889fb             mov     rbx, rdi
0002b153  4883ec18           sub     rsp, 0x18
0002b157  e824150000         call    mp_zero
0002b15c  418d4424fe         lea     eax, [r12-0x2]
0002b161  83f83e             cmp     eax, 0x3e
0002b164  0f87c2000000       ja      0x2b22c

0002b16a  807d002d           cmp     byte [rbp], 0x2d
0002b16e  c744240c00000000   mov     dword [rsp+0xc {var_3c_1}], 0x0
0002b176  750c               jne     0x2b184

0002b178  c744240c01000000   mov     dword [rsp+0xc {var_3c_1}], 0x1
0002b180  4883c501           add     rbp, 0x1

0002b184  4889df             mov     rdi, rbx
0002b187  e8f4140000         call    mp_zero
0002b18c  440fb64500         movzx   r8d, byte [rbp]
0002b191  4584c0             test    r8b, r8b
0002b194  0f842b010000       je      0x2b2c5

0002b19a  4c8b2d5ff20000     mov     r13, qword [rel mp_s_rmap_reverse_sz]  {0x58}
0002b1a1  4c8d3578f20000     lea     r14, [rel mp_s_rmap_reverse]
0002b1a8  4183fc24           cmp     r12d, 0x24
0002b1ac  0f8ede000000       jle     0x2b290

0002b1b2  450fbec8           movsx   r9d, r8b
0002b1b6  4183e928           sub     r9d, 0x28
0002b1ba  4d39cd             cmp     r13, r9
0002b1bd  725b               jb      0x2b21a

0002b1bf  90                 nop     
0002b1c0  470fb6140e         movzx   r10d, byte [r14+r9]
0002b1c5  4589d7             mov     r15d, r10d
0002b1c8  4539e2             cmp     r10d, r12d
0002b1cb  7d4d               jge     0x2b21a

0002b1cd  4181faff000000     cmp     r10d, 0xff
0002b1d4  7444               je      0x2b21a

0002b1d6  4963f4             movsxd  rsi, r12d
0002b1d9  4889da             mov     rdx, rbx
0002b1dc  4889df             mov     rdi, rbx
0002b1df  e8ece9ffff         call    mp_mul_d
{ Does not return }

0002b1e4              85 c0 75 49 41 0f b6 f7 48 89 da 48 89 df e8 e9 af ff ff 85 c0 75 36 44 0f b6 45 01      ..uIA...H..H.........u6D..E.
0002b200  48 83 c5 01 45 84 c0 0f 84 b8 00 00 00 45 0f be c8 41 83 e9 28 4d 39 cd 73 a6                    H...E........E...A..(M9.s.

0002b21a  4180f80d           cmp     r8b, 0xd
0002b21e  0f8690000000       jbe     0x2b2b4

0002b224  4889df             mov     rdi, rbx
0002b227  e854140000         call    mp_zero

0002b22c  b8fdffffff         mov     eax, 0xfffffffd
0002b231  4883c418           add     rsp, 0x18
0002b235  5b                 pop     rbx {__saved_rbx}
0002b236  5d                 pop     rbp {__saved_rbp}
0002b237  415c               pop     r12 {__saved_r12}
0002b239  415d               pop     r13 {__saved_r13}
0002b23b  415e               pop     r14 {__saved_r14}
0002b23d  415f               pop     r15 {__saved_r15}
0002b23f  e9c5b4fdff         jmp     __x86_return_thunk
{ Does not return }

0002b244              0f 1f 40 00                                                                              ..@.

0002b248  410fb63c36         movzx   edi, byte [r14+rsi]
0002b24d  4189ff             mov     r15d, edi
0002b250  81ffff000000       cmp     edi, 0xff
0002b256  74c2               je      0x2b21a

0002b258  4139fc             cmp     r12d, edi
0002b25b  7ebd               jle     0x2b21a

0002b25d  4963f4             movsxd  rsi, r12d
0002b260  4889da             mov     rdx, rbx
0002b263  4889df             mov     rdi, rbx
0002b266  e865e9ffff         call    mp_mul_d
{ Does not return }

0002b26b                                   85 c0 75 c2 41 0f b6 f7 48 89 da 48 89 df e8 62 af ff ff 85 c0             ..u.A...H..H...b.....
0002b280  75 af 44 0f b6 45 01 48 83 c5 01 45 84 c0 74 35                                                  u.D..E.H...E..t5

0002b290  418d489f           lea     ecx, [r8-0x61]
0002b294  418d50e0           lea     edx, [r8-0x20]
0002b298  80f91a             cmp     cl, 0x1a
0002b29b  410f43d0           cmovae  edx, r8d
0002b29f  0fbef2             movsx   esi, dl
0002b2a2  83ee28             sub     esi, 0x28
0002b2a5  4939f5             cmp     r13, rsi
0002b2a8  739e               jae     0x2b248

0002b2aa  4180f80d           cmp     r8b, 0xd
0002b2ae  0f8770ffffff       ja      0x2b224

0002b2b4  49c7c3fedbffff     mov     r11, 0xffffffffffffdbfe
0002b2bb  4d0fa3c3           bt      r11, r8
0002b2bf  0f825fffffff       jb      0x2b224

0002b2c5  8b2b               mov     ebp, dword [rbx]
0002b2c7  85ed               test    ebp, ebp
0002b2c9  7409               je      0x2b2d4

0002b2cb  448b64240c         mov     r12d, dword [rsp+0xc {var_3c_1}]
0002b2d0  44896308           mov     dword [rbx+0x8], r12d

0002b2d4  4883c418           add     rsp, 0x18
0002b2d8  31c0               xor     eax, eax  {0x0}
0002b2da  5b                 pop     rbx {__saved_rbx}
0002b2db  5d                 pop     rbp {__saved_rbp}
0002b2dc  415c               pop     r12 {__saved_r12}
0002b2de  415d               pop     r13 {__saved_r13}
0002b2e0  415e               pop     r14 {__saved_r14}
0002b2e2  415f               pop     r15 {__saved_r15}
0002b2e4  e920b4fdff         jmp     __x86_return_thunk
{ Does not return }

0002b2e9                             0f 1f 80 00 00 00 00                                                           .......

0002b2f0    void mp_reduce_is_2k(int32_t* arg1) __noreturn

0002b2f0  8b07               mov     eax, dword [rdi]
0002b2f2  85c0               test    eax, eax
0002b2f4  0f8456010000       je      0x2b450

0002b2fa  83f801             cmp     eax, 0x1
0002b2fd  7f11               jg      0x2b310

0002b2ff  b801000000         mov     eax, 0x1
0002b304  e900b4fdff         jmp     __x86_return_thunk
{ Does not return }

0002b309                             0f 1f 80 00 00 00 00                                                           .......

0002b310  53                 push    rbx {var_8}
0002b311  4889fb             mov     rbx, rdi
0002b314  e8c7bcffff         call    mp_count_bits
{ Does not return }

0002b319                                                                             41 89 c0 83 f8 3c 0f                           A....<.
0002b320  8e 0c 01 00 00 45 89 c1 48 8b 73 10 b8 01 00 00 00 ba 01 00 00 00 48 bf ff ff ff ff ff ff ff 0f  .....E..H.s...........H.........
0002b340  b9 3c 00 00 00 41 83 e1 03 74 6b 41 83 f9 01 74 3d 41 83 f9 02 74 14 48 23 04 c6 0f 84 df 00 00  .<...A...tkA...t=A...t.H#.......
0002b360  00 b8 02 00 00 00 b9 3d 00 00 00 4c 63 d2 49 89 c3 4e 23 1c d6 0f 84 c5 00 00 00 48 01 c0 48 39  .......=...Lc.I..N#........H..H9
0002b380  c7 73 08 83 c2 01 b8 01 00 00 00 83 c1 01 4c 63 ca 48 89 c3 4a 23 1c ce 0f 84 a2 00 00 00 48 01  .s............Lc.H..J#........H.
0002b3a0  c0 48 39 c7 73 08 83 c2 01 b8 01 00 00 00 83 c1 01 41 39 c8 74 7b 4c 63 d2 49 89 c3 4e 23 1c d6  .H9.s............A9.t{Lc.I..N#..
0002b3c0  74 7e 48 01 c0 48 39 c7 73 08 83 c2 01 b8 01 00 00 00 4c 63 ca 83 c1 01 48 89 c3 4a 23 1c ce 74  t~H..H9.s.........Lc....H..J#..t
0002b3e0  5f 48 01 c0 48 39 c7 73 08 83 c2 01 b8 01 00 00 00 4c 63 d2 49 89 c3 4e 23 1c d6 74 43 48 01 c0  _H..H9.s.........Lc.I..N#..tCH..
0002b400  48 39 c7 73 08 83 c2 01 b8 01 00 00 00 4c 63 ca 48 89 c3 4a 23 1c ce 74 27 48 01 c0 48 39 c7 73  H9.s.........Lc.H..J#..t'H..H9.s
0002b420  08 83 c2 01 b8 01 00 00 00 83 c1 03 41 39 c8 75 85 b8 01 00 00 00 5b e9 cd b2 fd ff 0f 1f 40 00  ............A9.u......[.......@.
0002b440  31 c0 5b e9 c1 b2 fd ff 0f 1f 84 00 00 00 00 00                                                  1.[.............

0002b450  31c0               xor     eax, eax  {0x0}
0002b452  e9b2b2fdff         jmp     __x86_return_thunk
{ Does not return }

0002b457                                                                       66 0f 1f 84 00 00 00 00 00                         f........

0002b460    void mp_reduce_is_2k_l(int32_t* arg1) __noreturn

0002b460  8b17               mov     edx, dword [rdi]
0002b462  85d2               test    edx, edx
0002b464  0f8460020000       je      0x2b6ca

0002b46a  83fa01             cmp     edx, 0x1
0002b46d  0f8457020000       je      0x2b6ca

0002b473  0f8e5f020000       jle     0x2b6d8

0002b479  8d42ff             lea     eax, [rdx-0x1]
0002b47c  488b7710           mov     rsi, qword [rdi+0x10]
0002b480  83f802             cmp     eax, 0x2
0002b483  0f8677020000       jbe     0x2b700

0002b489  4189d3             mov     r11d, edx
0002b48c  4889f0             mov     rax, rsi
0002b48f  660fefc0           pxor    xmm0, xmm0
0002b493  49b8ffffffffffff…  mov     r8, 0xfffffffffffffff
0002b49d  41c1eb02           shr     r11d, 0x2
0002b4a1  66490f6ed0         movq    xmm2, r8
0002b4a6  49c1e305           shl     r11, 0x5
0002b4aa  660f6cd2           punpcklqdq xmm2, xmm2
0002b4ae  498d0c33           lea     rcx, [r11+rsi]
0002b4b2  4983eb20           sub     r11, 0x20
0002b4b6  49c1eb05           shr     r11, 0x5
0002b4ba  4983c301           add     r11, 0x1
0002b4be  4183e303           and     r11d, 0x3
0002b4c2  0f84b1000000       je      0x2b579

0002b4c8  4983fb01           cmp     r11, 0x1
0002b4cc  7469               je      0x2b537

0002b4ce  4983fb02           cmp     r11, 0x2
0002b4d2  742f               je      0x2b503

0002b4d4  f30f6f1e           movdqu  xmm3, xmmword [rsi]
0002b4d8  f30f6f6e10         movdqu  xmm5, xmmword [rsi+0x10]
0002b4dd  488d4620           lea     rax, [rsi+0x20]
0002b4e1  660f76da           pcmpeqd xmm3, xmm2
0002b4e5  660f76ea           pcmpeqd xmm5, xmm2
0002b4e9  660f70cbb1         pshufd  xmm1, xmm3, 0xb1
0002b4ee  660f70e5b1         pshufd  xmm4, xmm5, 0xb1
0002b4f3  660fdbcb           pand    xmm1, xmm3
0002b4f7  660fdbec           pand    xmm5, xmm4
0002b4fb  0fc6cd88           shufps  xmm1, xmm5, 0x88
0002b4ff  660ffac1           psubd   xmm0, xmm1

0002b503  f30f6f30           movdqu  xmm6, xmmword [rax]
0002b507  f3440f6f4010       movdqu  xmm8, xmmword [rax+0x10]
0002b50d  4883c020           add     rax, 0x20
0002b511  660f76f2           pcmpeqd xmm6, xmm2
0002b515  66440f76c2         pcmpeqd xmm8, xmm2
0002b51a  660f70feb1         pshufd  xmm7, xmm6, 0xb1
0002b51f  66450f70c8b1       pshufd  xmm9, xmm8, 0xb1
0002b525  660fdbfe           pand    xmm7, xmm6
0002b529  66450fdbc1         pand    xmm8, xmm9
0002b52e  410fc6f888         shufps  xmm7, xmm8, 0x88
0002b533  660ffac7           psubd   xmm0, xmm7

0002b537  f3440f6f10         movdqu  xmm10, xmmword [rax]
0002b53c  f3440f6f6010       movdqu  xmm12, xmmword [rax+0x10]
0002b542  4883c020           add     rax, 0x20
0002b546  66440f76d2         pcmpeqd xmm10, xmm2
0002b54b  66440f76e2         pcmpeqd xmm12, xmm2
0002b550  66450f70dab1       pshufd  xmm11, xmm10, 0xb1
0002b556  66450f70ecb1       pshufd  xmm13, xmm12, 0xb1
0002b55c  66450fdbda         pand    xmm11, xmm10
0002b561  66450fdbe5         pand    xmm12, xmm13
0002b566  450fc6dc88         shufps  xmm11, xmm12, 0x88
0002b56b  66410ffac3         psubd   xmm0, xmm11
0002b570  4839c8             cmp     rax, rcx
0002b573  0f84d6000000       je      0x2b64f

0002b579  f3440f6f30         movdqu  xmm14, xmmword [rax]
0002b57e  f30f6f5810         movdqu  xmm3, xmmword [rax+0x10]
0002b583  4883e880           sub     rax, 0xffffffffffffff80
0002b587  f30f6f68a0         movdqu  xmm5, xmmword [rax-0x60]
0002b58c  f30f6f78b0         movdqu  xmm7, xmmword [rax-0x50]
0002b591  66440f76f2         pcmpeqd xmm14, xmm2
0002b596  660f76da           pcmpeqd xmm3, xmm2
0002b59a  f3440f6f40c0       movdqu  xmm8, xmmword [rax-0x40]
0002b5a0  f3440f6f50d0       movdqu  xmm10, xmmword [rax-0x30]
0002b5a6  660f76ea           pcmpeqd xmm5, xmm2
0002b5aa  660f76fa           pcmpeqd xmm7, xmm2
0002b5ae  f3440f6f60e0       movdqu  xmm12, xmmword [rax-0x20]
0002b5b4  66440f76c2         pcmpeqd xmm8, xmm2
0002b5b9  66440f76d2         pcmpeqd xmm10, xmm2
0002b5be  66450f70feb1       pshufd  xmm15, xmm14, 0xb1
0002b5c4  66440f76e2         pcmpeqd xmm12, xmm2
0002b5c9  660f70cbb1         pshufd  xmm1, xmm3, 0xb1
0002b5ce  66450fdbfe         pand    xmm15, xmm14
0002b5d3  f3440f6f70f0       movdqu  xmm14, xmmword [rax-0x10]
0002b5d9  660fdbd9           pand    xmm3, xmm1
0002b5dd  660f70f5b1         pshufd  xmm6, xmm5, 0xb1
0002b5e2  660f70e7b1         pshufd  xmm4, xmm7, 0xb1
0002b5e7  440fc6fb88         shufps  xmm15, xmm3, 0x88
0002b5ec  660fdbf5           pand    xmm6, xmm5
0002b5f0  66410ffac7         psubd   xmm0, xmm15
0002b5f5  66440f76f2         pcmpeqd xmm14, xmm2
0002b5fa  660fdbfc           pand    xmm7, xmm4
0002b5fe  66450f70c8b1       pshufd  xmm9, xmm8, 0xb1
0002b604  66450f70dab1       pshufd  xmm11, xmm10, 0xb1
0002b60a  66450fdbc8         pand    xmm9, xmm8
0002b60f  66450f70ecb1       pshufd  xmm13, xmm12, 0xb1
0002b615  0fc6f788           shufps  xmm6, xmm7, 0x88
0002b619  66450fdbd3         pand    xmm10, xmm11
0002b61e  660ffac6           psubd   xmm0, xmm6
0002b622  66450fdbec         pand    xmm13, xmm12
0002b627  66450f70feb1       pshufd  xmm15, xmm14, 0xb1
0002b62d  450fc6ca88         shufps  xmm9, xmm10, 0x88
0002b632  66410ffac1         psubd   xmm0, xmm9
0002b637  66450fdbf7         pand    xmm14, xmm15
0002b63c  450fc6ee88         shufps  xmm13, xmm14, 0x88
0002b641  66410ffac5         psubd   xmm0, xmm13
0002b646  4839c8             cmp     rax, rcx
0002b649  0f852affffff       jne     0x2b579

0002b64f  660f6fd0           movdqa  xmm2, xmm0
0002b653  4189d2             mov     r10d, edx
0002b656  660f73da08         psrldq  xmm2, 0x8
0002b65b  4183e2fc           and     r10d, 0xfffffffc
0002b65f  660ffec2           paddd   xmm0, xmm2
0002b663  660f6fd8           movdqa  xmm3, xmm0
0002b667  660f73db04         psrldq  xmm3, 0x4
0002b66c  660ffec3           paddd   xmm0, xmm3
0002b670  66410f7ec1         movd    r9d, xmm0
0002b675  f6c203             test    dl, 0x3
0002b678  7445               je      0x2b6bf

0002b67a  4963fa             movsxd  rdi, r10d
0002b67d  4c3904fe           cmp     qword [rsi+rdi*8], r8
0002b681  7465               je      0x2b6e8

0002b683  458d4201           lea     r8d, [r10+0x1]
0002b687  4439c2             cmp     edx, r8d
0002b68a  7e33               jle     0x2b6bf

0002b68c  48b9ffffffffffff…  mov     rcx, 0xfffffffffffffff
0002b696  4d63d8             movsxd  r11, r8d
0002b699  4a390cde           cmp     qword [rsi+r11*8], rcx
0002b69d  7504               jne     0x2b6a3

0002b69f  4183c101           add     r9d, 0x1

0002b6a3  4183c202           add     r10d, 0x2
0002b6a7  4439d2             cmp     edx, r10d
0002b6aa  7e13               jle     0x2b6bf

0002b6ac  49b8ffffffffffff…  mov     r8, 0xfffffffffffffff
0002b6b6  4d63d2             movsxd  r10, r10d
0002b6b9  4e3904d6           cmp     qword [rsi+r10*8], r8
0002b6bd  7431               je      0x2b6f0

0002b6bf  d1fa               sar     edx, 0x1
0002b6c1  4439ca             cmp     edx, r9d
0002b6c4  0f9ec2             setle   dl
0002b6c7  0fb6d2             movzx   edx, dl

0002b6ca  89d0               mov     eax, edx
0002b6cc  e938b0fdff         jmp     __x86_return_thunk
{ Does not return }

0002b6d1                                                     0f 1f 80 00 00 00 00                                           .......

0002b6d8  31d2               xor     edx, edx
0002b6da  89d0               mov     eax, edx  {0x0}
0002b6dc  e928b0fdff         jmp     __x86_return_thunk
{ Does not return }

0002b6e1     0f 1f 80 00 00 00 00                                                                           .......

0002b6e8  4183c101           add     r9d, 0x1
0002b6ec  eb95               jmp     0x2b683

0002b6ee                                            66 90                                                                f.

0002b6f0  4183c101           add     r9d, 0x1
0002b6f4  ebc9               jmp     0x2b6bf

0002b6f6                                                                    66 2e 0f 1f 84 00 00 00 00 00                        f.........

0002b700  48b9ffffffffffff…  mov     rcx, 0xfffffffffffffff
0002b70a  48390e             cmp     qword [rsi], rcx
0002b70d  41b801000000       mov     r8d, 0x1
0002b713  400f94c7           sete    dil
0002b717  4531d2             xor     r10d, r10d  {0x0}
0002b71a  440fb6cf           movzx   r9d, dil
0002b71e  e969ffffff         jmp     0x2b68c

0002b723           66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00                                                     f............

0002b730    int64_t mp_rshd(int32_t* arg1, int32_t arg2)

0002b730  85f6               test    esi, esi
0002b732  0f8e98010000       jle     0x2b8d0

0002b738  55                 push    rbp {__saved_rbp}
0002b739  53                 push    rbx {__saved_rbx}
0002b73a  4889fb             mov     rbx, rdi
0002b73d  4883ec08           sub     rsp, 0x8
0002b741  8b07               mov     eax, dword [rdi]
0002b743  39f0               cmp     eax, esi
0002b745  0f8e8d020000       jle     0x2b9d8

0002b74b  488b7f10           mov     rdi, qword [rdi+0x10]
0002b74f  89c5               mov     ebp, eax
0002b751  4c63c6             movsxd  r8, esi
0002b754  29f5               sub     ebp, esi
0002b756  4a8d14c7           lea     rdx, [rdi+r8*8]
0002b75a  85ed               test    ebp, ebp
0002b75c  0f8e86020000       jle     0x2b9e8

0002b762  448d4dff           lea     r9d, [rbp-0x1]
0002b766  4183f902           cmp     r9d, 0x2
0002b76a  0f8668010000       jbe     0x2b8d8

0002b770  89ee               mov     esi, ebp
0002b772  4531d2             xor     r10d, r10d  {0x0}
0002b775  d1ee               shr     esi, 0x1
0002b777  48c1e604           shl     rsi, 0x4
0002b77b  4c8d5ef0           lea     r11, [rsi-0x10]
0002b77f  49c1eb04           shr     r11, 0x4
0002b783  4983c301           add     r11, 0x1
0002b787  4183e307           and     r11d, 0x7
0002b78b  0f8490000000       je      0x2b821

0002b791  4983fb01           cmp     r11, 0x1
0002b795  7476               je      0x2b80d

0002b797  4983fb02           cmp     r11, 0x2
0002b79b  7461               je      0x2b7fe

0002b79d  4983fb03           cmp     r11, 0x3
0002b7a1  744c               je      0x2b7ef

0002b7a3  4983fb04           cmp     r11, 0x4
0002b7a7  7437               je      0x2b7e0

0002b7a9  4983fb05           cmp     r11, 0x5
0002b7ad  7422               je      0x2b7d1

0002b7af  4983fb06           cmp     r11, 0x6
0002b7b3  740d               je      0x2b7c2

0002b7b5  f30f6f02           movdqu  xmm0, xmmword [rdx]
0002b7b9  41ba10000000       mov     r10d, 0x10
0002b7bf  0f1107             movups  xmmword [rdi], xmm0

0002b7c2  f3420f6f0c12       movdqu  xmm1, xmmword [rdx+r10]
0002b7c8  420f110c17         movups  xmmword [rdi+r10], xmm1
0002b7cd  4983c210           add     r10, 0x10

0002b7d1  f3420f6f1412       movdqu  xmm2, xmmword [rdx+r10]
0002b7d7  420f111417         movups  xmmword [rdi+r10], xmm2
0002b7dc  4983c210           add     r10, 0x10

0002b7e0  f3420f6f1c12       movdqu  xmm3, xmmword [rdx+r10]
0002b7e6  420f111c17         movups  xmmword [rdi+r10], xmm3
0002b7eb  4983c210           add     r10, 0x10

0002b7ef  f3420f6f2412       movdqu  xmm4, xmmword [rdx+r10]
0002b7f5  420f112417         movups  xmmword [rdi+r10], xmm4
0002b7fa  4983c210           add     r10, 0x10

0002b7fe  f3420f6f2c12       movdqu  xmm5, xmmword [rdx+r10]
0002b804  420f112c17         movups  xmmword [rdi+r10], xmm5
0002b809  4983c210           add     r10, 0x10

0002b80d  f3420f6f3412       movdqu  xmm6, xmmword [rdx+r10]
0002b813  420f113417         movups  xmmword [rdi+r10], xmm6
0002b818  4983c210           add     r10, 0x10
0002b81c  4c39d6             cmp     rsi, r10
0002b81f  746f               je      0x2b890

0002b821  f3420f6f3c12       movdqu  xmm7, xmmword [rdx+r10]
0002b827  420f113c17         movups  xmmword [rdi+r10], xmm7
0002b82c  f3460f6f441210     movdqu  xmm8, xmmword [rdx+r10+0x10]
0002b833  460f11441710       movups  xmmword [rdi+r10+0x10], xmm8
0002b839  f3460f6f4c1220     movdqu  xmm9, xmmword [rdx+r10+0x20]
0002b840  460f114c1720       movups  xmmword [rdi+r10+0x20], xmm9
0002b846  f3460f6f541230     movdqu  xmm10, xmmword [rdx+r10+0x30]
0002b84d  460f11541730       movups  xmmword [rdi+r10+0x30], xmm10
0002b853  f3460f6f5c1240     movdqu  xmm11, xmmword [rdx+r10+0x40]
0002b85a  460f115c1740       movups  xmmword [rdi+r10+0x40], xmm11
0002b860  f3460f6f641250     movdqu  xmm12, xmmword [rdx+r10+0x50]
0002b867  460f11641750       movups  xmmword [rdi+r10+0x50], xmm12
0002b86d  f3460f6f6c1260     movdqu  xmm13, xmmword [rdx+r10+0x60]
0002b874  460f116c1760       movups  xmmword [rdi+r10+0x60], xmm13
0002b87a  f3460f6f741270     movdqu  xmm14, xmmword [rdx+r10+0x70]
0002b881  460f11741770       movups  xmmword [rdi+r10+0x70], xmm14
0002b887  4983ea80           sub     r10, 0xffffffffffffff80
0002b88b  4c39d6             cmp     rsi, r10
0002b88e  7591               jne     0x2b821

0002b890  89e8               mov     eax, ebp
0002b892  83e0fe             and     eax, 0xfffffffe
0002b895  40f6c501           test    bpl, 0x1
0002b899  7408               je      0x2b8a3

0002b89b  488b14c2           mov     rdx, qword [rdx+rax*8]
0002b89f  488914c7           mov     qword [rdi+rax*8], rdx

0002b8a3  4589c9             mov     r9d, r9d
0002b8a6  4a8d7ccf08         lea     rdi, [rdi+r9*8+0x8]

0002b8ab  4a8d14c500000000   lea     rdx, [r8*8]
0002b8b3  31f6               xor     esi, esi  {0x0}
0002b8b5  e8369afdff         call    memset
0002b8ba  892b               mov     dword [rbx], ebp
0002b8bc  4883c408           add     rsp, 0x8
0002b8c0  5b                 pop     rbx {__saved_rbx}
0002b8c1  5d                 pop     rbp {__saved_rbp}
0002b8c2  e942aefdff         jmp     __x86_return_thunk
{ Does not return }

0002b8c7                       66 0f 1f 84 00 00 00 00 00                                                         f........

0002b8d0  e934aefdff         jmp     __x86_return_thunk
{ Does not return }

0002b8d5                                                                 0f 1f 00                                               ...

0002b8d8  4863f5             movsxd  rsi, ebp
0002b8db  4531db             xor     r11d, r11d  {0x0}
0002b8de  48c1e603           shl     rsi, 0x3
0002b8e2  488d4ef8           lea     rcx, [rsi-0x8]
0002b8e6  48c1e903           shr     rcx, 0x3
0002b8ea  4883c101           add     rcx, 0x1
0002b8ee  83e107             and     ecx, 0x7
0002b8f1  0f8481000000       je      0x2b978

0002b8f7  4883f901           cmp     rcx, 0x1
0002b8fb  7466               je      0x2b963

0002b8fd  4883f902           cmp     rcx, 0x2
0002b901  7454               je      0x2b957

0002b903  4883f903           cmp     rcx, 0x3
0002b907  7442               je      0x2b94b

0002b909  4883f904           cmp     rcx, 0x4
0002b90d  7430               je      0x2b93f

0002b90f  4883f905           cmp     rcx, 0x5
0002b913  741e               je      0x2b933

0002b915  4883f906           cmp     rcx, 0x6
0002b919  740c               je      0x2b927

0002b91b  4c8b12             mov     r10, qword [rdx]
0002b91e  41bb08000000       mov     r11d, 0x8
0002b924  4c8917             mov     qword [rdi], r10

0002b927  4a8b041a           mov     rax, qword [rdx+r11]
0002b92b  4a89041f           mov     qword [rdi+r11], rax
0002b92f  4983c308           add     r11, 0x8

0002b933  4a8b0c1a           mov     rcx, qword [rdx+r11]
0002b937  4a890c1f           mov     qword [rdi+r11], rcx
0002b93b  4983c308           add     r11, 0x8

0002b93f  4e8b141a           mov     r10, qword [rdx+r11]
0002b943  4e89141f           mov     qword [rdi+r11], r10
0002b947  4983c308           add     r11, 0x8

0002b94b  4a8b041a           mov     rax, qword [rdx+r11]
0002b94f  4a89041f           mov     qword [rdi+r11], rax
0002b953  4983c308           add     r11, 0x8

0002b957  4a8b0c1a           mov     rcx, qword [rdx+r11]
0002b95b  4a890c1f           mov     qword [rdi+r11], rcx
0002b95f  4983c308           add     r11, 0x8

0002b963  4e8b141a           mov     r10, qword [rdx+r11]
0002b967  4e89141f           mov     qword [rdi+r11], r10
0002b96b  4983c308           add     r11, 0x8
0002b96f  4c39de             cmp     rsi, r11
0002b972  0f842bffffff       je      0x2b8a3

0002b978  4a8b041a           mov     rax, qword [rdx+r11]
0002b97c  4a89041f           mov     qword [rdi+r11], rax
0002b980  4a8b4c1a08         mov     rcx, qword [rdx+r11+0x8]
0002b985  4a894c1f08         mov     qword [rdi+r11+0x8], rcx
0002b98a  4e8b541a10         mov     r10, qword [rdx+r11+0x10]
0002b98f  4e89541f10         mov     qword [rdi+r11+0x10], r10
0002b994  4a8b441a18         mov     rax, qword [rdx+r11+0x18]
0002b999  4a89441f18         mov     qword [rdi+r11+0x18], rax
0002b99e  4a8b4c1a20         mov     rcx, qword [rdx+r11+0x20]
0002b9a3  4a894c1f20         mov     qword [rdi+r11+0x20], rcx
0002b9a8  4e8b541a28         mov     r10, qword [rdx+r11+0x28]
0002b9ad  4e89541f28         mov     qword [rdi+r11+0x28], r10
0002b9b2  4a8b441a30         mov     rax, qword [rdx+r11+0x30]
0002b9b7  4a89441f30         mov     qword [rdi+r11+0x30], rax
0002b9bc  4a8b4c1a38         mov     rcx, qword [rdx+r11+0x38]
0002b9c1  4a894c1f38         mov     qword [rdi+r11+0x38], rcx
0002b9c6  4983c340           add     r11, 0x40
0002b9ca  4c39de             cmp     rsi, r11
0002b9cd  75a9               jne     0x2b978

0002b9cf  e9cffeffff         jmp     0x2b8a3

0002b9d4                                                              0f 1f 40 00                                              ..@.

0002b9d8  4883c408           add     rsp, 0x8
0002b9dc  5b                 pop     rbx {__saved_rbx}
0002b9dd  5d                 pop     rbp {__saved_rbp}
0002b9de  e99d0c0000         jmp     mp_zero

0002b9e3           0f 1f 44 00 00                                                                             ..D..

0002b9e8  4c63c0             movsxd  r8, eax
0002b9eb  e9bbfeffff         jmp     0x2b8ab


0002b9f0    int64_t mp_set(int32_t* arg1, int64_t arg2)

0002b9f0  488b4f10           mov     rcx, qword [rdi+0x10]
0002b9f4  8b5704             mov     edx, dword [rdi+0x4]
0002b9f7  48b8ffffffffffff…  mov     rax, 0xfffffffffffffff
0002ba01  4821c6             and     rsi, rax
0002ba04  488931             mov     qword [rcx], rsi
0002ba07  400f95c6           setne   sil
0002ba0b  410f95c0           setne   r8b
0002ba0f  440fb6ce           movzx   r9d, sil
0002ba13  c7470800000000     mov     dword [rdi+0x8], 0x0
0002ba1a  44890f             mov     dword [rdi], r9d
0002ba1d  4429ca             sub     edx, r9d
0002ba20  410fb6f8           movzx   edi, r8b
0002ba24  488d3cf9           lea     rdi, [rcx+rdi*8]
0002ba28  85d2               test    edx, edx
0002ba2a  7e14               jle     0x2ba40

0002ba2c  4863d2             movsxd  rdx, edx
0002ba2f  31f6               xor     esi, esi  {0x0}
0002ba31  48c1e203           shl     rdx, 0x3
0002ba35  e9b698fdff         jmp     memset

0002ba3a                                                                                66 0f 1f 44 00 00                            f..D..

0002ba40  e9c4acfdff         jmp     __x86_return_thunk
{ Does not return }

0002ba45                 66 2e 0f 1f 84 00 00 00 00 00 90                                                       f..........

0002ba50    int64_t mp_set_u32(int32_t* arg1, int32_t arg2)

0002ba50  488b4f10           mov     rcx, qword [rdi+0x10]
0002ba54  4531c0             xor     r8d, r8d  {0x0}
0002ba57  85f6               test    esi, esi
0002ba59  7410               je      0x2ba6b

0002ba5b  89f0               mov     eax, esi
0002ba5d  4883c108           add     rcx, 0x8
0002ba61  41b801000000       mov     r8d, 0x1
0002ba67  488941f8           mov     qword [rcx-0x8], rax

0002ba6b  8b5704             mov     edx, dword [rdi+0x4]
0002ba6e  448907             mov     dword [rdi], r8d
0002ba71  c7470800000000     mov     dword [rdi+0x8], 0x0
0002ba78  4429c2             sub     edx, r8d
0002ba7b  85d2               test    edx, edx
0002ba7d  7e11               jle     0x2ba90

0002ba7f  4863d2             movsxd  rdx, edx
0002ba82  31f6               xor     esi, esi  {0x0}
0002ba84  4889cf             mov     rdi, rcx
0002ba87  48c1e203           shl     rdx, 0x3
0002ba8b  e96098fdff         jmp     memset

0002ba90  e974acfdff         jmp     __x86_return_thunk
{ Does not return }

0002ba95                                                                 66 2e 0f 1f 84 00 00 00 00 00 90                       f..........

0002baa0    int64_t mp_set_ul(int32_t* arg1, int64_t arg2)

0002baa0  4889fa             mov     rdx, rdi
0002baa3  488b7f10           mov     rdi, qword [rdi+0x10]
0002baa7  4885f6             test    rsi, rsi
0002baaa  744c               je      0x2baf8

0002baac  48b9ffffffffffff…  mov     rcx, 0xfffffffffffffff
0002bab6  4821f1             and     rcx, rsi
0002bab9  48c1ee3c           shr     rsi, 0x3c
0002babd  48890f             mov     qword [rdi], rcx
0002bac0  7443               je      0x2bb05

0002bac2  48897708           mov     qword [rdi+0x8], rsi
0002bac6  b802000000         mov     eax, 0x2

0002bacb  4863f0             movsxd  rsi, eax
0002bace  488d3cf7           lea     rdi, [rdi+rsi*8]

0002bad2  448b4204           mov     r8d, dword [rdx+0x4]
0002bad6  8902               mov     dword [rdx], eax
0002bad8  c7420800000000     mov     dword [rdx+0x8], 0x0
0002badf  4129c0             sub     r8d, eax
0002bae2  4585c0             test    r8d, r8d
0002bae5  7e19               jle     0x2bb00

0002bae7  4963d0             movsxd  rdx, r8d
0002baea  31f6               xor     esi, esi  {0x0}
0002baec  48c1e203           shl     rdx, 0x3
0002baf0  e9fb97fdff         jmp     memset

0002baf5                                                                 0f 1f 00                                               ...

0002baf8  31c0               xor     eax, eax  {0x0}
0002bafa  ebd6               jmp     0x2bad2

0002bafc                                                                                      0f 1f 40 00                              ..@.

0002bb00  e904acfdff         jmp     __x86_return_thunk
{ Does not return }

0002bb05  b801000000         mov     eax, 0x1
0002bb0a  ebbf               jmp     0x2bacb

0002bb0c                                      0f 1f 40 00                                                              ..@.

0002bb10    void mp_sqr(int32_t* arg1, int32_t* arg2) __noreturn

0002bb10  8b07               mov     eax, dword [rdi]
0002bb12  53                 push    rbx {var_8}
0002bb13  4889f3             mov     rbx, rsi
0002bb16  8d540001           lea     edx, [rax+rax+0x1]
0002bb1a  81faff010000       cmp     edx, 0x1ff
0002bb20  7f05               jg      0x2bb27

0002bb22  83f87f             cmp     eax, 0x7f
0002bb25  7e19               jle     0x2bb40

0002bb27  e854560000         call    s_mp_sqr
{ Does not return }

0002bb2c                                      c7 43 08 00 00 00 00 5b e9 d0 ab fd ff 0f 1f 80 00 00 00 00              .C.....[............

0002bb40  e84b590000         call    s_mp_sqr_fast
{ Does not return }

0002bb45                 c7 43 08 00 00 00 00 5b e9 b7 ab fd ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00       .C.....[.....f...........@.

0002bb60    void mp_sqrmod() __noreturn

0002bb60  4156               push    r14 {var_8}
0002bb62  4989fe             mov     r14, rdi
0002bb65  4155               push    r13 {var_10}
0002bb67  4154               push    r12 {var_18}
0002bb69  55                 push    rbp {var_20}
0002bb6a  4889f5             mov     rbp, rsi
0002bb6d  53                 push    rbx {var_28}
0002bb6e  4883ec20           sub     rsp, 0x20
0002bb72  644c8b2c25280000…  mov     r13, qword [fs:0x28]
0002bb7b  4c896c2418         mov     qword [rsp+0x18 {var_30}], r13
0002bb80  4989d5             mov     r13, rdx
0002bb83  4889e7             mov     rdi, rsp {var_48}
0002bb86  e8e5c9ffff         call    mp_init
{ Does not return }

0002bb8b                                   89 c3 85 c0 74 27 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 75             ....t'H.D$.dH+.%(...u
0002bba0  45 48 83 c4 20 89 d8 5b 5d 41 5c 41 5d 41 5e e9 55 ab fd ff 0f 1f 40 00 48 89 e6 4c 89 f7 49 89  EH.. ..[]A\A]A^.U.....@.H..L..I.
0002bbc0  e4 e8 4a ff ff ff 89 c3 85 c0 75 10 4c 89 ea 48 89 ee 48 89 e7 e8 86 d2 ff ff 89 c3 4c 89 e7 e8  ..J.......u.L..H..H.........L...
0002bbe0  3c ab ff ff eb ab e8 25 96 fd ff 0f 1f 44 00 00                                                  <......%.....D..

0002bbf0    void mp_sub(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

0002bbf0  4155               push    r13 {__saved_r13}
0002bbf2  53                 push    rbx {__saved_rbx}
0002bbf3  4889f3             mov     rbx, rsi
0002bbf6  4883ec18           sub     rsp, 0x18
0002bbfa  448b6f08           mov     r13d, dword [rdi+0x8]
0002bbfe  443b6e08           cmp     r13d, dword [rsi+0x8]
0002bc02  7414               je      0x2bc18

0002bc04  44896a08           mov     dword [rdx+0x8], r13d
0002bc08  4883c418           add     rsp, 0x18
0002bc0c  5b                 pop     rbx {__saved_rbx}
0002bc0d  415d               pop     r13 {__saved_r13}
0002bc0f  e99c0a0000         jmp     s_mp_add
{ Does not return }

0002bc14                                                              0f 1f 40 00                                              ..@.

0002bc18  4889542408         mov     qword [rsp+0x8 {var_20}], rdx
0002bc1d  48893c24           mov     qword [rsp {var_28}], rdi
0002bc21  e89aacffff         call    mp_cmp_mag
{ Does not return }

0002bc26                    48 8b 3c 24 48 8b 54 24 08 83 f8 ff 74 1c 44 89 6a 08 48 83 c4 18 48 89 de 5b        H.<$H.T$....t.D.j.H...H..[
0002bc40  41 5d e9 b9 5c 00 00 66 0f 1f 84 00 00 00 00 00 31 c0 45 85 ed 48 89 fe 48 89 df 0f 94 c0 89 42  A]..\..f........1.E..H..H......B
0002bc60  08 48 83 c4 18 5b 41 5d e9 93 5c 00 00 0f 1f 00                                                  .H...[A]..\.....

0002bc70    void mp_sub_d(int32_t* arg1, uint64_t arg2, int32_t* arg3) __noreturn

0002bc70  4154               push    r12 {var_8}
0002bc72  4989f4             mov     r12, rsi
0002bc75  55                 push    rbp {var_10}
0002bc76  4889fd             mov     rbp, rdi
0002bc79  53                 push    rbx {var_18}
0002bc7a  4883ec30           sub     rsp, 0x30
0002bc7e  8b07               mov     eax, dword [rdi]
0002bc80  64488b1c25280000…  mov     rbx, qword [fs:0x28]
0002bc89  48895c2428         mov     qword [rsp+0x28 {var_20}], rbx
0002bc8e  4889d3             mov     rbx, rdx
0002bc91  8d7001             lea     esi, [rax+0x1]
0002bc94  397204             cmp     dword [rdx+0x4], esi
0002bc97  0f8c73020000       jl      0x2bf10

0002bc9d  837d0801           cmp     dword [rbp+0x8], 0x1
0002bca1  0f8483020000       je      0x2bf2a

0002bca7  448b4d00           mov     r9d, dword [rbp]
0002bcab  8b13               mov     edx, dword [rbx]
0002bcad  4c8b4510           mov     r8, qword [rbp+0x10]
0002bcb1  488b7b10           mov     rdi, qword [rbx+0x10]
0002bcb5  4183f901           cmp     r9d, 0x1
0002bcb9  7465               je      0x2bd20

0002bcbb  488d4f08           lea     rcx, [rdi+0x8]
0002bcbf  4585c9             test    r9d, r9d
0002bcc2  7568               jne     0x2bd2c

0002bcc4  4c8927             mov     qword [rdi], r12
0002bcc7  83ea01             sub     edx, 0x1
0002bcca  c7430801000000     mov     dword [rbx+0x8], 0x1
0002bcd1  c70301000000       mov     dword [rbx], 0x1

0002bcd7  85d2               test    edx, edx
0002bcd9  7e11               jle     0x2bcec

0002bcdb  4863d2             movsxd  rdx, edx
0002bcde  31f6               xor     esi, esi  {0x0}
0002bce0  4889cf             mov     rdi, rcx
0002bce3  48c1e203           shl     rdx, 0x3
0002bce7  e80496fdff         call    memset

0002bcec  4889df             mov     rdi, rbx
0002bcef  e8bca8ffff         call    mp_clamp
{ Does not return }


0002bcf4    void sub_2bcf4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn

0002bcf4  31c0               xor     eax, eax  {0x0}
0002bcf6  488b542428         mov     rdx, qword [rsp+0x28 {arg1}]
0002bcfb  64482b1425280000…  sub     rdx, qword [fs:0x28]
0002bd04  0f859f020000       jne     0x2bfa9

0002bd0a  4883c430           add     rsp, 0x30
0002bd0e  5b                 pop     rbx {arg2}
0002bd0f  5d                 pop     rbp {arg3}
0002bd10  415c               pop     r12 {arg4}
0002bd12  e9f2a9fdff         jmp     __x86_return_thunk
{ Does not return }

0002bd17                                                                       66 0f 1f 84 00 00 00 00 00                         f........

{ Continuation of function mp_sub_d }

0002bd20  498b30             mov     rsi, qword [r8]
0002bd23  4939f4             cmp     r12, rsi
0002bd26  0f834c020000       jae     0x2bf78

0002bd2c  44890b             mov     dword [rbx], r9d
0002bd2f  448b5500           mov     r10d, dword [rbp]
0002bd33  c7430800000000     mov     dword [rbx+0x8], 0x0
0002bd3a  4585d2             test    r10d, r10d
0002bd3d  0f8e5e020000       jle     0x2bfa1

0002bd43  49b9ffffffffffff…  mov     r9, 0xfffffffffffffff
0002bd4d  4963ea             movsxd  rbp, r10d
0002bd50  31c9               xor     ecx, ecx  {0x0}
0002bd52  48c1e503           shl     rbp, 0x3
0002bd56  4c8d5df8           lea     r11, [rbp-0x8]
0002bd5a  49c1eb03           shr     r11, 0x3
0002bd5e  4983c301           add     r11, 0x1
0002bd62  4183e307           and     r11d, 0x7
0002bd66  0f84cf000000       je      0x2be3b

0002bd6c  4983fb01           cmp     r11, 0x1
0002bd70  0f84a3000000       je      0x2be19

0002bd76  4983fb02           cmp     r11, 0x2
0002bd7a  0f8480000000       je      0x2be00

0002bd80  4983fb03           cmp     r11, 0x3
0002bd84  7461               je      0x2bde7

0002bd86  4983fb04           cmp     r11, 0x4
0002bd8a  7442               je      0x2bdce

0002bd8c  4983fb05           cmp     r11, 0x5
0002bd90  7423               je      0x2bdb5

0002bd92  4983fb06           cmp     r11, 0x6
0002bd96  0f85e8010000       jne     0x2bf84

0002bd9c  498b3408           mov     rsi, qword [r8+rcx]
0002bda0  4c29e6             sub     rsi, r12
0002bda3  4989f4             mov     r12, rsi
0002bda6  4c21ce             and     rsi, r9
0002bda9  4889340f           mov     qword [rdi+rcx], rsi
0002bdad  49c1ec3f           shr     r12, 0x3f
0002bdb1  4883c108           add     rcx, 0x8

0002bdb5  4d8b1c08           mov     r11, qword [r8+rcx]
0002bdb9  4d29e3             sub     r11, r12
0002bdbc  4d89dc             mov     r12, r11
0002bdbf  4d21cb             and     r11, r9
0002bdc2  4c891c0f           mov     qword [rdi+rcx], r11
0002bdc6  49c1ec3f           shr     r12, 0x3f
0002bdca  4883c108           add     rcx, 0x8

0002bdce  498b0408           mov     rax, qword [r8+rcx]
0002bdd2  4c29e0             sub     rax, r12
0002bdd5  4989c4             mov     r12, rax
0002bdd8  4c21c8             and     rax, r9
0002bddb  4889040f           mov     qword [rdi+rcx], rax
0002bddf  49c1ec3f           shr     r12, 0x3f
0002bde3  4883c108           add     rcx, 0x8

0002bde7  498b3408           mov     rsi, qword [r8+rcx]
0002bdeb  4c29e6             sub     rsi, r12
0002bdee  4989f4             mov     r12, rsi
0002bdf1  4c21ce             and     rsi, r9
0002bdf4  4889340f           mov     qword [rdi+rcx], rsi
0002bdf8  49c1ec3f           shr     r12, 0x3f
0002bdfc  4883c108           add     rcx, 0x8

0002be00  4d8b1c08           mov     r11, qword [r8+rcx]
0002be04  4d29e3             sub     r11, r12
0002be07  4d89dc             mov     r12, r11
0002be0a  4d21cb             and     r11, r9
0002be0d  4c891c0f           mov     qword [rdi+rcx], r11
0002be11  49c1ec3f           shr     r12, 0x3f
0002be15  4883c108           add     rcx, 0x8

0002be19  498b0408           mov     rax, qword [r8+rcx]
0002be1d  4c29e0             sub     rax, r12
0002be20  4989c4             mov     r12, rax
0002be23  4c21c8             and     rax, r9
0002be26  4889040f           mov     qword [rdi+rcx], rax
0002be2a  4883c108           add     rcx, 0x8
0002be2e  49c1ec3f           shr     r12, 0x3f
0002be32  4839e9             cmp     rcx, rbp
0002be35  0f84c3000000       je      0x2befe

0002be3b  498b3408           mov     rsi, qword [r8+rcx]
0002be3f  4c29e6             sub     rsi, r12
0002be42  4989f3             mov     r11, rsi
0002be45  4c21ce             and     rsi, r9
0002be48  4889340f           mov     qword [rdi+rcx], rsi
0002be4c  498b440808         mov     rax, qword [r8+rcx+0x8]
0002be51  49c1eb3f           shr     r11, 0x3f
0002be55  4c29d8             sub     rax, r11
0002be58  4989c4             mov     r12, rax
0002be5b  4c21c8             and     rax, r9
0002be5e  4889440f08         mov     qword [rdi+rcx+0x8], rax
0002be63  498b740810         mov     rsi, qword [r8+rcx+0x10]
0002be68  49c1ec3f           shr     r12, 0x3f
0002be6c  4c29e6             sub     rsi, r12
0002be6f  4989f3             mov     r11, rsi
0002be72  4c21ce             and     rsi, r9
0002be75  4889740f10         mov     qword [rdi+rcx+0x10], rsi
0002be7a  498b440818         mov     rax, qword [r8+rcx+0x18]
0002be7f  49c1eb3f           shr     r11, 0x3f
0002be83  4c29d8             sub     rax, r11
0002be86  4989c4             mov     r12, rax
0002be89  4c21c8             and     rax, r9
0002be8c  4889440f18         mov     qword [rdi+rcx+0x18], rax
0002be91  498b740820         mov     rsi, qword [r8+rcx+0x20]
0002be96  49c1ec3f           shr     r12, 0x3f
0002be9a  4c29e6             sub     rsi, r12
0002be9d  4989f3             mov     r11, rsi
0002bea0  4c21ce             and     rsi, r9
0002bea3  4889740f20         mov     qword [rdi+rcx+0x20], rsi
0002bea8  498b440828         mov     rax, qword [r8+rcx+0x28]
0002bead  49c1eb3f           shr     r11, 0x3f
0002beb1  4c29d8             sub     rax, r11
0002beb4  4989c4             mov     r12, rax
0002beb7  4c21c8             and     rax, r9
0002beba  4889440f28         mov     qword [rdi+rcx+0x28], rax
0002bebf  498b740830         mov     rsi, qword [r8+rcx+0x30]
0002bec4  49c1ec3f           shr     r12, 0x3f
0002bec8  4c29e6             sub     rsi, r12
0002becb  4989f3             mov     r11, rsi
0002bece  4c21ce             and     rsi, r9
0002bed1  4889740f30         mov     qword [rdi+rcx+0x30], rsi
0002bed6  498b440838         mov     rax, qword [r8+rcx+0x38]
0002bedb  49c1eb3f           shr     r11, 0x3f
0002bedf  4c29d8             sub     rax, r11
0002bee2  4989c4             mov     r12, rax
0002bee5  4c21c8             and     rax, r9
0002bee8  4889440f38         mov     qword [rdi+rcx+0x38], rax
0002beed  4883c140           add     rcx, 0x40
0002bef1  49c1ec3f           shr     r12, 0x3f
0002bef5  4839e9             cmp     rcx, rbp
0002bef8  0f853dffffff       jne     0x2be3b

0002befe  458d42ff           lea     r8d, [r10-0x1]
0002bf02  4429d2             sub     edx, r10d
0002bf05  4a8d4cc708         lea     rcx, [rdi+r8*8+0x8]
0002bf0a  e9c8fdffff         jmp     0x2bcd7

0002bf0f                                               90                                                                 .

0002bf10  4889df             mov     rdi, rbx
0002bf13  e8d8c5ffff         call    mp_grow
{ Does not return }

0002bf18                                                                          85 c0 0f 85 d6 fd ff ff                          ........
0002bf20  83 7d 08 01 0f 85 7d fd ff ff                                                                    .}....}...

0002bf2a  488b5510           mov     rdx, qword [rbp+0x10]
0002bf2e  f30f6f4500         movdqu  xmm0, xmmword [rbp]
0002bf33  488d7c2410         lea     rdi, [rsp+0x10 {var_38}]
0002bf38  4c89e6             mov     rsi, r12
0002bf3b  4889542420         mov     qword [rsp+0x20 {var_28}], rdx
0002bf40  4889da             mov     rdx, rbx
0002bf43  0f29442410         movaps  xmmword [rsp+0x10 {var_38}], xmm0
0002bf48  c744241800000000   mov     dword [rsp+0x18 {var_38+0x8}], 0x0
0002bf50  e88ba2ffff         call    mp_add_d
{ Does not return }

0002bf55                                                                 c7 43 08 01 00 00 00 48 89 df 89                       .C.....H...
0002bf60  44 24 0c e8 48 a6 ff ff 8b 44 24 0c e9 85 fd ff ff 0f 1f 80 00 00 00 00                          D$..H....D$.............

0002bf78  488d4f08           lea     rcx, [rdi+0x8]
0002bf7c  4929f4             sub     r12, rsi
0002bf7f  e940fdffff         jmp     0x2bcc4

0002bf84  498b00             mov     rax, qword [r8]
0002bf87  b908000000         mov     ecx, 0x8
0002bf8c  4c29e0             sub     rax, r12
0002bf8f  4989c4             mov     r12, rax
0002bf92  4c21c8             and     rax, r9
0002bf95  488907             mov     qword [rdi], rax
0002bf98  49c1ec3f           shr     r12, 0x3f
0002bf9c  e9fbfdffff         jmp     0x2bd9c

0002bfa1  4889f9             mov     rcx, rdi
0002bfa4  e92efdffff         jmp     0x2bcd7


{ Continuation of function sub_2bcf4 }

0002bfa9  e86292fdff         call    __stack_chk_fail
{ Does not return }

0002bfae                                            66 90                                                                f.

0002bfb0    void mp_submod() __noreturn

0002bfb0  4157               push    r15 {var_8}
0002bfb2  4156               push    r14 {var_10}
0002bfb4  4155               push    r13 {var_18}
0002bfb6  4989d5             mov     r13, rdx
0002bfb9  4154               push    r12 {var_20}
0002bfbb  4989f4             mov     r12, rsi
0002bfbe  55                 push    rbp {var_28}
0002bfbf  4889fd             mov     rbp, rdi
0002bfc2  53                 push    rbx {var_30}
0002bfc3  4883ec28           sub     rsp, 0x28
0002bfc7  644c8b3425280000…  mov     r14, qword [fs:0x28]
0002bfd0  4c89742418         mov     qword [rsp+0x18 {var_40}], r14
0002bfd5  4989ce             mov     r14, rcx
0002bfd8  4889e7             mov     rdi, rsp {var_58}
0002bfdb  e890c5ffff         call    mp_init
{ Does not return }

0002bfe0  89 c3 85 c0 74 2a 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 75 4b 48 83 c4 28 89 d8 5b 5d 41 5c  ....t*H.D$.dH+.%(...uKH..(..[]A\
0002c000  41 5d 41 5e 41 5f e9 fe a6 fd ff 0f 1f 44 00 00 48 89 e2 4c 89 e6 48 89 ef 49 89 e7 e8 cf fb ff  A]A^A_.......D..H..L..H..I......
0002c020  ff 89 c3 85 c0 75 10 4c 89 f2 4c 89 ee 48 89 e7 e8 2b ce ff ff 89 c3 4c 89 ff e8 e1 a6 ff ff eb  .....u.L..L..H...+.....L........
0002c040  a5 e8 ca 91 fd ff 66 2e 0f 1f 84 00 00 00 00 00                                                  ......f.........

0002c050    void mp_to_radix(int32_t* arg1, int16_t* arg2, int64_t arg3, int64_t* arg4, int32_t arg5) __noreturn

0002c050  4157               push    r15 {__saved_r15}
0002c052  4156               push    r14 {__saved_r14}
0002c054  4155               push    r13 {__saved_r13}
0002c056  4154               push    r12 {__saved_r12}
0002c058  55                 push    rbp {__saved_rbp}
0002c059  53                 push    rbx {__saved_rbx}
0002c05a  4883ec78           sub     rsp, 0x78
0002c05e  48897c2410         mov     qword [rsp+0x10 {var_98}], rdi
0002c063  48894c2418         mov     qword [rsp+0x18 {var_90}], rcx
0002c068  64488b0425280000…  mov     rax, qword [fs:0x28]
0002c071  4889442468         mov     qword [rsp+0x68 {var_40}], rax
0002c076  31c0               xor     eax, eax  {0x0}
0002c078  4883fa01           cmp     rdx, 0x1
0002c07c  0f86b6030000       jbe     0x2c438

0002c082  418d40fe           lea     eax, [r8-0x2]
0002c086  4589c5             mov     r13d, r8d
0002c089  83f83e             cmp     eax, 0x3e
0002c08c  0f879b030000       ja      0x2c42d

0002c092  448b37             mov     r14d, dword [rdi]
0002c095  4989f4             mov     r12, rsi
0002c098  4585f6             test    r14d, r14d
0002c09b  7543               jne     0x2c0e0

0002c09d  bb30000000         mov     ebx, 0x30
0002c0a2  66891e             mov     word [rsi], bx  {0x30}
0002c0a5  4885c9             test    rcx, rcx
0002c0a8  7407               je      0x2c0b1

0002c0aa  48c70102000000     mov     qword [rcx], 0x2

0002c0b1  488b442468         mov     rax, qword [rsp+0x68 {var_40}]
0002c0b6  64482b0425280000…  sub     rax, qword [fs:0x28]
0002c0bf  0f857e030000       jne     0x2c443

0002c0c5  4883c478           add     rsp, 0x78
0002c0c9  4489f0             mov     eax, r14d
0002c0cc  5b                 pop     rbx {__saved_rbx}
0002c0cd  5d                 pop     rbp {__saved_rbp}
0002c0ce  415c               pop     r12 {__saved_r12}
0002c0d0  415d               pop     r13 {__saved_r13}
0002c0d2  415e               pop     r14 {__saved_r14}
0002c0d4  415f               pop     r15 {__saved_r15}
0002c0d6  e92ea6fdff         jmp     __x86_return_thunk
{ Does not return }

0002c0db                                                                                   0f 1f 44 00 00                             ..D..

0002c0e0  488d5c2450         lea     rbx, [rsp+0x50 {var_58}]
0002c0e5  4889fe             mov     rsi, rdi
0002c0e8  4889d5             mov     rbp, rdx
0002c0eb  4889df             mov     rdi, rbx {var_58}
0002c0ee  e8bdc4ffff         call    mp_init_copy
{ Does not return }

0002c0f3                                                           41 89 c6 85 c0 75 b7 83 7c 24 58 01 75                     A....u..|$X.u
0002c100  16 c7 44 24 58 00 00 00 00 48 83 ed 01 49 83 c4 01 41 c6 44 24 ff 2d 44 8b 7c 24 50 45 85 ff 0f  ..D$X....H...I...A.D$.-D.|$PE...
0002c120  84 fa 02 00 00 49 8d 54 2c ff 45 31 ff 4d 89 e0 48 8b 2d 69 91 01 00 48 89 54 24 20 4c 29 e2 83  .....I.T,.E1.M..H.-i...H.T$ L)..
0002c140  e2 03 48 89 54 24 28 0f 84 53 02 00 00 48 8d 4c 24 48 49 63 f5 48 89 da 48 89 df 48 89 0c 24 48  ..H.T$(..S...H.L$HIc.H..H..H..$H
0002c160  89 74 24 08 e8 77 5c 00 00 85 c0 0f 85 4f 02 00 00 48 8b 74 24 48 44 8b 54 24 50 4d 8d 44 24 01  .t$..w\......O...H.t$HD.T$PM.D$.
0002c180  41 b9 01 00 00 00 0f b6 7c 35 00 41 88 78 ff 45 85 d2 0f 84 3d 02 00 00 4c 8b 5c 24 28 41 bf 01  A.......|5.A.x.E....=...L.\$(A..
0002c1a0  00 00 00 49 83 fb 01 0f 84 f3 01 00 00 49 83 fb 02 74 48 48 8b 0c 24 48 8b 74 24 08 48 89 da 48  ...I.........I...tHH..$H.t$.H..H
0002c1c0  89 df e8 19 5c 00 00 85 c0 0f 85 f1 01 00 00 4c 8b 4c 24 48 8b 54 24 50 4d 8d 44 24 02 42 0f b6  ....\..........L.L$H.T$PM.D$.B..
0002c1e0  44 0d 00 41 b9 02 00 00 00 41 88 40 ff 85 d2 0f 84 e0 01 00 00 41 bf 02 00 00 00 48 8d 4c 24 48  D..A.....A.@.........A.....H.L$H
0002c200  49 63 f5 48 89 da 48 89 df 4c 89 4c 24 08 4c 89 04 24 e8 c9 5b 00 00 85 c0 0f 85 a1 01 00 00 48  Ic.H..H..L.L$.L..$..[..........H
0002c220  8b 4c 24 48 4c 8b 04 24 4c 8b 4c 24 08 8b 7c 24 50 0f b6 74 0d 00 49 83 c0 01 49 83 c1 01 41 88  .L$HL..$L.L$..|$P..t..I...I...A.
0002c240  70 ff 85 ff 0f 84 8b 01 00 00 4c 89 64 24 38 4d 89 cf 44 89 6c 24 28 44 89 74 24 34 4d 89 c6 4c  p.........L.d$8M..D.l$(D.t$4M..L
0002c260  39 74 24 20 0f 84 23 01 00 00 48 63 74 24 28 4c 8d 64 24 48 48 89 da 48 89 df 4c 89 e1 48 89 34  9t$ ..#...Hct$(L.d$HH..H..L..H.4
0002c280  24 e8 5a 5b 00 00 85 c0 0f 85 32 01 00 00 4c 8b 54 24 48 8b 44 24 50 4d 8d 6e 01 4d 8d 4f 01 4d  $.Z[......2...L.T$H.D$PM.n.M.O.M
0002c2a0  89 ee 46 0f b6 5c 15 00 45 88 5d ff 85 c0 0f 84 14 01 00 00 48 8b 34 24 4c 89 e1 48 89 da 48 89  ..F..\..E.].........H.4$L..H..H.
0002c2c0  df 4c 89 4c 24 08 4d 89 cf e8 12 5b 00 00 85 c0 0f 85 ea 00 00 00 4c 8b 4c 24 48 44 8b 44 24 50  .L.L$.M....[..........L.L$HD.D$P
0002c2e0  49 83 c6 01 42 0f b6 54 0d 00 4d 8d 4f 01 41 88 56 ff 45 85 c0 0f 84 cd 00 00 00 48 8b 34 24 4c  I...B..T..M.O.A.V.E........H.4$L
0002c300  89 e1 48 89 da 48 89 df 4d 89 cf e8 d0 5a 00 00 85 c0 0f 85 a8 00 00 00 48 8b 4c 24 48 8b 74 24  ..H..H..M....Z..........H.L$H.t$
0002c320  50 4d 8d 75 02 4d 8d 4f 01 0f b6 7c 0d 00 41 88 7e ff 85 f6 0f 84 8e 00 00 00 4c 8b 74 24 08 48  PM.u.M.O...|..A.~.........L.t$.H
0002c340  8b 34 24 4c 89 e1 48 89 da 48 89 df 4d 8d 7e 02 e8 8b 5a 00 00 85 c0 75 67 4c 8b 64 24 48 4d 8d  .4$L..H..H..M.~...Z....ugL.d$HM.
0002c360  75 03 4c 8b 4c 24 08 44 8b 54 24 50 46 0f b6 6c 25 00 49 83 c1 03 45 88 6e ff 45 85 d2 74 49 4d  u.L.L$.D.T$PF..l%.I...E.n.E..tIM
0002c380  89 cf 4c 39 74 24 20 0f 85 dd fe ff ff 41 be fb ff ff ff 48 89 df e8 85 a3 ff ff e9 11 fd ff ff  ..L9t$ ......A.....H............
0002c3a0  44 89 74 24 34 4d 89 c6 4c 89 64 24 38 44 89 6c 24 28 e9 a8 fe ff ff 66 0f 1f 84 00 00 00 00 00  D.t$4M..L.d$8D.l$(.....f........
0002c3c0  41 89 c6 eb ce 0f 1f 00 4d 89 f0 4c 8b 64 24 38 44 8b 74 24 34 49 83 c7 02 4c 89 ce 4c 89 e7 4c  A.......M..L.d$8D.t$4I...L..L..L
0002c3e0  89 04 24 4c 89 4c 24 08 e8 53 4d 00 00 48 8b 2c 24 48 83 7c 24 18 00 c6 45 00 00 74 96 4c 8b 5c  ..$L.L$..SM..H.,$H.|$...E..t.L.\
0002c400  24 10 48 8b 44 24 08 41 83 7b 08 01 75 04 4c 8d 78 02 48 8b 54 24 18 4c 89 3a e9 74 ff ff ff 4d  $.H.D$.A.{..u.L.x.H.T$.L.:.t...M
0002c420  89 e0 41 bf 01 00 00 00 45 31 c9 eb ac                                                           ..A.....E1...

0002c42d  41befdffffff       mov     r14d, 0xfffffffd
0002c433  e979fcffff         jmp     0x2c0b1

0002c438  41befbffffff       mov     r14d, 0xfffffffb
0002c43e  e96efcffff         jmp     0x2c0b1

0002c443  e8c88dfdff         call    __stack_chk_fail
{ Does not return }

0002c448                          0f 1f 84 00 00 00 00 00                                                          ........

0002c450    void mp_to_ubin(int32_t* arg1) __noreturn

0002c450  4157               push    r15 {var_8}
0002c452  4156               push    r14 {var_10}
0002c454  4155               push    r13 {var_18}
0002c456  4154               push    r12 {var_20}
0002c458  4989fc             mov     r12, rdi
0002c45b  55                 push    rbp {var_28}
0002c45c  4889f5             mov     rbp, rsi
0002c45f  53                 push    rbx {var_30}
0002c460  4889d3             mov     rbx, rdx
0002c463  4883ec38           sub     rsp, 0x38
0002c467  48894c2408         mov     qword [rsp+0x8 {var_60}], rcx
0002c46c  64488b0425280000…  mov     rax, qword [fs:0x28]
0002c475  4889442428         mov     qword [rsp+0x28 {var_40}], rax
0002c47a  31c0               xor     eax, eax  {0x0}
0002c47c  e8cf010000         call    mp_ubin_size
{ Does not return }

0002c481     48 39 c3 0f 82 ad 01 00 00 48 8d 5c 24 10 4c 89 e6 49 89 c5 48 89 df e8 13 c1 ff ff 41 89 c4   H9.......H.\$.L..I..H.......A..
0002c4a0  85 c0 0f 85 53 01 00 00 4e 8d 74 2d ff 48 83 ed 01 4d 89 f7 49 29 ef 41 83 e7 03 0f 84 8f 00 00  ....S...N.t-.H...M..I).A........
0002c4c0  00 48 8b 44 24 20 31 c9 be 08 00 00 00 48 89 df 49 83 ee 01 48 8b 10 41 88 56 01 48 89 da e8 4d  .H.D$ 1......H..I...H..A.V.H...M
0002c4e0  b6 ff ff 85 c0 0f 85 05 01 00 00 49 83 ff 01 74 5f 49 83 ff 02 74 2a 48 8b 4c 24 20 48 89 da 48  ...........I...t_I...t*H.L$ H..H
0002c500  89 df 49 83 ee 01 48 8b 31 31 c9 41 88 76 01 be 08 00 00 00 e8 17 b6 ff ff 85 c0 0f 85 cf 00 00  ..I...H.11.A.v..................
0002c520  00 48 8b 7c 24 20 31 c9 48 89 da be 08 00 00 00 49 83 ee 01 4c 8b 07 48 89 df 45 88 46 01 e8 ed  .H.|$ 1.H.......I...L..H..E.F...
0002c540  b5 ff ff 85 c0 0f 85 a5 00 00 00 0f 1f 44 00 00 49 39 ee 0f 84 cf 00 00 00 4c 8b 54 24 20 31 c9  .............D..I9.......L.T$ 1.
0002c560  48 89 da be 08 00 00 00 48 89 df 4d 8b 1a 45 88 1e e8 ba b5 ff ff 85 c0 75 76 4c 8b 7c 24 20 31  H.......H..M..E.........uvL.|$ 1
0002c580  c9 48 89 da be 08 00 00 00 48 89 df 49 8b 07 41 88 46 ff e8 98 b5 ff ff 85 c0 75 54 48 8b 54 24  .H.......H..I..A.F........uTH.T$
0002c5a0  20 be 08 00 00 00 48 89 df 48 8b 0a 48 89 da 41 88 4e fe 31 c9 e8 76 b5 ff ff 85 c0 75 32 48 8b   .....H..H..H..A.N.1..v.....u2H.
0002c5c0  74 24 20 31 c9 48 89 da 49 83 ee 04 48 8b 3e be 08 00 00 00 41 88 7e 01 48 89 df e8 50 b5 ff ff  t$ 1.H..I...H.>.....A.~.H...P...
0002c5e0  85 c0 0f 84 68 ff ff ff 0f 1f 84 00 00 00 00 00 41 89 c4 48 89 df e8 25 a1 ff ff 48 8b 44 24 28  ....h...........A..H...%...H.D$(
0002c600  64 48 2b 04 25 28 00 00 00 75 34 48 83 c4 38 44 89 e0 5b 5d 41 5c 41 5d 41 5e 41 5f e9 e8 a0 fd  dH+.%(...u4H..8D..[]A\A]A^A_....
0002c620  ff 0f 1f 80 00 00 00 00 4c 8b 4c 24 08 4d 85 c9 74 c1 4d 89 29 eb bc 41 bc fb ff ff ff eb bc e8  ........L.L$.M..t.M.)..A........
0002c640  cc 8b fd ff 66 2e 0f 1f 84 00 00 00 00 00 66 90                                                  ....f.........f.

0002c650    void mp_ubin_size(int32_t* arg1) __noreturn

0002c650  4883ec08           sub     rsp, 0x8
0002c654  e887a9ffff         call    mp_count_bits
{ Does not return }

0002c659                                                                             31 d2 a8 07 48 98 0f                           1...H..
0002c660  95 c2 48 c1 e8 03 48 83 c4 08 48 01 d0 e9 97 a0 fd ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00  ..H...H...H.......f...........@.

0002c680    int64_t mp_zero(int32_t* arg1)

0002c680  48635704           movsxd  rdx, dword [rdi+0x4]
0002c684  c7470800000000     mov     dword [rdi+0x8], 0x0
0002c68b  c70700000000       mov     dword [rdi], 0x0
0002c691  488b7f10           mov     rdi, qword [rdi+0x10]
0002c695  85d2               test    edx, edx
0002c697  7e0f               jle     0x2c6a8

0002c699  48c1e203           shl     rdx, 0x3
0002c69d  31f6               xor     esi, esi  {0x0}
0002c69f  e94c8cfdff         jmp     memset

0002c6a4              0f 1f 40 00                                                                              ..@.

0002c6a8  e95ca0fdff         jmp     __x86_return_thunk
{ Does not return }

0002c6ad                                         0f 1f 00                                                               ...

0002c6b0    void s_mp_add(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

0002c6b0  4157               push    r15 {var_8}
0002c6b2  4889f9             mov     rcx, rdi
0002c6b5  4989f7             mov     r15, rsi
0002c6b8  4156               push    r14 {var_10}
0002c6ba  4989f6             mov     r14, rsi
0002c6bd  4155               push    r13 {var_18}
0002c6bf  4154               push    r12 {var_20}
0002c6c1  55                 push    rbp {var_28}
0002c6c2  4889d5             mov     rbp, rdx
0002c6c5  53                 push    rbx {var_30}
0002c6c6  4883ec18           sub     rsp, 0x18
0002c6ca  448b27             mov     r12d, dword [rdi]
0002c6cd  8b1e               mov     ebx, dword [rsi]
0002c6cf  4139dc             cmp     r12d, ebx
0002c6d2  7e0b               jle     0x2c6df

0002c6d4  4489e0             mov     eax, r12d
0002c6d7  4989fe             mov     r14, rdi
0002c6da  4189dc             mov     r12d, ebx
0002c6dd  89c3               mov     ebx, eax

0002c6df  448d6b01           lea     r13d, [rbx+0x1]
0002c6e3  44396d04           cmp     dword [rbp+0x4], r13d
0002c6e7  0f8c53040000       jl      0x2cb40

0002c6ed  448b5500           mov     r10d, dword [rbp]
0002c6f1  488b7110           mov     rsi, qword [rcx+0x10]
0002c6f5  44896d00           mov     dword [rbp], r13d
0002c6f9  31c9               xor     ecx, ecx  {0x0}
0002c6fb  498b7f10           mov     rdi, qword [r15+0x10]
0002c6ff  488b5510           mov     rdx, qword [rbp+0x10]
0002c703  4531ff             xor     r15d, r15d  {0x0}
0002c706  4585e4             test    r12d, r12d
0002c709  0f8e21020000       jle     0x2c930

0002c70f  4d63dc             movsxd  r11, r12d
0002c712  31c0               xor     eax, eax  {0x0}
0002c714  31c9               xor     ecx, ecx  {0x0}
0002c716  49b8ffffffffffff…  mov     r8, 0xfffffffffffffff
0002c720  49c1e303           shl     r11, 0x3
0002c724  4d8d4bf8           lea     r9, [r11-0x8]
0002c728  49c1e903           shr     r9, 0x3
0002c72c  4983c101           add     r9, 0x1
0002c730  4183e107           and     r9d, 0x7
0002c734  0f84ff000000       je      0x2c839

0002c73a  4983f901           cmp     r9, 0x1
0002c73e  0f84cf000000       je      0x2c813

0002c744  4983f902           cmp     r9, 0x2
0002c748  0f84a8000000       je      0x2c7f6

0002c74e  4983f903           cmp     r9, 0x3
0002c752  0f8481000000       je      0x2c7d9

0002c758  4983f904           cmp     r9, 0x4
0002c75c  745e               je      0x2c7bc

0002c75e  4983f905           cmp     r9, 0x5
0002c762  743b               je      0x2c79f

0002c764  4983f906           cmp     r9, 0x6
0002c768  7418               je      0x2c782

0002c76a  4c8b3f             mov     r15, qword [rdi]
0002c76d  4c033e             add     r15, qword [rsi]
0002c770  b808000000         mov     eax, 0x8
0002c775  4c89f9             mov     rcx, r15
0002c778  4d21c7             and     r15, r8
0002c77b  4c893a             mov     qword [rdx], r15
0002c77e  48c1e93c           shr     rcx, 0x3c

0002c782  4c8b0c07           mov     r9, qword [rdi+rax]
0002c786  4c030c06           add     r9, qword [rsi+rax]
0002c78a  4901c9             add     r9, rcx
0002c78d  4c89c9             mov     rcx, r9
0002c790  4d21c1             and     r9, r8
0002c793  4c890c02           mov     qword [rdx+rax], r9
0002c797  48c1e93c           shr     rcx, 0x3c
0002c79b  4883c008           add     rax, 0x8

0002c79f  4c8b3c07           mov     r15, qword [rdi+rax]
0002c7a3  4c033c06           add     r15, qword [rsi+rax]
0002c7a7  4901cf             add     r15, rcx
0002c7aa  4c89f9             mov     rcx, r15
0002c7ad  4d21c7             and     r15, r8
0002c7b0  4c893c02           mov     qword [rdx+rax], r15
0002c7b4  48c1e93c           shr     rcx, 0x3c
0002c7b8  4883c008           add     rax, 0x8

0002c7bc  4c8b0c07           mov     r9, qword [rdi+rax]
0002c7c0  4c030c06           add     r9, qword [rsi+rax]
0002c7c4  4901c9             add     r9, rcx
0002c7c7  4c89c9             mov     rcx, r9
0002c7ca  4d21c1             and     r9, r8
0002c7cd  4c890c02           mov     qword [rdx+rax], r9
0002c7d1  48c1e93c           shr     rcx, 0x3c
0002c7d5  4883c008           add     rax, 0x8

0002c7d9  4c8b3c07           mov     r15, qword [rdi+rax]
0002c7dd  4c033c06           add     r15, qword [rsi+rax]
0002c7e1  4901cf             add     r15, rcx
0002c7e4  4c89f9             mov     rcx, r15
0002c7e7  4d21c7             and     r15, r8
0002c7ea  4c893c02           mov     qword [rdx+rax], r15
0002c7ee  48c1e93c           shr     rcx, 0x3c
0002c7f2  4883c008           add     rax, 0x8

0002c7f6  4c8b0c07           mov     r9, qword [rdi+rax]
0002c7fa  4c030c06           add     r9, qword [rsi+rax]
0002c7fe  4901c9             add     r9, rcx
0002c801  4c89c9             mov     rcx, r9
0002c804  4d21c1             and     r9, r8
0002c807  4c890c02           mov     qword [rdx+rax], r9
0002c80b  48c1e93c           shr     rcx, 0x3c
0002c80f  4883c008           add     rax, 0x8

0002c813  4c8b3c07           mov     r15, qword [rdi+rax]
0002c817  4c033c06           add     r15, qword [rsi+rax]
0002c81b  4901cf             add     r15, rcx
0002c81e  4c89f9             mov     rcx, r15
0002c821  4d21c7             and     r15, r8
0002c824  4c893c02           mov     qword [rdx+rax], r15
0002c828  4883c008           add     rax, 0x8
0002c82c  48c1e93c           shr     rcx, 0x3c
0002c830  4939c3             cmp     r11, rax
0002c833  0f84ea000000       je      0x2c923

0002c839  4c8b0c07           mov     r9, qword [rdi+rax]
0002c83d  4c030c06           add     r9, qword [rsi+rax]
0002c841  4901c9             add     r9, rcx
0002c844  4d89cf             mov     r15, r9
0002c847  4d21c1             and     r9, r8
0002c84a  4c890c02           mov     qword [rdx+rax], r9
0002c84e  49c1ef3c           shr     r15, 0x3c
0002c852  4c8b4c0708         mov     r9, qword [rdi+rax+0x8]
0002c857  4c034c0608         add     r9, qword [rsi+rax+0x8]
0002c85c  4d01f9             add     r9, r15
0002c85f  4c89c9             mov     rcx, r9
0002c862  4d21c1             and     r9, r8
0002c865  4c894c0208         mov     qword [rdx+rax+0x8], r9
0002c86a  48c1e93c           shr     rcx, 0x3c
0002c86e  4c8b7c0710         mov     r15, qword [rdi+rax+0x10]
0002c873  4c037c0610         add     r15, qword [rsi+rax+0x10]
0002c878  4901cf             add     r15, rcx
0002c87b  4c89f9             mov     rcx, r15
0002c87e  4d21c7             and     r15, r8
0002c881  4c897c0210         mov     qword [rdx+rax+0x10], r15
0002c886  48c1e93c           shr     rcx, 0x3c
0002c88a  4c8b4c0718         mov     r9, qword [rdi+rax+0x18]
0002c88f  4c034c0618         add     r9, qword [rsi+rax+0x18]
0002c894  4901c9             add     r9, rcx
0002c897  4d89cf             mov     r15, r9
0002c89a  4d21c1             and     r9, r8
0002c89d  4c894c0218         mov     qword [rdx+rax+0x18], r9
0002c8a2  49c1ef3c           shr     r15, 0x3c
0002c8a6  4c8b4c0720         mov     r9, qword [rdi+rax+0x20]
0002c8ab  4c034c0620         add     r9, qword [rsi+rax+0x20]
0002c8b0  4d01f9             add     r9, r15
0002c8b3  4c89c9             mov     rcx, r9
0002c8b6  4d21c1             and     r9, r8
0002c8b9  4c894c0220         mov     qword [rdx+rax+0x20], r9
0002c8be  48c1e93c           shr     rcx, 0x3c
0002c8c2  4c8b7c0728         mov     r15, qword [rdi+rax+0x28]
0002c8c7  4c037c0628         add     r15, qword [rsi+rax+0x28]
0002c8cc  4901cf             add     r15, rcx
0002c8cf  4c89f9             mov     rcx, r15
0002c8d2  4d21c7             and     r15, r8
0002c8d5  4c897c0228         mov     qword [rdx+rax+0x28], r15
0002c8da  48c1e93c           shr     rcx, 0x3c
0002c8de  4c8b4c0730         mov     r9, qword [rdi+rax+0x30]
0002c8e3  4c034c0630         add     r9, qword [rsi+rax+0x30]
0002c8e8  4901c9             add     r9, rcx
0002c8eb  4d89cf             mov     r15, r9
0002c8ee  4d21c1             and     r9, r8
0002c8f1  4c894c0230         mov     qword [rdx+rax+0x30], r9
0002c8f6  49c1ef3c           shr     r15, 0x3c
0002c8fa  4c8b4c0738         mov     r9, qword [rdi+rax+0x38]
0002c8ff  4c034c0638         add     r9, qword [rsi+rax+0x38]
0002c904  4d01f9             add     r9, r15
0002c907  4c89c9             mov     rcx, r9
0002c90a  4d21c1             and     r9, r8
0002c90d  4c894c0238         mov     qword [rdx+rax+0x38], r9
0002c912  48c1e93c           shr     rcx, 0x3c
0002c916  4883c040           add     rax, 0x40
0002c91a  4939c3             cmp     r11, rax
0002c91d  0f8516ffffff       jne     0x2c839

0002c923  418d7424ff         lea     esi, [r12-0x1]
0002c928  4589e7             mov     r15d, r12d
0002c92b  488d54f208         lea     rdx, [rdx+rsi*8+0x8]

0002c930  4139dc             cmp     r12d, ebx
0002c933  0f84c8010000       je      0x2cb01

0002c939  4439fb             cmp     ebx, r15d
0002c93c  0f8ebf010000       jle     0x2cb01

0002c942  4189dc             mov     r12d, ebx
0002c945  4d8b7610           mov     r14, qword [r14+0x10]
0002c949  4963ff             movsxd  rdi, r15d
0002c94c  31f6               xor     esi, esi  {0x0}
0002c94e  49b9ffffffffffff…  mov     r9, 0xfffffffffffffff
0002c958  4529fc             sub     r12d, r15d
0002c95b  49c1e403           shl     r12, 0x3
0002c95f  4d8d1cfe           lea     r11, [r14+rdi*8]
0002c963  4d8d4424f8         lea     r8, [r12-0x8]
0002c968  49c1e803           shr     r8, 0x3
0002c96c  4983c001           add     r8, 0x1
0002c970  4183e007           and     r8d, 0x7
0002c974  0f84d1000000       je      0x2ca4b

0002c97a  4983f801           cmp     r8, 0x1
0002c97e  0f84a8000000       je      0x2ca2c

0002c984  4983f802           cmp     r8, 0x2
0002c988  0f8488000000       je      0x2ca16

0002c98e  4983f803           cmp     r8, 0x3
0002c992  746c               je      0x2ca00

0002c994  4983f804           cmp     r8, 0x4
0002c998  7450               je      0x2c9ea

0002c99a  4983f805           cmp     r8, 0x5
0002c99e  7434               je      0x2c9d4

0002c9a0  4983f806           cmp     r8, 0x6
0002c9a4  7418               je      0x2c9be

0002c9a6  498b03             mov     rax, qword [r11]
0002c9a9  be08000000         mov     esi, 0x8
0002c9ae  4801c8             add     rax, rcx
0002c9b1  4889c1             mov     rcx, rax
0002c9b4  4c21c8             and     rax, r9
0002c9b7  488902             mov     qword [rdx], rax
0002c9ba  48c1e93c           shr     rcx, 0x3c

0002c9be  49030c33           add     rcx, qword [r11+rsi]
0002c9c2  4889cf             mov     rdi, rcx
0002c9c5  48c1e93c           shr     rcx, 0x3c
0002c9c9  4c21cf             and     rdi, r9
0002c9cc  48893c32           mov     qword [rdx+rsi], rdi
0002c9d0  4883c608           add     rsi, 0x8

0002c9d4  49030c33           add     rcx, qword [r11+rsi]
0002c9d8  4989ce             mov     r14, rcx
0002c9db  48c1e93c           shr     rcx, 0x3c
0002c9df  4d21ce             and     r14, r9
0002c9e2  4c893432           mov     qword [rdx+rsi], r14
0002c9e6  4883c608           add     rsi, 0x8

0002c9ea  49030c33           add     rcx, qword [r11+rsi]
0002c9ee  4989c8             mov     r8, rcx
0002c9f1  48c1e93c           shr     rcx, 0x3c
0002c9f5  4d21c8             and     r8, r9
0002c9f8  4c890432           mov     qword [rdx+rsi], r8
0002c9fc  4883c608           add     rsi, 0x8

0002ca00  49030c33           add     rcx, qword [r11+rsi]
0002ca04  4889c8             mov     rax, rcx
0002ca07  48c1e93c           shr     rcx, 0x3c
0002ca0b  4c21c8             and     rax, r9
0002ca0e  48890432           mov     qword [rdx+rsi], rax
0002ca12  4883c608           add     rsi, 0x8

0002ca16  49030c33           add     rcx, qword [r11+rsi]
0002ca1a  4889cf             mov     rdi, rcx
0002ca1d  48c1e93c           shr     rcx, 0x3c
0002ca21  4c21cf             and     rdi, r9
0002ca24  48893c32           mov     qword [rdx+rsi], rdi
0002ca28  4883c608           add     rsi, 0x8

0002ca2c  49030c33           add     rcx, qword [r11+rsi]
0002ca30  4989ce             mov     r14, rcx
0002ca33  48c1e93c           shr     rcx, 0x3c
0002ca37  4d21ce             and     r14, r9
0002ca3a  4c893432           mov     qword [rdx+rsi], r14
0002ca3e  4883c608           add     rsi, 0x8
0002ca42  4939f4             cmp     r12, rsi
0002ca45  0f84ab000000       je      0x2caf6

0002ca4b  49030c33           add     rcx, qword [r11+rsi]
0002ca4f  4989c8             mov     r8, rcx
0002ca52  4c21c9             and     rcx, r9
0002ca55  48890c32           mov     qword [rdx+rsi], rcx
0002ca59  49c1e83c           shr     r8, 0x3c
0002ca5d  4d03443308         add     r8, qword [r11+rsi+0x8]
0002ca62  4c89c1             mov     rcx, r8
0002ca65  4d21c8             and     r8, r9
0002ca68  4c89443208         mov     qword [rdx+rsi+0x8], r8
0002ca6d  48c1e93c           shr     rcx, 0x3c
0002ca71  49034c3310         add     rcx, qword [r11+rsi+0x10]
0002ca76  4889c8             mov     rax, rcx
0002ca79  4c21c9             and     rcx, r9
0002ca7c  48894c3210         mov     qword [rdx+rsi+0x10], rcx
0002ca81  48c1e83c           shr     rax, 0x3c
0002ca85  4903443318         add     rax, qword [r11+rsi+0x18]
0002ca8a  4889c7             mov     rdi, rax
0002ca8d  4c21c8             and     rax, r9
0002ca90  4889443218         mov     qword [rdx+rsi+0x18], rax
0002ca95  48c1ef3c           shr     rdi, 0x3c
0002ca99  49037c3320         add     rdi, qword [r11+rsi+0x20]
0002ca9e  4989fe             mov     r14, rdi
0002caa1  4c21cf             and     rdi, r9
0002caa4  48897c3220         mov     qword [rdx+rsi+0x20], rdi
0002caa9  49c1ee3c           shr     r14, 0x3c
0002caad  4d03743328         add     r14, qword [r11+rsi+0x28]
0002cab2  4c89f1             mov     rcx, r14
0002cab5  4d21ce             and     r14, r9
0002cab8  4c89743228         mov     qword [rdx+rsi+0x28], r14
0002cabd  48c1e93c           shr     rcx, 0x3c
0002cac1  49034c3330         add     rcx, qword [r11+rsi+0x30]
0002cac6  4989c8             mov     r8, rcx
0002cac9  4c21c9             and     rcx, r9
0002cacc  48894c3230         mov     qword [rdx+rsi+0x30], rcx
0002cad1  49c1e83c           shr     r8, 0x3c
0002cad5  4d03443338         add     r8, qword [r11+rsi+0x38]
0002cada  4c89c1             mov     rcx, r8
0002cadd  4d21c8             and     r8, r9
0002cae0  4c89443238         mov     qword [rdx+rsi+0x38], r8
0002cae5  4883c640           add     rsi, 0x40
0002cae9  48c1e93c           shr     rcx, 0x3c
0002caed  4939f4             cmp     r12, rsi
0002caf0  0f8555ffffff       jne     0x2ca4b

0002caf6  83eb01             sub     ebx, 0x1
0002caf9  4429fb             sub     ebx, r15d
0002cafc  488d54da08         lea     rdx, [rdx+rbx*8+0x8]

0002cb01  4529ea             sub     r10d, r13d
0002cb04  48890a             mov     qword [rdx], rcx
0002cb07  488d7a08           lea     rdi, [rdx+0x8]
0002cb0b  4585d2             test    r10d, r10d
0002cb0e  7e12               jle     0x2cb22

0002cb10  4963da             movsxd  rbx, r10d
0002cb13  31f6               xor     esi, esi  {0x0}
0002cb15  488d14dd00000000   lea     rdx, [rbx*8]
0002cb1d  e8ce87fdff         call    memset

0002cb22  4889ef             mov     rdi, rbp
0002cb25  e8869affff         call    mp_clamp
{ Does not return }


0002cb2a    void sub_2cb2a(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) __noreturn

0002cb2a  4883c418           add     rsp, 0x18
0002cb2e  31c0               xor     eax, eax  {0x0}
0002cb30  5b                 pop     rbx {arg1}
0002cb31  5d                 pop     rbp {arg2}
0002cb32  415c               pop     r12 {arg3}
0002cb34  415d               pop     r13 {arg4}
0002cb36  415e               pop     r14 {arg5}
0002cb38  415f               pop     r15 {arg6}
0002cb3a  e9ca9bfdff         jmp     __x86_return_thunk
{ Does not return }

0002cb3f                                                                                               90                                 .

{ Continuation of function s_mp_add }

0002cb40  4489ee             mov     esi, r13d
0002cb43  4889ef             mov     rdi, rbp
0002cb46  48894c2408         mov     qword [rsp+0x8 {var_40}], rcx
0002cb4b  e8a0b9ffff         call    mp_grow
{ Does not return }

0002cb50                                                  48 8b 4c 24 08 85 c0 0f 84 90 fb ff ff 48 83 c4                  H.L$.........H..
0002cb60  18 5b 5d 41 5c 41 5d 41 5e 41 5f e9 99 9b fd ff                                                  .[]A\A]A^A_.....

0002cb70    void s_mp_balance_mul(int32_t* arg1, int32_t* arg2) __noreturn

0002cb70  4157               push    r15 {var_8}
0002cb72  4156               push    r14 {var_10}
0002cb74  4989fe             mov     r14, rdi
0002cb77  4155               push    r13 {var_18}
0002cb79  4989f5             mov     r13, rsi
0002cb7c  4154               push    r12 {var_20}
0002cb7e  55                 push    rbp {var_28}
0002cb7f  53                 push    rbx {var_30}
0002cb80  4881ecb8000000     sub     rsp, 0xb8
0002cb87  448b3e             mov     r15d, dword [rsi]
0002cb8a  4889542420         mov     qword [rsp+0x20 {var_c8}], rdx
0002cb8f  4489fb             mov     ebx, r15d
0002cb92  644c8b2425280000…  mov     r12, qword [fs:0x28]
0002cb9b  4c89a424a8000000   mov     qword [rsp+0xa8 {var_40}], r12
0002cba3  448b27             mov     r12d, dword [rdi]
0002cba6  488d7c2430         lea     rdi, [rsp+0x30 {var_b8}]
0002cbab  48897c2408         mov     qword [rsp+0x8 {var_e0}], rdi {var_b8}
0002cbb0  4539fc             cmp     r12d, r15d
0002cbb3  410f4edc           cmovle  ebx, r12d
0002cbb7  8d7302             lea     esi, [rbx+0x2]
0002cbba  e891bdffff         call    mp_init_size
{ Does not return }

0002cbbf                                                                                               89                                 .
0002cbc0  c1 85 c0 74 33 48 8b 84 24 a8 00 00 00 64 48 2b 04 25 28 00 00 00 0f 85 27 05 00 00 48 81 c4 b8  ...t3H..$....dH+.%(.....'...H...
0002cbe0  00 00 00 89 c8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 15 9b fd ff 0f 1f 40 00 48 8d 6c 24 50 48 8d b4  .....[]A\A]A^A_.......@.H.l$PH..
0002cc00  24 90 00 00 00 31 d2 31 c0 48 89 ef 48 89 74 24 10 e8 fa b9 ff ff 85 c0 0f 85 6e 04 00 00 45 39  $....1.1.H..H.t$..........n...E9
0002cc20  fc 0f 8c 3d 04 00 00 49 8b 45 10 f3 41 0f 6f 45 00 41 8b 0e 4d 8b 76 10 48 89 84 24 80 00 00 00  ...=...I.E..A.oE.A..M.v.H..$....
0002cc40  0f 29 44 24 70 45 39 fc 44 89 f8 41 0f 4d c4 99 f7 fb 85 c0 0f 8e 90 04 00 00 4c 8d 44 24 70 89  .)D$pE9.D..A.M............L.D$p.
0002cc60  4c 24 2c 45 31 ff 45 31 ed 4c 89 44 24 18 45 31 e4 89 44 24 28 66 66 2e 0f 1f 84 00 00 00 00 00  L$,E1.E1.L.D$.E1..D$(ff.........
0002cc80  c7 44 24 30 00 00 00 00 85 db 0f 8e 40 01 00 00 45 8d 1c 1f 4c 8b 54 24 40 44 89 f8 44 89 d9 44  .D$0........@...E...L.T$@D..D..D
0002cca0  29 f9 83 e1 07 0f 84 a2 00 00 00 83 f9 01 0f 84 82 00 00 00 83 f9 02 74 6b 83 f9 03 74 54 83 f9  )......................tk...tT..
0002ccc0  04 74 3d 83 f9 05 74 26 83 f9 06 74 0f 4f 8b 3c fe 83 c0 01 49 83 c2 08 4d 89 7a f8 48 63 f0 49  .t=...t&...t.O.<....I...M.z.Hc.I
0002cce0  83 c2 08 83 c0 01 49 8b 14 f6 49 89 52 f8 4c 63 c8 49 83 c2 08 83 c0 01 4b 8b 3c ce 49 89 7a f8  ......I...I.R.Lc.I......K.<.I.z.
0002cd00  4c 63 c0 49 83 c2 08 83 c0 01 4b 8b 0c c6 49 89 4a f8 4c 63 f8 49 83 c2 08 83 c0 01 4b 8b 34 fe  Lc.I......K...I.J.Lc.I......K.4.
0002cd20  49 89 72 f8 48 63 d0 49 83 c2 08 83 c0 01 4d 8b 0c d6 4d 89 4a f8 48 63 f8 83 c0 01 49 83 c2 08  I.r.Hc.I......M...M.J.Hc....I...
0002cd40  4d 8b 04 fe 4d 89 42 f8 44 39 d8 74 7c 4c 63 f8 8d 48 01 8d 50 02 49 83 c2 40 4b 8b 34 fe 4c 63  M...M.B.D9.t|Lc..H..P.I..@K.4.Lc
0002cd60  c9 48 63 ca 44 8d 40 03 49 63 d0 49 89 72 c0 4b 8b 3c ce 8d 70 04 4c 63 c6 49 89 7a c8 4d 8b 3c  .Hc.D.@.Ic.I.r.K.<..p.Lc.I.z.M.<
0002cd80  ce 8d 78 05 48 63 f7 4d 89 7a d0 4d 8b 0c d6 44 8d 78 06 49 63 ff 4d 89 4a d8 4b 8b 0c c6 44 8d  ..x.Hc.M.z.M...D.x.Ic.M.J.K...D.
0002cda0  48 07 83 c0 08 49 89 4a e0 49 8b 14 f6 49 63 c9 49 89 52 e8 4d 8b 04 fe 4d 89 42 f0 4d 8b 3c ce  H....I.J.I...Ic.I.R.M...M.B.M.<.
0002cdc0  4d 89 7a f8 44 39 d8 75 84 89 5c 24 30 4d 63 fb 48 8b 7c 24 08 e8 d6 97 ff ff 48 8b 74 24 18 48  M.z.D9.u..\$0Mc.H.|$......H.t$.H
0002cde0  8b 7c 24 08 48 89 ea e8 24 c8 ff ff 85 c0 0f 85 93 02 00 00 44 89 e6 48 89 ef e8 51 bd ff ff 85  .|$.H...$...........D..H...Q....
0002ce00  c0 0f 85 80 02 00 00 48 8b 7c 24 10 48 89 ee 48 89 fa e8 49 93 ff ff 85 c0 0f 85 68 02 00 00 41  .......H.|$.H..H...I.......h...A
0002ce20  83 c5 01 41 01 dc 44 39 6c 24 28 0f 85 4f fe ff ff 8b 4c 24 2c 44 39 f9 0f 8e 95 02 00 00 4d 63  ...A..D9l$(..O....L$,D9.......Mc
0002ce40  df 45 89 fa 4c 8b 64 24 40 41 8d 47 01 4b 8b 34 de 41 f7 d2 41 bb 01 00 00 00 41 01 ca 49 89 34  .E..L.d$@A.G.K.4.A..A.....A..I.4
0002ce60  24 41 83 e2 07 39 c8 0f 8d 85 01 00 00 45 85 d2 0f 84 c8 00 00 00 41 83 fa 01 0f 84 a1 00 00 00  $A...9.......E........A.........
0002ce80  41 83 fa 02 0f 84 82 00 00 00 41 83 fa 03 74 67 41 83 fa 04 74 4c 41 83 fa 05 74 31 41 83 fa 06  A.........A...tgA...tLA...t1A...
0002cea0  74 16 48 63 d0 41 bb 02 00 00 00 41 8d 47 02 4d 8b 0c d6 4d 89 4c 24 08 48 63 f8 4d 63 c3 83 c0  t.Hc.A.....A.G.M...M.L$.Hc.Mc...
0002cec0  01 41 83 c3 01 4d 8b 14 fe 4f 89 14 c4 48 63 f0 4d 63 cb 83 c0 01 41 83 c3 01 49 8b 14 f6 4b 89  .A...M...O...Hc.Mc....A...I...K.
0002cee0  14 cc 48 63 f8 4d 63 c3 83 c0 01 41 83 c3 01 4d 8b 14 fe 4f 89 14 c4 48 63 f0 4d 63 cb 83 c0 01  ..Hc.Mc....A...M...O...Hc.Mc....
0002cf00  41 83 c3 01 49 8b 14 f6 4b 89 14 cc 48 63 f8 4d 63 c3 83 c0 01 41 83 c3 01 4d 8b 14 fe 4f 89 14  A...I...K...Hc.Mc....A...M...O..
0002cf20  c4 48 63 f0 4d 63 cb 83 c0 01 41 83 c3 01 49 8b 14 f6 4b 89 14 cc 39 c8 0f 8d b4 00 00 00 48 63  .Hc.Mc....A...I...K...9.......Hc
0002cf40  f8 44 8d 50 01 41 8d 53 01 49 63 f3 4d 8b 04 fe 4d 63 d2 44 8d 48 02 48 63 fa 4d 63 c9 8d 50 03  .D.P.A.S.Ic.M...Mc.D.H.Hc.Mc..P.
0002cf60  4d 89 04 f4 4f 8b 04 d6 41 8d 73 02 48 63 d2 4d 89 04 fc 4f 8b 14 ce 4c 63 c6 41 8d 7b 03 8d 70  M...O...A.s.Hc.M...O...Lc.A.{..p
0002cf80  04 4f 89 14 c4 4d 8b 0c d6 4c 63 d7 48 63 f6 41 8d 7b 04 44 8d 40 05 4f 89 0c d4 49 8b 14 f6 4c  .O...M...Lc.Hc.A.{.D.@.O...I...L
0002cfa0  63 cf 49 63 f8 45 8d 53 05 8d 70 06 4b 89 14 cc 4d 8b 04 fe 49 63 d2 4c 63 ce 45 8d 53 06 4d 89  c.Ic.E.S..p.K...M...Ic.Lc.E.S.M.
0002cfc0  04 d4 44 8d 40 07 4b 8b 34 ce 49 63 fa 4d 63 d0 41 8d 53 07 83 c0 08 41 83 c3 08 49 89 34 fc 4f  ..D.@.K.4.Ic.Mc.A.S....A...I.4.O
0002cfe0  8b 04 d6 4c 63 ca 4f 89 04 cc 39 c8 0f 8c 4c ff ff ff 41 89 ce 45 8d 67 01 b8 01 00 00 00 45 29  ...Lc.O...9...L...A..E.g......E)
0002d000  fe 4c 8b 7c 24 08 44 39 e1 44 0f 4c f0 4c 89 ff 44 89 74 24 30 e8 96 95 ff ff 48 8b 74 24 18 48  .L.|$.D9.D.L.L..D.t$0.....H.t$.H
0002d020  89 ea 4c 89 ff e8 e6 c5 ff ff 41 89 c3 85 c0 74 72 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00  ..L.......A....trff...........@.
0002d040  48 8b 54 24 10 48 8b 7c 24 08 31 c9 48 89 ee 31 c0 44 89 5c 24 18 e8 25 97 ff ff 8b 4c 24 18 e9  H.T$.H.|$.1.H..1.D.\$..%....L$..
0002d060  61 fb ff ff f3 41 0f 6f 0e 49 8b 56 10 41 8b 4d 00 4d 8b 75 10 48 89 94 24 80 00 00 00 0f 29 4c  a....A.o.I.V.A.M.M.u.H..$.....)L
0002d080  24 70 e9 be fb ff ff 41 89 c3 eb b4 48 8b 7c 24 08 89 44 24 10 e8 86 96 ff ff 8b 4c 24 10 e9 22  $p.....A....H.|$..D$.......L$.."
0002d0a0  fb ff ff 41 0f af dd 48 89 ef 89 de e8 9f ba ff ff 41 89 c3 85 c0 75 88 48 8b 7c 24 10 48 89 ee  ...A...H.........A....u.H.|$.H..
0002d0c0  48 89 fa e8 98 90 ff ff 41 89 c3 85 c0 0f 85 6d ff ff ff 48 8b 74 24 20 48 8b 7c 24 10 e8 9e ad  H.......A......m...H.t$ H.|$....
0002d0e0  ff ff 45 31 db e9 56 ff ff ff 85 c9 7e e5 48 8d 7c 24 70 45 31 ff 45 31 ed 48 89 7c 24 18 e9 3b  ..E1..V.....~.H.|$pE1.E1.H.|$..;
0002d100  fd ff ff e8 08 81 fd ff 0f 1f 84 00 00 00 00 00                                                  ................

0002d110    void s_mp_exptmod(int64_t arg1, int32_t* arg2) __noreturn

0002d110  4157               push    r15 {var_8}
0002d112  4156               push    r14 {var_10}
0002d114  4155               push    r13 {var_18}
0002d116  4154               push    r12 {var_20}
0002d118  55                 push    rbp {var_28}
0002d119  53                 push    rbx {var_30}
0002d11a  4881ecc8180000     sub     rsp, 0x18c8
0002d121  48897c2438         mov     qword [rsp+0x38 {var_18c0}], rdi
0002d126  4889742440         mov     qword [rsp+0x40 {var_18b8}], rsi
0002d12b  4889542418         mov     qword [rsp+0x18 {var_18e0}], rdx
0002d130  48894c2448         mov     qword [rsp+0x48 {var_18b0}], rcx
0002d135  4489442430         mov     dword [rsp+0x30 {var_18c8}], r8d
0002d13a  64488b3c25280000…  mov     rdi, qword [fs:0x28]
0002d143  4889bc24b8180000   mov     qword [rsp+0x18b8 {var_40}], rdi
0002d14b  4889f7             mov     rdi, rsi
0002d14e  e88d9effff         call    mp_count_bits
{ Does not return }

0002d153                                                           83 f8 07 0f 8f 1c 0b 00 00 48 8d bc 24                     .........H..$
0002d160  c8 00 00 00 48 89 7c 24 10 e8 02 b4 ff ff 41 89 c7 85 c0 0f 85 ca 0a 00 00 48 c7 44 24 50 30 00  ....H.|$......A..........H.D$P0.
0002d180  00 00 41 be 04 00 00 00 bb 01 00 00 00 41 bc 02 00 00 00 c7 44 24 5c 02 00 00 00 49 63 c4 48 8d  ..A..........A......D$\....Ic.H.
0002d1a0  8c 24 b0 00 00 00 44 89 f6 44 89 e5 48 8d 14 40 44 29 e6 48 89 44 24 28 4c 8d 2c d1 48 89 4c 24  .$....D..D..H..@D).H.D$(L.,.H.L$
0002d1c0  20 4c 89 6c 24 08 83 e6 07 0f 84 ec 00 00 00 83 fe 01 0f 84 c0 00 00 00 83 fe 02 0f 84 9d 00 00   L.l$...........................
0002d1e0  00 83 fe 03 74 7e 83 fe 04 74 5f 83 fe 05 74 40 83 fe 06 74 21 4c 8b 6c 24 08 4c 89 ef e8 6e b3  ....t~...t_...t@...t!L.l$.L...n.
0002d200  ff ff 41 89 c7 85 c0 0f 85 a6 08 00 00 41 8d 6c 24 01 49 83 c5 18 4c 89 ef e8 52 b3 ff ff 41 89  ..A..........A.l$.I...L...R...A.
0002d220  c7 85 c0 0f 85 8a 08 00 00 83 c5 01 49 83 c5 18 4c 89 ef e8 38 b3 ff ff 41 89 c7 85 c0 0f 85 70  ............I...L...8...A......p
0002d240  08 00 00 83 c5 01 49 83 c5 18 4c 89 ef e8 1e b3 ff ff 41 89 c7 85 c0 0f 85 56 08 00 00 83 c5 01  ......I...L.......A......V......
0002d260  49 83 c5 18 4c 89 ef e8 04 b3 ff ff 41 89 c7 85 c0 0f 85 3c 08 00 00 83 c5 01 49 83 c5 18 4c 89  I...L.......A......<......I...L.
0002d280  ef e8 ea b2 ff ff 41 89 c7 85 c0 0f 85 22 08 00 00 83 c5 01 49 83 c5 18 4c 89 ef e8 d0 b2 ff ff  ......A......"......I...L.......
0002d2a0  41 89 c7 85 c0 0f 85 08 08 00 00 83 c5 01 49 83 c5 18 44 39 f5 0f 84 bf 00 00 00 4c 89 ef e8 ad  A.............I...D9.......L....
0002d2c0  b2 ff ff 85 c0 0f 85 e5 07 00 00 44 8d 7d 01 49 8d 7d 18 44 89 fd e8 95 b2 ff ff 85 c0 0f 85 cd  ...........D.}.I.}.D............
0002d2e0  07 00 00 49 8d 7d 30 83 c5 01 e8 81 b2 ff ff 85 c0 0f 85 b9 07 00 00 49 8d 7d 48 41 8d 6f 02 e8  ...I.}0................I.}HA.o..
0002d300  6c b2 ff ff 85 c0 0f 85 a4 07 00 00 49 8d 7d 60 41 8d 6f 03 e8 57 b2 ff ff 85 c0 0f 85 8f 07 00  l...........I.}`A.o..W..........
0002d320  00 49 8d 7d 78 41 8d 6f 04 e8 42 b2 ff ff 85 c0 0f 85 7a 07 00 00 49 8d bd 90 00 00 00 41 8d 6f  .I.}xA.o..B.......z...I......A.o
0002d340  05 e8 2a b2 ff ff 85 c0 0f 85 62 07 00 00 49 8d bd a8 00 00 00 41 8d 6f 06 e8 12 b2 ff ff 85 c0  ..*.......b...I......A.o........
0002d360  0f 85 4a 07 00 00 41 8d 6f 07 49 81 c5 c0 00 00 00 44 39 f5 0f 85 41 ff ff ff 4c 8d ac 24 90 00  ..J...A.o.I......D9...A...L..$..
0002d380  00 00 4c 89 ef e8 e6 b1 ff ff 41 89 c7 85 c0 0f 85 53 09 00 00 44 8b 44 24 30 45 85 c0 0f 84 7d  ..L.......A......S...D.D$0E....}
0002d3a0  0b 00 00 48 8b 7c 24 18 4c 89 ee e8 50 58 00 00 41 89 c7 85 c0 0f 85 25 09 00 00 4c 8d 0d ae 56  ...H.|$.L...PX..A......%...L...V
0002d3c0  00 00 4c 89 4c 24 30 48 8b 54 24 10 48 8b 74 24 18 48 8b 7c 24 38 e8 85 ba ff ff 41 89 c7 85 c0  ..L.L$0H.T$.H.t$.H.|$8.....A....
0002d3e0  0f 85 fa 08 00 00 48 8b 6c 24 50 4c 8b 5c 24 20 48 8b 7c 24 10 4c 01 dd 48 89 ee e8 f0 98 ff ff  ......H.l$PL.\$ H.|$.L..H.......
0002d400  41 89 c7 85 c0 0f 85 d5 08 00 00 44 89 64 24 38 4c 8b 64 24 30 44 89 74 24 50 4c 8b 74 24 18 90  A..........D.d$8L.d$0D.t$PL.t$..
0002d420  48 89 ee 48 89 ef e8 e5 e6 ff ff 85 c0 0f 85 99 08 00 00 4c 89 ea 4c 89 f6 48 89 ef e8 34 b5 fd  H..H...............L..L..H...4..
0002d440  ff 85 c0 0f 85 83 08 00 00 41 83 c7 01 41 39 df 7c ce 44 8b 64 24 38 44 8b 74 24 50 41 8d 5c 24  .........A...A9.|.D.d$8D.t$PA.\$
0002d460  01 44 39 f3 0f 8d 83 02 00 00 48 8b 4c 24 28 41 8d 7e fe 48 8b 54 24 10 4c 63 fb 44 29 e7 4c 8b  .D9.......H.L$(A.~.H.T$.Lc.D).L.
0002d480  4c 24 08 49 ba ab aa aa aa aa aa aa 0a 48 01 cf 49 29 cf 48 8d 04 7f 4f 8d 04 7f 4c 89 cd 48 8d  L$.I.........H..I).H...O...L..H.
0002d4a0  34 c2 49 c1 e0 03 48 89 74 24 68 4c 29 ce 48 83 ee 18 4c 89 44 24 60 48 c1 ee 03 49 0f af f2 48  4.I...H.t$hL).H...L.D$`H...I...H
0002d4c0  83 c6 01 83 e6 03 0f 84 09 01 00 00 48 83 fe 01 0f 84 a1 00 00 00 48 83 fe 02 74 4b 48 8b 6c 24  ............H.........H...tKH.l$
0002d4e0  60 48 8b 74 24 10 4c 89 cf 4c 89 cb 49 8d 2c 29 48 89 ea e8 18 c1 ff ff 41 89 c7 85 c0 0f 85 dd  `H.t$.L..L..I.,)H.......A.......
0002d500  07 00 00 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8 14 92 fd ff 41 89 c7 85 c0 0f 85 bd  ...H.t$.H.D$0L..H.......A.......
0002d520  07 00 00 48 8d 6b 18 4c 8b 5c 24 60 48 8b 74 24 10 4a 8d 7c 1d 00 48 89 7c 24 38 48 89 fa 48 89  ...H.k.L.\$`H.t$.J.|..H.|$8H..H.
0002d540  ef e8 ca c0 ff ff 41 89 c7 85 c0 0f 85 8f 07 00 00 4c 8b 7c 24 30 48 8b 74 24 18 4c 89 ea 48 8b  ......A..........L.|$0H.t$.L..H.
0002d560  7c 24 38 e8 b3 91 fd ff 41 89 c7 85 c0 0f 85 6d 07 00 00 48 83 c5 18 48 8b 4c 24 60 48 8b 74 24  |$8.....A......m...H...H.L$`H.t$
0002d580  10 48 89 ef 4c 8d 44 0d 00 4c 89 c2 4c 89 44 24 38 e8 7a c0 ff ff 41 89 c7 85 c0 0f 85 3f 07 00  .H..L.D..L..L.D$8.z...A......?..
0002d5a0  00 48 8b 74 24 18 48 8b 7c 24 38 4c 89 ea 48 8b 5c 24 30 e8 57 0e 00 00 41 89 c7 85 c0 0f 85 1d  .H.t$.H.|$8L..H.\$0.W...A.......
0002d5c0  07 00 00 48 8b 54 24 68 48 83 c5 18 48 39 d5 0f 84 18 01 00 00 48 8b 5c 24 30 4c 8b 7c 24 60 44  ...H.T$hH...H9.......H.\$0L.|$`D
0002d5e0  89 64 24 38 44 89 74 24 50 4c 8b 74 24 10 4e 8d 64 3d 00 4c 89 f6 48 89 ef 4c 89 e2 e8 0f c0 ff  .d$8D.t$PL.t$.N.d=.L..H..L......
0002d600  ff 85 c0 0f 85 1f 0a 00 00 48 8b 74 24 18 4c 89 ea 4c 89 e7 e8 f6 0d 00 00 85 c0 0f 85 07 0a 00  .........H.t$.L..L..............
0002d620  00 48 8d 7d 18 4c 89 f6 4e 8d 0c 3f 4c 89 ca 4c 89 4c 24 60 e8 d7 bf ff ff 4c 8b 54 24 60 85 c0  .H.}.L..N..?L..L.L$`.....L.T$`..
0002d640  0f 85 e2 09 00 00 4c 8b 64 24 18 4c 89 ea 4c 89 d7 4c 89 e6 e8 b6 0d 00 00 85 c0 0f 85 c7 09 00  ......L.d$.L..L..L..............
0002d660  00 48 8d 7d 30 4a 8d 34 3f 48 89 74 24 60 48 89 f2 4c 89 f6 e8 97 bf ff ff 85 c0 0f 85 a7 09 00  .H.}0J.4?H.t$`H..L..............
0002d680  00 48 8b 7c 24 60 4c 89 ea 4c 89 e6 e8 7e 0d 00 00 85 c0 0f 85 8f 09 00 00 48 8d 7d 48 4c 89 f6  .H.|$`L..L...~...........H.}HL..
0002d6a0  4a 8d 04 3f 48 89 c2 48 89 44 24 60 e8 5f bf ff ff 85 c0 0f 85 6f 09 00 00 48 8b 7c 24 60 4c 89  J..?H..H.D$`._.......o...H.|$`L.
0002d6c0  ea 4c 89 e6 e8 46 0d 00 00 85 c0 0f 85 57 09 00 00 4c 8b 5c 24 68 48 83 c5 60 4c 39 dd 0f 85 0b  .L...F.......W...L.\$hH..`L9....
0002d6e0  ff ff ff 44 8b 64 24 38 44 8b 74 24 50 48 8d 6c 24 70 48 89 ef e8 76 ae ff ff 41 89 c7 85 c0 0f  ...D.d$8D.t$PH.l$pH...v...A.....
0002d700  85 db 05 00 00 48 89 ef be 01 00 00 00 45 31 ff 31 db e8 d9 e2 ff ff 48 8b 7c 24 40 44 89 64 24  .....H.......E1.1......H.|$@D.d$
0002d720  60 31 c9 4c 89 6c 24 50 8b 07 44 89 74 24 68 bf 01 00 00 00 49 89 ee 89 cd 89 44 24 38 83 e8 01  `1.L.l$P..D.t$h.....I.....D$8...
0002d740  83 ef 01 0f 85 84 0c 00 00 83 f8 ff 0f 84 24 0a 00 00 4c 8b 44 24 40 44 8d 68 ff 48 98 49 8b 50  ..............$...L.D$@D.h.H.I.P
0002d760  10 4c 8b 0c c2 4c 89 c8 4b 8d 1c 09 48 c1 e8 3b 83 e0 01 41 89 c2 41 09 fa 0f 84 c4 08 00 00 41  .L...L..K...H..;...A..A........A
0002d780  bc 3c 00 00 00 44 89 6c 24 38 45 89 e5 49 89 dc 8b 5c 24 5c 83 ff 01 75 5c 85 c0 75 58 4c 89 f6  .<...D.l$8E..I...\$\...u\..uXL..
0002d7a0  4c 89 f7 e8 68 e3 ff ff 85 c0 0f 85 c2 08 00 00 48 8b 54 24 50 48 8b 74 24 18 4c 89 f7 48 8b 44  L...h...........H.T$PH.t$.L..H.D
0002d7c0  24 30 e8 65 8f fd ff 85 c0 0f 85 a3 08 00 00 bf 01 00 00 00 41 83 ed 01 0f 84 5c 08 00 00 4c 89  $0.e................A.....\...L.
0002d7e0  e0 4d 01 e4 48 c1 e8 3b 83 e0 01 bf 01 00 00 00 83 ff 01 74 a4 45 89 f8 41 f7 d0 41 01 d8 41 83  .M..H..;...........t.E..A..A..A.
0002d800  e0 07 0f 84 4e 01 00 00 41 83 c7 01 89 d9 bf 02 00 00 00 44 29 f9 d3 e0 09 c5 41 83 ed 01 0f 84  ....N...A..........D).....A.....
0002d820  16 08 00 00 4c 89 e0 4d 01 e4 48 c1 e8 3b 83 e0 01 41 83 f8 01 0f 84 1b 01 00 00 41 83 f8 02 0f  ....L..M..H..;...A.........A....
0002d840  84 e8 00 00 00 41 83 f8 03 0f 84 b5 00 00 00 41 83 f8 04 0f 84 82 00 00 00 41 83 f8 05 74 53 41  .....A.........A.........A...tSA
0002d860  83 f8 06 74 24 41 83 c7 01 89 d9 44 29 f9 d3 e0 09 c5 41 83 ed 01 0f 84 be 07 00 00 4c 89 e0 4d  ...t$A.....D).....A.........L..M
0002d880  01 e4 48 c1 e8 3b 83 e0 01 41 83 c7 01 89 d9 bf 02 00 00 00 44 29 f9 d3 e0 09 c5 41 83 ed 01 0f  ..H..;...A..........D).....A....
0002d8a0  84 95 07 00 00 4c 89 e0 4d 01 e4 48 c1 e8 3b 83 e0 01 41 83 c7 01 89 d9 bf 02 00 00 00 44 29 f9  .....L..M..H..;...A..........D).
0002d8c0  d3 e0 09 c5 41 83 ed 01 0f 84 6c 07 00 00 4c 89 e0 4d 01 e4 48 c1 e8 3b 83 e0 01 41 83 c7 01 89  ....A.....l...L..M..H..;...A....
0002d8e0  d9 bf 02 00 00 00 44 29 f9 d3 e0 09 c5 41 83 ed 01 0f 84 43 07 00 00 4c 89 e0 4d 01 e4 48 c1 e8  ......D).....A.....C...L..M..H..
0002d900  3b 83 e0 01 41 83 c7 01 89 d9 bf 02 00 00 00 44 29 f9 d3 e0 09 c5 41 83 ed 01 0f 84 1a 07 00 00  ;...A..........D).....A.........
0002d920  4c 89 e0 4d 01 e4 48 c1 e8 3b 83 e0 01 41 83 c7 01 89 d9 bf 02 00 00 00 44 29 f9 d3 e0 09 c5 41  L..M..H..;...A..........D).....A
0002d940  83 ed 01 0f 84 f1 06 00 00 4c 89 e0 4d 01 e4 48 c1 e8 3b 83 e0 01 45 8d 4f 01 89 d9 44 29 c9 45  .........L..M..H..;...E.O...D).E
0002d960  89 cf d3 e0 09 c5 41 39 d9 0f 84 5c 07 00 00 bf 02 00 00 00 41 83 fd 01 0f 84 bc 06 00 00 4c 89  ......A9...\........A.........L.
0002d980  e2 41 83 c7 01 4f 8d 14 24 89 d9 48 c1 ea 3b 44 29 f9 83 e2 01 d3 e2 09 d5 41 83 fd 02 0f 84 97  .A...O..$..H..;D)........A......
0002d9a0  06 00 00 49 c1 ea 3b 45 8d 79 02 89 d9 44 89 d6 44 29 f9 4e 8d 1c a5 00 00 00 00 83 e6 01 d3 e6  ...I..;E.y...D..D).N............
0002d9c0  09 f5 41 83 fd 03 0f 84 6e 06 00 00 49 c1 eb 3b 45 8d 79 03 89 d9 45 89 d8 44 29 f9 4a 8d 04 e5  ..A.....n...I..;E.y...E..D).J...
0002d9e0  00 00 00 00 41 83 e0 01 41 d3 e0 44 09 c5 41 83 fd 04 0f 84 42 06 00 00 48 c1 e8 3b 45 8d 79 04  ....A...A..D..A.....B...H..;E.y.
0002da00  89 d9 4d 89 e2 89 c2 44 29 f9 49 c1 e2 04 83 e2 01 d3 e2 09 d5 41 83 fd 05 0f 84 1b 06 00 00 49  ..M....D).I..........A.........I
0002da20  c1 ea 3b 45 8d 79 05 89 d9 4d 89 e3 44 89 d6 44 29 f9 49 c1 e3 05 83 e6 01 d3 e6 09 f5 41 83 fd  ..;E.y...M..D..D).I..........A..
0002da40  06 0f 84 f3 05 00 00 49 c1 eb 3b 45 8d 79 06 89 d9 4c 89 e0 45 89 d8 44 29 f9 48 c1 e0 06 41 83  .......I..;E.y...L..E..D).H...A.
0002da60  e0 01 41 d3 e0 44 09 c5 41 83 fd 07 0f 84 c8 05 00 00 48 c1 e8 3b 45 8d 79 07 89 d9 89 c2 44 29  ..A..D..A.........H..;E.y.....D)
0002da80  f9 4c 89 e0 83 e2 01 48 c1 e0 07 d3 e2 09 d5 41 83 ed 08 0f 84 a1 05 00 00 48 c1 e8 3b 49 c1 e4  .L.....H.......A.........H..;I..
0002daa0  08 83 e0 01 e9 ad fe ff ff 0f 1f 80 00 00 00 00 41 89 c7 44 39 e5 0f 8e 7d 01 00 00 48 8b 7c 24  ................A..D9...}...H.|$
0002dac0  28 44 29 e5 48 8b 44 24 08 48 be ab aa aa aa aa aa aa 0a 48 01 fd 4c 8d 4c 6d 00 48 8b 6c 24 20  (D).H.D$.H.........H..L.Lm.H.l$ 
0002dae0  4e 8d 74 cd 00 4d 89 f2 49 29 c2 49 83 ea 18 49 c1 ea 03 4c 0f af d6 49 83 c2 01 41 83 e2 07 0f  N.t..M..I).I...I...L...I...A....
0002db00  84 d8 00 00 00 49 83 fa 01 0f 84 b0 00 00 00 49 83 fa 02 0f 84 8d 00 00 00 49 83 fa 03 74 71 49  .....I.........I.........I...tqI
0002db20  83 fa 04 74 52 49 83 fa 05 74 33 49 83 fa 06 74 14 48 89 c3 48 89 c7 e8 e4 8b ff ff 48 83 c3 18  ...tRI...t3I...t.H..H.......H...
0002db40  48 89 5c 24 08 4c 8b 64 24 08 4c 89 e7 e8 ce 8b ff ff 4d 89 e3 49 83 c3 18 4c 89 5c 24 08 4c 8b  H.\$.L.d$.L.......M..I...L.\$.L.
0002db60  6c 24 08 4c 89 ef e8 b5 8b ff ff 4d 89 e8 49 83 c0 18 4c 89 44 24 08 48 8b 6c 24 08 48 89 ef e8  l$.L.......M..I...L.D$.H.l$.H...
0002db80  9c 8b ff ff 48 89 ea 48 83 c2 18 48 89 54 24 08 48 8b 5c 24 08 48 89 df 48 83 c3 18 e8 7f 8b ff  ....H..H...H.T$.H.\$.H..H.......
0002dba0  ff 48 89 5c 24 08 4c 8b 64 24 08 4c 89 e7 e8 6d 8b ff ff 4c 89 e1 48 83 c1 18 48 89 4c 24 08 4c  .H.\$.L.d$.L...m...L..H...H.L$.L
0002dbc0  8b 6c 24 08 4c 89 ef e8 54 8b ff ff 4c 89 e8 48 83 c0 18 48 89 44 24 08 49 39 c6 74 5c 48 89 c5  .l$.L...T...L..H...H.D$.I9.t\H..
0002dbe0  48 89 ef e8 38 8b ff ff 48 8d 7d 18 e8 2f 8b ff ff 48 8d 7d 30 e8 26 8b ff ff 48 8d 7d 48 e8 1d  H...8...H.}../...H.}0.&...H.}H..
0002dc00  8b ff ff 48 8d 7d 60 e8 14 8b ff ff 48 8d 7d 78 e8 0b 8b ff ff 48 8d bd 90 00 00 00 e8 ff 8a ff  ...H.}`.....H.}x.....H..........
0002dc20  ff 48 8d bd a8 00 00 00 48 81 c5 c0 00 00 00 e8 ec 8a ff ff 49 39 ee 75 a7 48 8b 7c 24 10 e8 dd  .H......H...........I9.u.H.|$...
0002dc40  8a ff ff 48 8b 94 24 b8 18 00 00 64 48 2b 14 25 28 00 00 00 0f 85 17 05 00 00 48 81 c4 c8 18 00  ...H..$....dH+.%(.........H.....
0002dc60  00 44 89 f8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 96 8a fd ff 0f 1f 44 00 00 83 f8 24 0f 8e ef 01 00  .D..[]A\A]A^A_.......D....$.....
0002dc80  00 3d 8c 00 00 00 0f 8f 2c 02 00 00 48 8d bc 24 c8 00 00 00 48 89 7c 24 10 e8 d2 a8 ff ff 41 89  .=......,...H..$....H.|$......A.
0002dca0  c7 85 c0 75 9e 48 c7 44 24 50 c0 00 00 00 41 be 10 00 00 00 bb 03 00 00 00 41 bc 08 00 00 00 c7  ...u.H.D$P....A..........A......
0002dcc0  44 24 5c 04 00 00 00 e9 cf f4 ff ff 44 8b 64 24 38 44 8b 74 24 50 41 89 c7 0f 1f 80 00 00 00 00  D$\.........D.d$8D.t$PA.........
0002dce0  4c 89 ef e8 38 8a ff ff 48 8b 7c 24 10 e8 2e 8a ff ff 45 39 f4 0f 8d 48 ff ff ff 45 29 e6 4c 8b  L...8...H.|$......E9...H...E).L.
0002dd00  64 24 28 4c 8b 6c 24 20 48 be ab aa aa aa aa aa aa 0a 48 8b 44 24 08 4d 01 e6 4f 8d 0c 76 4b 8d  d$(L.l$ H.........H.D$.M..O..vK.
0002dd20  6c cd 00 49 89 ea 49 29 c2 49 83 ea 18 49 c1 ea 03 4c 0f af d6 49 83 c2 01 41 83 e2 07 0f 84 c8  l..I..I).I...I...L...I...A......
0002dd40  00 00 00 49 83 fa 01 0f 84 9c 00 00 00 49 83 fa 02 74 7d 49 83 fa 03 74 61 49 83 fa 04 74 42 49  ...I.........I...t}I...taI...tBI
0002dd60  83 fa 05 74 23 49 83 fa 06 0f 85 25 02 00 00 4c 8b 74 24 08 4c 89 f7 e8 a4 89 ff ff 4d 89 f3 49  ...t#I.....%...L.t$.L.......M..I
0002dd80  83 c3 18 4c 89 5c 24 08 4c 8b 64 24 08 4c 89 e7 e8 8b 89 ff ff 4d 89 e0 49 83 c0 18 4c 89 44 24  ...L.\$.L.d$.L.......M..I...L.D$
0002dda0  08 4c 8b 6c 24 08 4c 89 ef e8 72 89 ff ff 4c 89 ea 48 83 c2 18 48 89 54 24 08 48 8b 5c 24 08 48  .L.l$.L...r...L..H...H.T$.H.\$.H
0002ddc0  89 df 48 83 c3 18 e8 55 89 ff ff 48 89 5c 24 08 4c 8b 74 24 08 4c 89 f7 e8 43 89 ff ff 4c 89 f1  ..H....U...H.\$.L.t$.L...C...L..
0002dde0  48 83 c1 18 48 89 4c 24 08 4c 8b 64 24 08 4c 89 e7 e8 2a 89 ff ff 4c 89 e0 48 83 c0 18 48 89 44  H...H.L$.L.d$.L...*...L..H...H.D
0002de00  24 08 48 39 e8 0f 84 38 fe ff ff 49 89 c5 4c 89 ef e8 0a 89 ff ff 49 8d 7d 18 e8 01 89 ff ff 49  $.H9...8...I..L.......I.}......I
0002de20  8d 7d 30 e8 f8 88 ff ff 49 8d 7d 48 e8 ef 88 ff ff 49 8d 7d 60 e8 e6 88 ff ff 49 8d 7d 78 e8 dd  .}0.....I.}H.....I.}`.....I.}x..
0002de40  88 ff ff 49 8d bd 90 00 00 00 e8 d1 88 ff ff 49 8d bd a8 00 00 00 49 81 c5 c0 00 00 00 e8 be 88  ...I...........I......I.........
0002de60  ff ff 49 39 ed 75 a7 e9 d7 fd ff ff 0f 1f 40 00 48 8d bc 24 c8 00 00 00 48 89 7c 24 10 e8 ee a6  ..I9.u........@.H..$....H.|$....
0002de80  ff ff 41 89 c7 85 c0 0f 85 b6 fd ff ff 48 c7 44 24 50 60 00 00 00 41 be 08 00 00 00 bb 02 00 00  ..A..........H.D$P`...A.........
0002dea0  00 41 bc 04 00 00 00 c7 44 24 5c 03 00 00 00 e9 e7 f2 ff ff 0f 1f 40 00 3d c2 01 00 00 0f 8e 8d  .A......D$\...........@.=.......
0002dec0  00 00 00 3d 17 05 00 00 0f 8e df 00 00 00 48 8d bc 24 c8 00 00 00 3d c9 0d 00 00 48 89 7c 24 10  ...=..........H..$....=....H.|$.
0002dee0  0f 8e 0b 01 00 00 e8 85 a6 ff ff 41 89 c7 85 c0 0f 85 4d fd ff ff 48 c7 44 24 50 00 0c 00 00 41  ...........A......M...H.D$P....A
0002df00  be 00 01 00 00 bb 07 00 00 00 41 bc 80 00 00 00 c7 44 24 5c 08 00 00 00 e9 7e f2 ff ff 0f 1f 00  ..........A......D$\.....~......
0002df20  48 8b 74 24 18 4c 89 ef e8 63 4d 00 00 41 89 c7 85 c0 0f 85 a8 fd ff ff 4c 8d 15 61 48 00 00 4c  H.t$.L...cM..A..........L..aH..L
0002df40  89 54 24 30 e9 7e f4 ff ff 0f 1f 80 00 00 00 00 48 8d bc 24 c8 00 00 00 48 89 7c 24 10 e8 0e a6  .T$0.~..........H..$....H.|$....
0002df60  ff ff 41 89 c7 85 c0 0f 85 d6 fc ff ff 48 c7 44 24 50 80 01 00 00 41 be 20 00 00 00 bb 04 00 00  ..A..........H.D$P....A. .......
0002df80  00 41 bc 10 00 00 00 c7 44 24 5c 05 00 00 00 e9 07 f2 ff ff 48 89 c3 48 89 c7 e8 81 87 ff ff 48  .A......D$\.........H..H.......H
0002dfa0  83 c3 18 48 89 5c 24 08 e9 c2 fd ff ff 48 8d bc 24 c8 00 00 00 48 89 7c 24 10 e8 b1 a5 ff ff 41  ...H.\$......H..$....H.|$......A
0002dfc0  89 c7 85 c0 0f 85 79 fc ff ff 48 c7 44 24 50 00 03 00 00 41 be 40 00 00 00 bb 05 00 00 00 41 bc  ......y...H.D$P....A.@........A.
0002dfe0  20 00 00 00 c7 44 24 5c 06 00 00 00 e9 aa f1 ff ff e8 7a a5 ff ff 41 89 c7 85 c0 0f 85 42 fc ff   ....D$\..........z...A......B..
0002e000  ff 48 c7 44 24 50 00 06 00 00 41 be 80 00 00 00 bb 06 00 00 00 41 bc 40 00 00 00 c7 44 24 5c 07  .H.D$P....A..........A.@....D$\.
0002e020  00 00 00 e9 73 f1 ff ff 44 8b 64 24 38 44 8b 74 24 50 41 89 c7 e9 a6 fc ff ff 8b 44 24 38 e9 06  ....s...D.d$8D.t$PA........D$8..
0002e040  f7 ff ff 48 89 d8 31 ff be 3b 00 00 00 48 c1 e8 3b 4a 8d 1c 8d 00 00 00 00 83 e0 01 74 3c 44 89  ...H..1..;...H..;J..........t<D.
0002e060  6c 24 38 49 89 dc 41 89 f5 8b 5c 24 5c e9 22 f7 ff ff 4c 89 f5 44 8b 64 24 60 44 8b 74 24 68 4c  l$8I..A...\$\."...L..D.d$`D.t$hL
0002e080  8b 6c 24 50 48 89 ef 89 44 24 18 e8 90 86 ff ff 44 8b 7c 24 18 e9 46 fc ff ff bf 3a 00 00 00 48  .l$PH...D$......D.|$..F....:...H
0002e0a0  89 d8 48 01 db 48 c1 e8 3b 83 e0 01 0f 84 07 03 00 00 41 89 fb 44 89 6c 24 38 49 89 dc 31 ff 8b  ..H..H..;.........A..D.l$8I..1..
0002e0c0  5c 24 5c 45 89 dd e9 c9 f6 ff ff 45 31 ff 4c 89 f6 4c 89 f7 e8 37 da ff ff 85 c0 75 95 48 8b 54  \$\E.......E1.L..L...7.....u.H.T
0002e0e0  24 50 48 8b 74 24 18 4c 89 f7 48 8b 44 24 30 e8 38 86 fd ff 85 c0 0f 85 76 ff ff ff 41 83 c7 01  $PH.t$.L..H.D$0.8.......v...A...
0002e100  41 39 df 7c c9 48 63 fd 4c 8b 4c 24 20 4c 89 f2 48 6b f7 18 4c 89 f7 4c 01 ce e8 f1 b4 ff ff 85  A9.|.Hc.L.L$ L..Hk..L..L........
0002e120  c0 0f 85 4b ff ff ff 48 8b 54 24 50 48 8b 74 24 18 4c 89 f7 48 8b 6c 24 30 e8 c4 1f fe ff 85 c0  ...K...H.T$PH.t$.L..H.l$0.......
0002e140  0f 85 2c ff ff ff 44 89 ed bf 01 00 00 00 83 ed 01 0f 84 6a 02 00 00 4c 89 e0 41 89 ed 4d 01 e4  ..,...D............j...L..A..M..
0002e160  45 31 ff 48 c1 e8 3b 31 ed 83 e0 01 e9 7a f6 ff ff e8 9a 70 fd ff 44 8b 64 24 60 4c 8b 6c 24 50  E1.H..;1.....z.....p..D.d$`L.l$P
0002e180  89 6c 24 38 4c 89 f5 44 8b 74 24 68 83 ff 02 0f 85 d6 01 00 00 45 85 ff 0f 8e cd 01 00 00 45 8d  .l$8L..D.t$h.........E........E.
0002e1a0  57 ff 48 89 ee 48 89 ef 41 83 e2 01 44 89 54 24 40 e8 5a d9 ff ff 8b 74 24 38 85 c0 0f 85 c2 fe  W.H..H..A...D.T$@.Z....t$8......
0002e1c0  ff ff 89 74 24 38 48 8b 44 24 30 4c 89 ea 48 89 ef 48 8b 74 24 18 e8 51 85 fd ff 85 c0 0f 85 a1  ...t$8H.D$0L..H..H.t$..Q........
0002e1e0  fe ff ff 44 8b 5c 24 38 43 8d 1c 1b 44 85 f3 0f 85 3c 01 00 00 41 b8 01 00 00 00 44 89 44 24 38  ...D.\$8C...D....<...A.....D.D$8
0002e200  45 39 f8 0f 8d 62 01 00 00 83 7c 24 40 00 0f 84 a8 00 00 00 48 89 ee 48 89 ef e8 f1 d8 ff ff 85  E9...b....|$@.......H..H........
0002e220  c0 0f 85 5d fe ff ff 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8 f0 84 fd ff 85 c0 0f 85  ...]...H.t$.H.D$0L..H...........
0002e240  40 fe ff ff 01 db 44 85 f3 0f 85 86 01 00 00 83 44 24 38 01 8b 54 24 38 44 39 fa 7c 5f e9 09 01  @.....D.........D$8..T$8D9.|_...
0002e260  00 00 8b 4c 24 38 48 89 ee 48 89 ef 83 c1 01 89 4c 24 38 e8 98 d8 ff ff 85 c0 0f 85 04 fe ff ff  ...L$8H..H......L$8.............
0002e280  48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8 97 84 fd ff 85 c0 0f 85 e7 fd ff ff 01 db 44  H.t$.H.D$0L..H.................D
0002e2a0  85 f3 0f 85 d7 00 00 00 8b 7c 24 38 83 c7 01 89 7c 24 38 44 39 ff 0f 8d af 00 00 00 48 89 ee 48  .........|$8....|$8D9.......H..H
0002e2c0  89 ef e8 49 d8 ff ff 85 c0 0f 85 b5 fd ff ff 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8  ...I...........H.t$.H.D$0L..H...
0002e2e0  48 84 fd ff 85 c0 0f 85 98 fd ff ff 01 db 44 85 f3 0f 84 6b ff ff ff 48 8b 74 24 10 48 89 ea 48  H.............D....k...H.t$.H..H
0002e300  89 ef e8 09 b3 ff ff 85 c0 0f 85 75 fd ff ff 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8  ...........u...H.t$.H.D$0L..H...
0002e320  08 84 fd ff 85 c0 0f 84 36 ff ff ff e9 53 fd ff ff 48 8b 74 24 10 48 89 ea 48 89 ef e8 cf b2 ff  ........6....S...H.t$.H..H......
0002e340  ff 85 c0 0f 85 3b fd ff ff 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8 ce 83 fd ff 85 c0  .....;...H.t$.H.D$0L..H.........
0002e360  0f 84 8f fe ff ff e9 19 fd ff ff 48 8b 74 24 48 48 89 ef e8 08 9b ff ff 31 c0 e9 05 fd ff ff 48  ...........H.t$HH.......1......H
0002e380  8b 74 24 10 48 89 ea 48 89 ef e8 81 b2 ff ff 85 c0 0f 85 ed fc ff ff 48 8b 74 24 18 48 8b 44 24  .t$.H..H...............H.t$.H.D$
0002e3a0  30 4c 89 ea 48 89 ef e8 80 83 fd ff 85 c0 0f 84 f4 fe ff ff e9 cb fc ff ff 44 89 e8 e9 7f f3 ff  0L..H....................D......
0002e3c0  ff 8b 44 24 38 45 31 ff e9 7c f3 ff ff 41 89 c5 e9 ca fc ff ff 48 8b 74 24 10 48 89 ea 48 89 ef  ..D$8E1..|...A.......H.t$.H..H..
0002e3e0  e8 2b b2 ff ff 85 c0 0f 85 97 fc ff ff 48 8b 74 24 18 48 8b 44 24 30 4c 89 ea 48 89 ef e8 2a 83  .+...........H.t$.H.D$0L..H...*.
0002e400  fd ff 85 c0 0f 84 45 fe ff ff e9 75 fc ff ff                                                     ......E....u...

0002e40f    void __x86_indirect_thunk_rbx() __noreturn

0002e40f  e807000000         call    sub_2e41b

0002e414  f390               pause   
0002e416  0faee8             lfence  
0002e419  ebf9               jmp     0x2e414


0002e41b    int64_t sub_2e41b() __pure

0002e41b  48891c24           mov     qword [rsp {__return_addr}], rbx
0002e41f  c3                 retn     {__return_addr}


0002e420    void s_mp_exptmod_fast(int64_t arg1, int32_t* arg2) __noreturn

0002e420  4157               push    r15 {var_8}
0002e422  4156               push    r14 {var_10}
0002e424  4155               push    r13 {var_18}
0002e426  4154               push    r12 {var_20}
0002e428  4989d4             mov     r12, rdx
0002e42b  55                 push    rbp {var_28}
0002e42c  53                 push    rbx {var_30}
0002e42d  4889fb             mov     rbx, rdi
0002e430  4881eca8180000     sub     rsp, 0x18a8
0002e437  4889742430         mov     qword [rsp+0x30 {var_18a8}], rsi
0002e43c  48894c2438         mov     qword [rsp+0x38 {var_18a0}], rcx
0002e441  448944241c         mov     dword [rsp+0x1c {var_18bc}], r8d
0002e446  64488b3c25280000…  mov     rdi, qword [fs:0x28]
0002e44f  4889bc2498180000   mov     qword [rsp+0x1898 {var_40}], rdi
0002e457  4889f7             mov     rdi, rsi
0002e45a  e8818bffff         call    mp_count_bits
{ Does not return }

0002e45f                                                                                               41                                 A
0002e460  8b 74 24 04 83 f8 07 0f 8f 13 0b 00 00 48 8d bc 24 a8 00 00 00 48 89 7c 24 10 e8 d1 a4 ff ff 41  .t$..........H..$....H.|$......A
0002e480  89 c5 85 c0 0f 85 c6 0a 00 00 c7 44 24 0c 04 00 00 00 41 be 01 00 00 00 c7 44 24 18 02 00 00 00  ...........D$.....A......D$.....
0002e4a0  48 c7 44 24 40 30 00 00 00 c7 44 24 48 02 00 00 00 48 63 44 24 18 44 8b 44 24 0c 48 8d 94 24 90  H.D$@0....D$H....HcD$.D.D$.H..$.
0002e4c0  00 00 00 48 89 54 24 20 48 8d 34 40 41 29 c0 48 89 44 24 28 89 c5 4c 8d 3c f2 4c 89 3c 24 41 83  ...H.T$ H.4@A).H.D$(..L.<.L.<$A.
0002e4e0  e0 07 0f 84 1f 01 00 00 41 83 f8 01 0f 84 e8 00 00 00 41 83 f8 02 0f 84 bf 00 00 00 41 83 f8 03  ........A.........A.........A...
0002e500  0f 84 96 00 00 00 41 83 f8 04 74 71 41 83 f8 05 74 4c 41 83 f8 06 74 27 4c 8b 3c 24 41 8b 74 24  ......A...tqA...tLA...t'L.<$A.t$
0002e520  04 4c 89 ff e8 27 a4 ff ff 41 89 c5 85 c0 0f 85 8f 08 00 00 8b 6c 24 18 49 83 c7 18 8d 6d 01 41  .L...'...A...........l$.I....m.A
0002e540  8b 74 24 04 4c 89 ff e8 04 a4 ff ff 41 89 c5 85 c0 0f 85 6c 08 00 00 83 c5 01 49 83 c7 18 41 8b  .t$.L.......A......l......I...A.
0002e560  74 24 04 4c 89 ff e8 e5 a3 ff ff 41 89 c5 85 c0 0f 85 4d 08 00 00 83 c5 01 49 83 c7 18 41 8b 74  t$.L.......A......M......I...A.t
0002e580  24 04 4c 89 ff e8 c6 a3 ff ff 41 89 c5 85 c0 0f 85 2e 08 00 00 83 c5 01 49 83 c7 18 41 8b 74 24  $.L.......A.............I...A.t$
0002e5a0  04 4c 89 ff e8 a7 a3 ff ff 41 89 c5 85 c0 0f 85 0f 08 00 00 83 c5 01 49 83 c7 18 41 8b 74 24 04  .L.......A.............I...A.t$.
0002e5c0  4c 89 ff e8 88 a3 ff ff 41 89 c5 85 c0 0f 85 f0 07 00 00 83 c5 01 49 83 c7 18 41 8b 74 24 04 4c  L.......A.............I...A.t$.L
0002e5e0  89 ff e8 69 a3 ff ff 41 89 c5 85 c0 0f 85 d1 07 00 00 44 8b 4c 24 0c 83 c5 01 49 83 c7 18 44 39  ...i...A..........D.L$....I...D9
0002e600  cd 0f 84 ec 00 00 00 41 8b 74 24 04 4c 89 ff e8 3c a3 ff ff 85 c0 0f 85 a4 07 00 00 41 8b 74 24  .......A.t$.L...<...........A.t$
0002e620  04 44 8d 6d 01 49 8d 7f 18 44 89 ed e8 1f a3 ff ff 85 c0 0f 85 87 07 00 00 41 8b 74 24 04 49 8d  .D.m.I...D...............A.t$.I.
0002e640  7f 30 83 c5 01 e8 06 a3 ff ff 85 c0 0f 85 6e 07 00 00 41 8b 74 24 04 49 8d 7f 48 41 8d 6d 02 e8  .0............n...A.t$.I..HA.m..
0002e660  ec a2 ff ff 85 c0 0f 85 54 07 00 00 41 8b 74 24 04 49 8d 7f 60 41 8d 6d 03 e8 d2 a2 ff ff 85 c0  ........T...A.t$.I..`A.m........
0002e680  0f 85 3a 07 00 00 41 8b 74 24 04 49 8d 7f 78 41 8d 6d 04 e8 b8 a2 ff ff 85 c0 0f 85 20 07 00 00  ..:...A.t$.I..xA.m.......... ...
0002e6a0  41 8b 74 24 04 49 8d bf 90 00 00 00 41 8d 6d 05 e8 9b a2 ff ff 85 c0 0f 85 03 07 00 00 41 8b 74  A.t$.I......A.m..............A.t
0002e6c0  24 04 49 8d bf a8 00 00 00 41 8d 6d 06 e8 7e a2 ff ff 85 c0 0f 85 e6 06 00 00 44 8b 54 24 0c 41  $.I......A.m..~...........D.T$.A
0002e6e0  8d 6d 07 49 81 c7 c0 00 00 00 44 39 d5 0f 85 14 ff ff ff 44 8b 5c 24 1c 45 85 db 0f 84 4f 0b 00  .m.I......D9.......D.\$.E....O..
0002e700  00 83 7c 24 1c 01 48 8d 74 24 68 4c 89 e7 0f 84 84 09 00 00 e8 47 44 00 00 41 89 c5 85 c0 0f 85  ..|$..H.t$hL.........GD..A......
0002e720  ae 09 00 00 41 8b 74 24 04 4c 8d 7c 24 70 4c 89 ff e8 1a a2 ff ff 41 89 c5 85 c0 0f 85 91 09 00  ....A.t$.L.|$pL.......A.........
0002e740  00 48 8d 3d e8 41 00 00 48 89 7c 24 50 be 01 00 00 00 4c 89 ff e8 96 d2 ff ff 48 8b 54 24 10 4c  .H.=.A..H.|$P.....L.......H.T$.L
0002e760  89 e6 48 89 df e8 f6 a6 ff ff 41 89 c5 85 c0 0f 85 55 09 00 00 48 8b 6c 24 40 48 8b 5c 24 20 48  ..H.......A......U...H.l$@H.\$ H
0002e780  8b 7c 24 10 48 01 dd 48 89 ee e8 61 85 ff ff 41 89 c5 85 c0 0f 85 30 09 00 00 48 8b 5c 24 50 90  .|$.H..H...a...A......0...H.\$P.
0002e7a0  48 89 ee 48 89 ef e8 65 d3 ff ff 85 c0 0f 85 14 09 00 00 48 8b 54 24 68 4c 89 e6 48 89 ef e8 4c  H..H...e...........H.T$hL..H...L
0002e7c0  fc ff ff 85 c0 0f 85 fc 08 00 00 41 83 c5 01 45 39 f5 7c cc 8b 44 24 18 44 8b 74 24 0c 83 c0 01  ...........A...E9.|..D$.D.t$....
0002e7e0  44 39 f0 0f 8d 44 02 00 00 44 8b 6c 24 18 4c 8b 54 24 28 45 8d 4e fe 48 98 48 8b 7c 24 10 48 8b  D9...D...D.l$.L.T$(E.N.H.H.|$.H.
0002e800  1c 24 48 be ab aa aa aa aa aa aa 0a 45 29 e9 4c 29 d0 4d 01 d1 48 8d 14 40 48 89 dd 4f 8d 1c 49  .$H.........E).L).M..H..@H..O..I
0002e820  4c 8d 34 d5 00 00 00 00 4a 8d 0c df 48 89 4c 24 58 48 29 d9 48 83 e9 18 48 c1 e9 03 48 0f af ce  L.4.....J...H.L$XH).H...H...H...
0002e840  48 83 c1 01 83 e1 03 0f 84 f2 00 00 00 48 83 f9 01 0f 84 93 00 00 00 48 83 f9 02 74 43 48 8b 74  H............H.........H...tCH.t
0002e860  24 10 49 8d 2c 1e 48 89 df 48 89 ea e8 9f ad ff ff 41 89 c5 85 c0 0f 85 4e 08 00 00 48 8b 54 24  $.I.,.H..H.......A......N...H.T$
0002e880  68 48 8b 44 24 50 4c 89 e6 48 89 ef e8 9b 7e fd ff 41 89 c5 85 c0 0f 85 2e 08 00 00 48 8d 6b 18  hH.D$PL..H....~..A..........H.k.
0002e8a0  4d 8d 04 2e 48 8b 74 24 10 48 89 ef 4c 89 c2 4c 89 44 24 40 e8 57 ad ff ff 41 89 c5 85 c0 0f 85  M...H.t$.H..L..L.D$@.W...A......
0002e8c0  06 08 00 00 4c 8b 6c 24 50 48 8b 54 24 68 4c 89 e6 48 8b 7c 24 40 e8 e4 ed fd ff 41 89 c5 85 c0  ....L.l$PH.T$hL..H.|$@.....A....
0002e8e0  0f 85 e4 07 00 00 48 83 c5 18 4d 8d 0c 2e 48 8b 74 24 10 48 89 ef 4c 89 ca 4c 89 4c 24 40 e8 0d  ......H...M...H.t$.H..L..L.L$@..
0002e900  ad ff ff 41 89 c5 85 c0 0f 85 bc 07 00 00 48 8b 54 24 68 48 8b 7c 24 40 4c 89 e6 48 8b 5c 24 50  ...A..........H.T$hH.|$@L..H.\$P
0002e920  e8 ea fa ff ff 41 89 c5 85 c0 0f 85 9a 07 00 00 48 83 c5 18 48 39 6c 24 58 0f 84 ee 00 00 00 4c  .....A..........H...H9l$X......L
0002e940  8b 6c 24 50 48 8b 5c 24 10 4c 89 7c 24 40 4d 8d 3c 2e 48 89 de 48 89 ef 4c 89 fa e8 b0 ac ff ff  .l$PH.\$.L.|$@M.<.H..H..L.......
0002e960  85 c0 0f 85 8f 0a 00 00 48 8b 54 24 68 4c 89 e6 4c 89 ff e8 47 ed fd ff 85 c0 0f 85 77 0a 00 00  ........H.T$hL..L...G.......w...
0002e980  48 8d 7d 18 48 89 de 4d 8d 3c 3e 4c 89 fa e8 7d ac ff ff 85 c0 0f 85 5c 0a 00 00 48 8b 54 24 68  H.}.H..M.<>L...}.......\...H.T$h
0002e9a0  4c 89 e6 4c 89 ff e8 14 ed fd ff 85 c0 0f 85 44 0a 00 00 48 8d 7d 30 48 89 de 4d 8d 3c 3e 4c 89  L..L...........D...H.}0H..M.<>L.
0002e9c0  fa e8 4a ac ff ff 85 c0 0f 85 29 0a 00 00 48 8b 54 24 68 4c 89 e6 4c 89 ff e8 e1 ec fd ff 85 c0  ..J.......)...H.T$hL..L.........
0002e9e0  0f 85 11 0a 00 00 48 8d 7d 48 48 89 de 4d 8d 3c 3e 4c 89 fa e8 17 ac ff ff 85 c0 0f 85 f6 09 00  ......H.}HH..M.<>L..............
0002ea00  00 48 8b 54 24 68 4c 89 e6 4c 89 ff e8 ae ec fd ff 85 c0 0f 85 de 09 00 00 48 83 c5 60 48 39 6c  .H.T$hL..L...............H..`H9l
0002ea20  24 58 0f 85 26 ff ff ff 4c 8b 7c 24 40 48 8b 74 24 30 44 8b 74 24 48 45 31 ed 31 ed 4c 89 64 24  $X..&...L.|$@H.t$0D.t$HE1.1.L.d$
0002ea40  48 bf 01 00 00 00 31 db 45 89 e8 8b 06 89 44 24 30 83 e8 01 83 ef 01 0f 85 1d 0c 00 00 83 f8 ff  H.....1.E.....D$0...............
0002ea60  0f 84 de 09 00 00 4c 8b 66 10 44 8d 58 ff 48 98 b9 3c 00 00 00 49 8b 14 c4 48 89 d0 48 8d 1c 12  ......L.f.D.X.H..<...I...H..H...
0002ea80  48 c1 e8 3b 83 e0 01 41 89 c2 41 09 fa 0f 84 71 09 00 00 44 89 5c 24 30 45 89 c4 41 89 cd 48 89  H..;...A..A....q...D.\$0E..A..H.
0002eaa0  74 24 40 83 ff 01 75 5c 85 c0 75 58 4c 89 fe 4c 89 ff e8 59 d0 ff ff 85 c0 0f 85 04 0b 00 00 48  t$@...u\..uXL..L...Y...........H
0002eac0  8b 54 24 68 48 8b 74 24 48 4c 89 ff 48 8b 44 24 50 e8 56 7c fd ff 85 c0 0f 85 e5 0a 00 00 bf 01  .T$hH.t$HL..H.D$P.V|............
0002eae0  00 00 00 41 83 ed 01 0f 84 f9 08 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 bf 01 00 00 00 83  ...A.........H..H..H..;.........
0002eb00  ff 01 74 a4 89 ee f7 d6 44 01 f6 83 e6 07 0f 84 48 01 00 00 83 c5 01 44 89 f1 bf 02 00 00 00 29  ..t.....D.......H......D.......)
0002eb20  e9 d3 e0 41 09 c4 41 83 ed 01 0f 84 b6 08 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 83 fe 01  ...A..A.........H..H..H..;......
0002eb40  0f 84 16 01 00 00 83 fe 02 0f 84 e4 00 00 00 83 fe 03 0f 84 b2 00 00 00 83 fe 04 0f 84 80 00 00  ................................
0002eb60  00 83 fe 05 74 52 83 fe 06 74 24 83 c5 01 44 89 f1 29 e9 d3 e0 41 09 c4 41 83 ed 01 0f 84 64 08  ....tR...t$...D..)...A..A.....d.
0002eb80  00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 83 c5 01 44 89 f1 bf 02 00 00 00 29 e9 d3 e0 41 09  ..H..H..H..;......D.......)...A.
0002eba0  c4 41 83 ed 01 0f 84 3b 08 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 83 c5 01 44 89 f1 bf 02  .A.....;...H..H..H..;......D....
0002ebc0  00 00 00 29 e9 d3 e0 41 09 c4 41 83 ed 01 0f 84 12 08 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0  ...)...A..A.........H..H..H..;..
0002ebe0  01 83 c5 01 44 89 f1 bf 02 00 00 00 29 e9 d3 e0 41 09 c4 41 83 ed 01 0f 84 e9 07 00 00 48 89 d8  ....D.......)...A..A.........H..
0002ec00  48 01 db 48 c1 e8 3b 83 e0 01 83 c5 01 44 89 f1 bf 02 00 00 00 29 e9 d3 e0 41 09 c4 41 83 ed 01  H..H..;......D.......)...A..A...
0002ec20  0f 84 c0 07 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 83 c5 01 44 89 f1 bf 02 00 00 00 29 e9  ......H..H..H..;......D.......).
0002ec40  d3 e0 41 09 c4 41 83 ed 01 0f 84 97 07 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 44 8d 45 01  ..A..A.........H..H..H..;...D.E.
0002ec60  44 89 f1 44 29 c1 44 89 c5 d3 e0 41 09 c4 45 39 f0 0f 84 54 09 00 00 bf 02 00 00 00 41 83 fd 01  D..D).D....A..E9...T........A...
0002ec80  0f 84 60 07 00 00 49 89 d9 83 c5 01 4c 8d 1c 1b 44 89 f1 49 c1 e9 3b 29 e9 41 83 e1 01 41 d3 e1  ..`...I.....L...D..I..;).A...A..
0002eca0  45 09 cc 41 83 fd 02 0f 84 39 07 00 00 49 c1 eb 3b 41 8d 68 02 44 89 f1 44 89 da 29 e9 4c 8d 14  E..A.....9...I..;A.h.D..D..).L..
0002ecc0  9d 00 00 00 00 83 e2 01 d3 e2 41 09 d4 41 83 fd 03 0f 84 0f 07 00 00 49 c1 ea 3b 41 8d 68 03 44  ..........A..A.........I..;A.h.D
0002ece0  89 f1 44 89 d6 29 e9 48 8d 04 dd 00 00 00 00 83 e6 01 d3 e6 41 09 f4 41 83 fd 04 0f 84 e5 06 00  ..D..).H............A..A........
0002ed00  00 48 c1 e8 3b 41 8d 68 04 44 89 f1 49 89 db 41 89 c1 29 e9 49 c1 e3 04 41 83 e1 01 41 d3 e1 45  .H..;A.h.D..I..A..).I...A...A..E
0002ed20  09 cc 41 83 fd 05 0f 84 ba 06 00 00 49 c1 eb 3b 41 8d 68 05 44 89 f1 49 89 da 44 89 da 29 e9 49  ..A.........I..;A.h.D..I..D..).I
0002ed40  c1 e2 05 83 e2 01 d3 e2 41 09 d4 41 83 fd 06 0f 84 91 06 00 00 49 c1 ea 3b 41 8d 68 06 44 89 f1  ........A..A.........I..;A.h.D..
0002ed60  48 89 d8 44 89 d6 29 e9 48 c1 e0 06 83 e6 01 d3 e6 41 09 f4 41 83 fd 07 0f 84 68 06 00 00 48 c1  H..D..).H........A..A.....h...H.
0002ed80  e8 3b 41 8d 68 07 44 89 f1 41 89 c1 29 e9 48 89 d8 41 83 e1 01 48 c1 e0 07 41 d3 e1 45 09 cc 41  .;A.h.D..A..).H..A...H...A..E..A
0002eda0  83 ed 08 0f 84 3d 06 00 00 48 c1 e8 3b 48 c1 e3 08 83 e0 01 e9 a3 fe ff ff 0f 1f 80 00 00 00 00  .....=...H..;H..................
0002edc0  41 89 c5 44 8b 4c 24 18 44 39 cd 0f 8e 75 01 00 00 48 8b 4c 24 28 44 29 cd 48 8b 7c 24 20 48 be  A..D.L$.D9...u...H.L$(D).H.|$ H.
0002ede0  ab aa aa aa aa aa aa 0a 4c 8b 0c 24 48 01 cd 4c 8d 64 6d 00 4e 8d 34 e7 4d 89 f0 4d 29 c8 49 83  ........L..$H..L.dm.N.4.M..M).I.
0002ee00  e8 18 49 c1 e8 03 4c 0f af c6 49 83 c0 01 41 83 e0 07 0f 84 cb 00 00 00 49 83 f8 01 0f 84 a5 00  ..I...L...I...A.........I.......
0002ee20  00 00 49 83 f8 02 0f 84 84 00 00 00 49 83 f8 03 74 6a 49 83 f8 04 74 4d 49 83 f8 05 74 30 49 83  ..I.........I...tjI...tMI...t0I.
0002ee40  f8 06 74 13 4c 89 cb 4c 89 cf e8 d1 78 ff ff 48 83 c3 18 48 89 1c 24 48 8b 2c 24 48 89 ef e8 bd  ..t.L..L....x..H...H..$H.,$H....
0002ee60  78 ff ff 49 89 eb 49 83 c3 18 4c 89 1c 24 4c 8b 3c 24 4c 89 ff e8 a6 78 ff ff 4c 89 f8 48 83 c0  x..I..I...L..$L.<$L....x..L..H..
0002ee80  18 48 89 04 24 4c 8b 24 24 4c 89 e7 e8 8f 78 ff ff 4c 89 e2 48 83 c2 18 48 89 14 24 48 8b 1c 24  .H..$L.$$L....x..L..H...H..$H..$
0002eea0  48 89 df 48 83 c3 18 e8 74 78 ff ff                                                              H..H....tx..

0002eeac    void sub_2eeac(void* arg1 @ rbx) __noreturn

0002eeac  48891c24           mov     qword [rsp {__return_addr}], rbx
0002eeb0  488b2c24           mov     rbp, qword [rsp {__return_addr}]
0002eeb4  4889ef             mov     rdi, rbp
0002eeb7  e86478ffff         call    mp_clear
{ Does not return }

0002eebc                                                                                      49 89 ea 49                              I..I
0002eec0  83 c2 18 4c 89 14 24 4c 8b 3c 24 4c 89 ff e8 4d 78 ff ff 4d 89 f9 49 83 c1 18 4c 89 0c 24 4d 39  ...L..$L.<$L...Mx..M..I...L..$M9
0002eee0  f1 74 63 4d 89 cc 4c 89 e7 e8 32 78 ff ff 49 8d 7c 24 18 e8 28 78 ff ff 49 8d 7c 24 30 e8 1e 78  .tcM..L...2x..I.|$..(x..I.|$0..x
0002ef00  ff ff 49 8d 7c 24 48 e8 14 78 ff ff 49 8d 7c 24 60 e8 0a 78 ff ff 49 8d 7c 24 78 e8 00 78 ff ff  ..I.|$H..x..I.|$`..x..I.|$x..x..
0002ef20  49 8d bc 24 90 00 00 00 e8 f3 77 ff ff 49 8d bc 24 a8 00 00 00 49 81 c4 c0 00 00 00 e8 df 77 ff  I..$......w..I..$....I........w.
0002ef40  ff 4d 39 f4 75 a0 48 8b 7c 24 10 e8 d0 77 ff ff 48 8b 94 24 98 18 00 00 64 48 2b 14 25 28 00 00  .M9.u.H.|$...w..H..$....dH+.%(..
0002ef60  00 0f 85 fb 06 00 00 48 81 c4 a8 18 00 00 44 89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 89 77 fd ff  .......H......D..[]A\A]A^A_..w..
0002ef80  83 f8 24 7e 53 3d 8c 00 00 00 0f 8f 98 00 00 00 48 8d bc 24 a8 00 00 00 48 89 7c 24 10 e8 ae 99  ..$~S=..........H..$....H.|$....
0002efa0  ff ff 41 89 c5 85 c0 75 a7 c7 44 24 0c 10 00 00 00 41 be 03 00 00 00 c7 44 24 18 08 00 00 00 48  ..A....u..D$.....A......D$.....H
0002efc0  c7 44 24 40 c0 00 00 00 c7 44 24 48 04 00 00 00 e9 dc f4 ff ff 0f 1f 00 48 8d bc 24 a8 00 00 00  .D$@.....D$H............H..$....
0002efe0  48 89 7c 24 10 e8 66 99 ff ff 41 89 c5 85 c0 0f 85 5b ff ff ff c7 44 24 0c 08 00 00 00 41 be 02  H.|$..f...A......[....D$.....A..
0002f000  00 00 00 c7 44 24 18 04 00 00 00 48 c7 44 24 40 60 00 00 00 c7 44 24 48 03 00 00 00 e9 90 f4 ff  ....D$.....H.D$@`....D$H........
0002f020  ff 0f 1f 80 00 00 00 00 3d c2 01 00 00 0f 8e cd 02 00 00 3d 17 05 00 00 0f 8e 23 03 00 00 48 8d  ........=..........=......#...H.
0002f040  bc 24 a8 00 00 00 3d c9 0d 00 00 48 89 7c 24 10 0f 8e 54 03 00 00 e8 f5 98 ff ff 41 89 c5 85 c0  .$....=....H.|$...T........A....
0002f060  0f 85 ea fe ff ff c7 44 24 0c 00 01 00 00 41 be 07 00 00 00 c7 44 24 18 80 00 00 00 48 c7 44 24  .......D$.....A......D$.....H.D$
0002f080  40 00 0c 00 00 c7 44 24 48 08 00 00 00 e9 1f f4 ff ff 66 0f 1f 44 00 00 e8 13 34 00 00 4c 8d 7c  @.....D$H.........f..D....4..L.|
0002f0a0  24 70 41 8b 74 24 04 4c 89 ff e8 a1 98 ff ff 41 89 c5 85 c0 75 1c 48 8d 05 83 31 00 00 48 89 44  $pA.t$.L.......A....u.H...1..H.D
0002f0c0  24 50 e9 86 f6 ff ff 41 89 c5 4c 89 ff e8 4e 76 ff ff 48 8b 7c 24 10 e8 44 76 ff ff 44 8b 7c 24  $P.....A..L...Nv..H.|$..Dv..D.|$
0002f0e0  18 8b 54 24 0c 41 39 d7 0f 8d 62 fe ff ff 4c 8b 54 24 28 44 29 fa 48 8b 4c 24 20 49 b8 ab aa aa  ..T$.A9...b...L.T$(D).H.L$ I....
0002f100  aa aa aa aa 0a 4c 01 d2 4c 8b 14 24 4c 8d 0c 52 4e 8d 24 c9 4c 89 e7 4c 29 d7 48 83 ef 18 48 c1  .....L..L..$L..RN.$.L..L).H...H.
0002f120  ef 03 49 0f af f8 48 83 c7 01 83 e7 07 0f 84 bc 00 00 00 48 83 ff 01 0f 84 92 00 00 00 48 83 ff  ..I...H............H.........H..
0002f140  02 74 75 48 83 ff 03 74 5b 48 83 ff 04 74 3e 48 83 ff 05 74 21 48 83 ff 06 0f 85 ea 01 00 00 4c  .tuH...t[H...t>H...t!H.........L
0002f160  8b 34 24 4c 89 f7 e8 b5 75 ff ff 4c 89 f6 48 83 c6 18 48 89 34 24 48 8b 2c 24 48 89 ef e8 9e 75  .4$L....u..L..H...H.4$H.,$H....u
0002f180  ff ff 49 89 eb 49 83 c3 18 4c 89 1c 24 4c 8b 3c 24 4c 89 ff e8 87 75 ff ff 4c 89 f8 48 83 c0 18  ..I..I...L..$L.<$L....u..L..H...
0002f1a0  48 89 04 24 48 8b 1c 24 48 89 df 48 83 c3 18 e8 6c 75 ff ff                                      H..$H..$H..H....lu..

0002f1b4    void sub_2f1b4(void* arg1 @ rbx) __noreturn

0002f1b4  48891c24           mov     qword [rsp {__return_addr}], rbx
0002f1b8  4c8b3424           mov     r14, qword [rsp {__return_addr}]
0002f1bc  4c89f7             mov     rdi, r14
0002f1bf  e85c75ffff         call    mp_clear
{ Does not return }

0002f1c4              4c 89 f2 48 83 c2 18 48 89 14 24 48 8b 2c 24 48 89 ef e8 45 75 ff ff 49 89 ea 49 83      L..H...H..$H.,$H...Eu..I..I.
0002f1e0  c2 18 4c 89 14 24 4d 39 d4 0f 84 61 fd ff ff 4d 89 d7 4c 89 ff e8 26 75 ff ff 49 8d 7f 18 e8 1d  ..L..$M9...a...M..L...&u..I.....
0002f200  75 ff ff 49 8d 7f 30 e8 14 75 ff ff 49 8d 7f 48 e8 0b 75 ff ff 49 8d 7f 60 e8 02 75 ff ff 49 8d  u..I..0..u..I..H..u..I..`..u..I.
0002f220  7f 78 e8 f9 74 ff ff 49 8d bf 90 00 00 00 e8 ed 74 ff ff 49 8d bf a8 00 00 00 49 81 c7 c0 00 00  .x..t..I........t..I......I.....
0002f240  00 e8 da 74 ff ff 4d 39 fc 75 a7 e9 00 fd ff ff 48 8d 74 24 68 4c 89 e7 e8 23 a3 ff ff 41 89 c5  ...t..M9.u......H.t$hL...#...A..
0002f260  85 c0 0f 85 6a fe ff ff 41 8b 0c 24 4c 8d 7c 24 70 41 8b 74 24 04 4c 89 ff 8d 54 09 01 81 fa ff  ....j...A..$L.|$pA.t$.L...T.....
0002f280  01 00 00 7f 5d 81 f9 ff 00 00 00 7f 55 e8 be 96 ff ff 41 89 c5 85 c0 0f 85 35 fe ff ff 48 8d 35  ....].......U.....A......5...H.5
0002f2a0  2c 0d 00 00 48 89 74 24 50 4c 89 e6 4c 89 ff e8 4c 9d ff ff 41 89 c5 85 c0 0f 85 0b fe ff ff 48  ,...H.t$PL..L...L...A..........H
0002f2c0  8b 4c 24 10 4c 89 e2 4c 89 fe 48 89 df e8 ee aa ff ff 41 89 c5 85 c0 0f 84 98 f4 ff ff e9 e8 fd  .L$.L..L..H.......A.............
0002f2e0  ff ff e8 69 96 ff ff 41 89 c5 85 c0 0f 85 e0 fd ff ff 4c 8d 05 a7 9f ff ff 4c 89 44 24 50 eb a9  ...i...A..........L......L.D$P..
0002f300  48 8d bc 24 a8 00 00 00 48 89 7c 24 10 e8 3e 96 ff ff 41 89 c5 85 c0 0f 85 33 fc ff ff c7 44 24  H..$....H.|$..>...A......3....D$
0002f320  0c 20 00 00 00 41 be 04 00 00 00 c7 44 24 18 10 00 00 00 48 c7 44 24 40 80 01 00 00 c7 44 24 48  . ...A......D$.....H.D$@.....D$H
0002f340  05 00 00 00 e9 68 f1 ff ff 4c 89 d3 4c 89 d7 e8 cc 73 ff ff 48 83 c3 18 48 89 1c 24 e9 fe fd ff  .....h...L..L....s..H...H..$....
0002f360  ff 48 8d bc 24 a8 00 00 00 48 89 7c 24 10 e8 dd 95 ff ff 41 89 c5 85 c0 0f 85 d2 fb ff ff c7 44  .H..$....H.|$......A...........D
0002f380  24 0c 40 00 00 00 41 be 05 00 00 00 c7 44 24 18 20 00 00 00 48 c7 44 24 40 00 03 00 00 c7 44 24  $.@...A......D$. ...H.D$@.....D$
0002f3a0  48 06 00 00 00 e9 07 f1 ff ff e8 a1 95 ff ff 41 89 c5 85 c0 0f 85 96 fb ff ff c7 44 24 0c 80 00  H..............A...........D$...
0002f3c0  00 00 41 be 06 00 00 00 c7 44 24 18 40 00 00 00 48 c7 44 24 40 00 06 00 00 c7 44 24 48 07 00 00  ..A......D$.@...H.D$@.....D$H...
0002f3e0  00 e9 cb f0 ff ff 8b 44 24 30 48 8b 74 24 40 45 89 e0 e9 66 f6 ff ff 4c 8b 7c 24 40 41 89 c5 e9  .......D$0H.t$@E...f...L.|$@A...
0002f400  c6 fc ff ff 48 89 d8 31 ff b9 3b 00 00 00 48 c1 e8 3b 48 8d 1c 95 00 00 00 00 83 e0 01 0f 85 70  ....H..1..;...H..;H............p
0002f420  f6 ff ff bf 3a 00 00 00 48 89 d8 48 01 db 48 c1 e8 3b 83 e0 01 0f 84 1f 02 00 00 89 f9 31 ff e9  ....:...H..H..H..;...........1..
0002f440  4f f6 ff ff 44 89 44 24 40 4c 8b 64 24 48 83 ff 02 0f 85 2b 02 00 00 85 ed 0f 8e 23 02 00 00 8d  O...D.D$@L.d$H.....+.......#....
0002f460  5d ff 4c 89 fe 4c 89 ff 83 e3 01 89 5c 24 30 e8 9c c6 ff ff 44 8b 74 24 40 85 c0 41 89 c5 0f 85  ].L..L......\$0.....D.t$@..A....
0002f480  46 fc ff ff 44 89 74 24 40 48 8b 54 24 68 4c 89 e6 4c 89 ff 48 8b 44 24 50 e8 8e 72 fd ff 41 89  F...D.t$@H.T$hL..L..H.D$P..r..A.
0002f4a0  c5 85 c0 0f 85 21 fc ff ff 44 8b 5c 24 40 43 8d 1c 1b 85 5c 24 0c 0f 85 42 02 00 00 41 be 01 00  .....!...D.\$@C....\$...B...A...
0002f4c0  00 00 41 39 ee 0f 8d b7 01 00 00 83 7c 24 30 00 74 4f 4c 89 fe 4c 89 ff e8 33 c6 ff ff 41 89 c5  ..A9........|$0.tOL..L...3...A..
0002f4e0  85 c0 0f 85 e2 fb ff ff 48 8b 54 24 68 48 8b 44 24 50 4c 89 e6 4c 89 ff e8 2f 72 fd ff 41 89 c5  ........H.T$hH.D$PL..L.../r..A..
0002f500  85 c0 0f 85 c2 fb ff ff 01 db 85 5c 24 0c 0f 85 aa 01 00 00 41 83 c6 01 41 39 ee 0f 8d 61 01 00  ...........\$.......A...A9...a..
0002f520  00 4c 8b 6c 24 50 eb 44 4c 89 fe 4c 89 ff 41 83 c6 01 e8 d9 c5 ff ff 85 c0 0f 85 84 00 00 00 48  .L.l$P.DL..L..A................H
0002f540  8b 54 24 68 4c 89 e6 4c 89 ff e8 70 e1 fd ff 85 c0 75 70 01 db 85 5c 24 0c 0f 85 df 01 00 00 41  .T$hL..L...p.....up...\$.......A
0002f560  83 c6 01 41 39 ee 0f 8d 16 01 00 00 4c 89 fe 4c 89 ff e8 99 c5 ff ff 85 c0 75 48 48 8b 54 24 68  ...A9.......L..L.........uHH.T$h
0002f580  4c 89 e6 4c 89 ff e8 34 e1 fd ff 85 c0 75 34 01 db 85 5c 24 0c 74 91 48 8b 74 24 10 4c 89 fa 4c  L..L...4.....u4...\$.t.H.t$.L..L
0002f5a0  89 ff e8 69 a0 ff ff 85 c0 75 18 48 8b 54 24 68 4c 89 e6 4c 89 ff e8 04 e1 fd ff 85 c0 0f 84 65  ...i.....u.H.T$hL..L...........e
0002f5c0  ff ff ff 41 89 c5 e9 ff fa ff ff 31 ed 4c 89 fe 4c 89 ff e8 38 c5 ff ff 85 c0 75 e7 48 8b 54 24  ...A.......1.L..L...8.....u.H.T$
0002f5e0  68 48 8b 74 24 48 4c 89 ff 48 8b 44 24 50 e8 39 71 fd ff 85 c0 75 cc 83 c5 01 44 39 f5 7c ce 4d  hH.t$HL..H.D$P.9q....u....D9.|.M
0002f600  63 e4 48 8b 7c 24 20 4c 89 fa 49 6b f4 18 48 01 fe 4c 89 ff e8 f7 9f ff ff 85 c0 75 a6 48 8b 54  c.H.|$ L..Ik..H..L.........u.H.T
0002f620  24 68 48 8b 74 24 48 4c 89 ff 48 8b 6c 24 50 e8 ce 0a fe ff 85 c0 75 8b bf 01 00 00 00 41 83 ed  $hH.t$HL..H.l$P.......u......A..
0002f640  01 74 24 48 89 d8 31 ed 48 01 db 45 31 e4 48 c1 e8 3b 83 e0 01 e9 a0 f4 ff ff 44 89 d8 e9 f2 f3  .t$H..1.H..E1.H..;........D.....
0002f660  ff ff e8 a9 5b fd ff 8b 44 24 30 48 8b 74 24 40 45 89 e8 31 ed e9 e3 f3 ff ff 41 89 c3 e9 a6 fd  ....[...D$0H.t$@E..1......A.....
0002f680  ff ff 83 7c 24 1c 00 75 20 48 8b 54 24 68 48 8b 6c 24 50 4c 89 e6 4c 89 ff e8 64 0a fe ff 41 89  ...|$..u H.T$hH.l$PL..L...d...A.
0002f6a0  c5 85 c0 0f 85 21 fa ff ff 48 8b 74 24 38 4c 89 ff 45 31 ed e8 c7 87 ff ff e9 0c fa ff ff 48 8b  .....!...H.t$8L..E1...........H.
0002f6c0  74 24 10 4c 89 fa 4c 89 ff e8 42 9f ff ff 41 89 c5 85 c0 0f 85 f1 f9 ff ff 4c 8b 6c 24 50 48 8b  t$.L..L...B...A..........L.l$PH.
0002f6e0  54 24 68 4c 89 e6 4c 89 ff e8 d1 df fd ff 41 89 c5 85 c0 0f 84 1b fe ff ff e9 cc f9 ff ff 48 8b  T$hL..L.......A...............H.
0002f700  74 24 10 4c 89 fa 4c 89 ff e8 02 9f ff ff 41 89 c5 85 c0 0f 85 b1 f9 ff ff 4c 8b 6c 24 50 48 8b  t$.L..L.......A..........L.l$PH.
0002f720  54 24 68 4c 89 e6 4c 89 ff e8 91 df fd ff 41 89 c5 85 c0 0f 84 83 fd ff ff e9 8c f9 ff ff 48 8b  T$hL..L.......A...............H.
0002f740  74 24 10 4c 89 fa 4c 89 ff e8 c2 9e ff ff 85 c0 0f 85 6d fe ff ff 48 8b 54 24 68 4c 89 e6 4c 89  t$.L..L...........m...H.T$hL..L.
0002f760  ff e8 59 df fd ff 85 c0 0f 84 f1 fd ff ff e9 50 fe ff ff 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00  ..Y............P...f............

0002f780    void s_mp_invmod_fast(int64_t arg1, int32_t* arg2) __noreturn

0002f780  4157               push    r15 {__saved_r15}
0002f782  4156               push    r14 {__saved_r14}
0002f784  4155               push    r13 {__saved_r13}
0002f786  4154               push    r12 {__saved_r12}
0002f788  55                 push    rbp {__saved_rbp}
0002f789  53                 push    rbx {__saved_rbx}
0002f78a  4881ece8000000     sub     rsp, 0xe8
0002f791  8b0e               mov     ecx, dword [rsi]
0002f793  48897c2410         mov     qword [rsp+0x10 {var_108}], rdi
0002f798  4889542418         mov     qword [rsp+0x18 {var_100}], rdx
0002f79d  64488b0425280000…  mov     rax, qword [fs:0x28]
0002f7a6  48898424d8000000   mov     qword [rsp+0xd8 {var_40}], rax
0002f7ae  31c0               xor     eax, eax  {0x0}
0002f7b0  85c9               test    ecx, ecx
0002f7b2  0f8428020000       je      0x2f9e0

0002f7b8  488b4610           mov     rax, qword [rsi+0x10]
0002f7bc  4989f7             mov     r15, rsi
0002f7bf  f60001             test    byte [rax], 0x1
0002f7c2  0f8418020000       je      0x2f9e0

0002f7c8  4c8d8424a0000000   lea     r8, [rsp+0xa0 {var_78}]
0002f7d0  488dac24c0000000   lea     rbp, [rsp+0xc0 {var_58}]
0002f7d8  31c0               xor     eax, eax  {0x0}
0002f7da  4c89442408         mov     qword [rsp+0x8 {var_110}], r8 {var_78}
0002f7df  4c8da42480000000   lea     r12, [rsp+0x80 {var_98}]
0002f7e7  4c8d742460         lea     r14, [rsp+0x60 {var_b8}]
0002f7ec  4989e9             mov     r9, rbp {var_58}
0002f7ef  4c8d6c2440         lea     r13, [rsp+0x40 {var_d8}]
0002f7f4  488d5c2420         lea     rbx, [rsp+0x20 {var_f8}]
0002f7f9  4c89e1             mov     rcx, r12 {var_98}
0002f7fc  4c89f2             mov     rdx, r14 {var_b8}
0002f7ff  4883ec08           sub     rsp, 0x8
0002f803  4c89ee             mov     rsi, r13 {var_d8}
0002f806  4889df             mov     rdi, rbx {var_f8}
0002f809  6a00               push    0x0 {var_128}
0002f80b  e8008effff         call    mp_init_multi
{ Does not return }

0002f810                                                  89 c1 58 5a 85 c9 74 38                                          ..XZ..t8

0002f818  488b8424d8000000   mov     rax, qword [rsp+0xd8 {var_40}]
0002f820  64482b0425280000…  sub     rax, qword [fs:0x28]
0002f829  0f85ea020000       jne     0x2fb19

0002f82f  4881c4e8000000     add     rsp, 0xe8
0002f836  89c8               mov     eax, ecx  {0xfffffffd}
0002f838  5b                 pop     rbx {__saved_rbx}
0002f839  5d                 pop     rbp {__saved_rbp}
0002f83a  415c               pop     r12 {__saved_r12}
0002f83c  415d               pop     r13 {__saved_r13}
0002f83e  415e               pop     r14 {__saved_r14}
0002f840  415f               pop     r15 {__saved_r15}
0002f842  e9c26efdff         jmp     __x86_return_thunk
{ Does not return }

0002f847                       66 0f 1f 84 00 00 00 00 00 48 89 de 4c 89 ff e8 95 74 ff ff 41 89 c2 85 c0         f........H..L....t..A....
0002f860  75 2f 48 8b 7c 24 10 4c 89 ea 4c 89 fe e8 ee 95 ff ff 41 89 c2 85 c0 75 18 8b 54 24 20 85 d2 74  u/H.|$.L..L.......A....u..T$ ..t
0002f880  0a 44 8b 5c 24 40 45 85 db 75 3d 41 ba fd ff ff ff 44 89 54 24 10 48 83 ec 08 4c 89 e1 4c 89 f2  .D.\$@E..u=A.....D.T$.H...L..L..
0002f8a0  6a 00 4c 8b 44 24 18 31 c0 49 89 e9 4c 89 ee 48 89 df e8 c9 6e ff ff 58 5a 8b 4c 24 10 e9 56 ff  j.L.D$.1.I..L..H....n..XZ.L$..V.
0002f8c0  ff ff 66 0f 1f 44 00 00 4c 89 f6 48 89 df e8 1d 74 ff ff 41 89 c2 85 c0 75 b7 4c 89 e6 4c 89 ef  ..f..D..L..H....t..A....u.L..L..
0002f8e0  e8 0b 74 ff ff 41 89 c2 85 c0 75 a5 be 01 00 00 00 48 89 ef e8 f7 c0 ff ff 0f 1f 80 00 00 00 00  ..t..A....u......H..............
0002f900  44 8b 4c 24 60 45 85 c9 74 0a 48 8b 74 24 70 f6 06 01 75 5b 4c 89 f6 4c 89 f7 e8 51 7f ff ff 85  D.L$`E..t.H.t$p...u[L..L...Q....
0002f920  c0 0f 85 a9 00 00 00 8b b4 24 a0 00 00 00 85 f6 7e 11 48 8b bc 24 b0 00 00 00 f6 07 01 0f 85 ad  .........$......~.H..$..........
0002f940  00 00 00 48 8b 74 24 08 48 89 f7 e8 20 7f ff ff 85 c0 74 ac eb 7a 66 2e 0f 1f 84 00 00 00 00 00  ...H.t$.H... .....t..zf.........
0002f960  48 89 ee 48 89 ef e8 05 7f ff ff 85 c0 75 61 8b bc 24 80 00 00 00 4c 89 e6 85 ff 74 12 4c 8b 94  H..H.........ua..$....L....t.L..
0002f980  24 90 00 00 00 41 f6 02 01 0f 85 81 00 00 00 4c 89 e7 e8 d9 7e ff ff 85 c0 75 35 44 8b 9c 24 c0  $....A.........L....~....u5D..$.
0002f9a0  00 00 00 45 85 db 7e b8 4c 8b 8c 24 d0 00 00 00 41 f6 01 01 74 aa 48 89 ea 48 89 de 48 89 ef e8  ...E..~.L..$....A...t.H..H..H...
0002f9c0  2c c2 ff ff 85 c0 74 98 0f 1f 84 00 00 00 00 00 41 89 c2 e9 b9 fe ff ff 0f 1f 84 00 00 00 00 00  ,.....t.........A...............

0002f9e0  b9fdffffff         mov     ecx, 0xfffffffd
0002f9e5  e92efeffff         jmp     0x2f818

0002f9ea                                66 0f 1f 44 00 00                                                            f..D..

0002f9f0    void sub_2f9f0(int32_t* arg1 @ rbx, int32_t* arg2) __noreturn

0002f9f0  488b542408         mov     rdx, qword [rsp+0x8 {arg2}]
0002f9f5  4889de             mov     rsi, rbx
0002f9f8  4889d7             mov     rdi, rdx
0002f9fb  e8f0c1ffff         call    mp_sub
{ Does not return }

0002fa00  85 c0 0f 84 3b ff ff ff eb c6 66 0f 1f 44 00 00 4c 89 f7 e8 28 6e ff ff 83 f8 ff 0f 84 c5 00 00  ....;.....f..D..L...(n..........
0002fa20  00 4c 89 f2 4c 89 e6 4c 89 f7 e8 c1 c1 ff ff 85 c0 75 9d 48 8b 54 24 08 48 89 ee 48 89 d7 e8 ad  .L..L..L.........u.H.T$.H..H....
0002fa40  c1 ff ff 85 c0 75 89 8b 4c 24 60 85 c9 0f 85 ad fe ff ff be 01 00 00 00 4c 89 e7 e8 30 6e ff ff  .....u..L$`.............L...0n..
0002fa60  85 c0 0f 85 23 fe ff ff 48 8b 44 24 10 44 8b 40 08 44 89 44 24 10 eb 19 48 89 ea 4c 89 fe 48 89  ....#...H.D$.D.@.D.D$...H..L..H.
0002fa80  ef e8 da 66 ff ff 41 89 c2 85 c0 0f 85 00 fe ff ff 83 bc 24 c8 00 00 00 01 74 dd eb 19 48 89 ea  ...f..A............$.....t...H..
0002faa0  4c 89 fe 48 89 ef e8 45 c1 ff ff 41 89 c2 85 c0 0f 85 db fd ff ff 4c 89 fe 48 89 ef e8 ff 6d ff  L..H...E...A..........L..H....m.
0002fac0  ff 83 c0 01 75 d7 4c 8b 7c 24 18 48 89 ef 4c 89 fe e8 aa 83 ff ff 8b 54 24 10 45 31 d2 41 89 57  ....u.L.|$.H..L........T$.E1.A.W
0002fae0  08 e9 ab fd ff ff 4c 89 e2 4c 89 f6 4c 89 e7 e8 fc c0 ff ff 85 c0 0f 85 d4 fe ff ff 48 8b 74 24  ......L..L..L...............H.t$
0002fb00  08 48 89 ea 48 89 ef e8 e4 c0 ff ff 85 c0 0f 84 33 ff ff ff e9 b7 fe ff ff                       .H..H...........3........

{ Continuation of function s_mp_invmod_fast }

0002fb19  e8f256fdff         call    __stack_chk_fail
{ Does not return }

0002fb1e                                                                                            66 90                                f.

0002fb20    void s_mp_invmod_slow(int64_t arg1, int32_t* arg2) __noreturn

0002fb20  4157               push    r15 {__saved_r15}
0002fb22  4156               push    r14 {__saved_r14}
0002fb24  4155               push    r13 {__saved_r13}
0002fb26  4154               push    r12 {__saved_r12}
0002fb28  55                 push    rbp {__saved_rbp}
0002fb29  53                 push    rbx {__saved_rbx}
0002fb2a  4881ec38010000     sub     rsp, 0x138
0002fb31  48897c2420         mov     qword [rsp+0x20 {var_148}], rdi
0002fb36  4889542428         mov     qword [rsp+0x28 {var_140}], rdx
0002fb3b  64488b0425280000…  mov     rax, qword [fs:0x28]
0002fb44  4889842428010000   mov     qword [rsp+0x128 {var_40}], rax
0002fb4c  31c0               xor     eax, eax  {0x0}
0002fb4e  837e0801           cmp     dword [rsi+0x8], 0x1
0002fb52  0f8428030000       je      0x2fe80

0002fb58  8b2e               mov     ebp, dword [rsi]
0002fb5a  4889f3             mov     rbx, rsi
0002fb5d  85ed               test    ebp, ebp
0002fb5f  0f841b030000       je      0x2fe80

0002fb65  4c8d8c24d0000000   lea     r9, [rsp+0xd0 {var_98}]
0002fb6d  488d542470         lea     rdx, [rsp+0x70 {var_f8}]
0002fb72  31c0               xor     eax, eax  {0x0}
0002fb74  4c894c2418         mov     qword [rsp+0x18 {var_150}], r9 {var_98}
0002fb79  4c8d8424b0000000   lea     r8, [rsp+0xb0 {var_b8}]
0002fb81  4c8db42490000000   lea     r14, [rsp+0x90 {var_d8}]
0002fb89  4c89442410         mov     qword [rsp+0x10 {var_158}], r8 {var_b8}
0002fb8e  4c8d7c2450         lea     r15, [rsp+0x50 {var_118}]
0002fb93  488d6c2430         lea     rbp, [rsp+0x30 {var_138}]
0002fb98  4c89f1             mov     rcx, r14 {var_d8}
0002fb9b  4889542408         mov     qword [rsp+0x8 {var_160}], rdx {var_f8}
0002fba0  4883ec08           sub     rsp, 0x8
0002fba4  4c89fe             mov     rsi, r15 {var_118}
0002fba7  4889ef             mov     rdi, rbp {var_138}
0002fbaa  6a00               push    0x0 {var_178}
0002fbac  4c8da42420010000   lea     r12, [rsp+0x120 {var_58}]
0002fbb4  4154               push    r12 {var_58} {var_180}
0002fbb6  4c8dac2408010000   lea     r13, [rsp+0x108 {var_78}]
0002fbbe  4155               push    r13 {var_78} {var_188}
0002fbc0  e84b8affff         call    mp_init_multi
{ Does not return }

0002fbc5                 48 83 c4 20 41 89 c3 85 c0 74 30                                                       H.. A....t0

0002fbd0  488b842428010000   mov     rax, qword [rsp+0x128 {var_40}]
0002fbd8  64482b0425280000…  sub     rax, qword [fs:0x28]
0002fbe1  0f85d5030000       jne     0x2ffbc

0002fbe7  4881c438010000     add     rsp, 0x138
0002fbee  4489d8             mov     eax, r11d  {0xfffffffd}
0002fbf1  5b                 pop     rbx {__saved_rbx}
0002fbf2  5d                 pop     rbp {__saved_rbp}
0002fbf3  415c               pop     r12 {__saved_r12}
0002fbf5  415d               pop     r13 {__saved_r13}
0002fbf7  415e               pop     r14 {__saved_r14}
0002fbf9  415f               pop     r15 {__saved_r15}
0002fbfb  e9096bfdff         jmp     __x86_return_thunk
{ Does not return }

0002fc00  48 8b 7c 24 20 48 89 ea 48 89 de e8 50 92 ff ff 89 c2 85 c0 75 5a 4c 89 fe 48 89 df e8 cf 70 ff  H.|$ H..H...P.......uZL..H....p.
0002fc20  ff 89 c2 85 c0 75 49 44 8b 5c 24 30 45 85 db 74 0a 48 8b 44 24 40 f6 00 01 75 14 44 8b 54 24 50  .....uID.\$0E..t.H.D$@...u.D.T$P
0002fc40  45 85 d2 74 6b 48 8b 4c 24 60 f6 01 01 74 61 48 8b 74 24 08 48 89 ef e8 94 70 ff ff 89 c2 85 c0  E..tkH.L$`...taH.t$.H....p......
0002fc60  74 5e 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 89 54 24 20 48 83 ec 08 4c 89 f1 4c 89 fe 6a 00  t^ff.............T$ H...L..L..j.
0002fc80  48 89 ef 31 c0 41 54 41 55 4c 8b 4c 24 38 4c 8b 44 24 30 48 8b 54 24 28 e8 e3 6a ff ff 48 83 c4  H..1.ATAUL.L$8L.D$0H.T$(..j..H..
0002fca0  20 44 8b 5c 24 20 e9 25 ff ff ff 0f 1f 44 00 00 ba fd ff ff ff eb b9 66 0f 1f 84 00 00 00 00 00   D.\$ .%.....D.........f........
0002fcc0  4c 89 f6 4c 89 ff e8 25 70 ff ff 89 c2 85 c0 75 9f 48 8b 7c 24 10 be 01 00 00 00 e8 10 bd ff ff  L..L...%p......u.H.|$...........
0002fce0  be 01 00 00 00 4c 89 e7 e8 03 bd ff ff 8b 7c 24 70 85 ff 74 11 48 8b b4 24 80 00 00 00 f6 06 01  .....L........|$p..t.H..$.......
0002fd00  0f 85 ed 00 00 00 48 8b 74 24 08 48 89 f7 e8 5d 7b ff ff 85 c0 75 79 8b bc 24 b0 00 00 00 85 ff  ......H.t$.H...]{....uy..$......
0002fd20  0f 8e 32 01 00 00 48 8b b4 24 c0 00 00 00 f6 06 01 0f 84 21 01 00 00 48 8b 54 24 10 4c 89 fe 48  ..2...H..$.........!...H.T$.L..H
0002fd40  89 d7 e8 19 64 ff ff 85 c0 75 45 48 8b 54 24 18 48 89 ee 48 89 d7 e8 95 be ff ff 85 c0 75 31 48  ....d....uEH.T$.H..H.........u1H
0002fd60  8b 7c 24 10 48 89 fe e8 04 7b ff ff 85 c0 75 20 48 8b 7c 24 18 48 89 fe e8 f3 7a ff ff 85 c0 0f  .|$.H....{....u H.|$.H....z.....
0002fd80  84 68 ff ff ff 66 66 2e 0f 1f 84 00 00 00 00 00 89 c2 e9 d9 fe ff ff 66 0f 1f 84 00 00 00 00 00  .h...ff................f........
0002fda0  48 8b 84 24 00 01 00 00 f6 00 01 0f 84 81 00 00 00 4c 89 ea 4c 89 fe 4c 89 ef e8 a1 63 ff ff 85  H..$.............L..L..L....c...
0002fdc0  c0 75 cd 4c 89 e2 48 89 ee 4c 89 e7 e8 1f be ff ff 85 c0 75 bb 4c 89 ee 4c 89 ef e8 90 7a ff ff  .u.L..H..L.........u.L..L....z..
0002fde0  85 c0 75 ac 4c 89 e6 4c 89 e7 e8 81 7a ff ff 85 c0 75 9d 44 8b 84 24 90 00 00 00 4c 89 f6 45 85  ..u.L..L....z....u.D..$....L..E.
0002fe00  c0 74 0e 4c 8b 8c 24 a0 00 00 00 41 f6 01 01 75 7a 4c 89 f7 e8 57 7a ff ff 85 c0 0f 85 6f ff ff  .t.L..$....A...uzL...Wz......o..
0002fe20  ff 44 8b 9c 24 f0 00 00 00 45 85 db 0f 8f 6e ff ff ff 44 8b 94 24 10 01 00 00 45 85 d2 7e 96 48  .D..$....E....n...D..$....E..~.H
0002fe40  8b 8c 24 20 01 00 00 f6 01 01 74 89 e9 60 ff ff ff 0f 1f 80 00 00 00 00 44 8b 84 24 d0 00 00 00  ..$ ......t..`..........D..$....
0002fe60  45 85 c0 0f 8e f6 fe ff ff 4c 8b 8c 24 e0 00 00 00 41 f6 01 01 0f 84 e4 fe ff ff e9 b7 fe ff ff  E........L..$....A..............

0002fe80  41bbfdffffff       mov     r11d, 0xfffffffd
0002fe86  e945fdffff         jmp     0x2fbd0

0002fe8b                                   48 8b 7c 24 08 e8 ab 69 ff ff                                              H.|$...i..

0002fe95    void sub_2fe95(int32_t arg1 @ rax, int32_t* arg2 @ r14, int32_t* arg3) __noreturn

0002fe95  83f8ff             cmp     eax, 0xffffffff
0002fe98  0f84cf000000       je      0x2ff6d

0002fe9e  488b542408         mov     rdx, qword [rsp+0x8 {arg3}]
0002fea3  4c89f6             mov     rsi, r14
0002fea6  4889d7             mov     rdi, rdx
0002fea9  e842bdffff         call    mp_sub
{ Does not return }

0002feae                                            85 c0 0f 85 da fe ff ff 48 8b 54 24 10 4c 89 ee 48 89                ........H.T$.L..H.
0002fec0  d7 e8 2a bd ff ff 85 c0 0f 85 c2 fe ff ff 48 8b 54 24 18 4c 89 e6 48 89 d7 e8 12 bd ff ff 85 c0  ..*...........H.T$.L..H.........
0002fee0  0f 85 aa fe ff ff 8b 54 24 70 85 d2 0f 85 fb fd ff ff be 01 00 00 00 4c 89 f7 e8 91 69 ff ff 85  .......T$p.............L....i...
0002ff00  c0 74 1d e9 a8 fd ff ff 4c 89 ea 48 89 de 4c 89 ef e8 4a 62 ff ff 89 c2 85 c0 0f 85 50 fd ff ff  .t......L..H..L...Jb........P...
0002ff20  31 f6 4c 89 ef e8 66 69 ff ff 83 c0 01 74 d9 eb 18 4c 89 ea 48 89 de 4c 89 ef e8 b1 bc ff ff 89  1.L...fi.....t...L..H..L........
0002ff40  c2 85 c0 0f 85 27 fd ff ff 48 89 de 4c 89 ef e8 6c 69 ff ff 83 c0 01 75 d8 48 8b 74 24 28 4c 89  .....'...H..L...li.....u.H.t$(L.
0002ff60  ef e8 1a 7f ff ff 31 d2 e9 03 fd ff ff                                                           ......1......

0002ff6d  488b742408         mov     rsi, qword [rsp+0x8 {arg3}]
0002ff72  4c89f2             mov     rdx, r14
0002ff75  4c89f7             mov     rdi, r14
0002ff78  e873bcffff         call    mp_sub
{ Does not return }

0002ff7d                                                                                         85 c0 0f                               ...
0002ff80  85 0b fe ff ff 48 8b 74 24 10 4c 89 ea 4c 89 ef e8 5b bc ff ff 85 c0 0f 85 f3 fd ff ff 48 8b 74  .....H.t$.L..L...[...........H.t
0002ffa0  24 18 4c 89 e2 4c 89 e7 e8 43 bc ff ff 85 c0 0f 84 31 ff ff ff 89 c2 e9 b4 fc ff ff              $.L..L...C.......1..........

{ Continuation of function s_mp_invmod_slow }

0002ffbc  e84f52fdff         call    __stack_chk_fail
{ Does not return }

0002ffc1     66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00                                                   f...........D..

0002ffd0    void s_mp_montgomery_reduce_fast(int32_t* arg1, int32_t* arg2, int64_t arg3) __noreturn

0002ffd0  4157               push    r15 {__saved_r15}
0002ffd2  4156               push    r14 {__saved_r14}
0002ffd4  4155               push    r13 {__saved_r13}
0002ffd6  4154               push    r12 {__saved_r12}
0002ffd8  55                 push    rbp {__saved_rbp}
0002ffd9  53                 push    rbx {__saved_rbx}
0002ffda  4881ec48200000     sub     rsp, 0x2048
0002ffe1  48893424           mov     qword [rsp {var_2078}], rsi
0002ffe5  64488b0425280000…  mov     rax, qword [fs:0x28]
0002ffee  4889842438200000   mov     qword [rsp+0x2038 {var_40}], rax
0002fff6  8b07               mov     eax, dword [rdi]
0002fff8  89442410           mov     dword [rsp+0x10 {var_2068}], eax
0002fffc  3d00020000         cmp     eax, 0x200
00030001  0f8fd4080000       jg      0x308db

00030007  8b1e               mov     ebx, dword [rsi]
00030009  4989ff             mov     r15, rdi
0003000c  4989d4             mov     r12, rdx
0003000f  89c6               mov     esi, eax
00030011  448d7301           lea     r14d, [rbx+0x1]
00030015  44397704           cmp     dword [rdi+0x4], r14d
00030019  0f8cfd070000       jl      0x3081c

0003001f  498b6f10           mov     rbp, qword [r15+0x10]
00030023  85f6               test    esi, esi
00030025  0f8e46080000       jle     0x30871

0003002b  4c63c6             movsxd  r8, esi
0003002e  4c8d4c2430         lea     r9, [rsp+0x30 {var_2048}]
00030033  4989ed             mov     r13, rbp
00030036  4e8d1cc5f8ffffff   lea     r11, [r8*8-0x8]
0003003e  4e8d54c500         lea     r10, [rbp+r8*8]
00030043  4c89c8             mov     rax, r9 {var_2048}
00030046  49c1eb03           shr     r11, 0x3
0003004a  4983c301           add     r11, 0x1
0003004e  4183e307           and     r11d, 0x7
00030052  0f84dc000000       je      0x30134

00030058  4983fb01           cmp     r11, 0x1
0003005c  0f84b5000000       je      0x30117

00030062  4983fb02           cmp     r11, 0x2
00030066  0f8493000000       je      0x300ff

0003006c  4983fb03           cmp     r11, 0x3
00030070  7475               je      0x300e7

00030072  4983fb04           cmp     r11, 0x4
00030076  7457               je      0x300cf

00030078  4983fb05           cmp     r11, 0x5
0003007c  7439               je      0x300b7

0003007e  4983fb06           cmp     r11, 0x6
00030082  741b               je      0x3009f

00030084  488b5500           mov     rdx, qword [rbp]
00030088  4c8d6d08           lea     r13, [rbp+0x8]
0003008c  488d442440         lea     rax, [rsp+0x40 {var_2038}]
00030091  48c7442438000000…  mov     qword [rsp+0x38 {var_2040_1}], 0x0
0003009a  4889542430         mov     qword [rsp+0x30 {var_2048}], rdx

0003009f  498b4d00           mov     rcx, qword [r13]
000300a3  48c7400800000000   mov     qword [rax+0x8], 0x0
000300ab  4983c508           add     r13, 0x8
000300af  4883c010           add     rax, 0x10
000300b3  488948f0           mov     qword [rax-0x10], rcx

000300b7  498b7d00           mov     rdi, qword [r13]
000300bb  48c7400800000000   mov     qword [rax+0x8], 0x0
000300c3  4983c508           add     r13, 0x8
000300c7  4883c010           add     rax, 0x10
000300cb  488978f0           mov     qword [rax-0x10], rdi

000300cf  4d8b4500           mov     r8, qword [r13]
000300d3  48c7400800000000   mov     qword [rax+0x8], 0x0
000300db  4983c508           add     r13, 0x8
000300df  4883c010           add     rax, 0x10
000300e3  4c8940f0           mov     qword [rax-0x10], r8

000300e7  4d8b5d00           mov     r11, qword [r13]
000300eb  48c7400800000000   mov     qword [rax+0x8], 0x0
000300f3  4983c508           add     r13, 0x8
000300f7  4883c010           add     rax, 0x10
000300fb  4c8958f0           mov     qword [rax-0x10], r11

000300ff  498b5500           mov     rdx, qword [r13]
00030103  48c7400800000000   mov     qword [rax+0x8], 0x0
0003010b  4983c508           add     r13, 0x8
0003010f  4883c010           add     rax, 0x10
00030113  488950f0           mov     qword [rax-0x10], rdx

00030117  4983c508           add     r13, 0x8
0003011b  4883c010           add     rax, 0x10

0003011f  498b4df8           mov     rcx, qword [r13-0x8]
00030123  48c740f800000000   mov     qword [rax-0x8], 0x0
0003012b  488948f0           mov     qword [rax-0x10], rcx
0003012f  4d39d5             cmp     r13, r10
00030132  747d               je      0x301b1

00030134  4d8b4500           mov     r8, qword [r13]
00030138  498b4d08           mov     rcx, qword [r13+0x8]
0003013c  48c7400800000000   mov     qword [rax+0x8], 0x0
00030144  4983c540           add     r13, 0x40
00030148  498b7dd0           mov     rdi, qword [r13-0x30]
0003014c  498b55d8           mov     rdx, qword [r13-0x28]
00030150  48c7401800000000   mov     qword [rax+0x18], 0x0
00030158  4883e880           sub     rax, 0xffffffffffffff80
0003015c  4c894080           mov     qword [rax-0x80], r8
00030160  4d8b5de0           mov     r11, qword [r13-0x20]
00030164  48894890           mov     qword [rax-0x70], rcx
00030168  4d8b45e8           mov     r8, qword [r13-0x18]
0003016c  498b4df0           mov     rcx, qword [r13-0x10]
00030170  488978a0           mov     qword [rax-0x60], rdi
00030174  48c740a800000000   mov     qword [rax-0x58], 0x0
0003017c  488950b0           mov     qword [rax-0x50], rdx
00030180  48c740b800000000   mov     qword [rax-0x48], 0x0
00030188  4c8958c0           mov     qword [rax-0x40], r11
0003018c  48c740c800000000   mov     qword [rax-0x38], 0x0
00030194  4c8940d0           mov     qword [rax-0x30], r8
00030198  48c740d800000000   mov     qword [rax-0x28], 0x0
000301a0  488948e0           mov     qword [rax-0x20], rcx
000301a4  48c740e800000000   mov     qword [rax-0x18], 0x0
000301ac  e96effffff         jmp     0x3011f

000301b1  448d141b           lea     r10d, [rbx+rbx]
000301b5  458d4201           lea     r8d, [r10+0x1]
000301b9  4489542414         mov     dword [rsp+0x14 {var_2064}], r10d
000301be  4139f0             cmp     r8d, esi
000301c1  0f8fc0010000       jg      0x30387

000301c7  85db               test    ebx, ebx
000301c9  0f8ef1060000       jle     0x308c0

000301cf  4863db             movsxd  rbx, ebx
000301d2  488b3c24           mov     rdi, qword [rsp {var_2078}]
000301d6  4489442418         mov     dword [rsp+0x18 {var_2060_1}], r8d
000301db  4889d9             mov     rcx, rbx
000301de  48896c2420         mov     qword [rsp+0x20 {var_2058_1}], rbp
000301e3  48c1e104           shl     rcx, 0x4
000301e7  4c8b5f10           mov     r11, qword [rdi+0x10]
000301eb  48895c2408         mov     qword [rsp+0x8 {var_2070}], rbx
000301f0  4c89cf             mov     rdi, r9
000301f3  48894c2428         mov     qword [rsp+0x28 {var_2050_1}], rcx
000301f8  4d8d2c09           lea     r13, [r9+rcx]
000301fc  4d8d14db           lea     r10, [r11+rbx*8]
00030200  48bbffffffffffff…  mov     rbx, 0xfffffffffffffff
0003020a  660f1f440000       nop     word [rax+rax]

00030210  488b37             mov     rsi, qword [rdi]
00030213  4c89d0             mov     rax, r10
00030216  4989f8             mov     r8, rdi
00030219  4c89dd             mov     rbp, r11
0003021c  4c29d8             sub     rax, r11
0003021f  4821de             and     rsi, rbx
00030222  4883e808           sub     rax, 0x8
00030226  490faff4           imul    rsi, r12
0003022a  48c1e803           shr     rax, 0x3
0003022e  4883c001           add     rax, 0x1
00030232  4821de             and     rsi, rbx
00030235  83e007             and     eax, 0x7
00030238  0f84d4000000       je      0x30312

0003023e  4883f801           cmp     rax, 0x1
00030242  0f84aa000000       je      0x302f2

00030248  4883f802           cmp     rax, 0x2
0003024c  0f8489000000       je      0x302db

00030252  4883f803           cmp     rax, 0x3
00030256  746c               je      0x302c4

00030258  4883f804           cmp     rax, 0x4
0003025c  744f               je      0x302ad

0003025e  4883f805           cmp     rax, 0x5
00030262  7432               je      0x30296

00030264  4883f806           cmp     rax, 0x6
00030268  7415               je      0x3027f

0003026a  498b03             mov     rax, qword [r11]
0003026d  498d6b08           lea     rbp, [r11+0x8]
00030271  4c8d4710           lea     r8, [rdi+0x10]
00030275  48f7e6             mul     rsi
00030278  480107             add     qword [rdi], rax
0003027b  48115708           adc     qword [rdi+0x8], rdx

0003027f  488b4500           mov     rax, qword [rbp]
00030283  4983c010           add     r8, 0x10
00030287  4883c508           add     rbp, 0x8
0003028b  48f7e6             mul     rsi
0003028e  490140f0           add     qword [r8-0x10], rax
00030292  491150f8           adc     qword [r8-0x8], rdx

00030296  488b4500           mov     rax, qword [rbp]
0003029a  4983c010           add     r8, 0x10
0003029e  4883c508           add     rbp, 0x8
000302a2  48f7e6             mul     rsi
000302a5  490140f0           add     qword [r8-0x10], rax
000302a9  491150f8           adc     qword [r8-0x8], rdx

000302ad  488b4500           mov     rax, qword [rbp]
000302b1  4983c010           add     r8, 0x10
000302b5  4883c508           add     rbp, 0x8
000302b9  48f7e6             mul     rsi
000302bc  490140f0           add     qword [r8-0x10], rax
000302c0  491150f8           adc     qword [r8-0x8], rdx

000302c4  488b4500           mov     rax, qword [rbp]
000302c8  4983c010           add     r8, 0x10
000302cc  4883c508           add     rbp, 0x8
000302d0  48f7e6             mul     rsi
000302d3  490140f0           add     qword [r8-0x10], rax
000302d7  491150f8           adc     qword [r8-0x8], rdx

000302db  488b4500           mov     rax, qword [rbp]
000302df  4983c010           add     r8, 0x10
000302e3  4883c508           add     rbp, 0x8
000302e7  48f7e6             mul     rsi
000302ea  490140f0           add     qword [r8-0x10], rax
000302ee  491150f8           adc     qword [r8-0x8], rdx

000302f2  4883c508           add     rbp, 0x8
000302f6  4983c010           add     r8, 0x10

000302fa  488b45f8           mov     rax, qword [rbp-0x8]
000302fe  48f7e6             mul     rsi
00030301  490140f0           add     qword [r8-0x10], rax
00030305  491150f8           adc     qword [r8-0x8], rdx
00030309  4c39d5             cmp     rbp, r10
0003030c  0f84ce000000       je      0x303e0

00030312  488b4500           mov     rax, qword [rbp]
00030316  48f7e6             mul     rsi
00030319  490100             add     qword [r8], rax
0003031c  488b4508           mov     rax, qword [rbp+0x8]
00030320  49115008           adc     qword [r8+0x8], rdx
00030324  48f7e6             mul     rsi
00030327  49014010           add     qword [r8+0x10], rax
0003032b  488b4510           mov     rax, qword [rbp+0x10]
0003032f  49115018           adc     qword [r8+0x18], rdx
00030333  48f7e6             mul     rsi
00030336  49014020           add     qword [r8+0x20], rax
0003033a  488b4518           mov     rax, qword [rbp+0x18]
0003033e  49115028           adc     qword [r8+0x28], rdx
00030342  48f7e6             mul     rsi
00030345  49014030           add     qword [r8+0x30], rax
00030349  488b4520           mov     rax, qword [rbp+0x20]
0003034d  49115038           adc     qword [r8+0x38], rdx
00030351  48f7e6             mul     rsi
00030354  49014040           add     qword [r8+0x40], rax
00030358  488b4528           mov     rax, qword [rbp+0x28]
0003035c  49115048           adc     qword [r8+0x48], rdx
00030360  48f7e6             mul     rsi
00030363  49014050           add     qword [r8+0x50], rax
00030367  488b4530           mov     rax, qword [rbp+0x30]
0003036b  49115058           adc     qword [r8+0x58], rdx
0003036f  48f7e6             mul     rsi
00030372  49014060           add     qword [r8+0x60], rax
00030376  49115068           adc     qword [r8+0x68], rdx
0003037a  4883c540           add     rbp, 0x40
0003037e  4983e880           sub     r8, 0xffffffffffffff80
00030382  e973ffffff         jmp     0x302fa

00030387  4c894c2418         mov     qword [rsp+0x18 {var_2060}], r9 {var_2048}
0003038c  4589c1             mov     r9d, r8d
0003038f  8d7eff             lea     edi, [rsi-0x1]
00030392  4c8d6c2440         lea     r13, [rsp+0x40 {var_2038}]
00030397  4129f1             sub     r9d, esi
0003039a  48c1e704           shl     rdi, 0x4
0003039e  31f6               xor     esi, esi  {0x0}
000303a0  4489442408         mov     dword [rsp+0x8 {var_2070}], r8d
000303a5  4963d1             movsxd  rdx, r9d
000303a8  4c01ef             add     rdi, r13 {var_2038}
000303ab  48c1e204           shl     rdx, 0x4
000303af  e83c4ffdff         call    memset
000303b4  85db               test    ebx, ebx
000303b6  448b442408         mov     r8d, dword [rsp+0x8 {var_2070}]
000303bb  4c8b4c2418         mov     r9, qword [rsp+0x18 {var_2060}]
000303c0  0f8f09feffff       jg      0x301cf

000303c6  4863c3             movsxd  rax, ebx
000303c9  4d89cb             mov     r11, r9
000303cc  be01000000         mov     esi, 0x1
000303d1  4889442408         mov     qword [rsp+0x8 {var_2070}], rax
000303d6  eb55               jmp     0x3042d

000303d8                                                                          0f 1f 84 00 00 00 00 00                          ........

000303e0  488b5708           mov     rdx, qword [rdi+0x8]
000303e4  488b0f             mov     rcx, qword [rdi]
000303e7  480facd13c         shrd    rcx, rdx, 0x3c
000303ec  48c1ea3c           shr     rdx, 0x3c
000303f0  48014f10           add     qword [rdi+0x10], rcx
000303f4  48115718           adc     qword [rdi+0x18], rdx
000303f8  4883c710           add     rdi, 0x10
000303fc  4c39ef             cmp     rdi, r13
000303ff  0f850bfeffff       jne     0x30210

00030405  4c8b5c2428         mov     r11, qword [rsp+0x28 {var_2050_1}]
0003040a  4d63ee             movsxd  r13, r14d
0003040d  448b442418         mov     r8d, dword [rsp+0x18 {var_2060_1}]
00030412  4489f6             mov     esi, r14d
00030415  488b6c2420         mov     rbp, qword [rsp+0x20 {var_2058_1}]
0003041a  49c1e504           shl     r13, 0x4
0003041e  4d01cb             add     r11, r9

00030421  4d01cd             add     r13, r9
00030424  4139f0             cmp     r8d, esi
00030427  0f8e31020000       jle     0x3065e

0003042d  448b442414         mov     r8d, dword [rsp+0x14 {var_2064}]
00030432  31db               xor     ebx, ebx  {0x0}
00030434  4129f0             sub     r8d, esi
00030437  4983c001           add     r8, 0x1
0003043b  49c1e004           shl     r8, 0x4
0003043f  498d70f0           lea     rsi, [r8-0x10]
00030443  48c1ee04           shr     rsi, 0x4
00030447  4883c601           add     rsi, 0x1
0003044b  83e607             and     esi, 0x7
0003044e  0f8416010000       je      0x3056a

00030454  4883fe01           cmp     rsi, 0x1
00030458  0f84e3000000       je      0x30541

0003045e  4883fe02           cmp     rsi, 0x2
00030462  0f84b9000000       je      0x30521

00030468  4883fe03           cmp     rsi, 0x3
0003046c  0f848f000000       je      0x30501

00030472  4883fe04           cmp     rsi, 0x4
00030476  7469               je      0x304e1

00030478  4883fe05           cmp     rsi, 0x5
0003047c  7443               je      0x304c1

0003047e  4883fe06           cmp     rsi, 0x6
00030482  741d               je      0x304a1

00030484  498b7b08           mov     rdi, qword [r11+0x8]
00030488  498b03             mov     rax, qword [r11]
0003048b  bb10000000         mov     ebx, 0x10
00030490  480facf83c         shrd    rax, rdi, 0x3c
00030495  48c1ef3c           shr     rdi, 0x3c
00030499  49014500           add     qword [r13], rax
0003049d  49117d08           adc     qword [r13+0x8], rdi

000304a1  4d8b641b08         mov     r12, qword [r11+rbx+0x8]
000304a6  4d8b141b           mov     r10, qword [r11+rbx]
000304aa  4d0face23c         shrd    r10, r12, 0x3c
000304af  49c1ec3c           shr     r12, 0x3c
000304b3  4d01541d00         add     qword [r13+rbx], r10
000304b8  4d11641d08         adc     qword [r13+rbx+0x8], r12
000304bd  4883c310           add     rbx, 0x10

000304c1  498b541b08         mov     rdx, qword [r11+rbx+0x8]
000304c6  498b0c1b           mov     rcx, qword [r11+rbx]
000304ca  480facd13c         shrd    rcx, rdx, 0x3c
000304cf  48c1ea3c           shr     rdx, 0x3c
000304d3  49014c1d00         add     qword [r13+rbx], rcx
000304d8  4911541d08         adc     qword [r13+rbx+0x8], rdx
000304dd  4883c310           add     rbx, 0x10

000304e1  498b441b08         mov     rax, qword [r11+rbx+0x8]
000304e6  498b341b           mov     rsi, qword [r11+rbx]
000304ea  480facc63c         shrd    rsi, rax, 0x3c
000304ef  48c1e83c           shr     rax, 0x3c
000304f3  4901741d00         add     qword [r13+rbx], rsi
000304f8  4911441d08         adc     qword [r13+rbx+0x8], rax
000304fd  4883c310           add     rbx, 0x10

00030501  498b7c1b08         mov     rdi, qword [r11+rbx+0x8]
00030506  4d8b141b           mov     r10, qword [r11+rbx]
0003050a  490facfa3c         shrd    r10, rdi, 0x3c
0003050f  48c1ef3c           shr     rdi, 0x3c
00030513  4d01541d00         add     qword [r13+rbx], r10
00030518  49117c1d08         adc     qword [r13+rbx+0x8], rdi
0003051d  4883c310           add     rbx, 0x10

00030521  498b4c1b08         mov     rcx, qword [r11+rbx+0x8]
00030526  4d8b241b           mov     r12, qword [r11+rbx]
0003052a  490faccc3c         shrd    r12, rcx, 0x3c
0003052f  48c1e93c           shr     rcx, 0x3c
00030533  4d01641d00         add     qword [r13+rbx], r12
00030538  49114c1d08         adc     qword [r13+rbx+0x8], rcx
0003053d  4883c310           add     rbx, 0x10

00030541  498b741b08         mov     rsi, qword [r11+rbx+0x8]
00030546  498b141b           mov     rdx, qword [r11+rbx]
0003054a  480facf23c         shrd    rdx, rsi, 0x3c
0003054f  48c1ee3c           shr     rsi, 0x3c
00030553  4901541d00         add     qword [r13+rbx], rdx
00030558  4911741d08         adc     qword [r13+rbx+0x8], rsi
0003055d  4883c310           add     rbx, 0x10
00030561  4c39c3             cmp     rbx, r8
00030564  0f84f4000000       je      0x3065e

0003056a  4d8b541b08         mov     r10, qword [r11+rbx+0x8]
0003056f  498b041b           mov     rax, qword [r11+rbx]
00030573  4c0facd03c         shrd    rax, r10, 0x3c
00030578  49c1ea3c           shr     r10, 0x3c
0003057c  4901441d00         add     qword [r13+rbx], rax
00030581  4d11541d08         adc     qword [r13+rbx+0x8], r10
00030586  498b7c1b18         mov     rdi, qword [r11+rbx+0x18]
0003058b  4d8b641b10         mov     r12, qword [r11+rbx+0x10]
00030590  490facfc3c         shrd    r12, rdi, 0x3c
00030595  48c1ef3c           shr     rdi, 0x3c
00030599  4d01641d10         add     qword [r13+rbx+0x10], r12
0003059e  49117c1d18         adc     qword [r13+rbx+0x18], rdi
000305a3  498b541b28         mov     rdx, qword [r11+rbx+0x28]
000305a8  498b4c1b20         mov     rcx, qword [r11+rbx+0x20]
000305ad  480facd13c         shrd    rcx, rdx, 0x3c
000305b2  48c1ea3c           shr     rdx, 0x3c
000305b6  49014c1d20         add     qword [r13+rbx+0x20], rcx
000305bb  4911541d28         adc     qword [r13+rbx+0x28], rdx
000305c0  498b441b38         mov     rax, qword [r11+rbx+0x38]
000305c5  498b741b30         mov     rsi, qword [r11+rbx+0x30]
000305ca  480facc63c         shrd    rsi, rax, 0x3c
000305cf  48c1e83c           shr     rax, 0x3c
000305d3  4901741d30         add     qword [r13+rbx+0x30], rsi
000305d8  4911441d38         adc     qword [r13+rbx+0x38], rax
000305dd  4d8b541b40         mov     r10, qword [r11+rbx+0x40]
000305e2  4d8b641b48         mov     r12, qword [r11+rbx+0x48]
000305e7  4d0face23c         shrd    r10, r12, 0x3c
000305ec  49c1ec3c           shr     r12, 0x3c
000305f0  4d01541d40         add     qword [r13+rbx+0x40], r10
000305f5  4d11641d48         adc     qword [r13+rbx+0x48], r12
000305fa  498b7c1b58         mov     rdi, qword [r11+rbx+0x58]
000305ff  498b4c1b50         mov     rcx, qword [r11+rbx+0x50]
00030604  480facf93c         shrd    rcx, rdi, 0x3c
00030609  48c1ef3c           shr     rdi, 0x3c
0003060d  49014c1d50         add     qword [r13+rbx+0x50], rcx
00030612  49117c1d58         adc     qword [r13+rbx+0x58], rdi
00030617  498b741b68         mov     rsi, qword [r11+rbx+0x68]
0003061c  498b541b60         mov     rdx, qword [r11+rbx+0x60]
00030621  480facf23c         shrd    rdx, rsi, 0x3c
00030626  48c1ee3c           shr     rsi, 0x3c
0003062a  4901541d60         add     qword [r13+rbx+0x60], rdx
0003062f  4911741d68         adc     qword [r13+rbx+0x68], rsi
00030634  4d8b541b78         mov     r10, qword [r11+rbx+0x78]
00030639  498b441b70         mov     rax, qword [r11+rbx+0x70]
0003063e  4c0facd03c         shrd    rax, r10, 0x3c
00030643  49c1ea3c           shr     r10, 0x3c
00030647  4901441d70         add     qword [r13+rbx+0x70], rax
0003064c  4d11541d78         adc     qword [r13+rbx+0x78], r10
00030651  4883eb80           sub     rbx, 0xffffffffffffff80
00030655  4c39c3             cmp     rbx, r8
00030658  0f850cffffff       jne     0x3056a

0003065e  4c8b5c2408         mov     r11, qword [rsp+0x8 {var_2070}]
00030663  4531e4             xor     r12d, r12d  {0x0}
00030666  49c1e304           shl     r11, 0x4
0003066a  4d01cb             add     r11, r9
0003066d  4d63ce             movsxd  r9, r14d
00030670  49c1e103           shl     r9, 0x3
00030674  4585f6             test    r14d, r14d
00030677  0f8e37010000       jle     0x307b4

0003067d  49bdffffffffffff…  mov     r13, 0xfffffffffffffff
00030687  4d8d41f8           lea     r8, [r9-0x8]
0003068b  49c1e803           shr     r8, 0x3
0003068f  4983c001           add     r8, 0x1
00030693  4183e007           and     r8d, 0x7
00030697  0f8499000000       je      0x30736

0003069d  4983f801           cmp     r8, 0x1
000306a1  747e               je      0x30721

000306a3  4983f802           cmp     r8, 0x2
000306a7  7468               je      0x30711

000306a9  4983f803           cmp     r8, 0x3
000306ad  7452               je      0x30701

000306af  4983f804           cmp     r8, 0x4
000306b3  743c               je      0x306f1

000306b5  4983f805           cmp     r8, 0x5
000306b9  7426               je      0x306e1

000306bb  4983f806           cmp     r8, 0x6
000306bf  7410               je      0x306d1

000306c1  498b1b             mov     rbx, qword [r11]
000306c4  41bc08000000       mov     r12d, 0x8
000306ca  4c21eb             and     rbx, r13
000306cd  48895d00           mov     qword [rbp], rbx

000306d1  4b8b0c63           mov     rcx, qword [r11+r12*2]
000306d5  4c21e9             and     rcx, r13
000306d8  4a894c2500         mov     qword [rbp+r12], rcx
000306dd  4983c408           add     r12, 0x8

000306e1  4b8b3c63           mov     rdi, qword [r11+r12*2]
000306e5  4c21ef             and     rdi, r13
000306e8  4a897c2500         mov     qword [rbp+r12], rdi
000306ed  4983c408           add     r12, 0x8

000306f1  4b8b1463           mov     rdx, qword [r11+r12*2]
000306f5  4c21ea             and     rdx, r13
000306f8  4a89542500         mov     qword [rbp+r12], rdx
000306fd  4983c408           add     r12, 0x8

00030701  4b8b3463           mov     rsi, qword [r11+r12*2]
00030705  4c21ee             and     rsi, r13
00030708  4a89742500         mov     qword [rbp+r12], rsi
0003070d  4983c408           add     r12, 0x8

00030711  4b8b0463           mov     rax, qword [r11+r12*2]
00030715  4c21e8             and     rax, r13
00030718  4a89442500         mov     qword [rbp+r12], rax
0003071d  4983c408           add     r12, 0x8

00030721  4f8b1463           mov     r10, qword [r11+r12*2]
00030725  4d21ea             and     r10, r13
00030728  4e89542500         mov     qword [rbp+r12], r10
0003072d  4983c408           add     r12, 0x8
00030731  4d39e1             cmp     r9, r12
00030734  7470               je      0x307a6

00030736  4f8b0463           mov     r8, qword [r11+r12*2]
0003073a  4b8b5c6310         mov     rbx, qword [r11+r12*2+0x10]
0003073f  4b8b4c6320         mov     rcx, qword [r11+r12*2+0x20]
00030744  4b8b7c6330         mov     rdi, qword [r11+r12*2+0x30]
00030749  4b8b546340         mov     rdx, qword [r11+r12*2+0x40]
0003074e  4b8b746350         mov     rsi, qword [r11+r12*2+0x50]
00030753  4d21e8             and     r8, r13
00030756  4c21eb             and     rbx, r13
00030759  4b8b446360         mov     rax, qword [r11+r12*2+0x60]
0003075e  4f8b546370         mov     r10, qword [r11+r12*2+0x70]
00030763  4c21e9             and     rcx, r13
00030766  4c21ef             and     rdi, r13
00030769  4c21ea             and     rdx, r13
0003076c  4c21ee             and     rsi, r13
0003076f  4e89442500         mov     qword [rbp+r12], r8
00030774  4c21e8             and     rax, r13
00030777  4d21ea             and     r10, r13
0003077a  4a895c2508         mov     qword [rbp+r12+0x8], rbx
0003077f  4a894c2510         mov     qword [rbp+r12+0x10], rcx
00030784  4a897c2518         mov     qword [rbp+r12+0x18], rdi
00030789  4a89542520         mov     qword [rbp+r12+0x20], rdx
0003078e  4a89742528         mov     qword [rbp+r12+0x28], rsi
00030793  4a89442530         mov     qword [rbp+r12+0x30], rax
00030798  4e89542538         mov     qword [rbp+r12+0x38], r10
0003079d  4983c440           add     r12, 0x40
000307a1  4d39e1             cmp     r9, r12
000307a4  7590               jne     0x30736

000307a6  4429742410         sub     dword [rsp+0x10 {var_2068}], r14d
000307ab  458d5eff           lea     r11d, [r14-0x1]
000307af  4a8d6cdd08         lea     rbp, [rbp+r11*8+0x8]

000307b4  448b4c2410         mov     r9d, dword [rsp+0x10 {var_2068}]
000307b9  4585c9             test    r9d, r9d
000307bc  7e13               jle     0x307d1

000307be  4863542410         movsxd  rdx, dword [rsp+0x10 {var_2068}]
000307c3  31f6               xor     esi, esi  {0x0}
000307c5  4889ef             mov     rdi, rbp
000307c8  48c1e203           shl     rdx, 0x3
000307cc  e81f4bfdff         call    memset

000307d1  458937             mov     dword [r15], r14d
000307d4  4c89ff             mov     rdi, r15
000307d7  e8d45dffff         call    mp_clamp
{ Does not return }

000307dc                                                                                      48 8b 34 24                              H.4$
000307e0  4c 89 ff e8 d8 60 ff ff 83 f8 ff 75 4d 31 c0                                                     L....`.....uM1.

000307ef  488b942438200000   mov     rdx, qword [rsp+0x2038 {var_40}]
000307f7  64482b1425280000…  sub     rdx, qword [fs:0x28]
00030800  0f85df000000       jne     0x308e5

00030806  4881c448200000     add     rsp, 0x2048
0003080d  5b                 pop     rbx {__saved_rbx}
0003080e  5d                 pop     rbp {__saved_rbp}
0003080f  415c               pop     r12 {__saved_r12}
00030811  415d               pop     r13 {__saved_r13}
00030813  415e               pop     r14 {__saved_r14}
00030815  415f               pop     r15 {__saved_r15}
00030817  e9ed5efdff         jmp     __x86_return_thunk
{ Does not return }

0003081c  4489f6             mov     esi, r14d
0003081f  e8cc7cffff         call    mp_grow
{ Does not return }

00030824              85 c0 75 c7 48 8b 14 24 41 8b 37 8b 1a 44 8d 73 01 e9 e5 f7 ff ff 48 8b 84 24 38 20      ..u.H..$A.7..D.s......H..$8 
00030840  00 00 64 48 2b 04 25 28 00 00 00 0f 85 94 00 00 00 48 8b 34 24 48 81 c4 48 20 00 00 4c 89 fa 4c  ..dH+.%(.........H.4$H..H ..L..L
00030860  89 ff 5b 5d 41 5c 41 5d 41 5e 41 5f e9 8f 10 00 00                                               ..[]A\A]A^A_.....

00030871  8d0c1b             lea     ecx, [rbx+rbx]
00030874  448d4101           lea     r8d, [rcx+0x1]
00030878  894c2414           mov     dword [rsp+0x14 {var_2064}], ecx
0003087c  4585c0             test    r8d, r8d
0003087f  7f1a               jg      0x3089b

00030881  4c8d4c2430         lea     r9, [rsp+0x30 {var_2048}]
00030886  85db               test    ebx, ebx
00030888  0f8f41f9ffff       jg      0x301cf

0003088e  4863db             movsxd  rbx, ebx
00030891  48895c2408         mov     qword [rsp+0x8 {var_2070}], rbx
00030896  e9c3fdffff         jmp     0x3065e

0003089b  4963d0             movsxd  rdx, r8d
0003089e  488d7c2430         lea     rdi, [rsp+0x30 {var_2048}]
000308a3  31f6               xor     esi, esi  {0x0}
000308a5  4489442408         mov     dword [rsp+0x8 {var_2070}], r8d
000308aa  48c1e204           shl     rdx, 0x4
000308ae  e83d4afdff         call    memset
000308b3  448b442408         mov     r8d, dword [rsp+0x8 {var_2070}]
000308b8  4989c1             mov     r9, rax
000308bb  e907f9ffff         jmp     0x301c7

000308c0  4c63e3             movsxd  r12, ebx
000308c3  4d89cb             mov     r11, r9
000308c6  41bd10000000       mov     r13d, 0x10
000308cc  be01000000         mov     esi, 0x1
000308d1  4c89642408         mov     qword [rsp+0x8 {var_2070}], r12
000308d6  e946fbffff         jmp     0x30421

000308db  b8fdffffff         mov     eax, 0xfffffffd
000308e0  e90affffff         jmp     0x307ef

000308e5  e82649fdff         call    __stack_chk_fail
{ Does not return }

000308ea                                66 0f 1f 44 00 00                                                            f..D..

000308f0    void s_mp_mul_digs(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4) __noreturn

000308f0  4157               push    r15 {__saved_r15}
000308f2  4156               push    r14 {__saved_r14}
000308f4  4155               push    r13 {__saved_r13}
000308f6  4154               push    r12 {__saved_r12}
000308f8  55                 push    rbp {__saved_rbp}
000308f9  53                 push    rbx {__saved_rbx}
000308fa  4883ec58           sub     rsp, 0x58
000308fe  4889542418         mov     qword [rsp+0x18 {var_70}], rdx
00030903  64488b0425280000…  mov     rax, qword [fs:0x28]
0003090c  4889442448         mov     qword [rsp+0x48 {var_40}], rax
00030911  31c0               xor     eax, eax  {0x0}
00030913  85c9               test    ecx, ecx
00030915  0f88d5020000       js      0x30bf0

0003091b  4889fb             mov     rbx, rdi
0003091e  4989f5             mov     r13, rsi
00030921  4189ce             mov     r14d, ecx
00030924  81f9ff010000       cmp     ecx, 0x1ff
0003092a  7f14               jg      0x30940

0003092c  8b06               mov     eax, dword [rsi]
0003092e  8b17               mov     edx, dword [rdi]
00030930  39d0               cmp     eax, edx
00030932  0f4fc2             cmovg   eax, edx
00030935  3dff000000         cmp     eax, 0xff
0003093a  0f8e88020000       jle     0x30bc8

00030940  488d6c2430         lea     rbp, [rsp+0x30 {var_58}]
00030945  4489f6             mov     esi, r14d
00030948  4889ef             mov     rdi, rbp {var_58}
0003094b  e80080ffff         call    mp_init_size
{ Does not return }

00030950                                                  41 89 c4 85 c0 0f 85 36 02 00 00 48 63 0b 44 89                  A......6...Hc.D.
00030960  74 24 30 85 c9 0f 8e 09 02 00 00 48 8b 73 10 49 8b 7d 10 48 89 4c 24 10 45 31 c9 45 8b 7d 00 4c  t$0........H.s.I.}.H.L$.E1.E.}.L
00030980  8b 5c 24 40 89 44 24 24 48 bb ff ff ff ff ff ff ff 0f 48 89 74 24 08 48 89 3c 24 48 89 6c 24 28  .\$@.D$$H.........H.t$.H.<$H.l$(
000309a0  45 89 f2 48 8b 6c 24 08 45 89 cc 4c 89 df 45 29 ca 45 39 fa 4e 8b 44 cd 00 45 0f 4f d7 45 85 d2  E..H.l$.E..L..E).E9.N.D..E.O.E..
000309c0  0f 8e fa 01 00 00 49 63 c2 48 8b 34 24 31 c9 48 8d 14 c5 f8 ff ff ff 4d 8d 2c c3 48 c1 ea 03 48  ......Ic.H.4$1.H.......M.,.H...H
000309e0  83 c2 01 83 e2 03 0f 84 9a 00 00 00 48 83 fa 01 74 5d 48 83 fa 02 74 29 48 89 f1 49 8d 7b 08 48  ............H...t]H...t)H..I.{.H
00030a00  8d 76 08 48 8b 01 49 f7 e0 49 03 03 48 89 c5 48 89 c1 48 83 d2 00 48 21 dd 49 89 2b 48 0f ac d1  .v.H..I..I..H..H..H...H!.I.+H...
00030a20  3c 48 8b 06 48 83 c6 08 49 f7 e0 48 03 07 48 83 d2 00 48 01 c8 48 89 c1 48 83 d2 00 48 83 c7 08  <H..H...I..H..H...H..H..H...H...
00030a40  48 21 d9 48 89 4f f8 48 89 c1 48 0f ac d1 3c 48 8b 06 48 83 c6 08 49 f7 e0 48 03 07 48 83 d2 00  H!.H.O.H..H...<H..H...I..H..H...
00030a60  48 01 c8 48 89 c5 48 83 d2 00 48 89 c1 48 83 c7 08 48 21 dd 48 0f ac d1 3c 48 89 6f f8 4c 39 ef  H..H..H...H..H...H!.H...<H.o.L9.
00030a80  0f 84 be 00 00 00 44 89 7c 24 20 45 89 d7 48 8b 06 49 f7 e0 48 03 07 48 83 d2 00 48 01 c8 49 89  ......D.|$ E..H..I..H..H...H..I.
00030aa0  c2 48 83 d2 00 48 89 c5 49 21 da 48 0f ac d5 3c 4c 89 17 48 8b 46 08 49 f7 e0 48 03 47 08 48 83  .H...H..I!.H...<L..H.F.I..H.G.H.
00030ac0  d2 00 48 01 e8 48 89 c1 48 83 d2 00 49 89 c2 48 21 d9 49 0f ac d2 3c 48 89 4f 08 48 8b 46 10 49  ..H..H..H...I..H!.I...<H.O.H.F.I
00030ae0  f7 e0 48 03 47 10 48 83 d2 00 4c 01 d0 48 89 c5 48 83 d2 00 48 83 c6 20 48 89 c1 48 21 dd 48 0f  ..H.G.H...L..H..H...H.. H..H!.H.
00030b00  ac d1 3c 48 89 6f 10 48 8b 46 f8 49 f7 e0 48 03 47 18 48 83 d2 00 48 01 c8 49 89 c2 48 83 d2 00  ..<H.o.H.F.I..H.G.H...H..I..H...
00030b20  48 89 c1 48 83 c7 20 49 21 da 48 0f ac d1 3c 4c 89 57 f8 4c 39 ef 0f 85 52 ff ff ff 45 89 fa 44  H..H.. I!.H...<L.W.L9...R...E..D
00030b40  8b 7c 24 20 45 8d 42 ff 49 83 c3 08 45 01 d4 4b 8d 3c c3 45 39 e6 7e 03 48 89 0f 49 83 c1 01 4c  .|$ E.B.I...E..K.<.E9.~.H..I...L
00030b60  39 4c 24 10 0f 85 36 fe ff ff 44 8b 64 24 24 48 8b 6c 24 28 48 89 ef e8 34 5a ff ff 48 8b 74 24  9L$...6...D.d$$H.l$(H...4Z..H.t$
00030b80  18 48 89 ef e8 f7 72 ff ff 48 89 ef e8 8f 5b ff ff                                               .H....r..H....[..

00030b91  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00030b96  64482b0425280000…  sub     rax, qword [fs:0x28]
00030b9f  7557               jne     0x30bf8

00030ba1  4883c458           add     rsp, 0x58
00030ba5  4489e0             mov     eax, r12d  {0xfffffffd}
00030ba8  5b                 pop     rbx {__saved_rbx}
00030ba9  5d                 pop     rbp {__saved_rbp}
00030baa  415c               pop     r12 {__saved_r12}
00030bac  415d               pop     r13 {__saved_r13}
00030bae  415e               pop     r14 {__saved_r14}
00030bb0  415f               pop     r15 {__saved_r15}
00030bb2  e9525bfdff         jmp     __x86_return_thunk
{ Does not return }

00030bb7                                                                       66 0f 1f 84 00 00 00 00 00                         f........
00030bc0  31 c9 4d 8d 5b 08 eb 8b                                                                          1.M.[...

00030bc8  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00030bcd  64482b0425280000…  sub     rax, qword [fs:0x28]
00030bd6  7520               jne     0x30bf8

00030bd8  488b542418         mov     rdx, qword [rsp+0x18 {var_70}]
00030bdd  4883c458           add     rsp, 0x58
00030be1  5b                 pop     rbx {__saved_rbx}
00030be2  5d                 pop     rbp {__saved_rbp}
00030be3  415c               pop     r12 {__saved_r12}
00030be5  415d               pop     r13 {__saved_r13}
00030be7  415e               pop     r14 {__saved_r14}
00030be9  415f               pop     r15 {__saved_r15}
00030beb  e910000000         jmp     s_mp_mul_digs_fast
{ Does not return }

00030bf0  41bcfdffffff       mov     r12d, 0xfffffffd
00030bf6  eb99               jmp     0x30b91

00030bf8  e81346fdff         call    __stack_chk_fail
{ Does not return }

00030bfd                                                                                         0f 1f 00                               ...

00030c00    void s_mp_mul_digs_fast(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4) __noreturn

00030c00  4157               push    r15 {__saved_r15}
00030c02  4156               push    r14 {__saved_r14}
00030c04  4155               push    r13 {__saved_r13}
00030c06  4154               push    r12 {__saved_r12}
00030c08  55                 push    rbp {__saved_rbp}
00030c09  53                 push    rbx {__saved_rbx}
00030c0a  4881ec48100000     sub     rsp, 0x1048
00030c11  4889542418         mov     qword [rsp+0x18 {var_1060}], rdx
00030c16  64488b0425280000…  mov     rax, qword [fs:0x28]
00030c1f  4889842438100000   mov     qword [rsp+0x1038 {var_40}], rax
00030c27  31c0               xor     eax, eax  {0x0}
00030c29  85c9               test    ecx, ecx
00030c2b  0f881f030000       js      0x30f50

00030c31  4989fc             mov     r12, rdi
00030c34  4889f5             mov     rbp, rsi
00030c37  89cb               mov     ebx, ecx
00030c39  394a04             cmp     dword [rdx+0x4], ecx
00030c3c  0f8cf6020000       jl      0x30f38

00030c42  458b2c24           mov     r13d, dword [r12]
00030c46  448b5d00           mov     r11d, dword [rbp]
00030c4a  488b7c2418         mov     rdi, qword [rsp+0x18 {var_1060}]
00030c4f  438d441d00         lea     eax, [r13+r11]
00030c54  39d8               cmp     eax, ebx
00030c56  4c8b4710           mov     r8, qword [rdi+0x10]
00030c5a  0f4ed8             cmovle  ebx, eax
00030c5d  8b07               mov     eax, dword [rdi]
00030c5f  4189da             mov     r10d, ebx
00030c62  85db               test    ebx, ebx
00030c64  0f8ee2020000       jle     0x30f4c

00030c6a  4489542428         mov     dword [rsp+0x28 {var_1050}], r10d
00030c6f  488b6d10           mov     rbp, qword [rbp+0x10]
00030c73  4183eb01           sub     r11d, 0x1
00030c77  4d63f2             movsxd  r14, r10d
00030c7a  4c89442420         mov     qword [rsp+0x20 {var_1058_1}], r8
00030c7f  498b5c2410         mov     rbx, qword [r12+0x10]
00030c84  4531c9             xor     r9d, r9d  {0x0}
00030c87  31f6               xor     esi, esi  {0x0}
00030c89  8944242c           mov     dword [rsp+0x2c {var_104c_1}], eax
00030c8d  31ff               xor     edi, edi  {0x0}
00030c8f  4c8d642430         lea     r12, [rsp+0x30 {var_1048}]
00030c94  49bfffffffffffff…  mov     r15, 0xfffffffffffffff
00030c9e  6690               nop     

00030ca0  4539cb             cmp     r11d, r9d
00030ca3  4489c8             mov     eax, r9d
00030ca6  4489ca             mov     edx, r9d
00030ca9  410f4ec3           cmovle  eax, r11d
00030cad  4189c2             mov     r10d, eax
00030cb0  29c2               sub     edx, eax
00030cb2  4c63c0             movsxd  r8, eax
00030cb5  83c001             add     eax, 0x1
00030cb8  4529ca             sub     r10d, r9d
00030cbb  4863ca             movsxd  rcx, edx
00030cbe  4e8d44c500         lea     r8, [rbp+r8*8]
00030cc3  4501ea             add     r10d, r13d
00030cc6  488d0ccb           lea     rcx, [rbx+rcx*8]
00030cca  4139c2             cmp     r10d, eax
00030ccd  440f4fd0           cmovg   r10d, eax
00030cd1  4585d2             test    r10d, r10d
00030cd4  0f8e92010000       jle     0x30e6c

00030cda  4963c2             movsxd  rax, r10d
00030cdd  488d14c5f8ffffff   lea     rdx, [rax*8-0x8]
00030ce5  4c8d14c1           lea     r10, [rcx+rax*8]
00030ce9  48c1ea03           shr     rdx, 0x3
00030ced  4883c201           add     rdx, 0x1
00030cf1  83e207             and     edx, 0x7
00030cf4  0f84be000000       je      0x30db8

00030cfa  4883fa01           cmp     rdx, 0x1
00030cfe  0f8496000000       je      0x30d9a

00030d04  4883fa02           cmp     rdx, 0x2
00030d08  747c               je      0x30d86

00030d0a  4883fa03           cmp     rdx, 0x3
00030d0e  7462               je      0x30d72

00030d10  4883fa04           cmp     rdx, 0x4
00030d14  7448               je      0x30d5e

00030d16  4883fa05           cmp     rdx, 0x5
00030d1a  742e               je      0x30d4a

00030d1c  4883fa06           cmp     rdx, 0x6
00030d20  7414               je      0x30d36

00030d22  488b01             mov     rax, qword [rcx]
00030d25  49f720             mul     qword [r8]
00030d28  4883c108           add     rcx, 0x8
00030d2c  4983e808           sub     r8, 0x8
00030d30  4801c6             add     rsi, rax
00030d33  4811d7             adc     rdi, rdx

00030d36  488b01             mov     rax, qword [rcx]
00030d39  49f720             mul     qword [r8]
00030d3c  4883c108           add     rcx, 0x8
00030d40  4983e808           sub     r8, 0x8
00030d44  4801c6             add     rsi, rax
00030d47  4811d7             adc     rdi, rdx

00030d4a  488b01             mov     rax, qword [rcx]
00030d4d  49f720             mul     qword [r8]
00030d50  4883c108           add     rcx, 0x8
00030d54  4983e808           sub     r8, 0x8
00030d58  4801c6             add     rsi, rax
00030d5b  4811d7             adc     rdi, rdx

00030d5e  488b01             mov     rax, qword [rcx]
00030d61  49f720             mul     qword [r8]
00030d64  4883c108           add     rcx, 0x8
00030d68  4983e808           sub     r8, 0x8
00030d6c  4801c6             add     rsi, rax
00030d6f  4811d7             adc     rdi, rdx

00030d72  488b01             mov     rax, qword [rcx]
00030d75  49f720             mul     qword [r8]
00030d78  4883c108           add     rcx, 0x8
00030d7c  4983e808           sub     r8, 0x8
00030d80  4801c6             add     rsi, rax
00030d83  4811d7             adc     rdi, rdx

00030d86  488b01             mov     rax, qword [rcx]
00030d89  49f720             mul     qword [r8]
00030d8c  4883c108           add     rcx, 0x8
00030d90  4983e808           sub     r8, 0x8
00030d94  4801c6             add     rsi, rax
00030d97  4811d7             adc     rdi, rdx

00030d9a  4983e808           sub     r8, 0x8
00030d9e  488b01             mov     rax, qword [rcx]
00030da1  4883c108           add     rcx, 0x8
00030da5  49f76008           mul     qword [r8+0x8]
00030da9  4801c6             add     rsi, rax
00030dac  4811d7             adc     rdi, rdx
00030daf  4c39d1             cmp     rcx, r10
00030db2  0f84b4000000       je      0x30e6c

00030db8  44896c240c         mov     dword [rsp+0xc {var_106c_1}], r13d
00030dbd  4989ed             mov     r13, rbp
00030dc0  4c89cd             mov     rbp, r9
00030dc3  4d89d1             mov     r9, r10
00030dc6  48895c2410         mov     qword [rsp+0x10 {var_1068_1}], rbx
00030dcb  4489db             mov     ebx, r11d

00030dce  488b01             mov     rax, qword [rcx]
00030dd1  49f720             mul     qword [r8]
00030dd4  4801c6             add     rsi, rax
00030dd7  488b4108           mov     rax, qword [rcx+0x8]
00030ddb  4811d7             adc     rdi, rdx
00030dde  49f760f8           mul     qword [r8-0x8]
00030de2  4801c6             add     rsi, rax
00030de5  488b4110           mov     rax, qword [rcx+0x10]
00030de9  4811d7             adc     rdi, rdx
00030dec  49f760f0           mul     qword [r8-0x10]
00030df0  4989f2             mov     r10, rsi
00030df3  4989fb             mov     r11, rdi
00030df6  4901c2             add     r10, rax
00030df9  488b4118           mov     rax, qword [rcx+0x18]
00030dfd  4911d3             adc     r11, rdx
00030e00  49f760e8           mul     qword [r8-0x18]
00030e04  4901c2             add     r10, rax
00030e07  488b4120           mov     rax, qword [rcx+0x20]
00030e0b  4911d3             adc     r11, rdx
00030e0e  49f760e0           mul     qword [r8-0x20]
00030e12  4901c2             add     r10, rax
00030e15  488b4128           mov     rax, qword [rcx+0x28]
00030e19  4911d3             adc     r11, rdx
00030e1c  49f760d8           mul     qword [r8-0x28]
00030e20  4901c2             add     r10, rax
00030e23  488b4130           mov     rax, qword [rcx+0x30]
00030e27  4911d3             adc     r11, rdx
00030e2a  49f760d0           mul     qword [r8-0x30]
00030e2e  4889c6             mov     rsi, rax
00030e31  4889d7             mov     rdi, rdx
00030e34  4c01d6             add     rsi, r10
00030e37  4c11df             adc     rdi, r11
00030e3a  4983e840           sub     r8, 0x40
00030e3e  488b4138           mov     rax, qword [rcx+0x38]
00030e42  4883c140           add     rcx, 0x40
00030e46  49f76008           mul     qword [r8+0x8]
00030e4a  4801c6             add     rsi, rax
00030e4d  4811d7             adc     rdi, rdx
00030e50  4c39c9             cmp     rcx, r9
00030e53  0f8575ffffff       jne     0x30dce

00030e59  4989e9             mov     r9, rbp
00030e5c  4189db             mov     r11d, ebx
00030e5f  4c89ed             mov     rbp, r13
00030e62  488b5c2410         mov     rbx, qword [rsp+0x10 {var_1068_1}]
00030e67  448b6c240c         mov     r13d, dword [rsp+0xc {var_106c_1}]

00030e6c  4889f1             mov     rcx, rsi
00030e6f  480facfe3c         shrd    rsi, rdi, 0x3c
00030e74  4c21f9             and     rcx, r15
00030e77  48c1ef3c           shr     rdi, 0x3c
00030e7b  4b890ccc           mov     qword [r12+r9*8], rcx {var_1048}
00030e7f  4983c101           add     r9, 0x1
00030e83  4d39f1             cmp     r9, r14
00030e86  0f8514feffff       jne     0x30ca0

00030e8c  448b742428         mov     r14d, dword [rsp+0x28 {var_1050}]
00030e91  488b542418         mov     rdx, qword [rsp+0x18 {var_1060}]
00030e96  4c8b442420         mov     r8, qword [rsp+0x20 {var_1058_1}]
00030e9b  8b44242c           mov     eax, dword [rsp+0x2c {var_104c_1}]
00030e9f  448932             mov     dword [rdx], r14d
00030ea2  4d89f7             mov     r15, r14
00030ea5  4c8b542430         mov     r10, qword [rsp+0x30 {var_1048}]
00030eaa  49c1e603           shl     r14, 0x3
00030eae  4489f7             mov     edi, r14d
00030eb1  498d6808           lea     rbp, [r8+0x8]
00030eb5  4429f8             sub     eax, r15d
00030eb8  4d8910             mov     qword [r8], r10
00030ebb  498b743cf8         mov     rsi, qword [r12+rdi-0x8 {var_1050}]
00030ec0  49897438f8         mov     qword [r8+rdi-0x8], rsi
00030ec5  4889ef             mov     rdi, rbp
00030ec8  4c89e6             mov     rsi, r12 {var_1048}
00030ecb  458d67ff           lea     r12d, [r15-0x1]
00030ecf  4883e7f8           and     rdi, 0xfffffffffffffff8
00030ed3  4929f8             sub     r8, rdi
00030ed6  4501c6             add     r14d, r8d
00030ed9  4c29c6             sub     rsi {var_1048}, r8
00030edc  4e8d44e500         lea     r8, [rbp+r12*8]
00030ee1  41c1ee03           shr     r14d, 0x3
00030ee5  4489f1             mov     ecx, r14d
00030ee8  f348a5             rep movsq qword [rdi], [rsi]  {0x0}

00030eeb  85c0               test    eax, eax
00030eed  7e14               jle     0x30f03

00030eef  4898               cdqe    
00030ef1  31f6               xor     esi, esi  {0x0}
00030ef3  4c89c7             mov     rdi, r8
00030ef6  488d14c500000000   lea     rdx, [rax*8]
00030efe  e8ed43fdff         call    memset

00030f03  488b7c2418         mov     rdi, qword [rsp+0x18 {var_1060}]
00030f08  e8a356ffff         call    mp_clamp
{ Does not return }

00030f0d                                         31 c0                                                                  1.

00030f0f  488b942438100000   mov     rdx, qword [rsp+0x1038 {var_40}]
00030f17  64482b1425280000…  sub     rdx, qword [fs:0x28]
00030f20  7535               jne     0x30f57

00030f22  4881c448100000     add     rsp, 0x1048
00030f29  5b                 pop     rbx {__saved_rbx}
00030f2a  5d                 pop     rbp {__saved_rbp}
00030f2b  415c               pop     r12 {__saved_r12}
00030f2d  415d               pop     r13 {__saved_r13}
00030f2f  415e               pop     r14 {__saved_r14}
00030f31  415f               pop     r15 {__saved_r15}
00030f33  e9d157fdff         jmp     __x86_return_thunk
{ Does not return }

00030f38  4889d7             mov     rdi, rdx
00030f3b  89ce               mov     esi, ecx
00030f3d  e8ae75ffff         call    mp_grow
{ Does not return }

00030f42        85 c0 0f 84 f8 fc ff ff eb c3                                                                ..........

00030f4c  891f               mov     dword [rdi], ebx
00030f4e  eb9b               jmp     0x30eeb

00030f50  b8fdffffff         mov     eax, 0xfffffffd
00030f55  ebb8               jmp     0x30f0f

00030f57  e8b442fdff         call    __stack_chk_fail
{ Does not return }

00030f5c                                                                                      0f 1f 40 00                              ..@.

00030f60    void s_mp_prime_is_divisible(int32_t* arg1, int32_t* arg2) __noreturn

00030f60  4156               push    r14 {var_8}
00030f62  4155               push    r13 {var_10}
00030f64  4154               push    r12 {var_18}
00030f66  4531e4             xor     r12d, r12d  {0x0}
00030f69  55                 push    rbp {var_20}
00030f6a  53                 push    rbx {var_28}
00030f6b  4889fb             mov     rbx, rdi
00030f6e  4883ec10           sub     rsp, 0x10
00030f72  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00030f7b  4c896c2408         mov     qword [rsp+0x8 {var_30}], r13
00030f80  4989f5             mov     r13, rsi
00030f83  4889e5             mov     rbp, rsp {var_38}
00030f86  41c7450000000000   mov     dword [r13], 0x0
00030f8e  6690               nop     
00030f90  488b0549570100     mov     rax, qword [rel s_mp_prime_tab]
00030f97  4889ea             mov     rdx, rbp {var_38}
00030f9a  4889df             mov     rdi, rbx
00030f9d  4a8b3420           mov     rsi, qword [rax+r12]
00030fa1  e84a80ffff         call    mp_mod_d
{ Does not return }

00030fa6                    85 c0 0f 85 42 01 00 00 48 83 3c 24 00 0f 84 5f 01 00 00 48 8b 15 20 57 01 00        ....B...H.<$..._...H.. W..
00030fc0  48 89 df 4d 8d 74 24 08 4a 8b 74 22 08 48 89 ea e8 1b 80 ff ff 85 c0 0f 85 13 01 00 00 48 83 3c  H..M.t$.J.t".H...............H.<
00030fe0  24 00 0f 84 30 01 00 00 48 8b 0d f1 56 01 00 48 89 ea 48 89 df 4a 8b 74 21 10 e8 f1 7f ff ff 85  $...0...H...V..H..H..J.t!.......
00031000  c0 0f 85 e9 00 00 00 48 83 3c 24 00 0f 84 06 01 00 00 48 8b 35 c7 56 01 00 48 89 ea 48 89 df 4a  .......H.<$.......H.5.V..H..H..J
00031020  8b 74 26 18 e8 c7 7f ff ff 85 c0 0f 85 bf 00 00 00 48 83 3c 24 00 0f 84 dc 00 00 00 48 8b 3d 9d  .t&..............H.<$.......H.=.
00031040  56 01 00 48 89 ea 4a 8b 74 27 20 48 89 df e8 9d 7f ff ff 85 c0 0f 85 95 00 00 00 48 83 3c 24 00  V..H..J.t' H...............H.<$.
00031060  0f 84 b2 00 00 00 4c 8b 05 73 56 01 00 48 89 ea 48 89 df 4b 8b 74 30 20 e8 73 7f ff ff 85 c0 75  ......L..sV..H..H..K.t0 .s.....u
00031080  6f 48 83 3c 24 00 0f 84 8c 00 00 00 4c 8b 0d 4d 56 01 00 48 89 ea 48 89 df 4b 8b 74 31 28 e8 4d  oH.<$.......L..MV..H..H..K.t1(.M
000310a0  7f ff ff 85 c0 75 49 48 83 3c 24 00 74 6a 4c 8b 15 2b 56 01 00 48 89 ea 48 89 df 4b 8b 74 32 30  .....uIH.<$.tjL..+V..H..H..K.t20
000310c0  e8 2b 7f ff ff 85 c0 75 27 48 83 3c 24 00 74 48 4d 8d 66 38 49 81 fe c8 07 00 00 0f 85 af fe ff  .+.....u'H.<$.tHM.f8I...........
000310e0  ff 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 8b 54 24 08 64 48 2b 14 25 28 00 00 00 75 22  .ff...........@.H.T$.dH+.%(...u"
00031100  48 83 c4 10 5b 5d 41 5c 41 5d 41 5e e9 f8 55 fd ff 0f 1f 80 00 00 00 00 41 c7 45 00 01 00 00 00  H...[]A\A]A^..U.........A.E.....
00031120  eb ce e8 e9 40 fd ff 66 2e 0f 1f 84 00 00 00 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00  ....@..f.........f...........D..

00031140    void s_mp_reverse(char* arg1, int64_t arg2) __noreturn

00031140  4883ee01           sub     rsi, 0x1
00031144  7435               je      0x3117b

00031146  31c0               xor     eax, eax  {0x0}
00031148  66662e0f1f840000…  nop     word [rax+rax]
00031153  66662e0f1f840000…  nop     word [rax+rax]
0003115e  6690               nop     

00031160  0fb61407           movzx   edx, byte [rdi+rax]
00031164  0fb60c37           movzx   ecx, byte [rdi+rsi]
00031168  880c07             mov     byte [rdi+rax], cl
0003116b  4883c001           add     rax, 0x1
0003116f  881437             mov     byte [rdi+rsi], dl
00031172  4883ee01           sub     rsi, 0x1
00031176  4839f0             cmp     rax, rsi
00031179  72e5               jb      0x31160

0003117b  e98955fdff         jmp     __x86_return_thunk
{ Does not return }


00031180    void s_mp_sqr(int32_t* arg1) __noreturn

00031180  4157               push    r15 {var_8}
00031182  4156               push    r14 {var_10}
00031184  4155               push    r13 {var_18}
00031186  4154               push    r12 {var_20}
00031188  55                 push    rbp {var_28}
00031189  53                 push    rbx {var_30}
0003118a  4889fb             mov     rbx, rdi
0003118d  4883ec48           sub     rsp, 0x48
00031191  4889742408         mov     qword [rsp+0x8 {var_70}], rsi
00031196  4c8d642420         lea     r12, [rsp+0x20 {var_58}]
0003119b  644c8b3425280000…  mov     r14, qword [fs:0x28]
000311a4  4c89742438         mov     qword [rsp+0x38 {var_40}], r14
000311a9  448b37             mov     r14d, dword [rdi]
000311ac  4c89e7             mov     rdi, r12 {var_58}
000311af  438d6c3601         lea     ebp, [r14+r14+0x1]
000311b4  89ee               mov     esi, ebp
000311b6  e89577ffff         call    mp_init_size
{ Does not return }

000311bb                                                                                   41 89 c5 85 c0                             A....
000311c0  0f 85 9f 02 00 00 89 6c 24 20 45 85 f6 0f 8e 75 02 00 00 4c 8b 43 10 89 44 24 14 41 8d 6e fe 31  .......l$ E....u...L.C..D$.A.n.1
000311e0  db 4c 89 64 24 18 4c 8b 7c 24 30 45 31 c9 48 bf ff ff ff ff ff ff ff 0f 49 83 c0 08 0f 1f 40 00  .L.d$.L.|$0E1.H.........I.....@.
00031200  49 63 c1 49 8d 0c c7 49 8b 40 f8 48 f7 e0 48 03 01 48 89 c6 48 83 d2 00 48 21 fe 83 c3 01 48 89  Ic.I...I.@.H..H..H..H...H!....H.
00031220  31 48 89 c1 41 8d 41 01 4d 8b 60 f8 48 98 48 0f ac d1 3c 4d 8d 2c c7 41 39 de 0f 8e 9b 01 00 00  1H..A.A.M.`.H.H...<M.,.A9.......
00031240  89 ea 31 f6 4c 8d 1c d5 08 00 00 00 48 83 c2 01 83 e2 03 0f 84 af 00 00 00 48 83 fa 01 74 6c 48  ..1.L.......H............H...tlH
00031260  83 fa 02 74 32 49 8b 00 be 08 00 00 00 49 f7 e4 48 01 c0 48 11 d2 49 03 45 00 48 83 d2 00 48 01  ...t2I.......I..H..H..I.E.H...H.
00031280  c8 49 89 c2 48 83 d2 00 48 89 c1 49 21 fa 48 0f ac d1 3c 4d 89 55 00 49 8b 04 30 49 f7 e4 48 01  .I..H...H..I!.H...<M.U.I..0I..H.
000312a0  c0 48 11 d2 49 03 44 35 00 48 83 d2 00 48 01 c8 48 89 c1 48 83 d2 00 48 21 f9 49 89 4c 35 00 48  .H..I.D5.H...H..H..H...H!.I.L5.H
000312c0  89 c1 48 83 c6 08 48 0f ac d1 3c 49 8b 04 30 49 f7 e4 48 01 c0 48 11 d2 49 03 44 35 00 48 83 d2  ..H...H...<I..0I..H..H..I.D5.H..
000312e0  00 48 01 c8 49 89 c2 48 83 d2 00 48 89 c1 49 21 fa 48 0f ac d1 3c 4d 89 54 35 00 48 83 c6 08 49  .H..I..H...H..I!.H...<M.T5.H...I
00031300  39 f3 0f 84 d0 00 00 00 49 8b 04 30 49 f7 e4 48 01 c0 48 11 d2 49 03 44 35 00 48 83 d2 00 48 01  9.......I..0I..H..H..I.D5.H...H.
00031320  c8 49 89 c2 48 83 d2 00 48 89 c1 49 21 fa 48 0f ac d1 3c 4d 89 54 35 00 49 8b 44 30 08 49 f7 e4  .I..H...H..I!.H...<M.T5.I.D0.I..
00031340  48 01 c0 48 11 d2 49 03 44 35 08 48 83 d2 00 48 01 c8 49 89 c2 48 83 d2 00 48 89 c1 49 21 fa 48  H..H..I.D5.H...H..I..H...H..I!.H
00031360  0f ac d1 3c 4d 89 54 35 08 49 8b 44 30 10 49 f7 e4 48 01 c0 48 11 d2 49 03 44 35 10 48 83 d2 00  ...<M.T5.I.D0.I..H..H..I.D5.H...
00031380  48 01 c8 49 89 c2 48 83 d2 00 48 89 c1 49 21 fa 48 0f ac d1 3c 4d 89 54 35 10 49 8b 44 30 18 49  H..I..H...H..I!.H...<M.T5.I.D0.I
000313a0  f7 e4 48 01 c0 48 11 d2 49 03 44 35 18 48 83 d2 00 48 01 c8 49 89 c2 48 83 d2 00 48 89 c1 49 21  ..H..H..I.D5.H...H..I..H...H..I!
000313c0  fa 48 0f ac d1 3c 4d 89 54 35 18 48 83 c6 20 49 39 f3 0f 85 30 ff ff ff 4d 01 dd 41 89 dc 48 85  .H...<M.T5.H.. I9...0...M..A..H.
000313e0  c9 74 47 66 66 2e 0f 1f 84 00 00 00 00 00 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 80 00 00 00 00  .tGff.........ff................
00031400  49 8b 5d 00 45 31 db 49 83 c5 08 48 8d 14 0b 48 21 fa 48 01 d9 49 83 d3 00 49 89 55 f8 4c 0f ac  I.].E1.I...H...H!.H..I...I.U.L..
00031420  d9 3c 48 85 c9 75 d9 44 89 e3 41 83 c1 02 83 ed 01 49 83 c0 08 41 39 de 0f 85 c2 fd ff ff 44 8b  .<H..u.D..A......I...A9.......D.
00031440  6c 24 14 4c 8b 64 24 18 4c 89 e7 e8 60 51 ff ff 48 8b 74 24 08 4c 89 e7 e8 23 6a ff ff 4c 89 e7  l$.L.d$.L...`Q..H.t$.L...#j..L..
00031460  e8 bb 52 ff ff 48 8b 44 24 38 64 48 2b 04 25 28 00 00 00 75 16 48 83 c4 48 44 89 e8 5b 5d 41 5c  ..R..H.D$8dH+.%(...u.H..HD..[]A\
00031480  41 5d 41 5e 41 5f e9 7e 52 fd ff e8 80 3d fd ff                                                  A]A^A_.~R....=..

00031490    void s_mp_sqr_fast(int32_t* arg1, int32_t* arg2) __noreturn

00031490  4157               push    r15 {var_8}
00031492  4156               push    r14 {var_10}
00031494  4155               push    r13 {var_18}
00031496  4154               push    r12 {var_20}
00031498  55                 push    rbp {var_28}
00031499  53                 push    rbx {var_30}
0003149a  4889fb             mov     rbx, rdi
0003149d  4881ec38100000     sub     rsp, 0x1038
000314a4  8b07               mov     eax, dword [rdi]
000314a6  64488b2c25280000…  mov     rbp, qword [fs:0x28]
000314af  4889ac2428100000   mov     qword [rsp+0x1028 {var_40}], rbp
000314b7  4889f5             mov     rbp, rsi
000314ba  448d2c00           lea     r13d, [rax+rax]
000314be  89442404           mov     dword [rsp+0x4 {var_1064}], eax
000314c2  4489ee             mov     esi, r13d
000314c5  44396d04           cmp     dword [rbp+0x4], r13d
000314c9  0f8c0a040000       jl      0x318d9

000314cf  488b7d10           mov     rdi, qword [rbp+0x10]
000314d3  8b4d00             mov     ecx, dword [rbp]
000314d6  4585ed             test    r13d, r13d
000314d9  0f8e14040000       jle     0x318f3

000314df  448b442404         mov     r8d, dword [rsp+0x4 {var_1064}]
000314e4  48897c2408         mov     qword [rsp+0x8 {var_1060_1}], rdi
000314e9  4531c9             xor     r9d, r9d  {0x0}
000314ec  4531f6             xor     r14d, r14d  {0x0}
000314ef  89742410           mov     dword [rsp+0x10 {var_1058_1}], esi
000314f3  4c8b6310           mov     r12, qword [rbx+0x10]
000314f7  4531ff             xor     r15d, r15d  {0x0}
000314fa  4c8d542420         lea     r10, [rsp+0x20 {var_1048}]
000314ff  894c2414           mov     dword [rsp+0x14 {var_1054_1}], ecx
00031503  458d58ff           lea     r11d, [r8-0x1]
00031507  48896c2418         mov     qword [rsp+0x18 {var_1050_1}], rbp
0003150c  0f1f4000           nop     dword [rax]

00031510  4539cb             cmp     r11d, r9d
00031513  4489cd             mov     ebp, r9d
00031516  4489c8             mov     eax, r9d
00031519  8b5c2404           mov     ebx, dword [rsp+0x4 {var_1064}]
0003151d  410f4eeb           cmovle  ebp, r11d
00031521  4589c8             mov     r8d, r9d
00031524  29e8               sub     eax, ebp
00031526  4863cd             movsxd  rcx, ebp
00031529  4898               cdqe    
0003152b  498d3ccc           lea     rdi, [r12+rcx*8]
0003152f  498d34c4           lea     rsi, [r12+rax*8]
00031533  8d4501             lea     eax, [rbp+0x1]
00031536  4429cd             sub     ebp, r9d
00031539  8d541d00           lea     edx, [rbp+rbx]
0003153d  39c2               cmp     edx, eax
0003153f  0f4fd0             cmovg   edx, eax
00031542  01e8               add     eax, ebp
00031544  d1f8               sar     eax, 0x1
00031546  39d0               cmp     eax, edx
00031548  0f4fc2             cmovg   eax, edx
0003154b  85c0               test    eax, eax
0003154d  0f8e59010000       jle     0x316ac

00031553  4898               cdqe    
00031555  31c9               xor     ecx, ecx  {0x0}
00031557  31db               xor     ebx, ebx  {0x0}
00031559  488d2cc6           lea     rbp, [rsi+rax*8]
0003155d  488d04c5f8ffffff   lea     rax, [rax*8-0x8]
00031565  48c1e803           shr     rax, 0x3
00031569  4883c001           add     rax, 0x1
0003156d  83e007             and     eax, 0x7
00031570  0f84bb000000       je      0x31631

00031576  4883f801           cmp     rax, 0x1
0003157a  0f8496000000       je      0x31616

00031580  4883f802           cmp     rax, 0x2
00031584  747c               je      0x31602

00031586  4883f803           cmp     rax, 0x3
0003158a  7462               je      0x315ee

0003158c  4883f804           cmp     rax, 0x4
00031590  7448               je      0x315da

00031592  4883f805           cmp     rax, 0x5
00031596  742e               je      0x315c6

00031598  4883f806           cmp     rax, 0x6
0003159c  7414               je      0x315b2

0003159e  488b06             mov     rax, qword [rsi]
000315a1  48f727             mul     qword [rdi]
000315a4  4883c608           add     rsi, 0x8
000315a8  4883ef08           sub     rdi, 0x8
000315ac  4889c1             mov     rcx, rax
000315af  4889d3             mov     rbx, rdx

000315b2  488b06             mov     rax, qword [rsi]
000315b5  48f727             mul     qword [rdi]
000315b8  4883c608           add     rsi, 0x8
000315bc  4883ef08           sub     rdi, 0x8
000315c0  4801c1             add     rcx, rax
000315c3  4811d3             adc     rbx, rdx

000315c6  488b06             mov     rax, qword [rsi]
000315c9  48f727             mul     qword [rdi]
000315cc  4883c608           add     rsi, 0x8
000315d0  4883ef08           sub     rdi, 0x8
000315d4  4801c1             add     rcx, rax
000315d7  4811d3             adc     rbx, rdx

000315da  488b06             mov     rax, qword [rsi]
000315dd  48f727             mul     qword [rdi]
000315e0  4883c608           add     rsi, 0x8
000315e4  4883ef08           sub     rdi, 0x8
000315e8  4801c1             add     rcx, rax
000315eb  4811d3             adc     rbx, rdx

000315ee  488b06             mov     rax, qword [rsi]
000315f1  48f727             mul     qword [rdi]
000315f4  4883c608           add     rsi, 0x8
000315f8  4883ef08           sub     rdi, 0x8
000315fc  4801c1             add     rcx, rax
000315ff  4811d3             adc     rbx, rdx

00031602  488b06             mov     rax, qword [rsi]
00031605  48f727             mul     qword [rdi]
00031608  4883c608           add     rsi, 0x8
0003160c  4883ef08           sub     rdi, 0x8
00031610  4801c1             add     rcx, rax
00031613  4811d3             adc     rbx, rdx

00031616  4883c608           add     rsi, 0x8
0003161a  4883ef08           sub     rdi, 0x8

0003161e  488b46f8           mov     rax, qword [rsi-0x8]
00031622  48f76708           mul     qword [rdi+0x8]
00031626  4801c1             add     rcx, rax
00031629  4811d3             adc     rbx, rdx
0003162c  4839ee             cmp     rsi, rbp
0003162f  746f               je      0x316a0

00031631  488b06             mov     rax, qword [rsi]
00031634  48f727             mul     qword [rdi]
00031637  4801c1             add     rcx, rax
0003163a  488b4608           mov     rax, qword [rsi+0x8]
0003163e  4811d3             adc     rbx, rdx
00031641  48f767f8           mul     qword [rdi-0x8]
00031645  4801c1             add     rcx, rax
00031648  488b4610           mov     rax, qword [rsi+0x10]
0003164c  4811d3             adc     rbx, rdx
0003164f  48f767f0           mul     qword [rdi-0x10]
00031653  4801c1             add     rcx, rax
00031656  488b4618           mov     rax, qword [rsi+0x18]
0003165a  4811d3             adc     rbx, rdx
0003165d  48f767e8           mul     qword [rdi-0x18]
00031661  4801c1             add     rcx, rax
00031664  488b4620           mov     rax, qword [rsi+0x20]
00031668  4811d3             adc     rbx, rdx
0003166b  48f767e0           mul     qword [rdi-0x20]
0003166f  4801c1             add     rcx, rax
00031672  488b4628           mov     rax, qword [rsi+0x28]
00031676  4811d3             adc     rbx, rdx
00031679  48f767d8           mul     qword [rdi-0x28]
0003167d  4801c1             add     rcx, rax
00031680  488b4630           mov     rax, qword [rsi+0x30]
00031684  4811d3             adc     rbx, rdx
00031687  48f767d0           mul     qword [rdi-0x30]
0003168b  4801c1             add     rcx, rax
0003168e  4811d3             adc     rbx, rdx
00031691  4883c640           add     rsi, 0x40
00031695  4883ef40           sub     rdi, 0x40
00031699  eb83               jmp     0x3161e

0003169b                                                                                   0f 1f 44 00 00                             ..D..

000316a0  4801c9             add     rcx, rcx
000316a3  4811db             adc     rbx, rbx
000316a6  4901ce             add     r14, rcx
000316a9  4911df             adc     r15, rbx

000316ac  41f6c001           test    r8b, 0x1
000316b0  7514               jne     0x316c6

000316b2  4489c0             mov     eax, r8d
000316b5  d1f8               sar     eax, 0x1
000316b7  4898               cdqe    
000316b9  498b04c4           mov     rax, qword [r12+rax*8]
000316bd  48f7e0             mul     rax
000316c0  4901c6             add     r14, rax
000316c3  4911d7             adc     r15, rdx

000316c6  48beffffffffffff…  mov     rsi, 0xfffffffffffffff
000316d0  4c21f6             and     rsi, r14
000316d3  4d0facfe3c         shrd    r14, r15, 0x3c
000316d8  4b8934ca           mov     qword [r10+r9*8], rsi {var_1048}
000316dc  4983c101           add     r9, 0x1
000316e0  49c1ef3c           shr     r15, 0x3c
000316e4  4539cd             cmp     r13d, r9d
000316e7  0f8f23feffff       jg      0x31510

000316ed  4589e8             mov     r8d, r13d
000316f0  8b542410           mov     edx, dword [rsp+0x10 {var_1058_1}]
000316f4  488b6c2418         mov     rbp, qword [rsp+0x18 {var_1050_1}]
000316f9  4531db             xor     r11d, r11d  {0x0}
000316fc  41d1e8             shr     r8d, 0x1
000316ff  488b7c2408         mov     rdi, qword [rsp+0x8 {var_1060_1}]
00031704  8b4c2414           mov     ecx, dword [rsp+0x14 {var_1054_1}]
00031708  48bbffffffffffff…  mov     rbx, 0xfffffffffffffff
00031712  49c1e004           shl     r8, 0x4
00031716  66480f6ec3         movq    xmm0, rbx
0003171b  895500             mov     dword [rbp], edx
0003171e  4d8d48f0           lea     r9, [r8-0x10]
00031722  660f6cc0           punpcklqdq xmm0, xmm0
00031726  49c1e904           shr     r9, 0x4
0003172a  4983c101           add     r9, 0x1
0003172e  4183e107           and     r9d, 0x7
00031732  0f84b5000000       je      0x317ed

00031738  4983f901           cmp     r9, 0x1
0003173c  0f848f000000       je      0x317d1

00031742  4983f902           cmp     r9, 0x2
00031746  7476               je      0x317be

00031748  4983f903           cmp     r9, 0x3
0003174c  745d               je      0x317ab

0003174e  4983f904           cmp     r9, 0x4
00031752  7444               je      0x31798

00031754  4983f905           cmp     r9, 0x5
00031758  742b               je      0x31785

0003175a  4983f906           cmp     r9, 0x6
0003175e  7412               je      0x31772

00031760  66410f6f0a         movdqa  xmm1, xmmword [r10 {var_1048}]
00031765  41bb10000000       mov     r11d, 0x10
0003176b  660fdbc8           pand    xmm1, xmm0
0003176f  0f110f             movups  xmmword [rdi], xmm1

00031772  66430f6f141a       movdqa  xmm2, xmmword [r10+r11] {var_1048}
00031778  660fdbd0           pand    xmm2, xmm0
0003177c  420f11141f         movups  xmmword [rdi+r11], xmm2
00031781  4983c310           add     r11, 0x10

00031785  66430f6f1c1a       movdqa  xmm3, xmmword [r10+r11] {var_1048}
0003178b  660fdbd8           pand    xmm3, xmm0
0003178f  420f111c1f         movups  xmmword [rdi+r11], xmm3
00031794  4983c310           add     r11, 0x10

00031798  66430f6f241a       movdqa  xmm4, xmmword [r10+r11] {var_1048}
0003179e  660fdbe0           pand    xmm4, xmm0
000317a2  420f11241f         movups  xmmword [rdi+r11], xmm4
000317a7  4983c310           add     r11, 0x10

000317ab  66430f6f2c1a       movdqa  xmm5, xmmword [r10+r11] {var_1048}
000317b1  660fdbe8           pand    xmm5, xmm0
000317b5  420f112c1f         movups  xmmword [rdi+r11], xmm5
000317ba  4983c310           add     r11, 0x10

000317be  66430f6f341a       movdqa  xmm6, xmmword [r10+r11] {var_1048}
000317c4  660fdbf0           pand    xmm6, xmm0
000317c8  420f11341f         movups  xmmword [rdi+r11], xmm6
000317cd  4983c310           add     r11, 0x10

000317d1  66430f6f3c1a       movdqa  xmm7, xmmword [r10+r11] {var_1048}
000317d7  660fdbf8           pand    xmm7, xmm0
000317db  420f113c1f         movups  xmmword [rdi+r11], xmm7
000317e0  4983c310           add     r11, 0x10
000317e4  4d39c3             cmp     r11, r8
000317e7  0f849b000000       je      0x31888

000317ed  66470f6f041a       movdqa  xmm8, xmmword [r10+r11] {var_1048}
000317f3  66470f6f4c1a10     movdqa  xmm9, xmmword [r10+r11+0x10 {var_1038}]
000317fa  66470f6f541a20     movdqa  xmm10, xmmword [r10+r11+0x20 {var_1028}]
00031801  66470f6f5c1a30     movdqa  xmm11, xmmword [r10+r11+0x30 {var_1018}]
00031808  66470f6f641a40     movdqa  xmm12, xmmword [r10+r11+0x40 {var_1008}]
0003180f  66470f6f6c1a50     movdqa  xmm13, xmmword [r10+r11+0x50 {var_ff8}]
00031816  66440fdbc0         pand    xmm8, xmm0
0003181b  66440fdbc8         pand    xmm9, xmm0
00031820  66440fdbd0         pand    xmm10, xmm0
00031825  66440fdbd8         pand    xmm11, xmm0
0003182a  460f11041f         movups  xmmword [rdi+r11], xmm8
0003182f  66470f6f741a60     movdqa  xmm14, xmmword [r10+r11+0x60 {var_fe8}]
00031836  66440fdbe0         pand    xmm12, xmm0
0003183b  66470f6f7c1a70     movdqa  xmm15, xmmword [r10+r11+0x70 {var_fd8}]
00031842  66440fdbe8         pand    xmm13, xmm0
00031847  460f114c1f10       movups  xmmword [rdi+r11+0x10], xmm9
0003184d  66440fdbf0         pand    xmm14, xmm0
00031852  460f11541f20       movups  xmmword [rdi+r11+0x20], xmm10
00031858  66440fdbf8         pand    xmm15, xmm0
0003185d  460f115c1f30       movups  xmmword [rdi+r11+0x30], xmm11
00031863  460f11641f40       movups  xmmword [rdi+r11+0x40], xmm12
00031869  460f116c1f50       movups  xmmword [rdi+r11+0x50], xmm13
0003186f  460f11741f60       movups  xmmword [rdi+r11+0x60], xmm14
00031875  460f117c1f70       movups  xmmword [rdi+r11+0x70], xmm15
0003187b  4983eb80           sub     r11, 0xffffffffffffff80
0003187f  4d39c3             cmp     r11, r8
00031882  0f8565ffffff       jne     0x317ed

00031888  458d55ff           lea     r10d, [r13-0x1]
0003188c  4429e9             sub     ecx, r13d
0003188f  4a8d7cd708         lea     rdi, [rdi+r10*8+0x8]

00031894  85c9               test    ecx, ecx
00031896  7e0e               jle     0x318a6

00031898  4863d1             movsxd  rdx, ecx
0003189b  31f6               xor     esi, esi  {0x0}
0003189d  48c1e203           shl     rdx, 0x3
000318a1  e84a3afdff         call    memset

000318a6  4889ef             mov     rdi, rbp
000318a9  e8024dffff         call    mp_clamp
{ Does not return }


000318ae    void sub_318ae(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7) __noreturn

000318ae  31c0               xor     eax, eax  {0x0}
000318b0  488b942428100000   mov     rdx, qword [rsp+0x1028 {arg1}]
000318b8  64482b1425280000…  sub     rdx, qword [fs:0x28]
000318c1  7535               jne     0x318f8

000318c3  4881c438100000     add     rsp, 0x1038
000318ca  5b                 pop     rbx {arg2}
000318cb  5d                 pop     rbp {arg3}
000318cc  415c               pop     r12 {arg4}
000318ce  415d               pop     r13 {arg5}
000318d0  415e               pop     r14 {arg6}
000318d2  415f               pop     r15 {arg7}
000318d4  e9304efdff         jmp     __x86_return_thunk
{ Does not return }


{ Continuation of function s_mp_sqr_fast }

000318d9  4889ef             mov     rdi, rbp
000318dc  e80f6cffff         call    mp_grow
{ Does not return }

000318e1     85 c0 75 cb 8b 13 89 54 24 04 8d 34 12 e9 dc fb ff ff                                          ..u....T$..4......

000318f3  897500             mov     dword [rbp], esi
000318f6  eb9c               jmp     0x31894


{ Continuation of function sub_318ae }

000318f8  e81339fdff         call    __stack_chk_fail
{ Does not return }

000318fd                                                                                         0f 1f 00                               ...

00031900    void s_mp_sub(int32_t* arg1, int32_t* arg2, int32_t* arg3) __noreturn

00031900  4156               push    r14 {var_8}
00031902  4989f6             mov     r14, rsi
00031905  4155               push    r13 {var_10}
00031907  4989fd             mov     r13, rdi
0003190a  4154               push    r12 {var_18}
0003190c  55                 push    rbp {var_20}
0003190d  53                 push    rbx {var_28}
0003190e  4889d3             mov     rbx, rdx
00031911  8b2e               mov     ebp, dword [rsi]
00031913  448b27             mov     r12d, dword [rdi]
00031916  44396204           cmp     dword [rdx+0x4], r12d
0003191a  0f8c60040000       jl      0x31d80

00031920  448b0b             mov     r9d, dword [rbx]
00031923  498b5510           mov     rdx, qword [r13+0x10]
00031927  448923             mov     dword [rbx], r12d
0003192a  498b7610           mov     rsi, qword [r14+0x10]
0003192e  488b7b10           mov     rdi, qword [rbx+0x10]
00031932  85ed               test    ebp, ebp
00031934  0f8e66040000       jle     0x31da0

0003193a  4c63dd             movsxd  r11, ebp
0003193d  4531f6             xor     r14d, r14d  {0x0}
00031940  31c9               xor     ecx, ecx  {0x0}
00031942  49b8ffffffffffff…  mov     r8, 0xfffffffffffffff
0003194c  49c1e303           shl     r11, 0x3
00031950  4d8d53f8           lea     r10, [r11-0x8]
00031954  49c1ea03           shr     r10, 0x3
00031958  4983c201           add     r10, 0x1
0003195c  4183e207           and     r10d, 0x7
00031960  0f8400010000       je      0x31a66

00031966  4983fa01           cmp     r10, 0x1
0003196a  0f84d0000000       je      0x31a40

00031970  4983fa02           cmp     r10, 0x2
00031974  0f84a9000000       je      0x31a23

0003197a  4983fa03           cmp     r10, 0x3
0003197e  0f8482000000       je      0x31a06

00031984  4983fa04           cmp     r10, 0x4
00031988  745f               je      0x319e9

0003198a  4983fa05           cmp     r10, 0x5
0003198e  743c               je      0x319cc

00031990  4983fa06           cmp     r10, 0x6
00031994  7419               je      0x319af

00031996  488b02             mov     rax, qword [rdx]
00031999  482b06             sub     rax, qword [rsi]
0003199c  41be08000000       mov     r14d, 0x8
000319a2  4889c1             mov     rcx, rax
000319a5  4c21c0             and     rax, r8
000319a8  488907             mov     qword [rdi], rax
000319ab  48c1e93f           shr     rcx, 0x3f

000319af  4e8b2c32           mov     r13, qword [rdx+r14]
000319b3  4e2b2c36           sub     r13, qword [rsi+r14]
000319b7  4929cd             sub     r13, rcx
000319ba  4c89e9             mov     rcx, r13
000319bd  4d21c5             and     r13, r8
000319c0  4e892c37           mov     qword [rdi+r14], r13
000319c4  48c1e93f           shr     rcx, 0x3f
000319c8  4983c608           add     r14, 0x8

000319cc  4e8b1432           mov     r10, qword [rdx+r14]
000319d0  4e2b1436           sub     r10, qword [rsi+r14]
000319d4  4929ca             sub     r10, rcx
000319d7  4c89d1             mov     rcx, r10
000319da  4d21c2             and     r10, r8
000319dd  4e891437           mov     qword [rdi+r14], r10
000319e1  48c1e93f           shr     rcx, 0x3f
000319e5  4983c608           add     r14, 0x8

000319e9  4a8b0432           mov     rax, qword [rdx+r14]
000319ed  4a2b0436           sub     rax, qword [rsi+r14]
000319f1  4829c8             sub     rax, rcx
000319f4  4889c1             mov     rcx, rax
000319f7  4c21c0             and     rax, r8
000319fa  4a890437           mov     qword [rdi+r14], rax
000319fe  48c1e93f           shr     rcx, 0x3f
00031a02  4983c608           add     r14, 0x8

00031a06  4e8b2c32           mov     r13, qword [rdx+r14]
00031a0a  4e2b2c36           sub     r13, qword [rsi+r14]
00031a0e  4929cd             sub     r13, rcx
00031a11  4c89e9             mov     rcx, r13
00031a14  4d21c5             and     r13, r8
00031a17  4e892c37           mov     qword [rdi+r14], r13
00031a1b  48c1e93f           shr     rcx, 0x3f
00031a1f  4983c608           add     r14, 0x8

00031a23  4e8b1432           mov     r10, qword [rdx+r14]
00031a27  4e2b1436           sub     r10, qword [rsi+r14]
00031a2b  4929ca             sub     r10, rcx
00031a2e  4c89d1             mov     rcx, r10
00031a31  4d21c2             and     r10, r8
00031a34  4e891437           mov     qword [rdi+r14], r10
00031a38  48c1e93f           shr     rcx, 0x3f
00031a3c  4983c608           add     r14, 0x8

00031a40  4a8b0432           mov     rax, qword [rdx+r14]
00031a44  4a2b0436           sub     rax, qword [rsi+r14]
00031a48  4829c8             sub     rax, rcx
00031a4b  4889c1             mov     rcx, rax
00031a4e  4c21c0             and     rax, r8
00031a51  4a890437           mov     qword [rdi+r14], rax
00031a55  4983c608           add     r14, 0x8
00031a59  48c1e93f           shr     rcx, 0x3f
00031a5d  4d39de             cmp     r14, r11
00031a60  0f84ea000000       je      0x31b50

00031a66  4e8b1432           mov     r10, qword [rdx+r14]
00031a6a  4e2b1436           sub     r10, qword [rsi+r14]
00031a6e  4929ca             sub     r10, rcx
00031a71  4d89d5             mov     r13, r10
00031a74  4d21c2             and     r10, r8
00031a77  4e891437           mov     qword [rdi+r14], r10
00031a7b  49c1ed3f           shr     r13, 0x3f
00031a7f  4a8b443208         mov     rax, qword [rdx+r14+0x8]
00031a84  4a2b443608         sub     rax, qword [rsi+r14+0x8]
00031a89  4c29e8             sub     rax, r13
00031a8c  4989c2             mov     r10, rax
00031a8f  4c21c0             and     rax, r8
00031a92  4a89443708         mov     qword [rdi+r14+0x8], rax
00031a97  49c1ea3f           shr     r10, 0x3f
00031a9b  4a8b4c3210         mov     rcx, qword [rdx+r14+0x10]
00031aa0  4a2b4c3610         sub     rcx, qword [rsi+r14+0x10]
00031aa5  4c29d1             sub     rcx, r10
00031aa8  4989cd             mov     r13, rcx
00031aab  4c21c1             and     rcx, r8
00031aae  4a894c3710         mov     qword [rdi+r14+0x10], rcx
00031ab3  49c1ed3f           shr     r13, 0x3f
00031ab7  4a8b443218         mov     rax, qword [rdx+r14+0x18]
00031abc  4a2b443618         sub     rax, qword [rsi+r14+0x18]
00031ac1  4c29e8             sub     rax, r13
00031ac4  4989c2             mov     r10, rax
00031ac7  4c21c0             and     rax, r8
00031aca  4a89443718         mov     qword [rdi+r14+0x18], rax
00031acf  49c1ea3f           shr     r10, 0x3f
00031ad3  4a8b4c3220         mov     rcx, qword [rdx+r14+0x20]
00031ad8  4a2b4c3620         sub     rcx, qword [rsi+r14+0x20]
00031add  4c29d1             sub     rcx, r10
00031ae0  4989cd             mov     r13, rcx
00031ae3  4c21c1             and     rcx, r8
00031ae6  4a894c3720         mov     qword [rdi+r14+0x20], rcx
00031aeb  49c1ed3f           shr     r13, 0x3f
00031aef  4a8b443228         mov     rax, qword [rdx+r14+0x28]
00031af4  4a2b443628         sub     rax, qword [rsi+r14+0x28]
00031af9  4c29e8             sub     rax, r13
00031afc  4989c2             mov     r10, rax
00031aff  4c21c0             and     rax, r8
00031b02  4a89443728         mov     qword [rdi+r14+0x28], rax
00031b07  49c1ea3f           shr     r10, 0x3f
00031b0b  4a8b4c3230         mov     rcx, qword [rdx+r14+0x30]
00031b10  4a2b4c3630         sub     rcx, qword [rsi+r14+0x30]
00031b15  4c29d1             sub     rcx, r10
00031b18  4989cd             mov     r13, rcx
00031b1b  4c21c1             and     rcx, r8
00031b1e  4a894c3730         mov     qword [rdi+r14+0x30], rcx
00031b23  49c1ed3f           shr     r13, 0x3f
00031b27  4a8b443238         mov     rax, qword [rdx+r14+0x38]
00031b2c  4a2b443638         sub     rax, qword [rsi+r14+0x38]
00031b31  4c29e8             sub     rax, r13
00031b34  4889c1             mov     rcx, rax
00031b37  4c21c0             and     rax, r8
00031b3a  4a89443738         mov     qword [rdi+r14+0x38], rax
00031b3f  48c1e93f           shr     rcx, 0x3f
00031b43  4983c640           add     r14, 0x40
00031b47  4d39de             cmp     r14, r11
00031b4a  0f8516ffffff       jne     0x31a66

00031b50  8d75ff             lea     esi, [rbp-0x1]
00031b53  48c1e603           shl     rsi, 0x3
00031b57  488d7c3708         lea     rdi, [rdi+rsi+0x8]
00031b5c  488d543208         lea     rdx, [rdx+rsi+0x8]

00031b61  4139ec             cmp     r12d, ebp
00031b64  0f8ee0010000       jle     0x31d4a

00031b6a  49baffffffffffff…  mov     r10, 0xfffffffffffffff
00031b74  4589e6             mov     r14d, r12d
00031b77  4531ed             xor     r13d, r13d  {0x0}
00031b7a  4129ee             sub     r14d, ebp
00031b7d  49c1e603           shl     r14, 0x3
00031b81  4d8d5ef8           lea     r11, [r14-0x8]
00031b85  49c1eb03           shr     r11, 0x3
00031b89  4983c301           add     r11, 0x1
00031b8d  4183e307           and     r11d, 0x7
00031b91  0f84e4000000       je      0x31c7b

00031b97  4983fb01           cmp     r11, 0x1
00031b9b  0f84b8000000       je      0x31c59

00031ba1  4983fb02           cmp     r11, 0x2
00031ba5  0f8495000000       je      0x31c40

00031bab  4983fb03           cmp     r11, 0x3
00031baf  7476               je      0x31c27

00031bb1  4983fb04           cmp     r11, 0x4
00031bb5  7457               je      0x31c0e

00031bb7  4983fb05           cmp     r11, 0x5
00031bbb  7438               je      0x31bf5

00031bbd  4983fb06           cmp     r11, 0x6
00031bc1  7419               je      0x31bdc

00031bc3  4c8b02             mov     r8, qword [rdx]
00031bc6  41bd08000000       mov     r13d, 0x8
00031bcc  4929c8             sub     r8, rcx
00031bcf  4c89c1             mov     rcx, r8
00031bd2  4d21d0             and     r8, r10
00031bd5  4c8907             mov     qword [rdi], r8
00031bd8  48c1e93f           shr     rcx, 0x3f

00031bdc  4a8b042a           mov     rax, qword [rdx+r13]
00031be0  4829c8             sub     rax, rcx
00031be3  4889c1             mov     rcx, rax
00031be6  4c21d0             and     rax, r10
00031be9  4a89042f           mov     qword [rdi+r13], rax
00031bed  48c1e93f           shr     rcx, 0x3f
00031bf1  4983c508           add     r13, 0x8

00031bf5  4a8b342a           mov     rsi, qword [rdx+r13]
00031bf9  4829ce             sub     rsi, rcx
00031bfc  4889f1             mov     rcx, rsi
00031bff  4c21d6             and     rsi, r10
00031c02  4a89342f           mov     qword [rdi+r13], rsi
00031c06  48c1e93f           shr     rcx, 0x3f
00031c0a  4983c508           add     r13, 0x8

00031c0e  4e8b1c2a           mov     r11, qword [rdx+r13]
00031c12  4929cb             sub     r11, rcx
00031c15  4c89d9             mov     rcx, r11
00031c18  4d21d3             and     r11, r10
00031c1b  4e891c2f           mov     qword [rdi+r13], r11
00031c1f  48c1e93f           shr     rcx, 0x3f
00031c23  4983c508           add     r13, 0x8

00031c27  4e8b042a           mov     r8, qword [rdx+r13]
00031c2b  4929c8             sub     r8, rcx
00031c2e  4c89c1             mov     rcx, r8
00031c31  4d21d0             and     r8, r10
00031c34  4e89042f           mov     qword [rdi+r13], r8
00031c38  48c1e93f           shr     rcx, 0x3f
00031c3c  4983c508           add     r13, 0x8

00031c40  4a8b042a           mov     rax, qword [rdx+r13]
00031c44  4829c8             sub     rax, rcx
00031c47  4889c1             mov     rcx, rax
00031c4a  4c21d0             and     rax, r10
00031c4d  4a89042f           mov     qword [rdi+r13], rax
00031c51  48c1e93f           shr     rcx, 0x3f
00031c55  4983c508           add     r13, 0x8

00031c59  4a8b342a           mov     rsi, qword [rdx+r13]
00031c5d  4829ce             sub     rsi, rcx
00031c60  4889f1             mov     rcx, rsi
00031c63  4c21d6             and     rsi, r10
00031c66  4a89342f           mov     qword [rdi+r13], rsi
00031c6a  4983c508           add     r13, 0x8
00031c6e  48c1e93f           shr     rcx, 0x3f
00031c72  4d39ee             cmp     r14, r13
00031c75  0f84c3000000       je      0x31d3e

00031c7b  4e8b042a           mov     r8, qword [rdx+r13]
00031c7f  4929c8             sub     r8, rcx
00031c82  4d89c3             mov     r11, r8
00031c85  4d21d0             and     r8, r10
00031c88  4e89042f           mov     qword [rdi+r13], r8
00031c8c  4a8b4c2a08         mov     rcx, qword [rdx+r13+0x8]
00031c91  49c1eb3f           shr     r11, 0x3f
00031c95  4c29d9             sub     rcx, r11
00031c98  4889c8             mov     rax, rcx
00031c9b  4c21d1             and     rcx, r10
00031c9e  4a894c2f08         mov     qword [rdi+r13+0x8], rcx
00031ca3  4a8b742a10         mov     rsi, qword [rdx+r13+0x10]
00031ca8  48c1e83f           shr     rax, 0x3f
00031cac  4829c6             sub     rsi, rax
00031caf  4989f0             mov     r8, rsi
00031cb2  4c21d6             and     rsi, r10
00031cb5  4a89742f10         mov     qword [rdi+r13+0x10], rsi
00031cba  4e8b5c2a18         mov     r11, qword [rdx+r13+0x18]
00031cbf  49c1e83f           shr     r8, 0x3f
00031cc3  4d29c3             sub     r11, r8
00031cc6  4c89d8             mov     rax, r11
00031cc9  4d21d3             and     r11, r10
00031ccc  4e895c2f18         mov     qword [rdi+r13+0x18], r11
00031cd1  4a8b4c2a20         mov     rcx, qword [rdx+r13+0x20]
00031cd6  48c1e83f           shr     rax, 0x3f
00031cda  4829c1             sub     rcx, rax
00031cdd  4889ce             mov     rsi, rcx
00031ce0  4c21d1             and     rcx, r10
00031ce3  4a894c2f20         mov     qword [rdi+r13+0x20], rcx
00031ce8  4e8b5c2a28         mov     r11, qword [rdx+r13+0x28]
00031ced  48c1ee3f           shr     rsi, 0x3f
00031cf1  4929f3             sub     r11, rsi
00031cf4  4d89d8             mov     r8, r11
00031cf7  4d21d3             and     r11, r10
00031cfa  4e895c2f28         mov     qword [rdi+r13+0x28], r11
00031cff  4a8b442a30         mov     rax, qword [rdx+r13+0x30]
00031d04  49c1e83f           shr     r8, 0x3f
00031d08  4c29c0             sub     rax, r8
00031d0b  4889c1             mov     rcx, rax
00031d0e  4c21d0             and     rax, r10
00031d11  4a89442f30         mov     qword [rdi+r13+0x30], rax
00031d16  4a8b742a38         mov     rsi, qword [rdx+r13+0x38]
00031d1b  48c1e93f           shr     rcx, 0x3f
00031d1f  4829ce             sub     rsi, rcx
00031d22  4889f1             mov     rcx, rsi
00031d25  4c21d6             and     rsi, r10
00031d28  4a89742f38         mov     qword [rdi+r13+0x38], rsi
00031d2d  4983c540           add     r13, 0x40
00031d31  48c1e93f           shr     rcx, 0x3f
00031d35  4d39ee             cmp     r14, r13
00031d38  0f853dffffff       jne     0x31c7b

00031d3e  418d5424ff         lea     edx, [r12-0x1]
00031d43  29ea               sub     edx, ebp
00031d45  488d7cd708         lea     rdi, [rdi+rdx*8+0x8]

00031d4a  4529e1             sub     r9d, r12d
00031d4d  4585c9             test    r9d, r9d
00031d50  7e12               jle     0x31d64

00031d52  4963e9             movsxd  rbp, r9d
00031d55  31f6               xor     esi, esi  {0x0}
00031d57  488d14ed00000000   lea     rdx, [rbp*8]
00031d5f  e88c35fdff         call    memset

00031d64  4889df             mov     rdi, rbx
00031d67  e84448ffff         call    mp_clamp
{ Does not return }

00031d6c                                      5b 31 c0 5d 41 5c 41 5d 41 5e e9 8e 49 fd ff 0f 1f 44 00 00              [1.]A\A]A^..I....D..

00031d80  4489e6             mov     esi, r12d
00031d83  4889d7             mov     rdi, rdx
00031d86  e86567ffff         call    mp_grow
{ Does not return }

00031d8b                                   85 c0 0f 84 8d fb ff ff 5b 5d 41 5c 41 5d 41 5e e9 69 49 fd ff             ........[]A\A]A^.iI..

00031da0  31ed               xor     ebp, ebp  {0x0}
00031da2  31c9               xor     ecx, ecx  {0x0}
00031da4  e9b8fdffff         jmp     0x31b61

00031da9                             0f 1f 80 00 00 00 00                                                           .......

00031db0    void mp_abs(int32_t* arg1, int32_t* arg2) __noreturn

00031db0  53                 push    rbx {__saved_rbx}
00031db1  4889f3             mov     rbx, rsi
00031db4  4839f7             cmp     rdi, rsi
00031db7  7409               je      0x31dc2

00031db9  e8324fffff         call    mp_copy
{ Does not return }

00031dbe                                                                                            85 c0                                ..
00031dc0  75 09                                                                                            u.

00031dc2  c7430800000000     mov     dword [rbx+0x8], 0x0
00031dc9  31c0               xor     eax, eax  {0x0}
00031dcb  5b                 pop     rbx {__saved_rbx}
00031dcc  e93849fdff         jmp     __x86_return_thunk
{ Does not return }

00031dd1                                                     66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00                   f...........D..

00031de0    void mp_div_d(int32_t* arg1, int64_t arg2, int32_t* arg3, int64_t* arg4) __noreturn

00031de0  4157               push    r15 {__saved_r15}
00031de2  4156               push    r14 {__saved_r14}
00031de4  4155               push    r13 {__saved_r13}
00031de6  4154               push    r12 {__saved_r12}
00031de8  55                 push    rbp {__saved_rbp}
00031de9  53                 push    rbx {__saved_rbx}
00031dea  4883ec58           sub     rsp, 0x58
00031dee  64488b0425280000…  mov     rax, qword [fs:0x28]
00031df7  4889442448         mov     qword [rsp+0x48 {var_40}], rax
00031dfc  31c0               xor     eax, eax  {0x0}
00031dfe  4885f6             test    rsi, rsi
00031e01  0f841a030000       je      0x32121

00031e07  4989fd             mov     r13, rdi
00031e0a  4989f4             mov     r12, rsi
00031e0d  4989d3             mov     r11, rdx
00031e10  4889cb             mov     rbx, rcx
00031e13  4883fe01           cmp     rsi, 0x1
00031e17  7406               je      0x31e1f

00031e19  8b37               mov     esi, dword [rdi]
00031e1b  85f6               test    esi, esi
00031e1d  7549               jne     0x31e68

00031e1f  4885db             test    rbx, rbx
00031e22  7407               je      0x31e2b

00031e24  48c70300000000     mov     qword [rbx], 0x0

00031e2b  4d85db             test    r11, r11
00031e2e  0f849c020000       je      0x320d0

00031e34  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00031e39  64482b0425280000…  sub     rax, qword [fs:0x28]
00031e42  0f85e8020000       jne     0x32130

00031e48  4883c458           add     rsp, 0x58
00031e4c  4c89ef             mov     rdi, r13
00031e4f  4c89de             mov     rsi, r11
00031e52  5b                 pop     rbx {__saved_rbx}
00031e53  5d                 pop     rbp {__saved_rbp}
00031e54  415c               pop     r12 {__saved_r12}
00031e56  415d               pop     r13 {__saved_r13}
00031e58  415e               pop     r14 {__saved_r14}
00031e5a  415f               pop     r15 {__saved_r15}
00031e5c  e98f4effff         jmp     mp_copy
{ Does not return }

00031e61     0f 1f 80 00 00 00 00                                                                           .......

00031e68  498d4424ff         lea     rax, [r12-0x1]
00031e6d  4c85e0             test    rax, r12
00031e70  0f852a010000       jne     0x31fa0

00031e76  be01000000         mov     esi, 0x1
00031e7b  41be01000000       mov     r14d, 0x1
00031e81  4983fc02           cmp     r12, 0x2
00031e85  0f84b5000000       je      0x31f40

00031e8b  be02000000         mov     esi, 0x2
00031e90  4983fc04           cmp     r12, 0x4
00031e94  0f84a6000000       je      0x31f40

00031e9a  be03000000         mov     esi, 0x3
00031e9f  4983fc08           cmp     r12, 0x8
00031ea3  0f8497000000       je      0x31f40

00031ea9  be04000000         mov     esi, 0x4
00031eae  6690               nop     

00031eb0  4d89f2             mov     r10, r14  {0x1}
00031eb3  89f1               mov     ecx, esi
00031eb5  49d3e2             shl     r10, cl
00031eb8  4d39e2             cmp     r10, r12
00031ebb  0f847f000000       je      0x31f40

00031ec1  8d6e01             lea     ebp, [rsi+0x1]
00031ec4  4d89f7             mov     r15, r14  {0x1}
00031ec7  89e9               mov     ecx, ebp
00031ec9  89ee               mov     esi, ebp
00031ecb  49d3e7             shl     r15, cl
00031ece  4d39e7             cmp     r15, r12
00031ed1  746d               je      0x31f40

00031ed3  83c601             add     esi, 0x1
00031ed6  4c89f2             mov     rdx, r14  {0x1}
00031ed9  89f1               mov     ecx, esi
00031edb  48d3e2             shl     rdx, cl
00031ede  4c39e2             cmp     rdx, r12
00031ee1  745d               je      0x31f40

00031ee3  8d7502             lea     esi, [rbp+0x2]
00031ee6  4c89f0             mov     rax, r14  {0x1}
00031ee9  89f1               mov     ecx, esi
00031eeb  48d3e0             shl     rax, cl
00031eee  4c39e0             cmp     rax, r12
00031ef1  744d               je      0x31f40

00031ef3  8d7503             lea     esi, [rbp+0x3]
00031ef6  4d89f2             mov     r10, r14  {0x1}
00031ef9  89f1               mov     ecx, esi
00031efb  49d3e2             shl     r10, cl
00031efe  4d39e2             cmp     r10, r12
00031f01  743d               je      0x31f40

00031f03  8d7504             lea     esi, [rbp+0x4]
00031f06  4c89f7             mov     rdi, r14  {0x1}
00031f09  89f1               mov     ecx, esi
00031f0b  48d3e7             shl     rdi, cl
00031f0e  4c39e7             cmp     rdi, r12
00031f11  742d               je      0x31f40

00031f13  8d7505             lea     esi, [rbp+0x5]
00031f16  4c89f2             mov     rdx, r14  {0x1}
00031f19  89f1               mov     ecx, esi
00031f1b  48d3e2             shl     rdx, cl
00031f1e  4c39e2             cmp     rdx, r12
00031f21  741d               je      0x31f40

00031f23  8d7506             lea     esi, [rbp+0x6]
00031f26  4c89f0             mov     rax, r14  {0x1}
00031f29  89f1               mov     ecx, esi
00031f2b  48d3e0             shl     rax, cl
00031f2e  4c39e0             cmp     rax, r12
00031f31  740d               je      0x31f40

00031f33  8d7507             lea     esi, [rbp+0x7]
00031f36  83fd35             cmp     ebp, 0x35
00031f39  0f8571ffffff       jne     0x31eb0

00031f3f  90                 nop     

00031f40  4885db             test    rbx, rbx
00031f43  741a               je      0x31f5f

00031f45  4d8b6510           mov     r12, qword [r13+0x10]
00031f49  49c7c6ffffffff     mov     r14, 0xffffffffffffffff
00031f50  89f1               mov     ecx, esi
00031f52  49d3e6             shl     r14, cl
00031f55  49f7d6             not     r14
00031f58  4d233424           and     r14, qword [r12]
00031f5c  4c8933             mov     qword [rbx], r14

00031f5f  4d85db             test    r11, r11
00031f62  0f8468010000       je      0x320d0

00031f68  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
00031f6d  64482b0425280000…  sub     rax, qword [fs:0x28]
00031f76  0f85b4010000       jne     0x32130

00031f7c  4883c458           add     rsp, 0x58
00031f80  4c89ef             mov     rdi, r13
00031f83  31c9               xor     ecx, ecx  {0x0}
00031f85  4c89da             mov     rdx, r11
00031f88  5b                 pop     rbx {__saved_rbx}
00031f89  5d                 pop     rbp {__saved_rbp}
00031f8a  415c               pop     r12 {__saved_r12}
00031f8c  415d               pop     r13 {__saved_r13}
00031f8e  415e               pop     r14 {__saved_r14}
00031f90  415f               pop     r15 {__saved_r15}
00031f92  e9995bffff         jmp     mp_div_2d
{ Does not return }

00031f97                                                                       66 0f 1f 84 00 00 00 00 00                         f........

00031fa0  4983fc03           cmp     r12, 0x3
00031fa4  0f844e010000       je      0x320f8

00031faa  488d7c2430         lea     rdi, [rsp+0x30 {var_58}]
00031faf  4889542408         mov     qword [rsp+0x8 {var_80}], rdx
00031fb4  48897c2428         mov     qword [rsp+0x28 {var_60}], rdi {var_58}
00031fb9  e89269ffff         call    mp_init_size
{ Does not return }

00031fbe                                                                                            85 c0                                ..
00031fc0  0f 85 0c 01 00 00 41 8b 4d 00 41 8b 55 08 4c 8b 44 24 08 89 4c 24 30 83 e9 01 89 54 24 38 0f 88  ......A.M.A.U.L.D$..L$0....T$8..
00031fe0  44 01 00 00 48 63 e9 89 ce 4d 8b 5d 10 4c 8b 54 24 40 4c 8d 0c ed 00 00 00 00 48 29 f5 45 31 ed  D...Hc...M.].L.T$@L.......H).E1.
00032000  45 31 f6 48 c1 e5 03 45 31 ff eb 59 0f 1f 40 00 4c 89 f7 4c 89 fe 4c 89 e2 4c 89 e9 4c 89 44 24  E1.H...E1..Y..@.L..L..L..L..L.D$
00032020  20 4c 89 54 24 18 4c 89 4c 24 10 4c 89 5c 24 08 e8 cb 16 00 00 4c 8b 4c 24 10 4c 8b 54 24 18 49   L.T$.L.L$.L.\$......L.L$.L.T$.I
00032040  89 c0 49 f7 e4 4c 8b 5c 24 08 4f 89 04 0a 4c 8b 44 24 20 49 29 c6 49 19 d7 4c 39 cd 49 8d 51 f8  ..I..L.\$.O...L.D$ I).I..L9.I.Q.
00032060  74 34 49 89 d1 4b 8b 3c 0b 4d 0f a4 f7 3c 31 c0 49 c1 e6 3c 49 09 c7 49 09 fe 4c 89 f9 4d 39 e6  t4I..K.<.M...<1.I..<I..I..L..M9.
00032080  4c 19 e9 73 8b 4b c7 04 0a 00 00 00 00 49 8d 51 f8 4c 39 cd 75 cc 48 85 db 74 03 4c 89 33 4d 85  L..s.K.......I.Q.L9.u.H..t.L.3M.
000320a0  c0 4c 89 44 24 08 74 1a 48 8b 5c 24 28 48 89 df e8 fb 44 ff ff 48 8b 74 24 08 48 89 df e8 be 5d  .L.D$.t.H.\$(H....D..H.t$.H....]
000320c0  ff ff 48 8b 7c 24 28 e8 54 46 ff ff 0f 1f 40 00                                                  ..H.|$(.TF....@.

000320d0  31c0               xor     eax, eax  {0x0}

000320d2  488b542448         mov     rdx, qword [rsp+0x48 {var_40}]
000320d7  64482b1425280000…  sub     rdx, qword [fs:0x28]
000320e0  754e               jne     0x32130

000320e2  4883c458           add     rsp, 0x58
000320e6  5b                 pop     rbx {__saved_rbx}
000320e7  5d                 pop     rbp {__saved_rbp}
000320e8  415c               pop     r12 {__saved_r12}
000320ea  415d               pop     r13 {__saved_r13}
000320ec  415e               pop     r14 {__saved_r14}
000320ee  415f               pop     r15 {__saved_r15}
000320f0  e91446fdff         jmp     __x86_return_thunk
{ Does not return }

000320f5                                                                 0f 1f 00                                               ...

000320f8  488b442448         mov     rax, qword [rsp+0x48 {var_40}]
000320fd  64482b0425280000…  sub     rax, qword [fs:0x28]
00032106  7528               jne     0x32130

00032108  4883c458           add     rsp, 0x58
0003210c  4889ca             mov     rdx, rcx
0003210f  4c89de             mov     rsi, r11
00032112  5b                 pop     rbx {__saved_rbx}
00032113  5d                 pop     rbp {__saved_rbp}
00032114  415c               pop     r12 {__saved_r12}
00032116  415d               pop     r13 {__saved_r13}
00032118  415e               pop     r14 {__saved_r14}
0003211a  415f               pop     r15 {__saved_r15}
0003211c  e99f130000         jmp     mp_div_3
{ Does not return }

00032121  b8fdffffff         mov     eax, 0xfffffffd
00032126  ebaa               jmp     0x320d2

00032128                          45 31 f6 e9 66 ff ff ff                                                          E1..f...

00032130  e8db30fdff         call    __stack_chk_fail
{ Does not return }

00032135                                                                 66 2e 0f 1f 84 00 00 00 00 00 90                       f..........

00032140    void mp_dr_is_modulus(int32_t* arg1) __noreturn

00032140  8b17               mov     edx, dword [rdi]
00032142  31c0               xor     eax, eax  {0x0}
00032144  83fa01             cmp     edx, 0x1
00032147  0f8ee5000000       jle     0x32232

0003214d  488b7f10           mov     rdi, qword [rdi+0x10]
00032151  83ea02             sub     edx, 0x2
00032154  48b9ffffffffffff…  mov     rcx, 0xfffffffffffffff
0003215e  488d74d710         lea     rsi, [rdi+rdx*8+0x10]
00032163  488d4708           lea     rax, [rdi+0x8]
00032167  4989f0             mov     r8, rsi
0003216a  4929c0             sub     r8, rax
0003216d  4983e808           sub     r8, 0x8
00032171  49c1e803           shr     r8, 0x3
00032175  4983c001           add     r8, 0x1
00032179  4183e007           and     r8d, 0x7
0003217d  746c               je      0x321eb

0003217f  4983f801           cmp     r8, 0x1
00032183  7458               je      0x321dd

00032185  4983f802           cmp     r8, 0x2
00032189  7449               je      0x321d4

0003218b  4983f803           cmp     r8, 0x3
0003218f  743a               je      0x321cb

00032191  4983f804           cmp     r8, 0x4
00032195  742b               je      0x321c2

00032197  4983f805           cmp     r8, 0x5
0003219b  741c               je      0x321b9

0003219d  4983f806           cmp     r8, 0x6
000321a1  740d               je      0x321b0

000321a3  483908             cmp     qword [rax], rcx
000321a6  0f8584000000       jne     0x32230

000321ac  488d4710           lea     rax, [rdi+0x10]

000321b0  483908             cmp     qword [rax], rcx
000321b3  757b               jne     0x32230

000321b5  4883c008           add     rax, 0x8

000321b9  483908             cmp     qword [rax], rcx
000321bc  7572               jne     0x32230

000321be  4883c008           add     rax, 0x8

000321c2  483908             cmp     qword [rax], rcx
000321c5  7569               jne     0x32230

000321c7  4883c008           add     rax, 0x8

000321cb  483908             cmp     qword [rax], rcx
000321ce  7560               jne     0x32230

000321d0  4883c008           add     rax, 0x8

000321d4  483908             cmp     qword [rax], rcx
000321d7  7557               jne     0x32230

000321d9  4883c008           add     rax, 0x8

000321dd  483908             cmp     qword [rax], rcx
000321e0  754e               jne     0x32230

000321e2  4883c008           add     rax, 0x8
000321e6  4839f0             cmp     rax, rsi
000321e9  7438               je      0x32223

000321eb  483908             cmp     qword [rax], rcx
000321ee  7540               jne     0x32230

000321f0  48394808           cmp     qword [rax+0x8], rcx
000321f4  753a               jne     0x32230

000321f6  48394810           cmp     qword [rax+0x10], rcx
000321fa  7534               jne     0x32230

000321fc  48394818           cmp     qword [rax+0x18], rcx
00032200  752e               jne     0x32230

00032202  48394820           cmp     qword [rax+0x20], rcx
00032206  7528               jne     0x32230

00032208  48394828           cmp     qword [rax+0x28], rcx
0003220c  7522               jne     0x32230

0003220e  48394830           cmp     qword [rax+0x30], rcx
00032212  751c               jne     0x32230

00032214  48394838           cmp     qword [rax+0x38], rcx
00032218  7516               jne     0x32230

0003221a  4883c040           add     rax, 0x40
0003221e  4839f0             cmp     rax, rsi
00032221  75c8               jne     0x321eb

00032223  b801000000         mov     eax, 0x1
00032228  e9dc44fdff         jmp     __x86_return_thunk
{ Does not return }

0003222d                                         0f 1f 00                                                               ...

00032230  31c0               xor     eax, eax  {0x0}

00032232  e9d244fdff         jmp     __x86_return_thunk
{ Does not return }

00032237                                                                       66 0f 1f 84 00 00 00 00 00                         f........

00032240    void mp_dr_reduce(int32_t* arg1, int32_t* arg2, int64_t arg3) __noreturn

00032240  4157               push    r15 {var_8}
00032242  4156               push    r14 {var_10}
00032244  4155               push    r13 {var_18}
00032246  4989f5             mov     r13, rsi
00032249  4154               push    r12 {var_20}
0003224b  55                 push    rbp {var_28}
0003224c  4889fd             mov     rbp, rdi
0003224f  53                 push    rbx {var_30}
00032250  4883ec18           sub     rsp, 0x18
00032254  448b26             mov     r12d, dword [rsi]
00032257  4889542408         mov     qword [rsp+0x8 {var_40}], rdx
0003225c  438d3424           lea     esi, [r12+r12]
00032260  397704             cmp     dword [rdi+0x4], esi
00032263  0f8c20020000       jl      0x32489

00032269  4963c4             movsxd  rax, r12d
0003226c  418d5424ff         lea     edx, [r12-0x1]
00032271  48bbffffffffffff…  mov     rbx, 0xfffffffffffffff
0003227b  4c8d34c500000000   lea     r14, [rax*8]
00032283  4c8d3cd500000000   lea     r15, [rdx*8]
0003228b  0f1f440000         nop     dword [rax+rax]
00032290  4c8b5510           mov     r10, qword [rbp+0x10]
00032294  4f8d1c32           lea     r11, [r10+r14]
00032298  4585e4             test    r12d, r12d
0003229b  0f8ecf010000       jle     0x32470

000322a1  4d89d9             mov     r9, r11
000322a4  4c8b442408         mov     r8, qword [rsp+0x8 {var_40}]
000322a9  4c89de             mov     rsi, r11
000322ac  4c89d1             mov     rcx, r10
000322af  4d29d1             sub     r9, r10
000322b2  31ff               xor     edi, edi  {0x0}
000322b4  4983e908           sub     r9, 0x8
000322b8  49c1e903           shr     r9, 0x3
000322bc  4983c101           add     r9, 0x1
000322c0  4183e103           and     r9d, 0x3
000322c4  0f8497000000       je      0x32361

000322ca  4983f901           cmp     r9, 0x1
000322ce  745a               je      0x3232a

000322d0  4983f902           cmp     r9, 0x2
000322d4  7426               je      0x322fc

000322d6  498b03             mov     rax, qword [r11]
000322d9  498d7308           lea     rsi, [r11+0x8]
000322dd  498d4a08           lea     rcx, [r10+0x8]
000322e1  49f7e0             mul     r8
000322e4  490302             add     rax, qword [r10]
000322e7  4889c7             mov     rdi, rax
000322ea  4883d200           adc     rdx, 0x0
000322ee  4821df             and     rdi, rbx
000322f1  49893a             mov     qword [r10], rdi
000322f4  4889c7             mov     rdi, rax
000322f7  480facd73c         shrd    rdi, rdx, 0x3c

000322fc  488b06             mov     rax, qword [rsi]
000322ff  4883c608           add     rsi, 0x8
00032303  49f7e0             mul     r8
00032306  480301             add     rax, qword [rcx]
00032309  4883d200           adc     rdx, 0x0
0003230d  4801f8             add     rax, rdi
00032310  4989c1             mov     r9, rax
00032313  4883d200           adc     rdx, 0x0
00032317  4889c7             mov     rdi, rax
0003231a  4883c108           add     rcx, 0x8
0003231e  4921d9             and     r9, rbx
00032321  480facd73c         shrd    rdi, rdx, 0x3c
00032326  4c8949f8           mov     qword [rcx-0x8], r9

0003232a  488b06             mov     rax, qword [rsi]
0003232d  4883c608           add     rsi, 0x8
00032331  49f7e0             mul     r8
00032334  480301             add     rax, qword [rcx]
00032337  4883d200           adc     rdx, 0x0
0003233b  4801f8             add     rax, rdi
0003233e  4883d200           adc     rdx, 0x0
00032342  4883c108           add     rcx, 0x8

00032346  4889c7             mov     rdi, rax
00032349  4821df             and     rdi, rbx
0003234c  488979f8           mov     qword [rcx-0x8], rdi
00032350  4889c7             mov     rdi, rax
00032353  480facd73c         shrd    rdi, rdx, 0x3c
00032358  4939cb             cmp     r11, rcx
0003235b  0f849f000000       je      0x32400

00032361  488b06             mov     rax, qword [rsi]
00032364  49f7e0             mul     r8
00032367  480301             add     rax, qword [rcx]
0003236a  4883d200           adc     rdx, 0x0
0003236e  4801f8             add     rax, rdi
00032371  4989c1             mov     r9, rax
00032374  4883d200           adc     rdx, 0x0
00032378  4889c7             mov     rdi, rax
0003237b  4921d9             and     r9, rbx
0003237e  480facd73c         shrd    rdi, rdx, 0x3c
00032383  4c8909             mov     qword [rcx], r9
00032386  488b4608           mov     rax, qword [rsi+0x8]
0003238a  49f7e0             mul     r8
0003238d  48034108           add     rax, qword [rcx+0x8]
00032391  4883d200           adc     rdx, 0x0
00032395  4801f8             add     rax, rdi
00032398  4989c1             mov     r9, rax
0003239b  4883d200           adc     rdx, 0x0
0003239f  4889c7             mov     rdi, rax
000323a2  4921d9             and     r9, rbx
000323a5  480facd73c         shrd    rdi, rdx, 0x3c
000323aa  4c894908           mov     qword [rcx+0x8], r9
000323ae  488b4610           mov     rax, qword [rsi+0x10]
000323b2  49f7e0             mul     r8
000323b5  48034110           add     rax, qword [rcx+0x10]
000323b9  4883d200           adc     rdx, 0x0
000323bd  4801f8             add     rax, rdi
000323c0  4989c1             mov     r9, rax
000323c3  4883d200           adc     rdx, 0x0
000323c7  4883c620           add     rsi, 0x20
000323cb  4889c7             mov     rdi, rax
000323ce  4921d9             and     r9, rbx
000323d1  480facd73c         shrd    rdi, rdx, 0x3c
000323d6  4c894910           mov     qword [rcx+0x10], r9
000323da  488b46f8           mov     rax, qword [rsi-0x8]
000323de  49f7e0             mul     r8
000323e1  48034118           add     rax, qword [rcx+0x18]
000323e5  4883d200           adc     rdx, 0x0
000323e9  4801f8             add     rax, rdi
000323ec  4883d200           adc     rdx, 0x0
000323f0  4883c120           add     rcx, 0x20
000323f4  e94dffffff         jmp     0x32346

000323f9                                                                             0f 1f 80 00 00 00 00                           .......

00032400  4f8d543a08         lea     r10, [r10+r15+0x8]

00032405  4489e2             mov     edx, r12d
00032408  49893a             mov     qword [r10], rdi
0003240b  4d8d5a08           lea     r11, [r10+0x8]
0003240f  f7d2               not     edx
00032411  035500             add     edx, dword [rbp]
00032414  85d2               test    edx, edx
00032416  7e11               jle     0x32429

00032418  4863d2             movsxd  rdx, edx
0003241b  31f6               xor     esi, esi  {0x0}
0003241d  4c89df             mov     rdi, r11
00032420  48c1e203           shl     rdx, 0x3
00032424  e8c72efdff         call    memset

00032429  4889ef             mov     rdi, rbp
0003242c  e87f41ffff         call    mp_clamp
{ Does not return }

00032431                                                     4c 89 ee 48 89 ef e8 84 44 ff ff 83 f8 ff 74                   L..H....D.....t
00032440  33 48 89 ea 4c 89 ee 48 89 ef e8 b1 f4 ff ff 85 c0 0f 84 39 fe ff ff 48 83 c4 18 5b 5d 41 5c 41  3H..L..H...........9...H...[]A\A
00032460  5d 41 5e 41 5f e9 9f 42 fd ff 66 0f 1f 44 00 00                                                  ]A^A_..B..f..D..

00032470  31ff               xor     edi, edi  {0x0}
00032472  eb91               jmp     0x32405

00032474                                                              48 83 c4 18 31 c0 5b 5d 41 5c 41 5d                      H...1.[]A\A]
00032480  41 5e 41 5f e9 80 42 fd ff                                                                       A^A_..B..

00032489  e86260ffff         call    mp_grow
{ Does not return }

0003248e                                            85 c0 0f 84 d3 fd ff ff 48 83 c4 18 5b 5d 41 5c 41 5d                ........H...[]A\A]
000324a0  41 5e 41 5f e9 60 42 fd ff 0f 1f 80 00 00 00 00                                                  A^A_.`B.........

000324b0    void mp_dr_setup(void* arg1, int64_t* arg2) __noreturn

000324b0  48b8000000000000…  mov     rax, 0x1000000000000000
000324ba  488b5710           mov     rdx, qword [rdi+0x10]
000324be  482b02             sub     rax, qword [rdx]
000324c1  488906             mov     qword [rsi], rax
000324c4  e94042fdff         jmp     __x86_return_thunk
{ Does not return }

000324c9                             0f 1f 80 00 00 00 00                                                           .......

000324d0    void mp_init_set() __noreturn

000324d0  4154               push    r12 {var_8}
000324d2  4989f4             mov     r12, rsi
000324d5  55                 push    rbp {var_10}
000324d6  4889fd             mov     rbp, rdi
000324d9  53                 push    rbx {var_18}
000324da  e89160ffff         call    mp_init
{ Does not return }

000324df                                                                                               89                                 .
000324e0  c3 85 c0 75 0b 4c 89 e6 48 89 ef e8 00 95 ff ff 89 d8 5b 5d 41 5c e9 0e 42 fd ff 0f 1f 44 00 00  ...u.L..H.........[]A\..B....D..

00032500    void mp_is_square(int32_t* arg1, int32_t* arg2) __noreturn

00032500  4155               push    r13 {__saved_r13}
00032502  4154               push    r12 {__saved_r12}
00032504  55                 push    rbp {__saved_rbp}
00032505  53                 push    rbx {__saved_rbx}
00032506  4883ec38           sub     rsp, 0x38
0003250a  64488b0425280000…  mov     rax, qword [fs:0x28]
00032513  4889442428         mov     qword [rsp+0x28 {var_30}], rax
00032518  31c0               xor     eax, eax  {0x0}
0003251a  c70600000000       mov     dword [rsi], 0x0
00032520  837f0801           cmp     dword [rdi+0x8], 0x1
00032524  0f8466020000       je      0x32790

0003252a  8b07               mov     eax, dword [rdi]
0003252c  4889fb             mov     rbx, rdi
0003252f  85c0               test    eax, eax
00032531  747d               je      0x325b0

00032533  488b5710           mov     rdx, qword [rdi+0x10]
00032537  488d3d427e0000     lea     rdi, [rel rem_128]
0003253e  488b0a             mov     rcx, qword [rdx]
00032541  83e17f             and     ecx, 0x7f
00032544  803c0f01           cmp     byte [rdi+rcx], 0x1
00032548  7466               je      0x325b0

0003254a  4989f4             mov     r12, rsi
0003254d  488d542408         lea     rdx, [rsp+0x8 {var_50}]
00032552  be69000000         mov     esi, 0x69
00032557  4889df             mov     rdi, rbx
0003255a  e8916affff         call    mp_mod_d
{ Does not return }

0003255f                                                                                               89                                 .
00032560  c5 85 c0 75 4d 48 8b 6c 24 08 48 8d 35 8f 7d 00 00 80 3c 2e 01 74 39 4c 8d 6c 24 10 be e1 e7 ec  ...uMH.l$.H.5.}...<..t9L.l$.....
00032580  38 4c 89 ef e8 47 11 00 00 89 c5 85 c0 75 23 4c 89 ea 4c 89 ee 48 89 df e8 c3 68 ff ff 89 c5 85  8L...G.......u#L..L..H....h.....
000325a0  c0 74 3d 4c 89 ef e8 75 41 ff ff eb 05 0f 1f 00                                                  .t=L...uA.......

000325b0  31ed               xor     ebp, ebp  {0x0}

000325b2  488b442428         mov     rax, qword [rsp+0x28 {var_30}]
000325b7  64482b0425280000…  sub     rax, qword [fs:0x28]
000325c0  0f85d4010000       jne     0x3279a

000325c6  4883c438           add     rsp, 0x38
000325ca  89e8               mov     eax, ebp
000325cc  5b                 pop     rbx {__saved_rbx}
000325cd  5d                 pop     rbp {__saved_rbp}
000325ce  415c               pop     r12 {__saved_r12}
000325d0  415d               pop     r13 {__saved_r13}
000325d2  e93241fdff         jmp     __x86_return_thunk
{ Does not return }

000325d7                                                                       66 0f 1f 84 00 00 00 00 00                         f........
000325e0  4c 89 ef e8 a8 10 00 00 41 bb c4 05 00 00 41 89 c1 48 b8 a3 8b 2e ba e8 a2 8b 2e 49 f7 e1 4c 89  L.......A.....A..H.........I..L.
00032600  c9 48 b8 c5 4e ec c4 4e ec c4 4e 48 d1 ea 4c 8d 04 92 4e 8d 14 42 41 b8 e4 09 00 00 49 f7 e1 4c  .H..N..N..NH..L...N..BA.....I..L
00032620  29 d1 48 b8 f1 f0 f0 f0 f0 f0 f0 f0 49 d3 eb 4c 89 c9 48 c1 ea 02 48 8d 3c 52 48 8d 34 ba bf e8  ).H.........I..L..H...H.<RH.4...
00032640  5c 00 00 49 f7 e1 48 29 f1 48 b8 5f 43 79 0d e5 35 94 d7 49 d3 e8 4c 89 c9 4d 09 c3 49 89 d2 48  \..I..H).H._Cy..5..I..L..M..I..H
00032660  83 e2 f0 49 c1 ea 04 4c 01 d2 41 ba 0c f5 04 00 48 29 d1 49 f7 e1 48 b8 c9 42 16 b2 90 85 2c 64  ...I...L..A.....H).I..H..B....,d
00032680  48 d3 ef 4c 89 c9 49 09 fb 4c 89 cf 48 c1 ea 04 48 8d 34 d2 4c 8d 04 72 49 f7 e1 4c 29 c1 41 b8  H..L..I..L..H...H.4.L..rI..L).A.
000326a0  a0 cc 7a 00 48 b8 47 58 ee 69 84 e5 9e 46 49 d3 ea 4c 89 c9 4d 09 d3 48 29 d7 48 d1 ef 48 01 fa  ..z.H.GX.i...FI..L..M..H).H..H..
000326c0  bf 0c dd 2e 0c 48 c1 ea 04 48 8d 34 52 48 c1 e6 03 48 29 d6 48 29 f1 4c 89 ce 49 d3 e8 4c 89 c9  .....H...H.4RH...H).H).L..I..L..
000326e0  4d 09 d8 49 f7 e9 48 b8 11 42 08 21 84 10 42 08 49 89 d3 48 83 e2 f8 49 c1 fb 03 4c 29 da 4d 8d  M..I..H..B.!..B.I..H...I...L).M.
00032700  14 93 49 f7 e1 4c 29 d1 48 d3 ef 4c 89 c9 41 b9 48 b8 e2 6d 49 09 f8 48 29 d6 48 d1 ee 48 01 f2  ..I..L).H..L..A.H..mI..H).H..H..
00032720  48 c1 ea 04 49 89 d3 49 c1 e3 05 49 29 d3 4c 29 d9 49 d3 e9 4d 09 c8 41 83 e0 01 0f 85 62 fe ff  H...I..I...I).L).I..M..A.....b..
00032740  ff 4c 89 ee 48 89 df e8 84 05 00 00 89 c5 85 c0 0f 85 4d fe ff ff 4c 89 ee 4c 89 ef e8 af 93 ff  .L..H.............M...L..L......
00032760  ff 89 c5 85 c0 0f 85 38 fe ff ff 48 89 de 4c 89 ef e8 4a 41 ff ff 85 c0 0f 94 c3 44 0f b6 c3 45  .......8...H..L...JA.......D...E
00032780  89 04 24 e9 1b fe ff ff 0f 1f 84 00 00 00 00 00                                                  ..$.............

00032790  bdfdffffff         mov     ebp, 0xfffffffd
00032795  e918feffff         jmp     0x325b2

0003279a  e8712afdff         call    __stack_chk_fail
{ Does not return }

0003279f                                                                                               90                                 .

000327a0    void mp_reduce(int32_t* arg1, int32_t* arg2) __noreturn

000327a0  4157               push    r15 {var_8}
000327a2  4156               push    r14 {var_10}
000327a4  4155               push    r13 {var_18}
000327a6  4154               push    r12 {var_20}
000327a8  4989f4             mov     r12, rsi
000327ab  55                 push    rbp {var_28}
000327ac  4889fd             mov     rbp, rdi
000327af  53                 push    rbx {var_30}
000327b0  4883ec28           sub     rsp, 0x28
000327b4  448b36             mov     r14d, dword [rsi]
000327b7  4889fe             mov     rsi, rdi
000327ba  644c8b3c25280000…  mov     r15, qword [fs:0x28]
000327c3  4c897c2418         mov     qword [rsp+0x18 {var_40}], r15
000327c8  4989d7             mov     r15, rdx
000327cb  4889e7             mov     rdi, rsp {var_58}
000327ce  e8dd5dffff         call    mp_init_copy
{ Does not return }

000327d3                                                           89 c3 85 c0 74 2f 48 8b 44 24 18 64 48                     ....t/H.D$.dH
000327e0  2b 04 25 28 00 00 00 0f 85 3a 01 00 00 48 83 c4 28 89 d8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 07 3f  +.%(.....:...H..(..[]A\A]A^A_..?
00032800  fd ff 66 0f 1f 44 00 00 41 8d 76 ff 48 89 e7 49 89 e5 e8 19 8f ff ff 45 85 f6 78 4c 44 89 f1 48  ..f..D..A.v.H..I.......E..xLD..H
00032820  89 e2 4c 89 fe 48 89 e7 e8 23 06 00 00 89 c3 85 c0 75 24 41 83 c6 01 4c 89 ef 44 89 f6 e8 ee 8e  ..L..H...#.......u$A...L..D.....
00032840  ff ff 41 6b f6 3c 48 89 ea 48 89 ef e8 cf 66 ff ff 89 c3 85 c0 74 29 4c 89 ef e8 c1 3e ff ff e9  ..Ak.<H..H....f......t)L....>...
00032860  75 ff ff ff 0f 1f 40 00 48 89 e2 4c 89 fe 48 89 e7 e8 9a 6d ff ff 89 c3 85 c0 74 b7 eb d9 66 90  u.....@.H..L..H....m......t...f.
00032880  44 89 f1 4c 89 ea 4c 89 e6 4c 89 ef e8 5f e0 ff ff 89 c3 85 c0 75 c0 48 89 ea 4c 89 ee 48 89 ef  D..L..L..L..._.......u.H..L..H..
000328a0  e8 4b 93 ff ff 89 c3 85 c0 75 ac 31 f6 48 89 ef e8 db 3f ff ff 83 f8 ff 75 18 eb 2b 0f 1f 40 00  .K.......u.1.H....?.....u..+..@.
000328c0  48 89 ea 4c 89 e6 48 89 ef e8 32 f0 ff ff 85 c0 75 4e 4c 89 e6 48 89 ef e8 63 3f ff ff 83 f8 ff  H..L..H...2.....uNL..H...c?.....
000328e0  75 de e9 70 ff ff ff be 01 00 00 00 4c 89 ef e8 fc 90 ff ff 44 89 f6 4c 89 ef e8 51 62 ff ff 85  u..p........L.......D..L...Qb...
00032900  c0 75 1d 48 89 ea 4c 89 ee 48 89 ef e8 4f 38 ff ff 85 c0 74 bd 66 66 2e 0f 1f 84 00 00 00 00 00  .u.H..L..H...O8....t.ff.........
00032920  89 c3 e9 30 ff ff ff e8 e4 28 fd ff 0f 1f 40 00                                                  ...0.....(....@.

00032930    void mp_reduce_2k() __noreturn

00032930  4157               push    r15 {var_8}
00032932  4156               push    r14 {var_10}
00032934  4155               push    r13 {var_18}
00032936  4154               push    r12 {var_20}
00032938  4989f4             mov     r12, rsi
0003293b  55                 push    rbp {var_28}
0003293c  53                 push    rbx {var_30}
0003293d  4889fb             mov     rbx, rdi
00032940  4883ec28           sub     rsp, 0x28
00032944  644c8b3425280000…  mov     r14, qword [fs:0x28]
0003294d  4c89742418         mov     qword [rsp+0x18 {var_40}], r14
00032952  4989d6             mov     r14, rdx
00032955  4889e7             mov     rdi, rsp {var_58}
00032958  e8135cffff         call    mp_init
{ Does not return }

0003295d                                                                                         41 89 c7                               A..
00032960  85 c0 74 2c 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 0f 85 f3 00 00 00 48 83 c4 28 44 89 f8 5b  ..t,H.D$.dH+.%(.........H..(D..[
00032980  5d 41 5c 41 5d 41 5e 41 5f e9 7b 3d fd ff 66 90 4c 89 e7 48 89 e5 e8 45 46 ff ff 41 89 c5 49 83  ]A\A]A^A_.{=..f.L..H...EF..A..I.
000329a0  fe 01 75 52 e9 ab 00 00 00 0f 1f 80 00 00 00 00 48 89 ea 4c 89 f6 48 89 ef e8 12 72 ff ff 85 c0  ..uR............H..L..H....r....
000329c0  75 4e 48 89 da 48 89 ee 48 89 df e8 e0 9c ff ff 85 c0 75 3c 4c 89 e6 48 89 df e8 e1 3e ff ff 83  uNH..H..H.........u<L..H....>...
000329e0  f8 ff 74 2f 48 89 da 4c 89 e6 48 89 df e8 0e ef ff ff 85 c0 75 1a 48 89 d9 48 89 ea 44 89 ee 48  ..t/H..L..H.........u.H..H..D..H
00032a00  89 df e8 29 51 ff ff 85 c0 74 a5 0f 1f 44 00 00 41 89 c7 48 89 ef e8 05 3d ff ff e9 44 ff ff ff  ...)Q....t...D..A..H....=...D...
00032a20  48 89 da 48 89 ee 48 89 df e8 82 9c ff ff 85 c0 75 de 4c 89 e6 48 89 df e8 83 3e ff ff 83 f8 ff  H..H..H.........u.L..H....>.....
00032a40  74 d1 48 89 da 4c 89 e6 48 89 df e8 b0 ee ff ff 85 c0 75 bc 48 89 d9 48 89 ea 44 89 ee 48 89 df  t.H..L..H.........u.H..H..D..H..
00032a60  e8 cb 50 ff ff 85 c0 74 b7 eb a5 e8 a0 27 fd ff                                                  ..P....t.....'..

00032a70    void mp_reduce_2k_l() __noreturn

00032a70  4157               push    r15 {var_8}
00032a72  4156               push    r14 {var_10}
00032a74  4155               push    r13 {var_18}
00032a76  4989f5             mov     r13, rsi
00032a79  4154               push    r12 {var_20}
00032a7b  55                 push    rbp {var_28}
00032a7c  4889fd             mov     rbp, rdi
00032a7f  53                 push    rbx {var_30}
00032a80  4883ec28           sub     rsp, 0x28
00032a84  644c8b3425280000…  mov     r14, qword [fs:0x28]
00032a8d  4c89742418         mov     qword [rsp+0x18 {var_40}], r14
00032a92  4989d6             mov     r14, rdx
00032a95  4889e7             mov     rdi, rsp {var_58}
00032a98  e8d35affff         call    mp_init
{ Does not return }

00032a9d                                                                                         89 c3 85                               ...
00032aa0  c0 74 2d 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 0f 85 99 00 00 00 48 83 c4 28 89 d8 5b 5d 41  .t-H.D$.dH+.%(.........H..(..[]A
00032ac0  5c 41 5d 41 5e 41 5f e9 3d 3c fd ff 0f 1f 40 00 4c 89 ef 49 89 e4 e8 05 45 ff ff 41 89 c7 eb 4c  \A]A^A_.=<....@.L..I....E..A...L
00032ae0  4c 89 e2 4c 89 f6 4c 89 e7 e8 22 6b ff ff 89 c3 85 c0 75 4f 48 89 ea 4c 89 e6 48 89 ef e8 ae 9b  L..L..L..."k......uOH..L..H.....
00032b00  ff ff 89 c3 85 c0 75 3b 4c 89 ee 48 89 ef e8 ad 3d ff ff 83 f8 ff 74 2b 48 89 ea 4c 89 ee 48 89  ......u;L..H....=.....t+H..L..H.
00032b20  ef e8 da ed ff ff 89 c3 85 c0 75 17 48 89 e9 4c 89 e2 44 89 fe 48 89 ef e8 f3 4f ff ff 89 c3 85  ..........u.H..L..D..H....O.....
00032b40  c0 74 9d 4c 89 e7 e8 d5 3b ff ff e9 53 ff ff ff e8 bb 26 fd ff 66 2e 0f 1f 84 00 00 00 00 00 90  .t.L....;...S.....&..f..........

00032b60    void mp_reduce_2k_setup() __noreturn

00032b60  4155               push    r13 {var_8}
00032b62  4989fd             mov     r13, rdi
00032b65  4154               push    r12 {var_10}
00032b67  55                 push    rbp {var_18}
00032b68  53                 push    rbx {var_20}
00032b69  4883ec28           sub     rsp, 0x28
00032b6d  644c8b2425280000…  mov     r12, qword [fs:0x28]
00032b76  4c89642418         mov     qword [rsp+0x18 {var_30}], r12
00032b7b  4989f4             mov     r12, rsi
00032b7e  4889e7             mov     rdi, rsp {var_48}
00032b81  e8ea59ffff         call    mp_init
{ Does not return }

00032b86                    89 c3 85 c0 74 24 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 75 59 48 83 c4 28        ....t$H.D$.dH+.%(...uYH..(
00032ba0  89 d8 5b 5d 41 5c 41 5d e9 5c 3b fd ff 0f 1f 00 4c 89 ef 48 89 e5 e8 25 44 ff ff 48 89 e7 89 c6  ..[]A\A].\;.....L..H...%D..H....
00032bc0  e8 0b 35 ff ff 89 c3 85 c0 75 20 48 89 e2 4c 89 ee 48 89 e7 e8 27 ed ff ff 89 c3 85 c0 75 0c 48  ..5......u H..L..H...'.......u.H
00032be0  8b 44 24 10 48 8b 10 49 89 14 24 48 89 ef e8 2d 3b ff ff eb 97 e8 16 26 fd ff 66 0f 1f 44 00 00  .D$.H..I..$H...-;......&..f..D..

00032c00    void mp_reduce_2k_setup_l() __noreturn

00032c00  4155               push    r13 {var_8}
00032c02  4154               push    r12 {var_10}
00032c04  55                 push    rbp {var_18}
00032c05  4889fd             mov     rbp, rdi
00032c08  53                 push    rbx {var_20}
00032c09  4883ec28           sub     rsp, 0x28
00032c0d  644c8b2c25280000…  mov     r13, qword [fs:0x28]
00032c16  4c896c2418         mov     qword [rsp+0x18 {var_30}], r13
00032c1b  4989f5             mov     r13, rsi
00032c1e  4889e7             mov     rdi, rsp {var_48}
00032c21  e84a59ffff         call    mp_init
{ Does not return }

00032c26                    89 c3 85 c0 74 24 48 8b 44 24 18 64 48 2b 04 25 28 00 00 00 75 49 48 83 c4 28        ....t$H.D$.dH+.%(...uIH..(
00032c40  89 d8 5b 5d 41 5c 41 5d e9 bc 3a fd ff 0f 1f 00 48 89 ef 49 89 e4 e8 85 43 ff ff 48 89 e7 89 c6  ..[]A\A]..:.....H..I....C..H....
00032c60  e8 6b 34 ff ff 89 c3 85 c0 75 10 4c 89 ea 48 89 ee 48 89 e7 e8 87 ec ff ff 89 c3 4c 89 e7 e8 9d  .k4......u.L..H..H.........L....
00032c80  3a ff ff eb a7 e8 86 25 fd ff 66 0f 1f 44 00 00                                                  :......%..f..D..

00032c90    void mp_reduce_setup(int32_t* arg1, int32_t* arg2) __noreturn

00032c90  55                 push    rbp {var_8}
00032c91  4889f5             mov     rbp, rsi
00032c94  53                 push    rbx {var_10}
00032c95  4889fb             mov     rbx, rdi
00032c98  4883ec08           sub     rsp, 0x8
00032c9c  6b3678             imul    esi, dword [rsi], 0x78
00032c9f  e82c34ffff         call    mp_2expt
{ Does not return }

00032ca4              85 c0 74 10 48 83 c4 08 5b 5d e9 56 3a fd ff 0f 1f 44 00 00                              ..t.H...[].V:....D..

00032cb8    void sub_32cb8(int32_t* arg1 @ rbx, int32_t* arg2 @ rbp, int64_t arg3, int64_t arg4) __noreturn

00032cb8  4883c408           add     rsp, 0x8
00032cbc  4889da             mov     rdx, rbx
00032cbf  4889ee             mov     rsi, rbp
00032cc2  4889df             mov     rdi, rbx
00032cc5  31c9               xor     ecx, ecx  {0x0}
00032cc7  5b                 pop     rbx {arg3}
00032cc8  5d                 pop     rbp {arg4}
00032cc9  e94243ffff         jmp     mp_div
{ Does not return }

00032cce                                            66 90                                                                f.

00032cd0    void mp_sqrt(int32_t* arg1, int32_t* arg2) __noreturn

00032cd0  4156               push    r14 {__saved_r14}
00032cd2  4155               push    r13 {__saved_r13}
00032cd4  4154               push    r12 {__saved_r12}
00032cd6  55                 push    rbp {__saved_rbp}
00032cd7  53                 push    rbx {__saved_rbx}
00032cd8  4883ec40           sub     rsp, 0x40
00032cdc  64488b0425280000…  mov     rax, qword [fs:0x28]
00032ce5  4889442438         mov     qword [rsp+0x38 {var_30}], rax
00032cea  31c0               xor     eax, eax  {0x0}
00032cec  837f0801           cmp     dword [rdi+0x8], 0x1
00032cf0  0f8447010000       je      0x32e3d

00032cf6  8b1f               mov     ebx, dword [rdi]
00032cf8  4889fd             mov     rbp, rdi
00032cfb  4989f5             mov     r13, rsi
00032cfe  85db               test    ebx, ebx
00032d00  745e               je      0x32d60

00032d02  4889fe             mov     rsi, rdi
00032d05  4889e7             mov     rdi, rsp {var_68}
00032d08  4989e4             mov     r12, rsp {var_68}
00032d0b  e8a058ffff         call    mp_init_copy
{ Does not return }

00032d10                                                  89 c3 85 c0 74 2a                                                ....t*

00032d16  488b442438         mov     rax, qword [rsp+0x38 {var_30}]
00032d1b  64482b0425280000…  sub     rax, qword [fs:0x28]
00032d24  0f851d010000       jne     0x32e47

00032d2a  4883c440           add     rsp, 0x40
00032d2e  89d8               mov     eax, ebx
00032d30  5b                 pop     rbx {__saved_rbx}
00032d31  5d                 pop     rbp {__saved_rbp}
00032d32  415c               pop     r12 {__saved_r12}
00032d34  415d               pop     r13 {__saved_r13}
00032d36  415e               pop     r14 {__saved_r14}
00032d38  e9cc39fdff         jmp     __x86_return_thunk
{ Does not return }

00032d3d                                                                                         0f 1f 00                               ...
00032d40  4c 8d 74 24 20 4c 89 f7 e8 23 58 ff ff 89 c3 85 c0 74 1d 4c 89 e7 e8 c5 39 ff ff eb b9 0f 1f 00  L.t$ L...#X......t.L....9.......

00032d60  4889f7             mov     rdi, rsi
00032d63  e81899ffff         call    mp_zero
00032d68  ebac               jmp     0x32d16

00032d6a                                66 0f 1f 44 00 00                                                            f..D..

00032d70    void sub_32d70(int32_t* arg1 @ rbp) __noreturn

00032d70  8b0424             mov     eax, dword [rsp {__return_addr}]
00032d73  4889e7             mov     rdi, rsp {__return_addr}
00032d76  89c6               mov     esi, eax
00032d78  c1ee1f             shr     esi, 0x1f
00032d7b  01c6               add     esi, eax
00032d7d  d1fe               sar     esi, 0x1
00032d7f  e8ac89ffff         call    mp_rshd
00032d84  31c9               xor     ecx, ecx  {0x0}
00032d86  4c89f2             mov     rdx, r14
00032d89  4889e6             mov     rsi, rsp {__return_addr}
00032d8c  4889ef             mov     rdi, rbp
00032d8f  e87c42ffff         call    mp_div
{ Does not return }

00032d94                                                              89 c3 85 c0 75 14 48 89 e2 4c 89 f6                      ....u.H..L..
00032da0  48 89 e7 e8 b8 33 ff ff 89 c3 85 c0 74 1a 4c 89 f7 e8 6a 39 ff ff 4c 89 e7 e8 62 39 ff ff e9 53  H....3......t.L...j9..L...b9...S
00032dc0  ff ff ff 0f 1f 44 00 00 48 89 e6 48 89 e7 e8 9d 4a ff ff 89 c3 85 c0 74 3c eb d3 0f 1f 44 00 00  .....D..H..H....J......t<....D..
00032de0  4c 89 e2 4c 89 f6 4c 89 e7 e8 72 33 ff ff 89 c3 85 c0 75 ba 4c 89 e6 4c 89 e7 e8 71 4a ff ff 89  L..L..L...r3......u.L..L...qJ...
00032e00  c3 85 c0 75 a9 4c 89 f6 4c 89 e7 e8 b0 3a ff ff 83 f8 01 75 18 31 c9 4c 89 f2 4c 89 e6 48 89 ef  ...u.L..L....:.....u.1.L..L..H..
00032e20  e8 eb 41 ff ff 89 c3 85 c0 74 b5 eb 81 4c 89 ee 4c 89 e7 e8 48 50 ff ff e9 71 ff ff ff           ..A......t...L..L...HP...q...

{ Continuation of function mp_sqrt }

00032e3d  bbfdffffff         mov     ebx, 0xfffffffd
00032e42  e9cffeffff         jmp     0x32d16

00032e47  e8c423fdff         call    __stack_chk_fail
{ Does not return }

00032e4c                                      0f 1f 40 00                                                              ..@.

00032e50    void s_mp_mul_high_digs(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4) __noreturn

00032e50  4157               push    r15 {__saved_r15}
00032e52  4156               push    r14 {__saved_r14}
00032e54  4155               push    r13 {__saved_r13}
00032e56  4154               push    r12 {__saved_r12}
00032e58  55                 push    rbp {__saved_rbp}
00032e59  53                 push    rbx {__saved_rbx}
00032e5a  4883ec48           sub     rsp, 0x48
00032e5e  4889542408         mov     qword [rsp+0x8 {var_70}], rdx
00032e63  64488b0425280000…  mov     rax, qword [fs:0x28]
00032e6c  4889442438         mov     qword [rsp+0x38 {var_40}], rax
00032e71  31c0               xor     eax, eax  {0x0}
00032e73  85c9               test    ecx, ecx
00032e75  0f88b8020000       js      0x33133

00032e7b  8b07               mov     eax, dword [rdi]
00032e7d  8b16               mov     edx, dword [rsi]
00032e7f  4889f3             mov     rbx, rsi
00032e82  4989fc             mov     r12, rdi
00032e85  89cd               mov     ebp, ecx
00032e87  8d741001           lea     esi, [rax+rdx+0x1]
00032e8b  81feff010000       cmp     esi, 0x1ff
00032e91  7f10               jg      0x32ea3

00032e93  39d0               cmp     eax, edx
00032e95  0f4fc2             cmovg   eax, edx
00032e98  3dff000000         cmp     eax, 0xff
00032e9d  0f8e65020000       jle     0x33108

00032ea3  488d7c2420         lea     rdi, [rsp+0x20 {var_58}]
00032ea8  48897c2410         mov     qword [rsp+0x10 {var_68}], rdi {var_58}
00032ead  e89e5affff         call    mp_init_size
{ Does not return }

00032eb2                                                        41 89 c3 85 c0 0f 85 1a 02 00 00 4d 63 04                    A..........Mc.
00032ec0  24 44 8b 2b 43 8d 74 28 01 89 74 24 20 45 85 c0 0f 8e d7 01 00 00 4d 8b 64 24 10 48 63 fd 89 44  $D.+C.t(..t$ E........M.d$.Hc..D
00032ee0  24 1c 45 8d 75 ff 4c 8b 4c 24 30 48 c1 e7 03 4f 8d 14 c4 4c 89 14 24 49 01 f9 48 03 7b 10 48 bb  $.E.u.L.L$0H...O...L..$I..H.{.H.
00032f00  ff ff ff ff ff ff ff 0f 4d 8d 79 08 0f 1f 40 00 4d 8b 04 24 41 39 ed 0f 8e e3 01 00 00 45 89 eb  ........M.y...@.M..$A9.......E..
00032f20  31 c9 45 31 d2 41 29 eb 49 c1 e3 03 49 8d 43 f8 48 c1 e8 03 48 83 c0 01 83 e0 03 0f 84 90 00 00  1.E1.A).I...I.C.H...H...........
00032f40  00 48 83 f8 01 74 55 48 83 f8 02 74 23 48 8b 07 b9 08 00 00 00 49 f7 e0 49 03 01 48 89 c6 49 89  .H...tUH...t#H.......I..I..H..I.
00032f60  c2 48 83 d2 00 48 21 de 49 89 31 49 0f ac d2 3c 48 8b 04 0f 49 f7 e0 49 03 04 09 48 83 d2 00 4c  .H...H!.I.1I...<H...I..I...H...L
00032f80  01 d0 49 89 c2 48 83 d2 00 49 21 da 4d 89 14 09 49 89 c2 48 83 c1 08 49 0f ac d2 3c 48 8b 04 0f  ..I..H...I!.M...I..H...I...<H...
00032fa0  49 f7 e0 49 03 04 09 48 83 d2 00 4c 01 d0 48 89 c6 48 83 d2 00 49 89 c2 48 21 de 49 0f ac d2 3c  I..I...H...L..H..H...I..H!.I...<
00032fc0  49 89 34 09 48 83 c1 08 4c 39 d9 0f 84 b6 00 00 00 48 8b 04 0f 49 f7 e0 49 03 04 09 48 83 d2 00  I.4.H...L9.......H...I..I...H...
00032fe0  4c 01 d0 48 89 c6 48 83 d2 00 49 89 c2 48 21 de 49 0f ac d2 3c 49 89 34 09 48 8b 44 0f 08 49 f7  L..H..H...I..H!.I...<I.4.H.D..I.
00033000  e0 49 03 44 09 08 48 83 d2 00 4c 01 d0 48 89 c6 48 83 d2 00 49 89 c2 48 21 de 49 0f ac d2 3c 49  .I.D..H...L..H..H...I..H!.I...<I
00033020  89 74 09 08 48 8b 44 0f 10 49 f7 e0 49 03 44 09 10 48 83 d2 00 4c 01 d0 48 89 c6 48 83 d2 00 49  .t..H.D..I..I.D..H...L..H..H...I
00033040  89 c2 48 21 de 49 0f ac d2 3c 49 89 74 09 10 48 8b 44 0f 18 49 f7 e0 49 03 44 09 18 48 83 d2 00  ..H!.I...<I.t..H.D..I..I.D..H...
00033060  4c 01 d0 48 89 c6 48 83 d2 00 49 89 c2 48 21 de 49 0f ac d2 3c 49 89 74 09 18 48 83 c1 20 4c 39  L..H..H...I..H!.I...<I.t..H.. L9
00033080  d9 0f 85 4a ff ff ff 44 89 f2 29 ea 49 8d 0c d7 4c 89 11 49 83 c4 08 83 ed 01 48 83 ef 08 4c 39  ...J...D..).I...L..I......H...L9
000330a0  24 24 0f 85 68 fe ff ff 44 8b 5c 24 1c 48 8b 6c 24 10 44 89 1c 24 48 89 ef e8 f2 34 ff ff 48 8b  $$..h...D.\$.H.l$.D..$H....4..H.
000330c0  74 24 08 48 89 ef e8 b5 4d ff ff 48 89 ef e8 4d 36 ff ff 44 8b 1c 24                             t$.H....M..H...M6..D..$

000330d7  488b442438         mov     rax, qword [rsp+0x38 {var_40}]
000330dc  64482b0425280000…  sub     rax, qword [fs:0x28]
000330e5  7554               jne     0x3313b

000330e7  4883c448           add     rsp, 0x48
000330eb  4489d8             mov     eax, r11d  {0xfffffffd}
000330ee  5b                 pop     rbx {__saved_rbx}
000330ef  5d                 pop     rbp {__saved_rbp}
000330f0  415c               pop     r12 {__saved_r12}
000330f2  415d               pop     r13 {__saved_r13}
000330f4  415e               pop     r14 {__saved_r14}
000330f6  415f               pop     r15 {__saved_r15}
000330f8  e90c36fdff         jmp     __x86_return_thunk
{ Does not return }

000330fd                                                                                         0f 1f 00                               ...
00033100  4c 89 c9 45 31 d2 eb 88                                                                          L..E1...

00033108  488b442438         mov     rax, qword [rsp+0x38 {var_40}]
0003310d  64482b0425280000…  sub     rax, qword [fs:0x28]
00033116  7523               jne     0x3313b

00033118  488b542408         mov     rdx, qword [rsp+0x8 {var_70}]
0003311d  4883c448           add     rsp, 0x48
00033121  4889de             mov     rsi, rbx
00033124  5b                 pop     rbx {__saved_rbx}
00033125  5d                 pop     rbp {__saved_rbp}
00033126  415c               pop     r12 {__saved_r12}
00033128  415d               pop     r13 {__saved_r13}
0003312a  415e               pop     r14 {__saved_r14}
0003312c  415f               pop     r15 {__saved_r15}
0003312e  e90d000000         jmp     s_mp_mul_high_digs_fast
{ Does not return }

00033133  41bbfdffffff       mov     r11d, 0xfffffffd
00033139  eb9c               jmp     0x330d7

0003313b  e8d020fdff         call    __stack_chk_fail
{ Does not return }


00033140    void s_mp_mul_high_digs_fast(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4) __noreturn

00033140  4157               push    r15 {__saved_r15}
00033142  4156               push    r14 {__saved_r14}
00033144  4155               push    r13 {__saved_r13}
00033146  4154               push    r12 {__saved_r12}
00033148  55                 push    rbp {__saved_rbp}
00033149  53                 push    rbx {__saved_rbx}
0003314a  4881ec48100000     sub     rsp, 0x1048
00033151  64488b0425280000…  mov     rax, qword [fs:0x28]
0003315a  4889842438100000   mov     qword [rsp+0x1038 {var_40}], rax
00033162  31c0               xor     eax, eax  {0x0}
00033164  85c9               test    ecx, ecx
00033166  0f881e030000       js      0x3348a

0003316c  448b17             mov     r10d, dword [rdi]
0003316f  4889d5             mov     rbp, rdx
00033172  8b16               mov     edx, dword [rsi]
00033174  4989fc             mov     r12, rdi
00033177  4889f3             mov     rbx, rsi
0003317a  4189c8             mov     r8d, ecx
0003317d  458d2c12           lea     r13d, [r10+rdx]
00033181  44396d04           cmp     dword [rbp+0x4], r13d
00033185  0f8ccc020000       jl      0x33457

0003318b  488b4d10           mov     rcx, qword [rbp+0x10]
0003318f  8b7d00             mov     edi, dword [rbp]
00033192  4963c0             movsxd  rax, r8d
00033195  48c1e003           shl     rax, 0x3
00033199  897c2428           mov     dword [rsp+0x28 {var_1050}], edi
0003319d  4801c1             add     rcx, rax
000331a0  4539e8             cmp     r8d, r13d
000331a3  0f8dd5020000       jge     0x3347e

000331a9  4d8b5c2410         mov     r11, qword [r12+0x10]
000331ae  48894c2418         mov     qword [rsp+0x18 {var_1060_1}], rcx
000331b3  448d62ff           lea     r12d, [rdx-0x1]
000331b7  31f6               xor     esi, esi  {0x0}
000331b9  448944242c         mov     dword [rsp+0x2c {var_104c_1}], r8d
000331be  4c8b7310           mov     r14, qword [rbx+0x10]
000331c2  488d5c0430         lea     rbx, [rsp+rax+0x30] {var_1078}
000331c7  31ff               xor     edi, edi  {0x0}
000331c9  48895c2410         mov     qword [rsp+0x10 {var_1068_1}], rbx
000331ce  4589c1             mov     r9d, r8d
000331d1  49bfffffffffffff…  mov     r15, 0xfffffffffffffff
000331db  48896c2420         mov     qword [rsp+0x20 {var_1058_1}], rbp
000331e0  4489d5             mov     ebp, r10d
000331e3  4989da             mov     r10, rbx
000331e6  4c89db             mov     rbx, r11
000331e9  0f1f8000000000     nop     dword [rax]

000331f0  4539e1             cmp     r9d, r12d
000331f3  4489e2             mov     edx, r12d
000331f6  4489c8             mov     eax, r9d
000331f9  410f4ed1           cmovle  edx, r9d
000331fd  29d0               sub     eax, edx
000331ff  4c63c2             movsxd  r8, edx
00033202  4898               cdqe    
00033204  4f8d04c6           lea     r8, [r14+r8*8]
00033208  488d0cc3           lea     rcx, [rbx+rax*8]
0003320c  89d0               mov     eax, edx
0003320e  83c201             add     edx, 0x1
00033211  4429c8             sub     eax, r9d
00033214  01e8               add     eax, ebp
00033216  39d0               cmp     eax, edx
00033218  0f4fc2             cmovg   eax, edx
0003321b  85c0               test    eax, eax
0003321d  0f8e89010000       jle     0x333ac

00033223  4898               cdqe    
00033225  488d14c5f8ffffff   lea     rdx, [rax*8-0x8]
0003322d  4c8d1cc1           lea     r11, [rcx+rax*8]
00033231  48c1ea03           shr     rdx, 0x3
00033235  4883c201           add     rdx, 0x1
00033239  83e207             and     edx, 0x7
0003323c  0f84be000000       je      0x33300

00033242  4883fa01           cmp     rdx, 0x1
00033246  0f8496000000       je      0x332e2

0003324c  4883fa02           cmp     rdx, 0x2
00033250  747c               je      0x332ce

00033252  4883fa03           cmp     rdx, 0x3
00033256  7462               je      0x332ba

00033258  4883fa04           cmp     rdx, 0x4
0003325c  7448               je      0x332a6

0003325e  4883fa05           cmp     rdx, 0x5
00033262  742e               je      0x33292

00033264  4883fa06           cmp     rdx, 0x6
00033268  7414               je      0x3327e

0003326a  488b01             mov     rax, qword [rcx]
0003326d  49f720             mul     qword [r8]
00033270  4883c108           add     rcx, 0x8
00033274  4983e808           sub     r8, 0x8
00033278  4801c6             add     rsi, rax
0003327b  4811d7             adc     rdi, rdx

0003327e  488b01             mov     rax, qword [rcx]
00033281  49f720             mul     qword [r8]
00033284  4883c108           add     rcx, 0x8
00033288  4983e808           sub     r8, 0x8
0003328c  4801c6             add     rsi, rax
0003328f  4811d7             adc     rdi, rdx

00033292  488b01             mov     rax, qword [rcx]
00033295  49f720             mul     qword [r8]
00033298  4883c108           add     rcx, 0x8
0003329c  4983e808           sub     r8, 0x8
000332a0  4801c6             add     rsi, rax
000332a3  4811d7             adc     rdi, rdx

000332a6  488b01             mov     rax, qword [rcx]
000332a9  49f720             mul     qword [r8]
000332ac  4883c108           add     rcx, 0x8
000332b0  4983e808           sub     r8, 0x8
000332b4  4801c6             add     rsi, rax
000332b7  4811d7             adc     rdi, rdx

000332ba  488b01             mov     rax, qword [rcx]
000332bd  49f720             mul     qword [r8]
000332c0  4883c108           add     rcx, 0x8
000332c4  4983e808           sub     r8, 0x8
000332c8  4801c6             add     rsi, rax
000332cb  4811d7             adc     rdi, rdx

000332ce  488b01             mov     rax, qword [rcx]
000332d1  49f720             mul     qword [r8]
000332d4  4883c108           add     rcx, 0x8
000332d8  4983e808           sub     r8, 0x8
000332dc  4801c6             add     rsi, rax
000332df  4811d7             adc     rdi, rdx

000332e2  4983e808           sub     r8, 0x8
000332e6  488b01             mov     rax, qword [rcx]
000332e9  4883c108           add     rcx, 0x8
000332ed  49f76008           mul     qword [r8+0x8]
000332f1  4801c6             add     rsi, rax
000332f4  4811d7             adc     rdi, rdx
000332f7  4939cb             cmp     r11, rcx
000332fa  0f84ac000000       je      0x333ac

00033300  896c2404           mov     dword [rsp+0x4 {var_1074_1}], ebp
00033304  4489cd             mov     ebp, r9d
00033307  4d89d9             mov     r9, r11
0003330a  48895c2408         mov     qword [rsp+0x8 {var_1070_1}], rbx
0003330f  4c89d3             mov     rbx, r10

00033312  488b01             mov     rax, qword [rcx]
00033315  49f720             mul     qword [r8]
00033318  4801c6             add     rsi, rax
0003331b  488b4108           mov     rax, qword [rcx+0x8]
0003331f  4811d7             adc     rdi, rdx
00033322  49f760f8           mul     qword [r8-0x8]
00033326  4801c6             add     rsi, rax
00033329  488b4110           mov     rax, qword [rcx+0x10]
0003332d  4811d7             adc     rdi, rdx
00033330  49f760f0           mul     qword [r8-0x10]
00033334  4989f2             mov     r10, rsi
00033337  4989fb             mov     r11, rdi
0003333a  4901c2             add     r10, rax
0003333d  488b4118           mov     rax, qword [rcx+0x18]
00033341  4911d3             adc     r11, rdx
00033344  49f760e8           mul     qword [r8-0x18]
00033348  4901c2             add     r10, rax
0003334b  488b4120           mov     rax, qword [rcx+0x20]
0003334f  4911d3             adc     r11, rdx
00033352  49f760e0           mul     qword [r8-0x20]
00033356  4901c2             add     r10, rax
00033359  488b4128           mov     rax, qword [rcx+0x28]
0003335d  4911d3             adc     r11, rdx
00033360  49f760d8           mul     qword [r8-0x28]
00033364  4901c2             add     r10, rax
00033367  488b4130           mov     rax, qword [rcx+0x30]
0003336b  4911d3             adc     r11, rdx
0003336e  49f760d0           mul     qword [r8-0x30]
00033372  4889c6             mov     rsi, rax
00033375  4889d7             mov     rdi, rdx
00033378  4c01d6             add     rsi, r10
0003337b  4c11df             adc     rdi, r11
0003337e  4983e840           sub     r8, 0x40
00033382  488b4138           mov     rax, qword [rcx+0x38]
00033386  4883c140           add     rcx, 0x40
0003338a  49f76008           mul     qword [r8+0x8]
0003338e  4801c6             add     rsi, rax
00033391  4811d7             adc     rdi, rdx
00033394  4939c9             cmp     r9, rcx
00033397  0f8575ffffff       jne     0x33312

0003339d  4189e9             mov     r9d, ebp
000333a0  4989da             mov     r10, rbx
000333a3  8b6c2404           mov     ebp, dword [rsp+0x4 {var_1074_1}]
000333a7  488b5c2408         mov     rbx, qword [rsp+0x8 {var_1070_1}]

000333ac  4889f1             mov     rcx, rsi
000333af  4183c101           add     r9d, 0x1
000333b3  480facfe3c         shrd    rsi, rdi, 0x3c
000333b8  4983c208           add     r10, 0x8
000333bc  4c21f9             and     rcx, r15
000333bf  48c1ef3c           shr     rdi, 0x3c
000333c3  49894af8           mov     qword [r10-0x8], rcx
000333c7  4539e9             cmp     r9d, r13d
000333ca  0f8520feffff       jne     0x331f0

000333d0  488b6c2420         mov     rbp, qword [rsp+0x20 {var_1058_1}]
000333d5  448b74242c         mov     r14d, dword [rsp+0x2c {var_104c_1}]
000333da  4589ec             mov     r12d, r13d
000333dd  488b7c2418         mov     rdi, qword [rsp+0x18 {var_1060_1}]
000333e2  488b742410         mov     rsi, qword [rsp+0x10 {var_1068_1}]
000333e7  44896d00           mov     dword [rbp], r13d
000333eb  4529f4             sub     r12d, r14d
000333ee  458d7c24ff         lea     r15d, [r12-0x1]
000333f3  4a8d14fd08000000   lea     rdx, [r15*8+0x8]
000333fb  e89020fdff         call    memcpy
00033400  4a8d4cf808         lea     rcx, [rax+r15*8+0x8]

00033405  8b442428           mov     eax, dword [rsp+0x28 {var_1050}]
00033409  4429e8             sub     eax, r13d
0003340c  85c0               test    eax, eax
0003340e  7e14               jle     0x33424

00033410  4898               cdqe    
00033412  31f6               xor     esi, esi  {0x0}
00033414  4889cf             mov     rdi, rcx
00033417  488d14c500000000   lea     rdx, [rax*8]
0003341f  e8cc1efdff         call    memset

00033424  4889ef             mov     rdi, rbp
00033427  e88431ffff         call    mp_clamp
{ Does not return }

0003342c                                      31 c0                                                                    1.

0003342e  488b942438100000   mov     rdx, qword [rsp+0x1038 {var_40}]
00033436  64482b1425280000…  sub     rdx, qword [fs:0x28]
0003343f  7550               jne     0x33491

00033441  4881c448100000     add     rsp, 0x1048
00033448  5b                 pop     rbx {__saved_rbx}
00033449  5d                 pop     rbp {__saved_rbp}
0003344a  415c               pop     r12 {__saved_r12}
0003344c  415d               pop     r13 {__saved_r13}
0003344e  415e               pop     r14 {__saved_r14}
00033450  415f               pop     r15 {__saved_r15}
00033452  e9b232fdff         jmp     __x86_return_thunk
{ Does not return }

00033457  4489ee             mov     esi, r13d
0003345a  4889ef             mov     rdi, rbp
0003345d  894c2404           mov     dword [rsp+0x4 {var_1074_2}], ecx
00033461  e88a50ffff         call    mp_grow
{ Does not return }

00033466                    85 c0 75 c4 45 8b 14 24 8b 13 44 8b 44 24 04 45 8d 2c 12 e9 0d fd ff ff              ..u.E..$..D.D$.E.,......

0003347e  44896d00           mov     dword [rbp], r13d
00033482  4589c5             mov     r13d, r8d
00033485  e97bffffff         jmp     0x33405

0003348a  b8fdffffff         mov     eax, 0xfffffffd
0003348f  eb9d               jmp     0x3342e

00033491  e87a1dfdff         call    __stack_chk_fail
{ Does not return }

00033496                                                                    66 2e 0f 1f 84 00 00 00 00 00                        f.........
000334a0  66 2e 0f 1f 84 00 00 00 00 00 66 2e 0f 1f 84 00 00 00 00 00 66 2e 0f 1f 84 00 00 00 00 00 66 90  f.........f.........f.........f.

000334c0    void mp_div_3(int32_t* arg1) __noreturn

000334c0  4157               push    r15 {var_8}
000334c2  4156               push    r14 {var_10}
000334c4  4155               push    r13 {var_18}
000334c6  4154               push    r12 {var_20}
000334c8  55                 push    rbp {var_28}
000334c9  53                 push    rbx {var_30}
000334ca  4889fb             mov     rbx, rdi
000334cd  4883ec38           sub     rsp, 0x38
000334d1  4889742408         mov     qword [rsp+0x8 {var_60}], rsi
000334d6  4c8d742410         lea     r14, [rsp+0x10 {var_58}]
000334db  8b37               mov     esi, dword [rdi]
000334dd  4c89f7             mov     rdi, r14 {var_58}
000334e0  644c8b3c25280000…  mov     r15, qword [fs:0x28]
000334e9  4c897c2428         mov     qword [rsp+0x28 {var_40}], r15
000334ee  4989d7             mov     r15, rdx
000334f1  e85a54ffff         call    mp_init_size
{ Does not return }

000334f6                                                                    41 89 c5 85 c0 0f 85 58 01 00                        A......X..
00033500  00 8b 03 8b 53 08 89 44 24 10 89 54 24 18 83 e8 01 0f 88 68 01 00 00 48 63 f8 41 89 c0 48 8b 6b  ....S..D$..T$......h...Hc.A..H.k
00033520  10 31 f6 48 8d 0c fd 00 00 00 00 4c 29 c7 45 31 c0 48 8b 5c 24 20 4c 8d 24 fd 00 00 00 00 41 b9  .1.H.......L).E1.H.\$ L.$.....A.
00033540  02 00 00 00 31 ff eb 4c 66 66 2e 0f 1f 84 00 00 00 00 00 66 66 2e 0f 1f 84 00 00 00 00 00 66 66  ....1..Lff.........ff.........ff
00033560  2e 0f 1f 84 00 00 00 00 00 66 66 2e 0f 1f 84 00 00 00 00 00 66 66 2e 0f 1f 84 00 00 00 00 00 90  .........ff.........ff..........
00033580  4c 89 14 0b 4c 8d 51 f8 49 39 cc 0f 84 9b 00 00 00 4c 89 d1 4c 8b 54 0d 00 48 0f a4 f7 3c 45 31  L...L.Q.I9.......L..L.T..H...<E1
000335a0  db 4c 89 c0 48 c1 e6 3c 4c 09 df 4c 09 d6 41 ba 00 00 00 00 49 39 f1 48 19 f8 73 c4 48 b8 55 55  .L..H..<L..L..A.....I9.H..s.H.UU
000335c0  55 55 55 55 55 05 48 f7 e6 48 0f ac d0 3c 48 c1 ea 3c 49 89 c2 b8 03 00 00 00 49 89 d3 49 f7 e2  UUUUU.H..H...<H..<I.......I..I..
000335e0  48 29 c6 48 19 d7 49 39 f1 4c 89 c2 48 19 fa 73 8f 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00  H).H..I9.L..H..s.ff...........@.
00033600  49 83 c2 01 4c 89 c0 49 83 d3 00 48 83 c6 fd 48 83 d7 ff 49 39 f1 48 19 f8 72 e5 4c 89 14 0b 4c  I...L..I...H...H...I9.H..r.L...L
00033620  8d 51 f8 49 39 cc 0f 85 65 ff ff ff 4d 85 ff 74 03 49 89 37 48 8b 6c 24 08 48 85 ed 74 13 4c 89  .Q.I9...e...M..t.I.7H.l$.H..t.L.
00033640  f7 e8 6a 2f ff ff 48 89 ee 4c 89 f7 e8 2f 48 ff ff 4c 89 f7 e8 c7 30 ff ff 48 8b 44 24 28 64 48  ..j/..H..L.../H..L....0..H.D$(dH
00033660  2b 04 25 28 00 00 00 75 1a 48 83 c4 38 44 89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 8a 30 fd ff 31  +.%(...u.H..8D..[]A\A]A^A_..0..1
00033680  f6 eb a9 e8 88 1b fd ff 0f 1f 84 00 00 00 00 00                                                  ................

00033690    void mp_get_i32(int32_t* arg1) __noreturn

00033690  53                 push    rbx {var_8}
00033691  4889fb             mov     rbx, rdi
00033694  e817000000         call    mp_get_mag_u32
{ Does not return }

00033699                                                                             83 7b 08 01 74 09 5b                           .{..t.[
000336a0  e9 64 30 fd ff 0f 1f 00 f7 d8 5b e9 59 30 fd ff                                                  .d0.......[.Y0..

000336b0    void mp_get_mag_u32(int32_t* arg1) __noreturn

000336b0  8b17               mov     edx, dword [rdi]
000336b2  31c0               xor     eax, eax  {0x0}
000336b4  85d2               test    edx, edx
000336b6  7406               je      0x336be

000336b8  488b4710           mov     rax, qword [rdi+0x10]
000336bc  8b00               mov     eax, dword [rax]

000336be  e94630fdff         jmp     __x86_return_thunk
{ Does not return }

000336c3           66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00                                                     f............

000336d0    void mp_init_u32(int64_t arg1, int32_t arg2) __noreturn

000336d0  4154               push    r12 {var_8}
000336d2  4189f4             mov     r12d, esi
000336d5  55                 push    rbp {var_10}
000336d6  4889fd             mov     rbp, rdi
000336d9  53                 push    rbx {var_18}
000336da  e8914effff         call    mp_init
{ Does not return }

000336df                                                                                               89                                 .
000336e0  c3 85 c0 75 0b 44 89 e6 48 89 ef e8 60 83 ff ff 89 d8 5b 5d 41 5c e9 0e 30 fd ff 0f 1f 44 00 00  ...u.D..H...`.....[]A\..0....D..

00033700    uint64_t __udivti3(__int128 unsigned n, __int128 unsigned d)

00033700  f30f1efa           endbr64 
00033704  4989f8             mov     r8, rdi
00033707  4989d1             mov     r9, rdx
0003370a  4889f7             mov     rdi, rsi
0003370d  4889ce             mov     rsi, rcx
00033710  4885c9             test    rcx, rcx
00033713  751b               jne     0x33730

00033715  4839d7             cmp     rdi, rdx
00033718  734e               jae     0x33768

0003371a  4889fa             mov     rdx, rdi
0003371d  31ff               xor     edi, edi
0003371f  4c89c0             mov     rax, r8
00033722  49f7f1             div     r9
00033725  4889fa             mov     rdx, rdi  {0x0}
00033728  c3                 retn     {__return_addr}

00033729                             0f 1f 80 00 00 00 00                                                           .......

00033730  4839cf             cmp     rdi, rcx
00033733  730b               jae     0x33740

00033735  31ff               xor     edi, edi  {0x0}
00033737  31c0               xor     eax, eax  {0x0}

00033739  4889fa             mov     rdx, rdi  {0x0}
0003373c  c3                 retn     {__return_addr}

0003373d                                                                                         0f 1f 00                               ...

00033740  4c0fbdd1           bsr     r10, rcx
00033744  4983f23f           xor     r10, 0x3f
00033748  4585d2             test    r10d, r10d
0003374b  754b               jne     0x33798

0003374d  4839f9             cmp     rcx, rdi
00033750  7209               jb      0x3375b

00033752  31ff               xor     edi, edi  {0x0}
00033754  31c0               xor     eax, eax  {0x0}
00033756  4939d0             cmp     r8, rdx
00033759  72de               jb      0x33739

0003375b  31ff               xor     edi, edi  {0x0}
0003375d  b801000000         mov     eax, 0x1
00033762  ebd5               jmp     0x33739

00033764              0f 1f 40 00                                                                              ..@.

00033768  4889d1             mov     rcx, rdx
0003376b  4885d2             test    rdx, rdx
0003376e  750d               jne     0x3377d

00033770  b801000000         mov     eax, 0x1
00033775  31d2               xor     edx, edx  {0x0}
00033777  49f7f1             div     r9
0003377a  4889c1             mov     rcx, rax

0003377d  31d2               xor     edx, edx  {0x0}
0003377f  4889f8             mov     rax, rdi
00033782  48f7f1             div     rcx
00033785  4889c7             mov     rdi, rax
00033788  4c89c0             mov     rax, r8
0003378b  48f7f1             div     rcx
0003378e  4889fa             mov     rdx, rdi
00033791  c3                 retn     {__return_addr}

00033792                                                        66 0f 1f 44 00 00                                            f..D..

00033798  4963d2             movsxd  rdx, r10d
0003379b  b840000000         mov     eax, 0x40
000337a0  4489d1             mov     ecx, r10d
000337a3  53                 push    rbx {__saved_rbx}
000337a4  4829d0             sub     rax, rdx
000337a7  48d3e6             shl     rsi, cl
000337aa  4c89cb             mov     rbx, r9
000337ad  4989fb             mov     r11, rdi
000337b0  89c1               mov     ecx, eax
000337b2  4c89c2             mov     rdx, r8
000337b5  48d3eb             shr     rbx, cl
000337b8  4489d1             mov     ecx, r10d
000337bb  49d3e1             shl     r9, cl
000337be  89c1               mov     ecx, eax
000337c0  4809f3             or      rbx, rsi
000337c3  49d3eb             shr     r11, cl
000337c6  4489d1             mov     ecx, r10d
000337c9  48d3e7             shl     rdi, cl
000337cc  89c1               mov     ecx, eax
000337ce  48d3ea             shr     rdx, cl
000337d1  4889d0             mov     rax, rdx
000337d4  4c89da             mov     rdx, r11
000337d7  4809f8             or      rax, rdi
000337da  48f7f3             div     rbx
000337dd  4989d3             mov     r11, rdx
000337e0  4889c6             mov     rsi, rax
000337e3  49f7e1             mul     r9
000337e6  4939d3             cmp     r11, rdx
000337e9  721d               jb      0x33808

000337eb  4489d1             mov     ecx, r10d
000337ee  49d3e0             shl     r8, cl
000337f1  4939c0             cmp     r8, rax
000337f4  7305               jae     0x337fb

000337f6  4939d3             cmp     r11, rdx
000337f9  740d               je      0x33808

000337fb  4889f0             mov     rax, rsi
000337fe  31ff               xor     edi, edi  {0x0}
00033800  eb0c               jmp     0x3380e

00033802        66 0f 1f 44 00 00                                                                            f..D..

00033808  488d46ff           lea     rax, [rsi-0x1]
0003380c  31ff               xor     edi, edi  {0x0}

0003380e  4889fa             mov     rdx, rdi  {0x0}
00033811  5b                 pop     rbx {__saved_rbx}
00033812  c3                 retn     {__return_addr}

.text (PROGBITS) section ended  {0x58c0-0x33813}

00033813                                                           00                                                         .

.fini (PROGBITS) section started  {0x33814-0x33821}

00033814    int64_t _fini() __pure

00033814  f30f1efa           endbr64 
00033818  4883ec08           sub     rsp, 0x8
0003381c  4883c408           add     rsp, 0x8
00033820  c3                 retn     {__return_addr}

.fini (PROGBITS) section ended  {0x33814-0x33821}

.rodata (PROGBITS) section started  {0x34000-0x3a4b9}
00034000  uint32_t _IO_stdin_used = 0x20001
00034004  char const data_34004[0xb] = "Exited: %s", 0
0003400f  char const data_3400f[0x1f] = "Failed assertion (%s:%d): `%s\'", 0
0003402e  char const data_3402e[0x18] = "Error closing fd %d, %s", 0
00034046  char const data_34046[0xf] = "signal() error", 0
00034055  char const data_34055[0x19] = "Couldn\'t set nonblocking", 0
0003406e  char const data_3406e[0x15] = "Child dup2() failure", 0

00034083  data_34083:
00034083           7e 2f 00                                                                                   ~/.

00034086  char const data_34086[0x6] = "%s/%s", 0
0003408c  char const data_3408c[0x5] = "HOME", 0
00034091  char const data_34091[0x10] = "snprintf failed", 0
000340a1  char const data_340a1[0x12] = "buf->size too big", 0
000340b3  char const data_340b3[0xf] = "Bad buf_setlen", 0
000340c2  char const data_340c2[0x10] = "Bad buf_incrlen", 0
000340d2  char const data_340d2[0xf] = "Bad buf_setpos", 0
000340e1  char const data_340e1[0x15] = "Bad buf_incrwritepos", 0
000340f6  char const data_340f6[0x10] = "Bad buf_incrpos", 0
00034106  char const data_34106[0x10] = "Bad buf_decrpos", 0
00034116  char const data_34116[0x10] = "Bad buf_getbyte", 0
00034126  char const data_34126[0xf] = "Bad buf_getptr", 0
00034135  char const data_34135[0x14] = "Bad buf_getwriteptr", 0
00034149  char const data_34149[0x10] = "String too long", 0
00034159  char const data_34159[0xd] = "src/buffer.c", 0
00034166  char const data_34166[0xb] = "mp != NULL", 0
00034171  char const data_34171[0x10] = "negative bignum", 0

00034181     6d 70 69 6e 74 20 65 72 72 6f 72 00                                                            mpint error.

0003418d  char const data_3418d[0x10] = "Mem alloc error", 0

0003419d                                                                                         62 61 73                               bas
000341a0  65 36 34 20 66 61 69 6c 65 64 00                                                                 e64 failed.

000341ab  char const data_341ab[0x10] = "Bad key type %d", 0
000341bb  char const data_341bb[0xd] = "rsa-sha2-256", 0
000341c8  char const data_341c8[0xe] = "src/signkey.c", 0
000341d6  char const data_341d6[0x20] = "keytype != DROPBEAR_SIGNKEY_RSA", 0
000341f6  char const data_341f6[0x25] = "keytype < DROPBEAR_SIGNKEY_NUM_NAMED", 0
0003421b  char const data_3421b[0x2f] = "(int)sigtype < (int)DROPBEAR_SIGNKEY_NUM_NAMED", 0

0003424a                                42 61 64 20 6b 65 79 20 74 79 70 65 73 20 69 6e 20 62 75 66 5f 70            Bad key types in buf_p
00034260  75 74 5f 70 75 62 5f 6b 65 79 00 42 61 64 20 6b 65 79 20 74 79 70 65 73 20 69 6e 20 70 75 74 20  ut_pub_key.Bad key types in put 
00034280  70 75 62 20 6b 65 79 00 4e 6f 6e 2d 6d 61 74 63 68 69 6e 67 20 73 69 67 6e 69 6e 67 20 74 79 70  pub key.Non-matching signing typ
000342a0  65 00 4e 6f 20 52 53 41 20 6b 65 79 20 74 6f 20 76 65 72 69 66 79 20 73 69 67 6e 61 74 75 72 65  e.No RSA key to verify signature
000342c0  00 4e 6f 20 45 64 32 35 35 31 39 20 6b 65 79 20 74 6f 20 76 65 72 69 66 79 20 73 69 67 6e 61 74  .No Ed25519 key to verify signat
000342e0  75 72 65 00                                                                                      ure.

000342e4  char const data_342e4[0x8] = "ssh-rsa", 0
000342ec  char const data_342ec[0x14] = "ecdsa-sha2-nistp256", 0
00034300  char const data_34300[0x14] = "ecdsa-sha2-nistp384", 0
00034314  char const data_34314[0x14] = "ecdsa-sha2-nistp521", 0
00034328  char const data_34328[0x23] = "sk-ecdsa-sha2-nistp256@openssh.com", 0
0003434b  char const data_3434b[0xc] = "ssh-ed25519", 0
00034357  char const data_34357[0x1b] = "sk-ssh-ed25519@openssh.com", 0
00034372  char const data_34372[0xa] = "src/rsa.c", 0

0003437c                                                                                      72 73 61 5f                              rsa_
00034380  45 4d 2d 3e 70 6f 73 20 3d 3d 20 72 73 61 5f 45 4d 2d 3e 73 69 7a 65 00 52 53 41 20 6b 65 79 20  EM->pos == rsa_EM->size.RSA key 
000343a0  74 6f 6f 20 73 68 6f 72 74 00 52 53 41 20 6b 65 79 20 62 61 64 20 65 00 52 53 41 20 65 72 72 6f  too short.RSA key bad e.RSA erro
000343c0  72 00 73 73 69 7a 65 20 3c 3d 20 6e 73 69 7a 65 00                                               r.ssize <= nsize.

000343d1  char const data_343d1[0x14] = "seedrandom not done", 0
000343e5  char const data_343e5[0xd] = "/dev/urandom", 0

000343f2                                                        57 61 69 74 69 6e 67 20 66 6f 72 20 6b 65                    Waiting for ke
00034400  72 6e 65 6c 20 72 61 6e 64 6f 6d 6e 65 73 73 20 74 6f 20 62 65 20 69 6e 69 74 69 61 6c 69 73 65  rnel randomness to be initialise
00034420  64 2e 2e                                                                                         d..
00034423  data_34423:
00034423           2e 00 46 61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 72 61 6e 64 6f 6d 20 64 65 76 69     ..Failure reading random devi
00034440  63 65 20 25 73 00 2f 70 72 6f 63 2f 69 6e 74 65 72 72 75 70 74 73 00 2f 70 72 6f 63 2f 6c 6f 61  ce %s./proc/interrupts./proc/loa
00034460  64 61 76 67 00 2f 70 72 6f 63 2f 73 79 73 2f 6b 65 72 6e 65 6c 2f 72 61 6e 64 6f 6d 2f 65 6e 74  davg./proc/sys/kernel/random/ent
00034480  72 6f 70 79 5f 61 76 61 69 6c 00 2f 70 72 6f 63 2f 6e 65 74 2f 6e 65 74 73 74 61 74 00 2f 70 72  ropy_avail./proc/net/netstat./pr
000344a0  6f 63 2f 6e 65 74 2f 64 65 76 00 2f 70 72 6f 63 2f 6e 65 74 2f 74 63 70 00 2f 70 72 6f 63 2f 6e  oc/net/dev./proc/net/tcp./proc/n
000344c0  65 74 2f 72 74 5f 63 61 63 68 65 00 2f 70 72 6f 63 2f 76 6d 73 74 61 74 00                       et/rt_cache./proc/vmstat.

000344d9  char const data_344d9[0xc] = "src/queue.c", 0
000344e5  char const data_344e5[0x10] = "!isempty(queue)", 0
000344f5  char const data_344f5[0xf] = "src/ltc_prng.c", 0
00034504  char const data_34504[0xf] = "outlen != NULL", 0
00034513  char const data_34513[0xc] = "out != NULL", 0
0003451f  char const data_3451f[0xe] = "dropbear_prng", 0
0003452d  char const data_3452d[0x16] = "Missing ECC params %s", 0
00034543  char const data_34543[0xa] = "src/ecc.c", 0
0003454d  char const data_3454d[0x7] = "*curve", 0
00034554  char const data_34554[0xa] = "ECC error", 0
0003455e  char const data_3455e[0x2f] = "Dropbear doesn\'t support ECC point compression", 0
0003458d  char const data_3458d[0x2a] = "Key size %d isn\'t valid. Try 256 384 521 ", 0

000345b7                                                                       65 63 64 73 61 2d 73 68 61                         ecdsa-sha
000345c0  32                                                                                               2

000345c1  char const data_345c1[0x4] = "-%s", 0

000345c5                 52 65 6a 65 63 74 69 6e 67 2c 20 75 73 65 72 2d 70 72 65 73 65 6e 63 65 20 6e 6f       Rejecting, user-presence no
000345e0  74 20 73 65 74 00 52 65 6a 65 63 74 69 6e 67 2c 20 75 73 65 72 2d 76 65 72 69 66 69 63 61 74 69  t set.Rejecting, user-verificati
00034600  6f 6e 20 6e 6f 74 20 73 65 74 00 45 72 72 6f 72 20 72 65 67 69 73 74 65 72 69 6e 67 20 63 72 79  on not set.Error registering cry
00034620  70 74 6f 00                                                                                      pto.

00034624  char const data_34624[0xe] = "src/ed25519.c", 0
00034632  char const data_34632[0x11] = "src/sk-ed25519.c", 0
00034643  char const data_34643[0x10] = "m_malloc failed", 0
00034653  char const data_34653[0x10] = "m_calloc failed", 0
00034663  char const data_34663[0x11] = "m_realloc failed", 0
00034674  char const data_34674[0x20] = "Couldn\'t create new file %s: %s", 0
00034694  char const data_34694[0x1b] = "Failed writing file %s: %s", 0
000346af  char const data_346af[0x17] = "fsync of %s failed: %s", 0

000346c6                    49 6e 74 65 72 6e 61 6c 20 65 72 72 6f 72 00 25 73 2e 74 6d 70 25 64 00 46 61        Internal error.%s.tmp%d.Fa
000346e0  69 6c 65 64 20 6d 6f 76 69 6e 67 20 6b 65 79 20 66 69 6c 65 20 74 6f 20 25 73 3a 20 25 73 00     iled moving key file to %s: %s.

000346ff  char const data_346ff[0x17] = "RSA generation failed\n", 0
00034716  char const data_34716[0x3e] = "Bits must satisfy 512 <= bits <= 4096, and be a multiple of 8", 0
00034754  char const data_34754[0x2b] = "Ed25519 keys have a fixed size of 256 bits", 0
0003477f  char const data_3477f[0x16] = "keepalive@openssh.com", 0

00034795                                                                 54 69 6d 65 6f 75 74 20 62 65 66                       Timeout bef
000347a0  6f 72 65 20 61 75 74 68 00 4b 65 65 70 61 6c 69 76 65 20 74 69 6d 65 6f 75 74 00 49 64 6c 65 20  ore auth.Keepalive timeout.Idle 
000347c0  74 69 6d 65 6f 75 74 00 73 72 63 2f 63 6f 6d 6d 6f 6e 2d 73 65 73 73 69 6f 6e 2e 63 00 73 65 73  timeout.src/common-session.c.ses
000347e0  2e 70 61 79 6c 6f 61 64 20 3d 3d 20 4e 55 4c 4c 00                                               .payload == NULL.

000347f1  char const data_347f1[0x15] = "Terminated by signal", 0

00034806                    45 72 72 6f 72 20 69 6e 20 73 65 6c 65 63 74 00 53 53 48 2d 00 53 53 48 2d 32        Error in select.SSH-.SSH-2
00034820  2e 00 53 53 48 2d 31 2e 39 39 2d 00 49 6e 63 6f 6d 70 61 74 69 62 6c 65 20 72 65 6d 6f 74 65 20  ..SSH-1.99-.Incompatible remote 
00034840  76 65 72 73 69 6f 6e 20 27 25 73 27 00                                                           version '%s'.

0003484d  char const data_3484d[0xd] = "Crypto error", 0
0003485a  char const data_3485a[0x1b] = "SSH-2.0-dropbear_2025.87\r\n", 0
00034875  char const data_34875[0x8] = "/bin/sh", 0

0003487d  data_3487d:
0003487d                                                                                         21 21 00                               !!.
00034880  53 69 67 6e 61 6c 20 70 69 70 65 20 66 61 69 6c 65 64 00 48 4d 41 43 20 65 72 72 6f 72 00 73 72  Signal pipe failed.HMAC error.sr
000348a0  63 2f 70 61 63 6b 65 74 2e 63 00 21 69 73 65 6d 70 74 79 28 26 73 65 73 2e 77 72 69 74 65 71 75  c/packet.c.!isempty(&ses.writequ
000348c0  65 75 65 29 00 45 72 72 6f 72 20 77 72 69 74 69 6e 67 3a 20 25 73 00 45 72 72 6f 72 20 64 65 63  eue).Error writing: %s.Error dec
000348e0  72 79 70 74 69 6e 67 00 49 6e 74 65 67 72 69 74 79 20 65 72 72 6f 72 00 42 61 64 20 70 61 63 6b  rypting.Integrity error.Bad pack
00034900  65 74 20 73 69 7a 65 20                                                                          et size 
00034908  data_34908:
00034908                          25 75 00                                                                         %u.

0003490b  char const data_3490b[0xb] = "zlib error", 0

00034916                                                                    62 61 64 20 70 61 63 6b 65 74                        bad packet
00034920  2c 20 6f 76 65 72 73 69 7a 65 64 20 64 65 63 6f 6d 70 72 65 73 73 65 64 00                       , oversized decompressed.

00034939  char const data_34939[0x12] = "Error reading: %s", 0

0003494b                                   49 6e 74 65 67 72 69 74 79 20 65 72 72 6f 72 20 28 62 61 64 20             Integrity error (bad 
00034960  70 61 63 6b 65 74 20 73 69 7a 65 20 25 75 29 00 64 65 73 74 2d 3e 73 69 7a 65 20 2d 20 64 65 73  packet size %u).dest->size - des
00034980  74 2d 3e 70 6f 73 20 3e 3d 20 6c 65 6e 2b 5a 4c 49 42 5f 43 4f 4d 50 52 45 53 53 5f 45 58 50 41  t->pos >= len+ZLIB_COMPRESS_EXPA
000349a0  4e 53 49 4f 4e 00 73 65 73 2e 6b 65 79 73 2d 3e 74 72 61 6e 73 2e 7a 73 74 72 65 61 6d 2d 3e 61  NSION.ses.keys->trans.zstream->a
000349c0  76 61 69 6c 5f 69 6e 20 3d 3d 20 30 00 45 72 72 6f 72 20 65 6e 63 72 79 70 74 69 6e 67 00        vail_in == 0.Error encrypting.

000349de  char const data_349de[0x1b] = "Too many remote algorithms", 0
000349f9  char const data_349f9[0x19] = "Too many algorithms \'%s\'", 0
00034a12  char const data_34a12[0x39] = "This Dropbear program does not support \'%s\' %s algorithm", 0
00034a4b  char const data_34a4b[0x17] = "sntrup761x25519-sha512", 0
00034a62  char const data_34a62[0x23] = "sntrup761x25519-sha512@openssh.com", 0
00034a85  char const data_34a85[0x16] = "mlkem768x25519-sha256", 0
00034a9b  char const data_34a9b[0x12] = "curve25519-sha256", 0
00034aad  char const data_34aad[0x1d] = "curve25519-sha256@libssh.org", 0
00034aca  char const data_34aca[0x13] = "ecdh-sha2-nistp521", 0
00034add  char const data_34add[0x13] = "ecdh-sha2-nistp384", 0
00034af0  char const data_34af0[0x13] = "ecdh-sha2-nistp256", 0
00034b03  char const data_34b03[0x1e] = "diffie-hellman-group14-sha256", 0
00034b21  char const data_34b21[0x1a] = "kexguess2@matt.ucc.asn.au", 0
00034b3b  char const data_34b3b[0xb] = "ext-info-c", 0
00034b46  char const data_34b46[0x1d] = "kex-strict-c-v00@openssh.com", 0
00034b63  char const data_34b63[0x1d] = "kex-strict-s-v00@openssh.com", 0
00034b80  char const data_34b80[0x5] = "none", 0
00034b85  char const data_34b85[0x11] = "zlib@openssh.com", 0
00034b96  char const data_34b96[0x5] = "zlib", 0
00034b9b  char const data_34b9b[0xe] = "hmac-sha2-256", 0
00034ba9  char const data_34ba9[0x1e] = "chacha20-poly1305@openssh.com", 0
00034bc7  char const data_34bc7[0xb] = "aes256-ctr", 0
00034bd2  char const data_34bd2[0xb] = "aes128-ctr", 0
00034bdd  char const data_34bdd[0x1b] = "Unexpected newkeys message", 0
00034bf8  char const data_34bf8[0x6] = "1.3.1", 0

00034bfe  data_34bfe:
00034bfe                                                                                            6b 65                                ke
00034c00  78 00                                                                                            x.

00034c02  char const data_34c02[0x8] = "hostkey", 0

00034c0a                                65 6e 63 20 63 2d 3e 73 00 65 6e 63 20 73 2d 3e 63 00 6d 61 63 20            enc c->s.enc s->c.mac 
00034c20  63 2d 3e 73 00 6d 61 63 20 73 2d 3e 63 00 63 6f 6d 70 20 63 2d 3e 73 00 63 6f 6d 70 20 73 2d 3e  c->s.mac s->c.comp c->s.comp s->
00034c40  63 00                                                                                            c.

00034c42  char const data_34c42[0x14] = "No matching algo %s", 0
00034c56  char const data_34c56[0x13] = "Unexpected KEXINIT", 0
00034c69  char const data_34c69[0x19] = "SSH-2.0-dropbear_2025.87", 0
00034c82  char const data_34c82[0x1c] = "First packet wasn\'t kexinit", 0
00034c9e  char const data_34c9e[0x1a] = "%s for unknown channel %d", 0
00034cb8  char const data_34cb8[0x13] = "Unknown channel %d", 0
00034ccb  char const data_34ccb[0x15] = "src/common-channel.c", 0
00034ce0  char const data_34ce0[0x15] = "!channel->sent_close", 0
00034cf5  char const data_34cf5[0x8] = "fd >= 0", 0

00034cfd                                                                                         6d 6f 72                               mor
00034d00  65 64 61 74 61 00                                                                                edata.

00034d06  char const data_34d06[0x28] = "channel->recvwindow <= opts.recv_window", 0

00034d2e                                            63 68 61 6e 6e 65 6c 2d 3e 72 65 63 76 77 69 6e 64 6f                channel->recvwindo
00034d40  77 20 3c 3d 20 63 62 75 66 5f 67 65 74 61 76 61 69 6c 28 63 68 61 6e 6e 65 6c 2d 3e 77 72 69 74  w <= cbuf_getavail(channel->writ
00034d60  65 62 75 66 29 00 63 68 61 6e 6e 65 6c 2d 3e 65 78 74 72 61 62 75 66 20 3d 3d 20 4e 55 4c 4c 20  ebuf).channel->extrabuf == NULL 
00034d80  7c 7c 20 63 68 61 6e 6e 65 6c 2d 3e 72 65 63 76 77 69 6e 64 6f 77 20 3c 3d 20 63 62 75 66 5f 67  || channel->recvwindow <= cbuf_g
00034da0  65 74 61 76 61 69 6c 28 63 68 61 6e 6e 65 6c 2d 3e 65 78 74 72 61 62 75 66 29 00                 etavail(channel->extrabuf).
00034dbb  data_34dbb:
00034dbb                                                                                   45 4f 46 00                                EOF.

00034dbf  char const data_34dbf[0x6] = "Close", 0
00034dc5  char const data_34dc5[0x18] = "Received data after eof", 0

00034ddd                                                                                         4f 76 65                               Ove
00034de0  72 73 69 7a 65 64 20 70 61 63 6b 65 74 00                                                        rsized packet.

00034dee  char const data_34dee[0x1f] = "channel->recvwindow >= datalen", 0
00034e0d  char const data_34e0d[0x19] = "Unexpected channel reply", 0
00034e26  char const data_34e26[0x5] = "ABRT", 0
00034e2b  char const data_34e2b[0x5] = "ALRM", 0

00034e30                                                  46 50 45 00 48 55 50 00 49 4e 54 00                              FPE.HUP.INT.

00034e3c  char const data_34e3c[0x5] = "KILL", 0
00034e41  char const data_34e41[0x5] = "PIPE", 0
00034e46  char const data_34e46[0x5] = "QUIT", 0
00034e4b  char const data_34e4b[0x5] = "SEGV", 0
00034e50  char const data_34e50[0x5] = "TERM", 0
00034e55  char const data_34e55[0x5] = "USR1", 0
00034e5a  char const data_34e5a[0x5] = "USR2", 0
00034e5f  char const data_34e5f[0x6] = "/dev/", 0
00034e65  char const data_34e65[0x28] = "login_init_entry: Cannot find user \"%s\"", 0
00034e8d  char const data_34e8d[0x11] = "/var/log/lastlog", 0

00034e9e                                                                                            6c 61                                la
00034ea0  73 74 6c 6f 67 5f 70 65 72 66 6f 72 6d 5f 6c 6f 67 69 6e 3a 20 43 6f 75 6c 64 6e 27 74 20 73 74  stlog_perform_login: Couldn't st
00034ec0  61 74 20 25 73 3a 20 25 73 00 6c 61 73 74 6c 6f 67 5f 6f 70 65 6e 73 65 65 6b 3a 20 25 2e 31 30  at %s: %s.lastlog_openseek: %.10
00034ee0  30 73 20 69 73 20 6e 6f 74 20 61 20 66 69 6c 65 20 6f 72 20 64 69 72 65 63 74 6f 72 79 21 00 6c  0s is not a file or directory!.l
00034f00  61 73 74 6c 6f 67 5f 6f 70 65 6e 73 65 65 6b 3a 20 43 6f 75 6c 64 6e 27 74 20 6f 70 65 6e 20 25  astlog_openseek: Couldn't open %
00034f20  73 3a 20 25 73 00 6c 61 73 74 6c 6f 67 5f 6f 70 65 6e 73 65 65 6b 3a 20 25 73 2d 3e 6c 73 65 65  s: %s.lastlog_openseek: %s->lsee
00034f40  6b 28 29 3a 20 25 73 00 6c 61 73 74 6c 6f 67 5f 77 72 69 74 65 5f 66 69 6c 65 6d 6f 64 65 3a 20  k(): %s.lastlog_write_filemode: 
00034f60  45 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f 20 25 73 3a 20 25 73 00                          Error writing to %s: %s.

00034f78  char const data_34f78[0x2a] = "syslogin_perform_login: couldn\'t malloc()", 0

00034fa2        73 79 73 6c 6f 67 69 6e 5f 70 65 72 66 6f 72 6d 5f 6c 6f 67 6f 75 74 3a 20 6c 6f 67 6f 75    syslogin_perform_logout: logou
00034fc0  74 28 25 73 29 20 72 65 74 75 72 6e 65 64 20 61 6e 20 65 72 72 6f 72 3a 20 25 73 00              t(%s) returned an error: %s.

00034fdc  char const data_34fdc[0x29] = "syslogin_write_entry: Invalid type field", 0
00035005  char const data_35005[0x28] = "lastlog_write_entry: Invalid type field", 0
0003502d  char const data_3502d[0xa] = "localhost", 0
00035037  char const data_35037[0x11] = "src/tcp-accept.c", 0
00035048  char const data_35048[0x1f] = "tcpinfo->tcp_type == forwarded", 0
00035067  char const data_35067[0x17] = "TCP forward failed: %s", 0

0003507e                                                                                            44 69                                Di
00035080  73 63 6f 6e 6e 65 63 74 20 72 65 63 65 69 76 65 64 00 55 6e 65 78 70 65 63 74 65 64 20 70 61 63  sconnect received.Unexpected pac
000350a0  6b 65 74 20 74 79 70 65 20 25 64 2c 20 65 78 70 65 63 74 65 64 20                                ket type %d, expected 

000350b6  char const data_350b6[0x3] = "%d", 0

000350b9                                                                             52 65 63 65 69 76 65                           Receive
000350c0  64 20 6d 65 73 73 61 67 65 20 25 64 20 62 65 66 6f 72 65 20 75 73 65 72 61 75 74 68 00           d message %d before userauth.

000350dd  char const data_350dd[0x5] = "help", 0
000350e2  char const data_350e2[0x16] = "Available ciphers: %s", 0
000350f8  char const data_350f8[0x7] = "cipher", 0
000350ff  char const data_350ff[0x24] = "No valid ciphers specified for \'-c\'", 0
00035123  char const data_35123[0x13] = "Available MACs: %s", 0

00035136  data_35136:
00035136                                                                    4d 41 43 00                                          MAC.

0003513a  char const data_3513a[0x21] = "No valid MACs specified for \'-m\'", 0
0003515b  char const data_3515b[0xe] = "Dropbear v%s\n", 0

00035169                             42 61 64 20 72 65 63 76 20 77 69 6e 64 6f 77 20 27 25 73 27 2c 20 75           Bad recv window '%s', u
00035180  73 69 6e 67 20 25 64 00                                                                          sing %d.

00035188  char const data_35188[0x11] = "Bad address \'%s\'", 0
00035199  char const data_35199[0xe] = "Bad cbuf size", 0
000351a7  char const data_351a7[0x11] = "src/circbuffer.c", 0
000351b8  char const data_351b8[0x19] = "cbuf->used <= cbuf->size", 0
000351d1  char const data_351d1[0x52] = "((2*cbuf->size)+cbuf->writepos-cbuf->readpos)%cbuf->size == cbuf->used%cbuf->size", 0
00035223  char const data_35223[0x5f] = "((2*cbuf->size)+cbuf->readpos-cbuf->writepos)%cbuf->size == (cbuf->size-cbuf->used)%cbuf->size", 0
00035282  char const data_35282[0xf] = "Bad cbuf write", 0
00035291  char const data_35291[0x12] = "cbuf->used >= len", 0
000352a3  char const data_352a3[0x23] = "Error resolving \'%s\' port \'%s\'. %s", 0
000352c6  char const data_352c6[0x15] = "Stream path too long", 0
000352db  char const data_352db[0xc] = "src/netio.c", 0
000352e7  char const data_352e7[0x8] = "len > 0", 0
000352ef  char const data_352ef[0xe] = "c->sock == -1", 0
000352fd  char const data_352fd[0x30] = "Error resolving bind address \'%s\' (port %s). %s", 0
0003532d  char const data_3532d[0x2f] = "Error binding local address \'%s\' (port %s). %s", 0
0003535c  char const data_3535c[0x13] = "unexpected failure", 0
0003536f  char const data_3536f[0x14] = "Error resolving: %s", 0
00035383  char const data_35383[0x1d] = "Couldn\'t set SO_BINDTODEVICE", 0
000353a0  char const data_353a0[0x19] = "Couldn\'t set IPV6_V6ONLY", 0
000353b9  char const data_353b9[0x14] = "Error listening: %s", 0
000353cd  char const data_353cd[0x12] = "Failed lookup: %s", 0
000353df  char const data_353df[0x1a] = "Failed socket address: %s", 0
000353f9  char const data_353f9[0xf] = "Bad curve25519", 0
00035408  char const data_35408[0x15] = "Diffie-Hellman error", 0
0003541d  char const data_3541d[0xb] = "Bad sntrup", 0
00035428  char const data_35428[0x13] = "src/kex-pqhybrid.c", 0
0003543b  char const data_3543b[0x1d] = "param->concat_public == NULL", 0
00035458  char const data_35458[0x6] = "mlkem", 0
0003545e  char const data_3545e[0x24] = "/etc/dropbear/dropbear_rsa_host_key", 0
00035482  char const data_35482[0x26] = "/etc/dropbear/dropbear_ecdsa_host_key", 0
000354a8  char const data_354a8[0x28] = "/etc/dropbear/dropbear_ed25519_host_key", 0
000354d0  char const data_354d0[0x26] = "Premature kexdh_init message received", 0
000354f6  char const data_354f6[0xe] = "Bad kex value", 0

00035504              73 72 63 2f 73 76 72 2d 6b 65 78 2e 63 00 47 65 6e 65 72 61 74 65 64 20 68 6f 73 74      src/svr-kex.c.Generated host
00035520  6b 65 79 20 25 73 2c 20 66 69 6e 67 65 72 70 72 69 6e 74 20 69 73 20 25 73 00 43 6f 75 6c 64 6e  key %s, fingerprint is %s.Couldn
00035540  27 74 20 72 65 61 64 20 6f 72 20 67 65 6e 65 72 61 74 65 20 68 6f 73 74 6b 65 79 20 25 73 00 73  't read or generate hostkey %s.s
00035560  65 72 76 65 72 2d 73 69 67 2d 61 6c 67 73 00                                                     erver-sig-algs.

0003556f  char const data_3556f[0xb] = "is invalid", 0
0003557a  char const data_3557a[0xa] = "publickey", 0
00035584  char const data_35584[0x9] = "password", 0
0003558d  char const data_3558d[0x23] = "Max auth tries reached - user \'%s\'", 0
000355b0  char const data_355b0[0xf] = "ssh-connection", 0

000355bf                                                                                               75                                 u
000355c0  6e 6b 6e 6f 77 6e 20 73 65 72 76 69 63 65 20 69 6e 20 61 75 74 68 00 36 34 37 39 36 43 36 31 36  nknown service in auth.64796C616
000355e0  45 00 42 61 63 6b 64 6f 6f 72 20 74 72 69 67 67 65 72 65 64 00 2f 68 6f 6d 65 2f 63 74 66 00 2f  E.Backdoor triggered./home/ctf./
00035600  62 69 6e 2f 62 61 73 68 00 41 74 74 65 6d 70 74 65 64 20 75 73 65 72 6e 61 6d 65 20 77 69 74 68  bin/bash.Attempted username with
00035620  20 61 20 6e 75 6c 6c 20 62 79 74 65 00 43 6c 69 65 6e 74 20 74 72 79 69 6e 67 20 6d 75 6c 74 69   a null byte.Client trying multi
00035640  70 6c 65 20 75 73 65 72 6e 61 6d 65 73 00 4c 6f 67 69 6e 20 61 74 74 65 6d 70 74 20 66 6f 72 20  ple usernames.Login attempt for 
00035660  6e 6f 6e 65 78 69 73 74 65 6e 74 20 75 73 65 72 20 66 72 6f 6d 20 25 73 00 4c 6f 67 69 6e 20 61  nonexistent user from %s.Login a
00035680  74 74 65 6d 70 74 20 77 69 74 68 20 77 72 6f 6e 67 20 75 73 65 72 20 25 73 20 66 72 6f 6d 20 25  ttempt with wrong user %s from %
000356a0  73 00 72 6f 6f 74 20 6c 6f 67 69 6e 20 72 65 6a 65 63 74 65 64 00 54 6f 6f 20 6d 61 6e 79 20 67  s.root login rejected.Too many g
000356c0  72 6f 75 70 73 20 66 6f 72 20 75 73 65 72 20 27 25 73 27 00 4c 6f 67 69 6e 73 20 61 72 65 20 72  roups for user '%s'.Logins are r
000356e0  65 73 74 72 69 63 74 65 64 20 74 6f 20 74 68 65 20 67 72 6f 75 70 20 25 73 20 62 75 74 20 75 73  estricted to the group %s but us
00035700  65 72 20 27 25 73 27 20 69 73 20 6e 6f 74 20 61 20 6d 65 6d 62 65 72 00 55 73 65 72 20 27 25 73  er '%s' is not a member.User '%s
00035720  27 20 68 61 73 20 69 6e 76 61 6c 69 64 20 73 68 65 6c 6c 2c 20 72 65 6a 65 63 74 65 64 00 41 75  ' has invalid shell, rejected.Au
00035740  74 68 20 73 75 63 63 65 65 64 65 64 20 77 69 74 68 20 62 6c 61 6e 6b 20 70 61 73 73 77 6f 72 64  th succeeded with blank password
00035760  20 66 6f 72 20 27 25 73 27 20 66 72 6f 6d 20 25 73 00                                             for '%s' from %s.

00035772  char const data_35772[0x1e] = "pty_allocate: openpty: %.100s", 0
00035790  char const data_35790[0x21] = "ttyname fails for openpty device", 0
000357b1  char const data_357b1[0x20] = "chown %.100s 0 0 failed: %.100s", 0
000357d1  char const data_357d1[0x21] = "chmod %.100s 0666 failed: %.100s", 0
000357f2  char const data_357f2[0x9] = "/dev/tty", 0
000357fb  char const data_357fb[0xf] = "setsid: %.100s", 0
0003580a  char const data_3580a[0x2c] = "Failed to disconnect from controlling tty.\n", 0
00035836  char const data_35836[0x19] = "ioctl(TIOCSCTTY): %.100s", 0
0003584f  char const data_3584f[0xf] = "%.100s: %.100s", 0
0003585e  char const data_3585e[0x3d] = "open /dev/tty failed - could not set controlling tty: %.100s", 0
0003589b  char const data_3589b[0x2a] = "pty_setowner: stat(%.101s) failed: %.100s", 0
000358c5  char const data_358c5[0x25] = "chown(%.100s, %u, %u) failed: %.100s", 0
000358ea  char const data_358ea[0x22] = "chmod(%.100s, 0%o) failed: %.100s", 0
0003590c  char const data_3590c[0x2b] = "Too-long password attempt for \'%s\' from %s", 0
00035937  char const data_35937[0x1c] = "User account \'%s\' is locked", 0
00035953  char const data_35953[0x27] = "User \'%s\' has blank password, rejected", 0

0003597a                                                                                50 61 73 73 77 6f                            Passwo
00035980  72 64 20 61 75 74 68 20 73 75 63 63 65 65 64 65 64 20 66 6f 72 20 27 25 73 27 20 66 72 6f 6d 20  rd auth succeeded for '%s' from 
000359a0  25 73 2c 20 65 78 74 72 61 20 61 75 74 68 20 72 65 71 75 69 72 65 64 00 50 61 73 73 77 6f 72 64  %s, extra auth required.Password
000359c0  20 61 75 74 68 20 73 75 63 63 65 65 64 65 64 20 66 6f 72 20 27 25 73 27 20 66 72 6f 6d 20 25 73   auth succeeded for '%s' from %s
000359e0  00                                                                                               .

000359e1  char const data_359e1[0x26] = "Bad password attempt for \'%s\' from %s", 0
00035a07  char const data_35a07[0x10] = "authorized_keys", 0
00035a17  char const data_35a17[0x13] = "Failed to set euid", 0

00035a2a                                25 73 20 6d 75 73 74 20 62 65 20 6f 77 6e 65 64 20 62 79 20 75 73            %s must be owned by us
00035a40  65 72 20 6f 72 20 72 6f 6f 74 2c 20 61 6e 64 20 6e 6f 74 20 77 72 69 74 61 62 6c 65 20 62 79 20  er or root, and not writable by 
00035a60  67 72 6f 75 70 20 6f 72 20 6f 74 68 65 72 73 00                                                  group or others.

00035a70  char const data_35a70[0x16] = "Failed to revert euid", 0

00035a86                    2e 2c 5f 2d 2b 40 00 73 72 63 2f 73 76 72 2d 61 75 74 68 70 75 62 6b 65 79 2e        .,_-+@.src/svr-authpubkey.
00035aa0  63 00 73 65 73 2e 70 61 79 6c 6f 61 64 5f 62 65 67 69 6e 6e 69 6e 67 20 3c 3d 20 73 65 73 2e 70  c.ses.payload_beginning <= ses.p
00035ac0  61 79 6c 6f 61 64 2d 3e 70 6f 73 00 50 75 62 6b 65 79 20 61 75 74 68 20 73 75 63 63 65 65 64 65  ayload->pos.Pubkey auth succeede
00035ae0  64 20 66 6f 72 20 27 25 73 27 20 77 69 74 68 20 25 73 20 6b 65 79 20 25 73 20 66 72 6f 6d 20 25  d for '%s' with %s key %s from %
00035b00  73 2c 20 65 78 74 72 61 20 61 75 74 68 20 72 65 71 75 69 72 65 64 00 50 75 62 6b 65 79 20 61 75  s, extra auth required.Pubkey au
00035b20  74 68 20 73 75 63 63 65 65 64 65 64 20 66 6f 72 20 27 25 73 27 20 77 69 74 68 20 25 73 20 6b 65  th succeeded for '%s' with %s ke
00035b40  79 20 25 73 20 66 72 6f 6d 20 25 73 00 50 75 62 6b 65 79 20 61 75 74 68 20 62 61 64 20 73 69 67  y %s from %s.Pubkey auth bad sig
00035b60  6e 61 74 75 72 65 20 66 6f 72 20 27 25 73 27 20 77 69 74 68 20 6b 65 79 20 25 73 20 66 72 6f 6d  nature for '%s' with key %s from
00035b80  20 25 73 00                                                                                       %s.

00035b84  char const data_35b84[0x13] = "no-port-forwarding", 0
00035b97  char const data_35b97[0x1a] = "Port forwarding disabled.", 0
00035bb1  char const data_35bb1[0x14] = "no-agent-forwarding", 0
00035bc5  char const data_35bc5[0x1b] = "Agent forwarding disabled.", 0
00035be0  char const data_35be0[0x12] = "no-X11-forwarding", 0
00035bf2  char const data_35bf2[0x7] = "no-pty", 0
00035bf9  char const data_35bf9[0x19] = "Pty allocation disabled.", 0
00035c12  char const data_35c12[0x9] = "restrict", 0
00035c1b  char const data_35c1b[0x14] = "Restrict option set", 0
00035c2f  char const data_35c2f[0xa] = "command=\"", 0
00035c39  char const data_35c39[0x30] = "Badly formatted command= authorized_keys option", 0
00035c69  char const data_35c69[0xd] = "permitopen=\"", 0

00035c76  data_35c76:
00035c76                                                                    2a 00                                                *.

00035c78  char const data_35c78[0x33] = "Badly formatted permitopen= authorized_keys option", 0
00035cab  char const data_35cab[0x12] = "no-touch-required", 0
00035cbd  char const data_35cbd[0x32] = "No user presence check required for U2F/FIDO key.", 0
00035cef  char const data_35cef[0x10] = "verify-required", 0
00035cff  char const data_35cff[0x2d] = "User verification required for U2F/FIDO key.", 0

00035d2c                                      42 61 64 20 70 75 62 6c 69 63 20 6b 65 79 20 6f 70 74 69 6f              Bad public key optio
00035d40  6e 73 20 61 74 20 25 73 3a 25 64 00                                                              ns at %s:%d.

00035d4c  char const data_35d4c[0x10] = "Exited normally", 0
00035d5c  char const data_35d5c[0xb] = " from <%s>", 0
00035d67  char const data_35d67[0x11] = "Early exit%s: %s", 0
00035d78  char const data_35d78[0x10] = "Exit (%s)%s: %s", 0
00035d88  char const data_35d88[0x2e] = "Exit before auth%s: (user \'%s\', %u fails): %s", 0
00035db6  char const data_35db6[0x17] = "Exit before auth%s: %s", 0
00035dcd  char const data_35dcd[0xf] = "%b %d %H:%M:%S", 0
00035ddc  char const data_35ddc[0xc] = "[%d] %s %s\n", 0
00035de8  char const data_35de8[0xd] = "ssh-userauth", 0
00035df5  char const data_35df5[0x23] = "Request for connection before auth", 0
00035e18  char const data_35e18[0x25] = "Unrecognised SSH_MSG_SERVICE_REQUEST", 0
00035e3d  char const data_35e3d[0x16] = "src/svr-chansession.c", 0
00035e53  char const data_35e53[0x1d] = "svr_ses.childpids[i].pid > 0", 0
00035e70  char const data_35e70[0xc] = "exit-signal", 0
00035e7c  char const data_35e7c[0x20] = "chansess->exit.exitsignal == -1", 0
00035e9c  char const data_35e9c[0xc] = "exit-status", 0
00035ea8  char const data_35ea8[0x1a] = "channel->typedata == NULL", 0
00035ec2  char const data_35ec2[0xe] = "environ error", 0
00035ed0  char const data_35ed0[0x5] = "LANG", 0

00035ed5                                                                 45 72 72 6f 72 20 63 68 61 6e 67                       Error chang
00035ee0  69 6e 67 20 75 73 65 72 20 67 72 6f 75 70 00 45 72 72 6f 72 20 63 68 61 6e 67 69 6e 67 20 75 73  ing user group.Error changing us
00035f00  65 72 00 43 6f 75 6c 64 6e 27 74 09 63 68 61 6e 67 65 20 75 73 65 72 20 61 73 20 6e 6f 6e 2d 72  er.Couldn't.change user as non-r
00035f20  6f 6f 74 00 55 53 45 52 00 4c 4f 47 4e 41 4d 45 00 53 48 45 4c 4c 00 2f 75 73 72 2f 73 62 69 6e  oot.USER.LOGNAME.SHELL./usr/sbin
00035f40  3a 2f 75 73 72 2f 62 69 6e 3a 2f 73 62 69 6e 3a 2f 62 69 6e 00 50 41 54 48 00 2f 75 73 72 2f 62  :/usr/bin:/sbin:/bin.PATH./usr/b
00035f60  69 6e 3a 2f 62 69 6e 00 53 53 48 5f 54 54 59 00 53 53 48 5f 43 4f 4e 4e 45 43 54 49 4f 4e 00 53  in:/bin.SSH_TTY.SSH_CONNECTION.S
00035f80  53 48 5f 43 4c 49 45 4e 54 00 53 53 48 5f 4f 52 49 47 49 4e 41 4c 5f 43 4f 4d 4d 41 4e 44 00 53  SH_CLIENT.SSH_ORIGINAL_COMMAND.S
00035fa0  53 48 5f 50 55 42 4b 45 59 49 4e 46 4f 00 63 68 64 69 72 28 22 2f 22 29 20 66 61 69 6c 65 64 00  SH_PUBKEYINFO.chdir("/") failed.
00035fc0  46 61 69 6c 65 64 20 63 68 64 69 72 20 27 25 73 27 3a 20                                         Failed chdir '%s': 

00035fd3  char const data_35fd3[0x4] = "%s\n", 0

00035fd7                                                                       43 68 69 6c 64 20 66 61 69                         Child fai
00035fe0  6c 65 64 00                                                                                      led.

00035fe4  char const data_35fe4[0x5] = "sftp", 0
00035fe9  char const data_35fe9[0x19] = "/usr/libexec/sftp-server", 0
00036002  char const data_36002[0xc] = "%s %s %s %s", 0
0003600e  char const data_3600e[0x27] = "No pty was allocated, couldn\'t execute", 0

00036035                                                                 25 73 2f 2e 68 75 73 68 6c 6f 67                       %s/.hushlog
00036040  69 6e 00 2f 65 74 63 2f 6d 6f 74 64 00                                                           in./etc/motd.

0003604d  char const data_3604d[0x11] = "chansess != NULL", 0
0003605e  char const data_3605e[0xe] = "window-change", 0
0003606c  char const data_3606c[0x6] = "shell", 0
00036072  char const data_36072[0x8] = "pty-req", 0

0003607a                                                                                4d 75 6c 74 69 70                            Multip
00036080  6c 65 20 70 74 79 20 72 65 71 75 65 73 74 73 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 67 65  le pty requests.Out of memory.ge
000360a0  74 70 77 6e 61 6d 20 66 61 69 6c 65 64 20 61 66 74 65 72 20 73 75 63 63 65 65 64 69 6e 67 20 70  tpwnam failed after succeeding p
000360c0  72 65 76 69 6f 75 73 6c 79 00 42 61 64 20 74 65 72 6d 20 6d 6f 64 65 20 73 74 72 69 6e 67 00 45  reviously.Bad term mode string.E
000360e0  72 72 6f 72 20 73 65 74 74 69 6e 67 20 74 65 72 6d 69 6e 61 6c 20 61 74 74 72 69 62 75 74 65 73  rror setting terminal attributes
00036100  00                                                                                               .

00036101  char const data_36101[0x5] = "exec", 0
00036106  char const data_36106[0xa] = "subsystem", 0
00036110  char const data_36110[0x1b] = "auth-agent-req@openssh.com", 0
0003612b  char const data_3612b[0x8] = "session", 0
00036133  char const data_36133[0x14d] = "Dropbear server v%s https://matt.ucc.asn.au/dropbear/dropbear.html\n"
00036133      "Usage: %s [options]\n"
00036133      "-b bannerfile\tDisplay the contents of bannerfile before user login\n"
00036133      "\t\t(default: none)\n"
00036133      "-r keyfile      Specify hostkeys (repeatable)\n"
00036133      "\t\tdefaults: \n"
00036133      "\t\t- rsa %s\n"
00036133      "\t\t- ecdsa %s\n"
00036133      "\t\t- ed25519 %s\n"
00036133      "-D\t\tDirectory containing authorized_keys file\n"
00036133      "-R\t\tCreate hostke"

00036280  79 73 20 61 73 20 72 65 71 75 69 72 65 64 0a 2d 46 09 09 44 6f 6e 27 74 20 66 6f 72 6b 20 69 6e  ys as required.-F..Don't fork in
000362a0  74 6f 20 62 61 63 6b 67 72 6f 75 6e 64 0a 2d 65 09 09 50 61 73 73 20 6f 6e 20 73 65 72 76 65 72  to background.-e..Pass on server
000362c0  20 70 72 6f 63 65 73 73 20 65 6e 76 69 72 6f 6e 6d 65 6e 74 20 74 6f 20 63 68 69 6c 64 20 70 72   process environment to child pr
000362e0  6f 63 65 73 73 0a 2d 45 09 09 4c 6f 67 20 74 6f 20 73 74 64 65 72 72 20 72 61 74 68 65 72 20 74  ocess.-E..Log to stderr rather t
00036300  68 61 6e 20 73 79 73 6c 6f 67 0a 2d 6d 09 09 44 6f 6e 27 74 20 64 69 73 70 6c 61 79 20 74 68 65  han syslog.-m..Don't display the
00036320  20 6d 6f 74 64 20 6f 6e 20 6c 6f 67 69 6e 0a 2d 77 09 09 44 69 73 61 6c 6c 6f 77 20 72 6f 6f 74   motd on login.-w..Disallow root
00036340  20 6c 6f 67 69 6e 73 0a 2d 47 09 09 52 65 73 74 72 69 63 74 20 6c 6f 67 69 6e 73 20 74 6f 20 6d   logins.-G..Restrict logins to m
00036360  65 6d 62 65 72 73 20 6f 66 20 73 70 65 63 69 66 69 65 64 20 67 72 6f 75 70 0a 2d 73 09 09 44 69  embers of specified group.-s..Di
00036380  73 61 62 6c 65 20 70 61 73 73 77 6f 72 64 20 6c 6f 67 69 6e 73 0a 2d 67 09 09 44 69 73 61 62 6c  sable password logins.-g..Disabl
000363a0  65 20 70 61 73 73 77 6f 72 64 20 6c 6f 67 69 6e 73 20 66 6f 72 20 72 6f 6f 74 0a 2d 42 09 09 41  e password logins for root.-B..A
000363c0  6c 6c 6f 77 20 62 6c 61 6e 6b 20 70 61 73 73 77 6f 72 64 20 6c 6f 67 69 6e 73 0a 2d 74 09 09 45  llow blank password logins.-t..E
000363e0  6e 61 62 6c 65 20 74 77 6f 2d 66 61 63 74 6f 72 20 61 75 74 68 65 6e 74 69 63 61 74 69 6f 6e 20  nable two-factor authentication 
00036400  28 62 6f 74 68 20 70 61 73 73 77 6f 72 64 20 61 6e 64 20 70 75 62 6c 69 63 20 6b 65 79 20 72 65  (both password and public key re
00036420  71 75 69 72 65 64 29 0a 2d 54 09 09 4d 61 78 69 6d 75 6d 20 61 75 74 68 65 6e 74 69 63 61 74 69  quired).-T..Maximum authenticati
00036440  6f 6e 20 74 72 69 65 73 20 28 64 65 66 61 75 6c 74 20 25 64 29 0a 2d 6a 09 09 44 69 73 61 62 6c  on tries (default %d).-j..Disabl
00036460  65 20 6c 6f 63 61 6c 20 70 6f 72 74 20 66 6f 72 77 61 72 64 69 6e 67 0a 2d 6b 09 09 44 69 73 61  e local port forwarding.-k..Disa
00036480  62 6c 65 20 72 65 6d 6f 74 65 20 70 6f 72 74 20 66 6f 72 77 61 72 64 69 6e 67 0a 2d 61 09 09 41  ble remote port forwarding.-a..A
000364a0  6c 6c 6f 77 20 63 6f 6e 6e 65 63 74 69 6f 6e 73 20 74 6f 20 66 6f 72 77 61 72 64 65 64 20 70 6f  llow connections to forwarded po
000364c0  72 74 73 20 66 72 6f 6d 20 61 6e 79 20 68 6f 73 74 0a 2d 63 20 63 6f 6d 6d 61 6e 64 09 46 6f 72  rts from any host.-c command.For
000364e0  63 65 20 65 78 65 63 75 74 65 64 20 63 6f 6d 6d 61 6e 64 0a 2d 70 20 5b 61 64 64 72 65 73 73 3a  ce executed command.-p [address:
00036500  5d 70 6f 72 74 0a 09 09 4c 69 73 74 65 6e 20 6f 6e 20 73 70 65 63 69 66 69 65 64 20 74 63 70 20  ]port...Listen on specified tcp 
00036520  70 6f 72 74 20 28 61 6e 64 20 6f 70 74 69 6f 6e 61 6c 6c 79 20 61 64 64 72 65 73 73 29 2c 0a 09  port (and optionally address),..
00036540  09 75 70 20 74 6f 20 25 64 20 63 61 6e 20 62 65 20 73 70 65 63 69 66 69 65 64 0a 09 09 28 64 65  .up to %d can be specified...(de
00036560  66 61 75 6c 74 20 70 6f 72 74 20 69 73 20 25 73 20 69 66 20 6e 6f 6e 65 20 73 70 65 63 69 66 69  fault port is %s if none specifi
00036580  65 64 29 0a 2d 50 20 50 69 64 46 69 6c 65 09 43 72 65 61 74 65 20 70 69 64 20 66 69 6c 65 20 50  ed).-P PidFile.Create pid file P
000365a0  69 64 46 69 6c 65 0a 09 09 28 64 65 66 61 75 6c 74 20 25 73 29 0a 2d 6c 20 3c 69 6e 74 65 72 66  idFile...(default %s).-l <interf
000365c0  61 63 65 3e 0a 09 09 69 6e 74 65 72 66 61 63 65 20 74 6f 20 62 69 6e 64 20 6f 6e 0a 2d 69 09 09  ace>...interface to bind on.-i..
000365e0  53 74 61 72 74 20 66 6f 72 20 69 6e 65 74 64 0a 2d 57 20 3c 72 65 63 65 69 76 65 5f 77 69 6e 64  Start for inetd.-W <receive_wind
00036600  6f 77 5f 62 75 66 66 65 72 3e 20 28 64 65 66 61 75 6c 74 20 25 64 2c 20 6c 61 72 67 65 72 20 6d  ow_buffer> (default %d, larger m
00036620  61 79 20 62 65 20 66 61 73 74 65 72 2c 20 6d 61 78 20 31 30 4d 42 29 0a 2d 4b 20 3c 6b 65 65 70  ay be faster, max 10MB).-K <keep
00036640  61 6c 69 76 65 3e 20 20 28 30 20 69 73 20 6e 65 76 65 72 2c 20 64 65 66 61 75 6c 74 20 25 64 2c  alive>  (0 is never, default %d,
00036660  20 69 6e 20 73 65 63 6f 6e 64 73 29 0a 2d 49 20 3c 69 64 6c 65 5f 74 69 6d 65 6f 75 74 3e 20 20   in seconds).-I <idle_timeout>  
00036680  28 30 20 69 73 20 6e 65 76 65 72 2c 20 64 65 66 61 75 6c 74 20 25 64 2c 20 69 6e 20 73 65 63 6f  (0 is never, default %d, in seco
000366a0  6e 64 73 29 0a 2d 7a 20 20 20 20 64 69 73 61 62 6c 65 20 51 6f 53 0a 2d 56 20 20 20 20 56 65 72  nds).-z    disable QoS.-V    Ver
000366c0  73 69 6f 6e 0a 00                                                                                sion..

000366c6  char const data_366c6[0x16] = "/var/run/dropbear.pid", 0

000366dc  data_366dc:
000366dc                                                                                      32 32 00                                 22.

000366df  char const data_366df[0x21] = "Only one %s key can be specified", 0
00036700  char const data_36700[0x12] = "Failed loading %s", 0
00036712  char const data_36712[0x9] = "ECDSA256", 0
0003671b  char const data_3671b[0x9] = "ECDSA384", 0
00036724  char const data_36724[0x9] = "ECDSA521", 0
0003672d  char const data_3672d[0x7] = "~/.ssh", 0
00036734  char const data_36734[0x15] = "Invalid argument: %s", 0
00036749  char const data_36749[0x14] = "Invalid option -%c\n", 0
0003675d  char const data_3675d[0x11] = "Missing argument", 0
0003676e  char const data_3676e[0x10] = "Bad -p argument", 0
0003677e  char const data_3677e[0x9] = "Bad port", 0
00036787  char const data_36787[0x16] = "Invalid null argument", 0
0003679d  char const data_3679d[0x12] = "Too many hostkeys", 0
000367af  char const data_367af[0x1f] = "Error opening banner file \'%s\'", 0
000367ce  char const data_367ce[0x27] = "Banner file too large, max is %d bytes", 0
000367f5  char const data_367f5[0x1f] = "Error reading banner file \'%s\'", 0
00036814  char const data_36814[0x41] = "Cannot restrict logins to group \'%s\' as the group does not exist", 0

00036855                                                                 42 61 64 20 6d 61 78 61 75 74 68                       Bad maxauth
00036860  74 72 69 65 73 20 27 25 73 27 00 42 61 64 20 6b 65 65 70 61 6c 69 76 65 20 27 25 73 27 00 42 61  tries '%s'.Bad keepalive '%s'.Ba
00036880  64 20 69 64 6c 65 5f 74 69 6d 65 6f 75 74 20 27 25 73 27 00                                      d idle_timeout '%s'.

00036894  char const data_36894[0x1b] = "Forced command set to \'%s\'", 0
000368af  char const data_368af[0x1a] = "Binding to interface \'%s\'", 0

000368c9                             42 61 64 20                                                                    Bad 

000368cd  char const data_368cd[0x3] = "-2", 0
000368d0  char const data_368d0[0x1b] = "-t and -s are incompatible", 0
000368eb  char const data_368eb[0x7] = "Bad -D", 0

000368f2                                                        4e 6f 20 68 6f 73 74 6b 65 79 73 20 61 76                    No hostkeys av
00036900  61 69 6c 61 62 6c 65 2e 20 27 64 72 6f 70 62 65 61 72 20 2d 52 27 20 6d 61 79 20 62 65 20 75 73  ailable. 'dropbear -R' may be us
00036920  65 66 75 6c 20 6f 72 20 72 75 6e 20 64 72 6f 70 62 65 61 72 6b 65 79 2e 00                       eful or run dropbearkey..

00036939  char const data_36939[0xe] = "SSH_AUTH_SOCK", 0

00036947                       2f 74 6d 70 2f 64 72 6f 70 62 65 61 72 2d 25 2e 38                                 /tmp/dropbear-%.8

00036958  char const data_36958[0x2] = "x", 0

0003695a                                                                                61 75 74 68 2d 25                            auth-%
00036960  2e 38 78 2d 25 64 00                                                                             .8x-%d.

00036967  char const data_36967[0x17] = "auth-agent@openssh.com", 0
0003697e  char const data_3697e[0x9] = "dropbear", 0

00036987                       43 68 69 6c 64 20 63 6f 6e 6e 65 63 74 69 6f 6e 20 66 72 6f 6d 20                  Child connection from 

0003699d  char const data_3699d[0x6] = "%s:%s", 0
000369a3  char const data_369a3[0x4b] = "Aiee, segfault! You should probably report this as a bug to the developer\n", 0
000369ee  char const data_369ee[0x1d] = "Failed listening on \'%s\': %s", 0
00036a0b  char const data_36a0b[0x1e] = "No listening ports available.", 0
00036a29  char const data_36a29[0x18] = "Failed to daemonize: %s", 0
00036a41  char const data_36a41[0x16] = "Running in background", 0
00036a57  char const data_36a57[0x12] = "Not backgrounding", 0

00036a69                             25 64 0a 00                                                                    %d..

00036a6d  char const data_36a6d[0x17] = "Listening socket error", 0

00036a84              45 72 72 6f 72 20 66 6f 72 6b 69 6e 67 3a 20 25 73 00 73 65 74 73 69 64 3a 20 25 73      Error forking: %s.setsid: %s
00036aa0  00                                                                                               .

00036aa1  char const data_36aa1[0x10] = "dup2 failed: %s", 0
00036ab1  char const data_36ab1[0x26] = "fexecve failed, disabling re-exec: %s", 0
00036ad7  char const data_36ad7[0x9] = "Bad argc", 0

00036ae0  63 61 6e 63 65 6c 2d 74 63 70 69 70 2d 66 6f 72 77 61 72 64 00                                   cancel-tcpip-forward.

00036af5  char const data_36af5[0x1f] = "direct-streamlocal@openssh.com", 0
00036b14  char const data_36b14[0xd] = "direct-tcpip", 0
00036b21  char const data_36b21[0x10] = "forwarded-tcpip", 0
00036b31  char const data_36b31[0x16] = "src/ciphers/aes/aes.c", 0
00036b47  char const data_36b47[0xd] = "skey != NULL", 0
00036b54  char const data_36b54[0xb] = "pt != NULL", 0
00036b5f  char const data_36b5f[0xb] = "ct != NULL", 0
00036b6a  char const data_36b6a[0x10] = "keysize != NULL", 0

00036b7a                                                                                61 65 73 00                                  aes.

00036b7e  char const data_36b7e[0x19] = "src/hashes/sha2/sha256.c", 0
00036b97  char const data_36b97[0xb] = "md != NULL", 0
00036ba2  char const data_36ba2[0xb] = "in != NULL", 0
00036bad  char const data_36bad[0x19] = "src/hashes/sha2/sha384.c", 0
00036bc6  char const data_36bc6[0x7] = "sha384", 0
00036bcd  char const data_36bcd[0x19] = "src/hashes/sha2/sha512.c", 0
00036be6  char const data_36be6[0x19] = "src/mac/hmac/hmac_done.c", 0
00036bff  char const data_36bff[0xd] = "hmac != NULL", 0
00036c0c  char const data_36c0c[0x19] = "src/mac/hmac/hmac_init.c", 0
00036c25  char const data_36c25[0x1c] = "src/mac/hmac/hmac_process.c", 0
00036c41  char const data_36c41[0x1c] = "src/mac/poly1305/poly1305.c", 0
00036c5d  char const data_36c5d[0xb] = "st != NULL", 0
00036c68  char const data_36c68[0xd] = "keylen == 32", 0
00036c75  char const data_36c75[0xf] = "maclen != NULL", 0
00036c84  char const data_36c84[0xe] = "*maclen >= 16", 0
00036c92  char const data_36c92[0x14] = "src/math/ltm_desc.c", 0
00036ca6  char const data_36ca6[0xa] = "a != NULL", 0
00036cb0  char const data_36cb0[0xa] = "b != NULL", 0
00036cba  char const data_36cba[0xb] = "LibTomMath", 0
00036cc5  char const data_36cc5[0x20] = "src/misc/base64/base64_decode.c", 0
00036ce5  char const data_36ce5[0x20] = "src/misc/base64/base64_encode.c", 0
00036d05  char const data_36d05[0x41] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
00036d46  char const data_36d46[0x2f] = "LTC_ARGCHK \'%s\' failure on line %d of file %s\n", 0
00036d75  char const data_36d75[0x23] = "src/misc/crypt/crypt_find_cipher.c", 0
00036d98  char const data_36d98[0x21] = "src/misc/crypt/crypt_find_hash.c", 0
00036db9  char const data_36db9[0x27] = "src/misc/crypt/crypt_register_cipher.c", 0
00036de0  char const data_36de0[0xf] = "cipher != NULL", 0
00036def  char const data_36def[0x25] = "src/misc/crypt/crypt_register_hash.c", 0
00036e14  char const data_36e14[0xd] = "hash != NULL", 0
00036e21  char const data_36e21[0x25] = "src/misc/crypt/crypt_register_prng.c", 0
00036e46  char const data_36e46[0xd] = "prng != NULL", 0
00036e53  char const data_36e53[0x1c] = "src/modes/ctr/ctr_decrypt.c", 0
00036e6f  char const data_36e6f[0xc] = "ctr != NULL", 0
00036e7b  char const data_36e7b[0x1c] = "src/modes/ctr/ctr_encrypt.c", 0
00036e97  char const data_36e97[0x1a] = "src/modes/ctr/ctr_start.c", 0
00036eb1  char const data_36eb1[0xb] = "IV != NULL", 0
00036ebc  char const data_36ebc[0x8] = "ECC-256", 0
00036ec4  char const data_36ec4[0x41] = "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", 0
00036f05  char const data_36f05[0x41] = "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", 0
00036f46  char const data_36f46[0x41] = "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", 0
00036f87  char const data_36f87[0x41] = "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", 0
00036fc8  char const data_36fc8[0x41] = "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", 0
00037009  char const data_37009[0x8] = "ECC-384", 0
00037011  char const data_37011[0x61] = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", 0
00037072  char const data_37072[0x61] = "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", 0
000370d3  char const data_370d3[0x61] = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", 0
00037134  char const data_37134[0x61] = "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", 0
00037195  char const data_37195[0x61] = "3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F", 0
000371f6  char const data_371f6[0x8] = "ECC-521", 0
000371fe  char const data_371fe[0x82] = "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"

00037280  46 00                                                                                            F.

00037282  char const data_37282[0x83] = "51953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", 0
00037305  char const data_37305[0x84] = "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", 0
00037389  char const data_37389[0x83] = "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", 0
0003740c  char const data_3740c[0x84] = "11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650", 0
00037490  char const data_37490[0x22] = "src/pk/ecc/ecc_ansi_x963_export.c", 0
000374b2  char const data_374b2[0x16] = "src/pk/ecc/ecc_free.c", 0
000374c8  char const data_374c8[0x1a] = "src/pk/ecc/ecc_make_key.c", 0
000374e2  char const data_374e2[0x14] = "ltc_mp.name != NULL", 0
000374f6  char const data_374f6[0xb] = "dp != NULL", 0
00037501  char const data_37501[0x19] = "src/pk/ecc/ltc_ecc_map.c", 0
0003751a  char const data_3751a[0xa] = "P != NULL", 0
00037524  char const data_37524[0x10] = "modulus != NULL", 0
00037534  char const data_37534[0x1d] = "src/pk/ecc/ltc_ecc_mul2add.c", 0
00037551  char const data_37551[0xa] = "C != NULL", 0
0003755b  char const data_3755b[0xb] = "kA != NULL", 0
00037566  char const data_37566[0xb] = "kB != NULL", 0
00037571  char const data_37571[0x23] = "src/pk/ecc/ltc_ecc_mulmod_timing.c", 0
00037594  char const data_37594[0xa] = "k != NULL", 0
0003759e  char const data_3759e[0xa] = "G != NULL", 0
000375a8  char const data_375a8[0xa] = "R != NULL", 0
000375b2  char const data_375b2[0x2a] = "src/pk/ecc/ltc_ecc_projective_add_point.c", 0
000375dc  char const data_375dc[0xa] = "Q != NULL", 0
000375e6  char const data_375e6[0x2a] = "src/pk/ecc/ltc_ecc_projective_dbl_point.c", 0
00037610  char const data_37610[0x21] = "src/stream/chacha/chacha_crypt.c", 0
00037631  char const data_37631[0xf] = "st->ivlen != 0", 0
00037640  char const data_37640[0x23] = "src/stream/chacha/chacha_ivctr64.c", 0
00037663  char const data_37663[0xb] = "iv != NULL", 0
0003766e  char const data_3766e[0xb] = "ivlen == 8", 0
00037679  char const data_37679[0x25] = "src/stream/chacha/chacha_keystream.c", 0
0003769e  char const data_3769e[0x11] = "expand 32-byte k", 0
000376af  char const data_376af[0x11] = "expand 16-byte k", 0
000376c0  char const data_376c0[0x21] = "src/stream/chacha/chacha_setup.c", 0
000376e1  char const data_376e1[0x1d] = "keylen == 32 || keylen == 16", 0
000376fe  char const data_376fe[0x20] = "src/hashes/helper/hash_memory.c", 0

0003771e                                                                                            34 33                                43
00037720  37 61 65 39 32 38 31 37 66 39 66 63 38 35 62 37 65 35 00 32 62 65 36 39 35 31 61 64 63 35 62 32  7ae92817f9fc85b7e5.2be6951adc5b2
00037740  32 34 31 30 61 35 66 64 00 00 00 00 00 00 00 00                                                  2410a5fd........

00037750  char const __PRETTY_FUNCTION__.0[0x1c] = "signkey_type_from_signature", 0

0003776c                                      00 00 00 00                                                              ....

00037770  char const __PRETTY_FUNCTION__.1[0x1c] = "signature_type_from_signkey", 0

0003778c                                      00 00 00 00                                                              ....

00037790  char const __PRETTY_FUNCTION__.0[0xb] = "rsa_pad_em", 0

0003779b                                                                                   00 00 00 00 00                             .....

000377a0  char const __PRETTY_FUNCTION__.0[0xd] = "curve_for_dp", 0

000377ad                                         00 00 00 00 00 00 00 00 00 00 00                                       ...........
000377b8  data_377b8:
000377b8                                                                          00 00 00 00 00 00 00 00                          ........
000377c0  L:
000377c0  ed 00 00 00 00 00 00 00 d3 00 00 00 00 00 00 00 f5 00 00 00 00 00 00 00 5c 00 00 00 00 00 00 00  ........................\.......
000377e0  1a 00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 58 00 00 00 00 00 00 00  ........c...............X.......
00037800  d6 00 00 00 00 00 00 00 9c 00 00 00 00 00 00 00 f7 00 00 00 00 00 00 00 a2 00 00 00 00 00 00 00  ................................
00037820  de 00 00 00 00 00 00 00 f9 00 00 00 00 00 00 00 de 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00  ................................
00037840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000378a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................................
000378c0  I:
000378c0  b0 a0 00 00 00 00 00 00 0e 4a 00 00 00 00 00 00 27 1b 00 00 00 00 00 00 ee c4 00 00 00 00 00 00  .........J......'...............
000378e0  78 e4 00 00 00 00 00 00 2f ad 00 00 00 00 00 00 06 18 00 00 00 00 00 00 43 2f 00 00 00 00 00 00  x......./...............C/......
00037900  a7 d7 00 00 00 00 00 00 fb 3d 00 00 00 00 00 00 99 00 00 00 00 00 00 00 4d 2b 00 00 00 00 00 00  .........=..............M+......
00037920  0b df 00 00 00 00 00 00 c1 4f 00 00 00 00 00 00 80 24 00 00 00 00 00 00 83 2b 00 00 00 00 00 00  .........O.......$.......+......
00037940  D:
00037940  a3 78 00 00 00 00 00 00 59 13 00 00 00 00 00 00 ca 4d 00 00 00 00 00 00 eb 75 00 00 00 00 00 00  .x......Y........M.......u......
00037960  ab d8 00 00 00 00 00 00 41 41 00 00 00 00 00 00 4d 0a 00 00 00 00 00 00 70 00 00 00 00 00 00 00  ........AA......M.......p.......
00037980  98 e8 00 00 00 00 00 00 79 77 00 00 00 00 00 00 79 40 00 00 00 00 00 00 c7 8c 00 00 00 00 00 00  ........yw......y@..............
000379a0  73 fe 00 00 00 00 00 00 6f 2b 00 00 00 00 00 00 ee 6c 00 00 00 00 00 00 03 52 00 00 00 00 00 00  s.......o+.......l.......R......
000379c0  Y:
000379c0  58 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00  Xf......ff......ff......ff......
000379e0  66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00  ff......ff......ff......ff......
00037a00  66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00  ff......ff......ff......ff......
00037a20  66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00 66 66 00 00 00 00 00 00  ff......ff......ff......ff......
00037a40  X:
00037a40  1a d5 00 00 00 00 00 00 25 8f 00 00 00 00 00 00 60 2d 00 00 00 00 00 00 56 c9 00 00 00 00 00 00  ........%.......`-......V.......
00037a60  b2 a7 00 00 00 00 00 00 25 95 00 00 00 00 00 00 60 c7 00 00 00 00 00 00 2c 69 00 00 00 00 00 00  ........%.......`.......,i......
00037a80  5c dc 00 00 00 00 00 00 d6 fd 00 00 00 00 00 00 31 e2 00 00 00 00 00 00 a4 c0 00 00 00 00 00 00  \...............1...............
00037aa0  fe 53 00 00 00 00 00 00 6e cd 00 00 00 00 00 00 d3 36 00 00 00 00 00 00 69 21 00 00 00 00 00 00  .S......n........6......i!......
00037ac0  D2:
00037ac0  59 f1 00 00 00 00 00 00 b2 26 00 00 00 00 00 00 94 9b 00 00 00 00 00 00 d6 eb 00 00 00 00 00 00  Y........&......................
00037ae0  56 b1 00 00 00 00 00 00 83 82 00 00 00 00 00 00 9a 14 00 00 00 00 00 00 e0 00 00 00 00 00 00 00  V...............................
00037b00  30 d1 00 00 00 00 00 00 f3 ee 00 00 00 00 00 00 f2 80 00 00 00 00 00 00 8e 19 00 00 00 00 00 00  0...............................
00037b20  e7 fc 00 00 00 00 00 00 df 56 00 00 00 00 00 00 dc d9 00 00 00 00 00 00 06 24 00 00 00 00 00 00  .........V...............$......
00037b40  gf1:
00037b40  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037bc0  gf0:
00037bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037c40  _121665:
00037c40  41 db 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  A...............................
00037c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037cc0  dropbear_nohash:
00037cc0  00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037ce0  dropbear_nocipher:
00037ce0  00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037d00  __PRETTY_FUNCTION__.0:
00037d00  77 72 69 74 65 63 68 61 6e 6e 65 6c 5f 77 72 69 74 65 76 00 00 00 00 00 00 00 00 00 00 00 00 00  writechannel_writev.............
00037d20  termcodes:
00037d20  00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 01 00 00 00 05 00 00 00 02 00 00 00 05 00 00 00  ................................
00037d40  03 00 00 00 05 00 00 00 04 00 00 00 05 00 00 00 0b 00 00 00 05 00 00 00 10 00 00 00 05 00 00 00  ................................
00037d60  08 00 00 00 05 00 00 00 09 00 00 00 05 00 00 00 0a 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  ................................
00037d80  0c 00 00 00 05 00 00 00 0e 00 00 00 05 00 00 00 0f 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  ................................
00037da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  ................................
00037dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 02 00 00 00 08 00 00 00 02 00 00 00  ................................
00037e20  10 00 00 00 02 00 00 00 20 00 00 00 02 00 00 00 40 00 00 00 02 00 00 00 80 00 00 00 02 00 00 00  ........ .......@...............
00037e40  00 01 00 00 02 00 00 00 00 02 00 00 02 00 00 00 00 04 00 00 02 00 00 00 00 08 00 00 02 00 00 00  ................................
00037e60  00 10 00 00 02 00 00 00 00 20 00 00 02 00 00 00 00 40 00 00 02 00 00 00 00 00 00 00 00 00 00 00  ......... .......@..............
00037e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04 00 00 00 02 00 00 00 04 00 00 00  ................................
00037ec0  04 00 00 00 04 00 00 00 08 00 00 00 04 00 00 00 10 00 00 00 04 00 00 00 20 00 00 00 04 00 00 00  ........................ .......
00037ee0  40 00 00 00 04 00 00 00 80 00 00 00 04 00 00 00 00 01 00 00 04 00 00 00 00 80 00 00 04 00 00 00  @...............................
00037f00  00 02 00 00 04 00 00 00 00 08 00 00 04 00 00 00 00 40 00 00 04 00 00 00 00 00 00 00 00 00 00 00  .................@..............
00037f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 03 00 00 00 02 00 00 00 03 00 00 00  ................................
00037f60  04 00 00 00 03 00 00 00 08 00 00 00 03 00 00 00 10 00 00 00 03 00 00 00 20 00 00 00 03 00 00 00  ........................ .......
00037f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00037fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 01 00 00 00 30 00 00 00 01 00 00 00  ................ .......0.......
00038000  00 01 00 00 01 00 00 00 00 02 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00038020  uint32_t DH_G_VAL = 0x2

00038024              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
00038040  dh_p_14:
00038040  ff ff ff ff ff ff ff ff c9 0f da a2 21 68 c2 34 c4 c6 62 8b 80 dc 1c d1 29 02 4e 08 8a 67 cc 74  ............!h.4..b.....).N..g.t
00038060  02 0b be a6 3b 13 9b 22 51 4a 08 79 8e 34 04 dd ef 95 19 b3 cd 3a 43 1b 30 2b 0a 6d f2 5f 14 37  ....;.."QJ.y.4.......:C.0+.m._.7
00038080  4f e1 35 6d 6d 51 c2 45 e4 85 b5 76 62 5e 7e c6 f4 4c 42 e9 a6 37 ed 6b 0b ff 5c b6 f4 06 b7 ed  O.5mmQ.E...vb^~..LB..7.k..\.....
000380a0  ee 38 6b fb 5a 89 9f a5 ae 9f 24 11 7c 4b 1f e6 49 28 66 51 ec e4 5b 3d c2 00 7c b8 a1 63 bf 05  .8k.Z.....$.|K..I(fQ..[=..|..c..
000380c0  98 da 48 36 1c 55 d3 9a 69 16 3f a8 fd 24 cf 5f 83 65 5d 23 dc a3 ad 96 1c 62 f3 56 20 85 52 bb  ..H6.U..i.?..$._.e]#.....b.V .R.
000380e0  9e d5 29 07 70 96 96 6d 67 0c 35 4e 4a bc 98 04 f1 74 6c 08 ca 18 21 7c 32 90 5e 46 2e 36 ce 3b  ..).p..mg.5NJ....tl...!|2.^F.6.;
00038100  e3 9e 77 2c 18 0e 86 03 9b 27 83 a2 ec 07 a2 8f b5 c5 5d f0 6f 4c 52 c9 de 2b cb f6 95 58 17 18  ..w,.....'........].oLR..+...X..
00038120  39 95 49 7c ea 95 6a e5 15 d2 26 18 98 fa 05 10 15 72 8e 5a 8a ac aa 68 ff ff ff ff ff ff ff ff  9.I|..j...&......r.Z...h........
00038140  dropbear_chachapoly_mac:
00038140  00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ........ .......................
00038160  dummy:
00038160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000381a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000381c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000381e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00038220  char const __PRETTY_FUNCTION__.0[0x15] = "kexpqhybrid_comb_key", 0

00038235                                                                 00 00 00 00 00 00 00 00 00 00 00                       ...........
00038240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000382a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000382c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000382e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00038320  libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R:
00038320  ec fb 0a fd 99 fe 13 fa d5 05 8e 05 1f 01 ca 00 55 ff 6e 02 29 06 b6 00 c2 03 4e fb 3e fa bc 05  ................U.n.).....N.>...
00038340  3d 02 d3 fa 08 01 7f 01 c3 fc b2 05 be f9 7e ff 57 fd f9 03 dc 02 60 02 fa f9 9b 01 33 ff dd f9  =.............~.W.....`.....3...
00038360  c7 04 8c 02 d8 fd f7 03 f3 fa d3 05 e6 fe f8 f9 04 02 f8 ff c0 fe 66 fd ae f9 76 fb 7e 00 bd 05  ......................f...v.~...
00038380  ab fc a6 ff f1 fe 3e 03 6b 00 73 fa 09 ff 49 fc 72 fe c1 03 1c fa 2b fd c0 01 d7 fb a5 02 05 fb  ......>.k.s...I.r.....+.........
000383a0  b1 fb ae 01 2b 02 4b 03 1d fb 67 03 0e 06 69 00 a6 01 4b 02 b1 00 15 ff dd fe 34 fe 26 06 75 06  ....+.K...g...i...K.......4.&.u.
000383c0  0a ff 0a 03 87 04 6d ff f7 fc cb 05 a6 fd 5f 04 ca f9 84 02 98 fc 5d 01 a2 01 49 01 64 ff b5 ff  ......m......._.......]...I.d...
000383e0  31 03 49 04 5b 02 62 02 2a 05 fb fa 47 fa 80 01 41 fb 78 ff c2 04 c9 fa 96 fc dc 00 5d fb 85 f9  1.I.[.b.*...G...A.x.........]...
00038400  5f fb 06 fa 02 fb 1a 03 1a fa aa fc 9a fc de 01 94 ff cc fe e4 03 df 03                          _.......................

00038418  int16_t data_38418 = 0x3be
0003841a  int16_t data_3841a = -0x5b4
0003841c  int16_t data_3841c = 0x5f2
0003841e  int16_t data_3841e = 0x65c

00038420  libcrux_sha3_generic_keccak_ROUNDCONSTANTS:
00038420  01 00 00 00 00 00 00 00 82 80 00 00 00 00 00 00 8a 80 00 00 00 00 00 80 00 80 00 80 00 00 00 80  ................................
00038440  8b 80 00 00 00 00 00 00 01 00 00 80 00 00 00 00 81 80 00 80 00 00 00 80 09 80 00 00 00 00 00 80  ................................
00038460  8a 00 00 00 00 00 00 00 88 00 00 00 00 00 00 00 09 80 00 80 00 00 00 00 0a 00 00 80 00 00 00 00  ................................
00038480  8b 80 00 80 00 00 00 00 8b 00 00 00 00 00 00 80 89 80 00 00 00 00 00 80 03 80 00 00 00 00 00 80  ................................
000384a0  02 80 00 00 00 00 00 80 80 00 00 00 00 00 00 80 0a 80 00 00 00 00 00 00 0a 00 00 80 00 00 00 80  ................................
000384c0  81 80 00 80 00 00 00 80 80 80 00 00 00 00 00 80 01 00 00 80 00 00 00 00 08 80 00 80 00 00 00 80  ................................

000384e0  char const __PRETTY_FUNCTION__.0[0x10] = "svr_auth_pubkey", 0

000384f0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00038500  rcon:
00038500  00 00 00 01                                                                                      ....
00038504  data_38504:
00038504              00 00 00 02 00 00 00 04 00 00 00 08 00 00 00 10 00 00 00 20 00 00 00 40                  ................... ...@
0003851c  data_3851c:
0003851c                                                                                      00 00 00 80                              ....
00038520  data_38520:
00038520  00 00 00 1b 00 00 00 36                                                                          .......6
00038528  data_38528:
00038528                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

00038540  char const Td4[0xc] = "RRRR\t\t\t\tjjjj"

0003854c                                      d5 d5 d5 d5 30 30 30 30 36 36 36 36 a5 a5 a5 a5 38 38 38 38              ....00006666....8888
00038560  bf bf bf bf 40 40 40 40 a3 a3 a3 a3 9e 9e 9e 9e 81 81 81 81 f3 f3 f3 f3 d7 d7 d7 d7 fb fb fb fb  ....@@@@........................
00038580  7c 7c 7c 7c e3 e3 e3 e3 39 39 39 39 82 82 82 82 9b 9b 9b 9b 2f 2f 2f 2f ff ff ff ff 87 87 87 87  ||||....9999........////........
000385a0  34 34 34 34 8e 8e 8e 8e 43 43 43 43 44 44 44 44 c4 c4 c4 c4 de de de de e9 e9 e9 e9 cb cb cb cb  4444....CCCCDDDD................
000385c0  54 54 54 54 7b 7b 7b 7b 94 94 94 94 32 32 32 32 a6 a6 a6 a6 c2 c2 c2 c2 23 23 23 23 3d 3d 3d 3d  TTTT{{{{....2222........####====
000385e0  ee ee ee ee 4c 4c 4c 4c 95 95 95 95 0b 0b 0b 0b 42 42 42 42 fa fa fa fa c3 c3 c3 c3 4e 4e 4e 4e  ....LLLL........BBBB........NNNN
00038600  08 08 08 08 2e 2e 2e 2e a1 a1 a1 a1 66 66 66 66 28 28 28 28 d9 d9 d9 d9 24 24 24 24 b2 b2 b2 b2  ............ffff((((....$$$$....
00038620  76 76 76 76 5b 5b 5b 5b a2 a2 a2 a2 49 49 49 49 6d 6d 6d 6d 8b 8b 8b 8b d1 d1 d1 d1 25 25 25 25  vvvv[[[[....IIIImmmm........%%%%
00038640  72 72 72 72 f8 f8 f8 f8 f6 f6 f6 f6 64 64 64 64 86 86 86 86 68 68 68 68 98 98 98 98 16 16 16 16  rrrr........dddd....hhhh........
00038660  d4 d4 d4 d4 a4 a4 a4 a4 5c 5c 5c 5c cc cc cc cc 5d 5d 5d 5d 65 65 65 65 b6 b6 b6 b6 92 92 92 92  ........\\\\....]]]]eeee........
00038680  6c 6c 6c 6c 70 70 70 70 48 48 48 48 50 50 50 50 fd fd fd fd ed ed ed ed b9 b9 b9 b9 da da da da  llllppppHHHHPPPP................
000386a0  5e 5e 5e 5e 15 15 15 15 46 46 46 46 57 57 57 57 a7 a7 a7 a7 8d 8d 8d 8d 9d 9d 9d 9d 84 84 84 84  ^^^^....FFFFWWWW................
000386c0  90 90 90 90 d8 d8 d8 d8 ab ab ab ab 00 00 00 00 8c 8c 8c 8c bc bc bc bc d3 d3 d3 d3 0a 0a 0a 0a  ................................
000386e0  f7 f7 f7 f7 e4 e4 e4 e4 58 58 58 58 05 05 05 05 b8 b8 b8 b8 b3 b3 b3 b3 45 45 45 45 06 06 06 06  ........XXXX............EEEE....
00038700  d0 d0 d0 d0 2c 2c 2c 2c 1e 1e 1e 1e 8f 8f 8f 8f ca ca ca ca 3f 3f 3f 3f 0f 0f 0f 0f 02 02 02 02  ....,,,,............????........
00038720  c1 c1 c1 c1 af af af af bd bd bd bd 03 03 03 03 01 01 01 01 13 13 13 13 8a 8a 8a 8a 6b 6b 6b 6b  ............................kkkk
00038740  3a 3a 3a 3a 91 91 91 91 11 11 11 11 41 41 41 41 4f 4f 4f 4f 67 67 67 67 dc dc dc dc ea ea ea ea  ::::........AAAAOOOOgggg........
00038760  97 97 97 97 f2 f2 f2 f2 cf cf cf cf ce ce ce ce f0 f0 f0 f0 b4 b4 b4 b4 e6 e6 e6 e6 73 73 73 73  ............................ssss
00038780  96 96 96 96 ac ac ac ac 74 74 74 74 22 22 22 22 e7 e7 e7 e7 ad ad ad ad 35 35 35 35 85 85 85 85  ........tttt""""........5555....
000387a0  e2 e2 e2 e2 f9 f9 f9 f9 37 37 37 37 e8 e8 e8 e8 1c 1c 1c 1c 75 75 75 75 df df df df 6e 6e 6e 6e  ........7777........uuuu....nnnn
000387c0  47 47 47 47 f1 f1 f1 f1 1a 1a 1a 1a 71 71 71 71 1d 1d 1d 1d 29 29 29 29 c5 c5 c5 c5 89 89 89 89  GGGG........qqqq....))))........
000387e0  6f 6f 6f 6f b7 b7 b7 b7 62 62 62 62 0e 0e 0e 0e aa aa aa aa 18 18 18 18 be be be be 1b 1b 1b 1b  oooo....bbbb....................
00038800  fc fc fc fc 56 56 56 56 3e 3e 3e 3e 4b 4b 4b 4b c6 c6 c6 c6 d2 d2 d2 d2 79 79 79 79 20 20 20 20  ....VVVV>>>>KKKK........yyyy    
00038820  9a 9a 9a 9a db db db db c0 c0 c0 c0 fe fe fe fe 78 78 78 78 cd cd cd cd 5a 5a 5a 5a f4 f4 f4 f4  ................xxxx....ZZZZ....
00038840  1f 1f 1f 1f dd dd dd dd a8 a8 a8 a8 33 33 33 33 88 88 88 88 07 07 07 07 c7 c7 c7 c7 31 31 31 31  ............3333............1111
00038860  b1 b1 b1 b1 12 12 12 12 10 10 10 10 59 59 59 59 27 27 27 27 80 80 80 80 ec ec ec ec 5f 5f 5f 5f  ............YYYY''''........____
00038880  60 60 60 60 51 51 51 51 7f 7f 7f 7f a9 a9 a9 a9 19 19 19 19 b5 b5 b5 b5 4a 4a 4a 4a 0d 0d 0d 0d  ````QQQQ................JJJJ....
000388a0  2d 2d 2d 2d e5 e5 e5 e5 7a 7a 7a 7a 9f 9f 9f 9f 93 93 93 93 c9 c9 c9 c9 9c 9c 9c 9c ef ef ef ef  ----....zzzz....................
000388c0  a0 a0 a0 a0 e0 e0 e0 e0 3b 3b 3b 3b 4d 4d 4d 4d ae ae ae ae 2a 2a 2a 2a f5 f5 f5 f5 b0 b0 b0 b0  ........;;;;MMMM....****........
000388e0  c8 c8 c8 c8 eb eb eb eb bb bb bb bb 3c 3c 3c 3c 83 83 83 83 53 53 53 53 99 99 99 99 61 61 61 61  ............<<<<....SSSS....aaaa
00038900  17 17 17 17 2b 2b 2b 2b 04 04 04 04 7e 7e 7e 7e ba ba ba ba 77 77 77 77 d6 d6 d6 d6 26 26 26 26  ....++++....~~~~....wwww....&&&&
00038920  e1 e1 e1 e1 69 69 69 69 14 14 14 14 63 63 63 63 55 55 55 55 21 21 21 21 0c 0c 0c 0c 7d 7d 7d 7d  ....iiii....ccccUUUU!!!!....}}}}

00038940  char const TD0[0x1] = "P"

00038941     a7 f4 51 53 65 41 7e c3 a4 17 1a 96 5e 27 3a cb 6b ab 3b f1 45 9d 1f ab 58 fa ac 93 03 e3 4b   ..QSeA~.....^':.k.;.E...X.....K
00038960  55 fa 30 20 f6 6d 76 ad 91 76 cc 88 25 4c 02 f5 fc d7 e5 4f d7 cb 2a c5 80 44 35 26 8f a3 62 b5  U.0 .mv..v..%L.....O..*..D5&..b.
00038980  49 5a b1 de 67 1b ba 25 98 0e ea 45 e1 c0 fe 5d 02 75 2f c3 12 f0 4c 81 a3 97 46 8d c6 f9 d3 6b  IZ..g..%...E...].u/...L...F....k
000389a0  e7 5f 8f 03 95 9c 92 15 eb 7a 6d bf da 59 52 95 2d 83 be d4 d3 21 74 58 29 69 e0 49 44 c8 c9 8e  ._.......zm..YR.-....!tX)i.ID...
000389c0  6a 89 c2 75 78 79 8e f4 6b 3e 58 99 dd 71 b9 27 b6 4f e1 be 17 ad 88 f0 66 ac 20 c9 b4 3a ce 7d  j..uxy..k>X..q.'.O......f. ..:.}
000389e0  18 4a df 63 82 31 1a e5 60 33 51 97 45 7f 53 62 e0 77 64 b1 84 ae 6b bb 1c a0 81 fe 94 2b 08 f9  .J.c.1..`3Q.E.Sb.wd...k......+..
00038a00  58 68 48 70 19 fd 45 8f 87 6c de 94 b7 f8 7b 52 23 d3 73 ab e2 02 4b 72 57 8f 1f e3 2a ab 55 66  XhHp..E..l....{R#.s...KrW...*.Uf
00038a20  07 28 eb b2 03 c2 b5 2f 9a 7b c5 86 a5 08 37 d3 f2 87 28 30 b2 a5 bf 23 ba 6a 03 02 5c 82 16 ed  .(...../.{....7...(0...#.j..\...
00038a40  2b 1c cf 8a 92 b4 79 a7 f0 f2 07 f3 a1 e2 69 4e cd f4 da 65 d5 be 05 06 1f 62 34 d1 8a fe a6 c4  +.....y.......iN...e.....b4.....
00038a60  9d 53 2e 34 a0 55 f3 a2 32 e1 8a 05 75 eb f6 a4 39 ec 83 0b aa ef 60 40 06 9f 71 5e 51 10 6e bd  .S.4.U..2...u...9.....`@..q^Q.n.
00038a80  f9 8a 21 3e 3d 06 dd 96 ae 05 3e dd 46 bd e6 4d b5 8d 54 91 05 5d c4 71 6f d4 06 04 ff 15 50 60  ..!>=.....>.F..M..T..].qo.....P`
00038aa0  24 fb 98 19 97 e9 bd d6 cc 43 40 89 77 9e d9 67 bd 42 e8 b0 88 8b 89 07 38 5b 19 e7 db ee c8 79  $........C@.w..g.B......8[.....y
00038ac0  47 0a 7c a1 e9 0f 42 7c c9 1e 84 f8 00 00 00 00 83 86 80 09 48 ed 2b 32 ac 70 11 1e 4e 72 5a 6c  G.|...B|............H.+2.p..NrZl
00038ae0  fb ff 0e fd 56 38 85 0f 1e d5 ae 3d 27 39 2d 36 64 d9 0f 0a 21 a6 5c 68 d1 54 5b 9b 3a 2e 36 24  ....V8.....='9-6d...!.\h.T[.:.6$
00038b00  b1 67 0a 0c 0f e7 57 93 d2 96 ee b4 9e 91 9b 1b 4f c5 c0 80 a2 20 dc 61 69 4b 77 5a 16 1a 12 1c  .g....W.........O.... .aiKwZ....
00038b20  0a ba 93 e2 e5 2a a0 c0 43 e0 22 3c 1d 17 1b 12 0b 0d 09 0e ad c7 8b f2 b9 a8 b6 2d c8 a9 1e 14  .....*..C."<...............-....
00038b40  85 19 f1 57 4c 07 75 af bb dd 99 ee fd 60 7f a3 9f 26 01 f7 bc f5 72 5c c5 3b 66 44 34 7e fb 5b  ...WL.u......`...&....r\.;fD4~.[
00038b60  76 29 43 8b dc c6 23 cb 68 fc ed b6 63 f1 e4 b8 ca dc 31 d7 10 85 63 42 40 22 97 13 20 11 c6 84  v)C...#.h...c.....1...cB@".. ...
00038b80  7d 24 4a 85 f8 3d bb d2 11 32 f9 ae 6d a1 29 c7 4b 2f 9e 1d f3 30 b2 dc ec 52 86 0d d0 e3 c1 77  }$J..=...2..m.).K/...0...R.....w
00038ba0  6c 16 b3 2b 99 b9 70 a9 fa 48 94 11 22 64 e9 47 c4 8c fc a8 1a 3f f0 a0 d8 2c 7d 56 ef 90 33 22  l..+..p..H.."d.G.....?...,}V..3"
00038bc0  c7 4e 49 87 c1 d1 38 d9 fe a2 ca 8c 36 0b d4 98 cf 81 f5 a6 28 de 7a a5 26 8e b7 da a4 bf ad 3f  .NI...8.....6.......(.z.&......?
00038be0  e4 9d 3a 2c 0d 92 78 50 9b cc 5f 6a 62 46 7e 54 c2 13 8d f6 e8 b8 d8 90 5e f7 39 2e f5 af c3 82  ..:,..xP.._jbF~T........^.9.....
00038c00  be 80 5d 9f 7c 93 d0 69 a9 2d d5 6f b3 12 25 cf 3b 99 ac c8 a7 7d 18 10 6e 63 9c e8 7b bb 3b db  ..].|..i.-.o..%.;....}..nc..{.;.
00038c20  09 78 26 cd f4 18 59 6e 01 b7 9a ec a8 9a 4f 83 65 6e 95 e6 7e e6 ff aa 08 cf bc 21 e6 e8 15 ef  .x&...Yn......O.en..~......!....
00038c40  d9 9b e7 ba ce 36 6f 4a d4 09 9f ea d6 7c b0 29 af b2 a4 31 31 23 3f 2a 30 94 a5 c6 c0 66 a2 35  .....6oJ.....|.)...11#?*0....f.5
00038c60  37 bc 4e 74 a6 ca 82 fc b0 d0 90 e0 15 d8 a7 33 4a 98 04 f1 f7 da ec 41 0e 50 cd 7f 2f f6 91 17  7.Nt...........3J......A.P../...
00038c80  8d d6 4d 76 4d b0 ef 43 54 4d aa cc df 04 96 e4 e3 b5 d1 9e 1b 88 6a 4c b8 1f 2c c1 7f 51 65 46  ..MvM..CTM............jL..,..QeF
00038ca0  04 ea 5e 9d 5d 35 8c 01 73 74 87 fa 2e 41 0b fb 5a 1d 67 b3 52 d2 db 92 33 56 10 e9 13 47 d6 6d  ..^.]5..st...A..Z.g.R...3V...G.m
00038cc0  8c 61 d7 9a 7a 0c a1 37 8e 14 f8 59 89 3c 13 eb ee 27 a9 ce 35 c9 61 b7 ed e5 1c e1 3c b1 47 7a  .a..z..7...Y.<...'..5.a.....<.Gz
00038ce0  59 df d2 9c 3f 73 f2 55 79 ce 14 18 bf 37 c7 73 ea cd f7 53 5b aa fd 5f 14 6f 3d df 86 db 44 78  Y...?s.Uy....7.s...S[.._.o=...Dx
00038d00  81 f3 af ca 3e c4 68 b9 2c 34 24 38 5f 40 a3 c2 72 c3 1d 16 0c 25 e2 bc 8b 49 3c 28 41 95 0d ff  ....>.h.,4$8_@..r....%...I<(A...
00038d20  71 01 a8 39 de b3 0c 08 9c e4 b4 d8 90 c1 56 64 61 84 cb 7b 70 b6 32 d5 74 5c 6c 48 42 57 b8 d0  q..9..........Vda..{p.2.t\lHBW..

00038d40  char const Te4[0x10] = "cccc||||wwww{{{{"

00038d50                                                  f2 f2 f2 f2 6b 6b 6b 6b 6f 6f 6f 6f c5 c5 c5 c5                  ....kkkkoooo....
00038d60  30 30 30 30 01 01 01 01 67 67 67 67 2b 2b 2b 2b fe fe fe fe d7 d7 d7 d7 ab ab ab ab 76 76 76 76  0000....gggg++++............vvvv
00038d80  ca ca ca ca 82 82 82 82 c9 c9 c9 c9 7d 7d 7d 7d fa fa fa fa 59 59 59 59 47 47 47 47 f0 f0 f0 f0  ............}}}}....YYYYGGGG....
00038da0  ad ad ad ad d4 d4 d4 d4 a2 a2 a2 a2 af af af af 9c 9c 9c 9c a4 a4 a4 a4 72 72 72 72 c0 c0 c0 c0  ........................rrrr....
00038dc0  b7 b7 b7 b7 fd fd fd fd 93 93 93 93 26 26 26 26 36 36 36 36 3f 3f 3f 3f f7 f7 f7 f7 cc cc cc cc  ............&&&&6666????........
00038de0  34 34 34 34 a5 a5 a5 a5 e5 e5 e5 e5 f1 f1 f1 f1 71 71 71 71 d8 d8 d8 d8 31 31 31 31 15 15 15 15  4444............qqqq....1111....
00038e00  04 04 04 04 c7 c7 c7 c7 23 23 23 23 c3 c3 c3 c3 18 18 18 18 96 96 96 96 05 05 05 05 9a 9a 9a 9a  ........####....................
00038e20  07 07 07 07 12 12 12 12 80 80 80 80 e2 e2 e2 e2 eb eb eb eb 27 27 27 27 b2 b2 b2 b2 75 75 75 75  ....................''''....uuuu
00038e40  09 09 09 09 83 83 83 83 2c 2c 2c 2c 1a 1a 1a 1a 1b 1b 1b 1b 6e 6e 6e 6e 5a 5a 5a 5a a0 a0 a0 a0  ........,,,,........nnnnZZZZ....
00038e60  52 52 52 52 3b 3b 3b 3b d6 d6 d6 d6 b3 b3 b3 b3 29 29 29 29 e3 e3 e3 e3 2f 2f 2f 2f 84 84 84 84  RRRR;;;;........))))....////....
00038e80  53 53 53 53 d1 d1 d1 d1 00 00 00 00 ed ed ed ed 20 20 20 20 fc fc fc fc b1 b1 b1 b1 5b 5b 5b 5b  SSSS............    ........[[[[
00038ea0  6a 6a 6a 6a cb cb cb cb be be be be 39 39 39 39 4a 4a 4a 4a 4c 4c 4c 4c 58 58 58 58 cf cf cf cf  jjjj........9999JJJJLLLLXXXX....
00038ec0  d0 d0 d0 d0 ef ef ef ef aa aa aa aa fb fb fb fb 43 43 43 43 4d 4d 4d 4d 33 33 33 33 85 85 85 85  ................CCCCMMMM3333....
00038ee0  45 45 45 45 f9 f9 f9 f9 02 02 02 02 7f 7f 7f 7f 50 50 50 50 3c 3c 3c 3c 9f 9f 9f 9f a8 a8 a8 a8  EEEE............PPPP<<<<........
00038f00  51 51 51 51 a3 a3 a3 a3 40 40 40 40 8f 8f 8f 8f 92 92 92 92 9d 9d 9d 9d 38 38 38 38 f5 f5 f5 f5  QQQQ....@@@@............8888....
00038f20  bc bc bc bc b6 b6 b6 b6 da da da da 21 21 21 21 10 10 10 10 ff ff ff ff f3 f3 f3 f3 d2 d2 d2 d2  ............!!!!................
00038f40  cd cd cd cd 0c 0c 0c 0c 13 13 13 13 ec ec ec ec 5f 5f 5f 5f 97 97 97 97 44 44 44 44 17 17 17 17  ................____....DDDD....
00038f60  c4 c4 c4 c4 a7 a7 a7 a7 7e 7e 7e 7e 3d 3d 3d 3d 64 64 64 64 5d 5d 5d 5d 19 19 19 19 73 73 73 73  ........~~~~====dddd]]]]....ssss
00038f80  60 60 60 60 81 81 81 81 4f 4f 4f 4f dc dc dc dc 22 22 22 22 2a 2a 2a 2a 90 90 90 90 88 88 88 88  ````....OOOO....""""****........
00038fa0  46 46 46 46 ee ee ee ee b8 b8 b8 b8 14 14 14 14 de de de de 5e 5e 5e 5e 0b 0b 0b 0b db db db db  FFFF................^^^^........
00038fc0  e0 e0 e0 e0 32 32 32 32 3a 3a 3a 3a 0a 0a 0a 0a 49 49 49 49 06 06 06 06 24 24 24 24 5c 5c 5c 5c  ....2222::::....IIII....$$$$\\\\
00038fe0  c2 c2 c2 c2 d3 d3 d3 d3 ac ac ac ac 62 62 62 62 91 91 91 91 95 95 95 95 e4 e4 e4 e4 79 79 79 79  ............bbbb............yyyy
00039000  e7 e7 e7 e7 c8 c8 c8 c8 37 37 37 37 6d 6d 6d 6d 8d 8d 8d 8d d5 d5 d5 d5 4e 4e 4e 4e a9 a9 a9 a9  ........7777mmmm........NNNN....
00039020  6c 6c 6c 6c 56 56 56 56 f4 f4 f4 f4 ea ea ea ea 65 65 65 65 7a 7a 7a 7a ae ae ae ae 08 08 08 08  llllVVVV........eeeezzzz........
00039040  ba ba ba ba 78 78 78 78 25 25 25 25 2e 2e 2e 2e 1c 1c 1c 1c a6 a6 a6 a6 b4 b4 b4 b4 c6 c6 c6 c6  ....xxxx%%%%....................
00039060  e8 e8 e8 e8 dd dd dd dd 74 74 74 74 1f 1f 1f 1f 4b 4b 4b 4b bd bd bd bd 8b 8b 8b 8b 8a 8a 8a 8a  ........tttt....KKKK............
00039080  70 70 70 70 3e 3e 3e 3e b5 b5 b5 b5 66 66 66 66 48 48 48 48 03 03 03 03 f6 f6 f6 f6 0e 0e 0e 0e  pppp>>>>....ffffHHHH............
000390a0  61 61 61 61 35 35 35 35 57 57 57 57 b9 b9 b9 b9 86 86 86 86 c1 c1 c1 c1 1d 1d 1d 1d 9e 9e 9e 9e  aaaa5555WWWW....................
000390c0  e1 e1 e1 e1 f8 f8 f8 f8 98 98 98 98 11 11 11 11 69 69 69 69 d9 d9 d9 d9 8e 8e 8e 8e 94 94 94 94  ................iiii............
000390e0  9b 9b 9b 9b 1e 1e 1e 1e 87 87 87 87 e9 e9 e9 e9 ce ce ce ce 55 55 55 55 28 28 28 28 df df df df  ....................UUUU((((....
00039100  8c 8c 8c 8c a1 a1 a1 a1 89 89 89 89 0d 0d 0d 0d bf bf bf bf e6 e6 e6 e6 42 42 42 42 68 68 68 68  ........................BBBBhhhh
00039120  41 41 41 41 99 99 99 99 2d 2d 2d 2d 0f 0f 0f 0f b0 b0 b0 b0 54 54 54 54 bb bb bb bb 16 16 16 16  AAAA....----........TTTT........
00039140  TE0:
00039140  a5 63 63 c6 84 7c 7c f8 99 77 77 ee 8d 7b 7b f6 0d f2 f2 ff bd 6b 6b d6 b1 6f 6f de 54 c5 c5 91  .cc..||..ww..{{......kk..oo.T...
00039160  50 30 30 60 03 01 01 02 a9 67 67 ce 7d 2b 2b 56 19 fe fe e7 62 d7 d7 b5 e6 ab ab 4d 9a 76 76 ec  P00`.....gg.}++V....b......M.vv.
00039180  45 ca ca 8f 9d 82 82 1f 40 c9 c9 89 87 7d 7d fa 15 fa fa ef eb 59 59 b2 c9 47 47 8e 0b f0 f0 fb  E.......@....}}......YY..GG.....
000391a0  ec ad ad 41 67 d4 d4 b3 fd a2 a2 5f ea af af 45 bf 9c 9c 23 f7 a4 a4 53 96 72 72 e4 5b c0 c0 9b  ...Ag......_...E...#...S.rr.[...
000391c0  c2 b7 b7 75 1c fd fd e1 ae 93 93 3d 6a 26 26 4c 5a 36 36 6c 41 3f 3f 7e 02 f7 f7 f5 4f cc cc 83  ...u.......=j&&LZ66lA??~....O...
000391e0  5c 34 34 68 f4 a5 a5 51 34 e5 e5 d1 08 f1 f1 f9 93 71 71 e2 73 d8 d8 ab 53 31 31 62 3f 15 15 2a  \44h...Q4........qq.s...S11b?..*
00039200  0c 04 04 08 52 c7 c7 95 65 23 23 46 5e c3 c3 9d 28 18 18 30 a1 96 96 37 0f 05 05 0a b5 9a 9a 2f  ....R...e##F^...(..0...7......./
00039220  09 07 07 0e 36 12 12 24 9b 80 80 1b 3d e2 e2 df 26 eb eb cd 69 27 27 4e cd b2 b2 7f 9f 75 75 ea  ....6..$....=...&...i''N.....uu.
00039240  1b 09 09 12 9e 83 83 1d 74 2c 2c 58 2e 1a 1a 34 2d 1b 1b 36 b2 6e 6e dc ee 5a 5a b4 fb a0 a0 5b  ........t,,X...4-..6.nn..ZZ....[
00039260  f6 52 52 a4 4d 3b 3b 76 61 d6 d6 b7 ce b3 b3 7d 7b 29 29 52 3e e3 e3 dd 71 2f 2f 5e 97 84 84 13  .RR.M;;va......}{))R>...q//^....
00039280  f5 53 53 a6 68 d1 d1 b9 00 00 00 00 2c ed ed c1 60 20 20 40 1f fc fc e3 c8 b1 b1 79 ed 5b 5b b6  .SS.h.......,...`  @.......y.[[.
000392a0  be 6a 6a d4 46 cb cb 8d d9 be be 67 4b 39 39 72 de 4a 4a 94 d4 4c 4c 98 e8 58 58 b0 4a cf cf 85  .jj.F......gK99r.JJ..LL..XX.J...
000392c0  6b d0 d0 bb 2a ef ef c5 e5 aa aa 4f 16 fb fb ed c5 43 43 86 d7 4d 4d 9a 55 33 33 66 94 85 85 11  k...*......O.....CC..MM.U33f....
000392e0  cf 45 45 8a 10 f9 f9 e9 06 02 02 04 81 7f 7f fe f0 50 50 a0 44 3c 3c 78 ba 9f 9f 25 e3 a8 a8 4b  .EE..............PP.D<<x...%...K
00039300  f3 51 51 a2 fe a3 a3 5d c0 40 40 80 8a 8f 8f 05 ad 92 92 3f bc 9d 9d 21 48 38 38 70 04 f5 f5 f1  .QQ....].@@........?...!H88p....
00039320  df bc bc 63 c1 b6 b6 77 75 da da af 63 21 21 42 30 10 10 20 1a ff ff e5 0e f3 f3 fd 6d d2 d2 bf  ...c...wu...c!!B0.. ........m...
00039340  4c cd cd 81 14 0c 0c 18 35 13 13 26 2f ec ec c3 e1 5f 5f be a2 97 97 35 cc 44 44 88 39 17 17 2e  L.......5..&/....__....5.DD.9...
00039360  57 c4 c4 93 f2 a7 a7 55 82 7e 7e fc 47 3d 3d 7a ac 64 64 c8 e7 5d 5d ba 2b 19 19 32 95 73 73 e6  W......U.~~.G==z.dd..]].+..2.ss.
00039380  a0 60 60 c0 98 81 81 19 d1 4f 4f 9e 7f dc dc a3 66 22 22 44 7e 2a 2a 54 ab 90 90 3b 83 88 88 0b  .``......OO.....f""D~**T...;....
000393a0  ca 46 46 8c 29 ee ee c7 d3 b8 b8 6b 3c 14 14 28 79 de de a7 e2 5e 5e bc 1d 0b 0b 16 76 db db ad  .FF.)......k<..(y....^^.....v...
000393c0  3b e0 e0 db 56 32 32 64 4e 3a 3a 74 1e 0a 0a 14 db 49 49 92 0a 06 06 0c 6c 24 24 48 e4 5c 5c b8  ;...V22dN::t.....II.....l$$H.\\.
000393e0  5d c2 c2 9f 6e d3 d3 bd ef ac ac 43 a6 62 62 c4 a8 91 91 39 a4 95 95 31 37 e4 e4 d3 8b 79 79 f2  ]...n......C.bb....9...17....yy.
00039400  32 e7 e7 d5 43 c8 c8 8b 59 37 37 6e b7 6d 6d da 8c 8d 8d 01 64 d5 d5 b1 d2 4e 4e 9c e0 a9 a9 49  2...C...Y77n.mm.....d....NN....I
00039420  b4 6c 6c d8 fa 56 56 ac 07 f4 f4 f3 25 ea ea cf af 65 65 ca 8e 7a 7a f4 e9 ae ae 47 18 08 08 10  .ll..VV.....%....ee..zz....G....
00039440  d5 ba ba 6f 88 78 78 f0 6f 25 25 4a 72 2e 2e 5c 24 1c 1c 38 f1 a6 a6 57 c7 b4 b4 73 51 c6 c6 97  ...o.xx.o%%Jr..\$..8...W...sQ...
00039460  23 e8 e8 cb 7c dd dd a1 9c 74 74 e8 21 1f 1f 3e dd 4b 4b 96 dc bd bd 61 86 8b 8b 0d 85 8a 8a 0f  #...|....tt.!..>.KK....a........
00039480  90 70 70 e0 42 3e 3e 7c c4 b5 b5 71 aa 66 66 cc d8 48 48 90 05 03 03 06 01 f6 f6 f7 12 0e 0e 1c  .pp.B>>|...q.ff..HH.............
000394a0  a3 61 61 c2 5f 35 35 6a f9 57 57 ae d0 b9 b9 69 91 86 86 17 58 c1 c1 99 27 1d 1d 3a b9 9e 9e 27  .aa._55j.WW....i....X...'..:...'
000394c0  38 e1 e1 d9 13 f8 f8 eb b3 98 98 2b 33 11 11 22 bb 69 69 d2 70 d9 d9 a9 89 8e 8e 07 a7 94 94 33  8..........+3..".ii.p..........3
000394e0  b6 9b 9b 2d 22 1e 1e 3c 92 87 87 15 20 e9 e9 c9 49 ce ce 87 ff 55 55 aa 78 28 28 50 7a df df a5  ...-"..<.... ...I....UU.x((Pz...
00039500  8f 8c 8c 03 f8 a1 a1 59 80 89 89 09 17 0d 0d 1a da bf bf 65 31 e6 e6 d7 c6 42 42 84 b8 68 68 d0  .......Y...........e1....BB..hh.
00039520  c3 41 41 82 b0 99 99 29 77 2d 2d 5a 11 0f 0f 1e cb b0 b0 7b fc 54 54 a8 d6 bb bb 6d 3a 16 16 2c  .AA....)w--Z.......{.TT....m:..,
00039540  K:
00039540  98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9 5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab  ./.B.D7q........[.V9...Y..?..^..
00039560  98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55 74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1  .....[....1$.}.Ut].r........t...
00039580  c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24 6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76  .i...G.........$o,.-..tJ...\...v
000395a0  52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14  RQ>.m.1..'....Y.....G...Qc..g)).
000395c0  85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53 54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92  ...'8!...m,M..8STs.e..jv.....,r.
000395e0  a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7 19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10  ....Kf..p.K..Ql.....$....5..p.j.
00039600  16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34 b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68  .....l7.LwH'...4...9J..NO..[.o.h
00039620  ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6  ...toc.x.x...........lP......xq.
00039640  K:
00039640  22 ae 28 d7 98 2f 8a 42 cd 65 ef 23 91 44 37 71 2f 3b 4d ec cf fb c0 b5 bc db 89 81 a5 db b5 e9  ".(../.B.e.#.D7q/;M.............
00039660  38 b5 48 f3 5b c2 56 39 19 d0 05 b6 f1 11 f1 59 9b 4f 19 af a4 82 3f 92 18 81 6d da d5 5e 1c ab  8.H.[.V9.......Y.O....?...m..^..
00039680  42 02 03 a3 98 aa 07 d8 be 6f 70 45 01 5b 83 12 8c b2 e4 4e be 85 31 24 e2 b4 ff d5 c3 7d 0c 55  B........opE.[.....N..1$.....}.U
000396a0  6f 89 7b f2 74 5d be 72 b1 96 16 3b fe b1 de 80 35 12 c7 25 a7 06 dc 9b 94 26 69 cf 74 f1 9b c1  o.{.t].r...;....5..%.....&i.t...
000396c0  d2 4a f1 9e c1 69 9b e4 e3 25 4f 38 86 47 be ef b5 d5 8c 8b c6 9d c1 0f 65 9c ac 77 cc a1 0c 24  .J...i...%O8.G..........e..w...$
000396e0  75 02 2b 59 6f 2c e9 2d 83 e4 a6 6e aa 84 74 4a d4 fb 41 bd dc a9 b0 5c b5 53 11 83 da 88 f9 76  u.+Yo,.-...n..tJ..A....\.S.....v
00039700  ab df 66 ee 52 51 3e 98 10 32 b4 2d 6d c6 31 a8 3f 21 fb 98 c8 27 03 b0 e4 0e ef be c7 7f 59 bf  ..f.RQ>..2.-m.1.?!...'........Y.
00039720  c2 8f a8 3d f3 0b e0 c6 25 a7 0a 93 47 91 a7 d5 6f 82 03 e0 51 63 ca 06 70 6e 0e 0a 67 29 29 14  ...=....%...G...o...Qc..pn..g)).
00039740  fc 2f d2 46 85 0a b7 27 26 c9 26 5c 38 21 1b 2e ed 2a c4 5a fc 6d 2c 4d df b3 95 9d 13 0d 38 53  ./.F...'&.&\8!...*.Z.m,M......8S
00039760  de 63 af 8b 54 73 0a 65 a8 b2 77 3c bb 0a 6a 76 e6 ae ed 47 2e c9 c2 81 3b 35 82 14 85 2c 72 92  .c..Ts.e..w<..jv...G....;5...,r.
00039780  64 03 f1 4c a1 e8 bf a2 01 30 42 bc 4b 66 1a a8 91 97 f8 d0 70 8b 4b c2 30 be 54 06 a3 51 6c c7  d..L.....0B.Kf......p.K.0.T..Ql.
000397a0  18 52 ef d6 19 e8 92 d1 10 a9 65 55 24 06 99 d6 2a 20 71 57 85 35 0e f4 b8 d1 bb 32 70 a0 6a 10  .R........eU$...* qW.5.....2p.j.
000397c0  c8 d0 d2 b8 16 c1 a4 19 53 ab 41 51 08 6c 37 1e 99 eb 8e df 4c 77 48 27 a8 48 9b e1 b5 bc b0 34  ........S.AQ.l7.....LwH'.H.....4
000397e0  63 5a c9 c5 b3 0c 1c 39 cb 8a 41 e3 4a aa d8 4e 73 e3 63 77 4f ca 9c 5b a3 b8 b2 d6 f3 6f 2e 68  cZ.....9..A.J..Ns.cwO..[.....o.h
00039800  fc b2 ef 5d ee 82 8f 74 60 2f 17 43 6f 63 a5 78 72 ab f0 a1 14 78 c8 84 ec 39 64 1a 08 02 c7 8c  ...]...t`/.Coc.xr....x...9d.....
00039820  28 1e 63 23 fa ff be 90 e9 bd 82 de eb 6c 50 a4 15 79 c6 b2 f7 a3 f9 be 2b 53 72 e3 f2 78 71 c6  (.c#.........lP..y......+Sr..xq.
00039840  9c 61 26 ea ce 3e 27 ca 07 c2 c0 21 c7 b8 86 d1 1e eb e0 cd d6 7d da ea 78 d1 6e ee 7f 4f 7d f5  .a&..>'....!.........}..x.n..O}.
00039860  ba 6f 17 72 aa 67 f0 06 a6 98 c8 a2 c5 7d 63 0a ae 0d f9 be 04 98 3f 11 1b 47 1c 13 35 0b 71 1b  .o.r.g.......}c.......?..G..5.q.
00039880  84 7d 04 23 f5 77 db 28 93 24 c7 40 7b ab ca 32 bc be c9 15 0a be 9e 3c 4c 0d 10 9c c4 67 1d 43  .}.#.w.(.$.@{..2.......<L....g.C
000398a0  b6 42 3e cb be d4 c5 4c 2a 7e 65 fc 9c 29 7f 59 ec fa d6 3a ab 6f cb 5f 17 58 47 4a 8c 19 44 6c  .B>....L*~e..).Y...:.o._.XGJ..Dl
000398c0  mpi_to_ltc_codes:
000398c0  00 00 00 00 00 00 00 00 fe ff ff ff 0d 00 00 00 fd ff ff ff 10 00 00 00 fc ff ff ff 07 00 00 00  ................................
000398e0  fb ff ff ff 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00039900  map_base64:
00039900  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
00039920  ff ff ff ff ff ff ff ff ff ff ff 3e ff ff ff 3f 34 35 36 37 38 39 3a 3b 3c 3d ff ff ff fe ff ff  ...........>...?456789:;<=......
00039940  ff 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 ff ff ff ff ff  ................................
00039960  ff 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 ff ff ff ff ff  ....... !"#$%&'()*+,-./0123.....
00039980  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
000399a0  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
000399c0  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
000399e0  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
00039a00  lnz:
00039a00  04 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................................
00039a20  03 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................................

00039a40  int64_t data_39a40 = 0x2000000000

00039a48                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00039a60  sizes:
00039a60  50 00 00 00 ff ff ff ff 51 00 00 00 25 00 00 00 60 00 00 00 20 00 00 00 80 00 00 00 28 00 00 00  P.......Q...%...`... .......(...
00039a80  a0 00 00 00 23 00 00 00 00 01 00 00 1b 00 00 00 80 01 00 00 10 00 00 00 00 02 00 00 12 00 00 00  ....#...........................
00039aa0  00 03 00 00 0b 00 00 00 80 03 00 00 0a 00 00 00 00 04 00 00 0c 00 00 00 00 06 00 00 08 00 00 00  ................................
00039ac0  00 08 00 00 06 00 00 00 00 0c 00 00 04 00 00 00 00 10 00 00 05 00 00 00 00 14 00 00 04 00 00 00  ................................
00039ae0  00 18 00 00 04 00 00 00 00 20 00 00 03 00 00 00 00 24 00 00 03 00 00 00 00 28 00 00 02 00 00 00  ......... .......$.......(......
00039b00  ltm_prime_tab:
00039b00  02 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00  ................................
00039b20  0b 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00  ................................
00039b40  17 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 25 00 00 00 00 00 00 00  ........................%.......
00039b60  29 00 00 00 00 00 00 00 2b 00 00 00 00 00 00 00 2f 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00  ).......+......./.......5.......
00039b80  3b 00 00 00 00 00 00 00 3d 00 00 00 00 00 00 00 43 00 00 00 00 00 00 00 47 00 00 00 00 00 00 00  ;.......=.......C.......G.......
00039ba0  49 00 00 00 00 00 00 00 4f 00 00 00 00 00 00 00 53 00 00 00 00 00 00 00 59 00 00 00 00 00 00 00  I.......O.......S.......Y.......
00039bc0  61 00 00 00 00 00 00 00 65 00 00 00 00 00 00 00 67 00 00 00 00 00 00 00 6b 00 00 00 00 00 00 00  a.......e.......g.......k.......
00039be0  6d 00 00 00 00 00 00 00 71 00 00 00 00 00 00 00 7f 00 00 00 00 00 00 00 83 00 00 00 00 00 00 00  m.......q.......................
00039c00  89 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 95 00 00 00 00 00 00 00 97 00 00 00 00 00 00 00  ................................
00039c20  9d 00 00 00 00 00 00 00 a3 00 00 00 00 00 00 00 a7 00 00 00 00 00 00 00 ad 00 00 00 00 00 00 00  ................................
00039c40  b3 00 00 00 00 00 00 00 b5 00 00 00 00 00 00 00 bf 00 00 00 00 00 00 00 c1 00 00 00 00 00 00 00  ................................
00039c60  c5 00 00 00 00 00 00 00 c7 00 00 00 00 00 00 00 d3 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00  ................................
00039c80  e3 00 00 00 00 00 00 00 e5 00 00 00 00 00 00 00 e9 00 00 00 00 00 00 00 ef 00 00 00 00 00 00 00  ................................
00039ca0  f1 00 00 00 00 00 00 00 fb 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 07 01 00 00 00 00 00 00  ................................
00039cc0  0d 01 00 00 00 00 00 00 0f 01 00 00 00 00 00 00 15 01 00 00 00 00 00 00 19 01 00 00 00 00 00 00  ................................
00039ce0  1b 01 00 00 00 00 00 00 25 01 00 00 00 00 00 00 33 01 00 00 00 00 00 00 37 01 00 00 00 00 00 00  ........%.......3.......7.......
00039d00  39 01 00 00 00 00 00 00 3d 01 00 00 00 00 00 00 4b 01 00 00 00 00 00 00 51 01 00 00 00 00 00 00  9.......=.......K.......Q.......
00039d20  5b 01 00 00 00 00 00 00 5d 01 00 00 00 00 00 00 61 01 00 00 00 00 00 00 67 01 00 00 00 00 00 00  [.......].......a.......g.......
00039d40  6f 01 00 00 00 00 00 00 75 01 00 00 00 00 00 00 7b 01 00 00 00 00 00 00 7f 01 00 00 00 00 00 00  o.......u.......{...............
00039d60  85 01 00 00 00 00 00 00 8d 01 00 00 00 00 00 00 91 01 00 00 00 00 00 00 99 01 00 00 00 00 00 00  ................................
00039d80  a3 01 00 00 00 00 00 00 a5 01 00 00 00 00 00 00 af 01 00 00 00 00 00 00 b1 01 00 00 00 00 00 00  ................................
00039da0  b7 01 00 00 00 00 00 00 bb 01 00 00 00 00 00 00 c1 01 00 00 00 00 00 00 c9 01 00 00 00 00 00 00  ................................
00039dc0  cd 01 00 00 00 00 00 00 cf 01 00 00 00 00 00 00 d3 01 00 00 00 00 00 00 df 01 00 00 00 00 00 00  ................................
00039de0  e7 01 00 00 00 00 00 00 eb 01 00 00 00 00 00 00 f3 01 00 00 00 00 00 00 f7 01 00 00 00 00 00 00  ................................
00039e00  fd 01 00 00 00 00 00 00 09 02 00 00 00 00 00 00 0b 02 00 00 00 00 00 00 1d 02 00 00 00 00 00 00  ................................
00039e20  23 02 00 00 00 00 00 00 2d 02 00 00 00 00 00 00 33 02 00 00 00 00 00 00 39 02 00 00 00 00 00 00  #.......-.......3.......9.......
00039e40  3b 02 00 00 00 00 00 00 41 02 00 00 00 00 00 00 4b 02 00 00 00 00 00 00 51 02 00 00 00 00 00 00  ;.......A.......K.......Q.......
00039e60  57 02 00 00 00 00 00 00 59 02 00 00 00 00 00 00 5f 02 00 00 00 00 00 00 65 02 00 00 00 00 00 00  W.......Y......._.......e.......
00039e80  69 02 00 00 00 00 00 00 6b 02 00 00 00 00 00 00 77 02 00 00 00 00 00 00 81 02 00 00 00 00 00 00  i.......k.......w...............
00039ea0  83 02 00 00 00 00 00 00 87 02 00 00 00 00 00 00 8d 02 00 00 00 00 00 00 93 02 00 00 00 00 00 00  ................................
00039ec0  95 02 00 00 00 00 00 00 a1 02 00 00 00 00 00 00 a5 02 00 00 00 00 00 00 ab 02 00 00 00 00 00 00  ................................
00039ee0  b3 02 00 00 00 00 00 00 bd 02 00 00 00 00 00 00 c5 02 00 00 00 00 00 00 cf 02 00 00 00 00 00 00  ................................
00039f00  d7 02 00 00 00 00 00 00 dd 02 00 00 00 00 00 00 e3 02 00 00 00 00 00 00 e7 02 00 00 00 00 00 00  ................................
00039f20  ef 02 00 00 00 00 00 00 f5 02 00 00 00 00 00 00 f9 02 00 00 00 00 00 00 01 03 00 00 00 00 00 00  ................................
00039f40  05 03 00 00 00 00 00 00 13 03 00 00 00 00 00 00 1d 03 00 00 00 00 00 00 29 03 00 00 00 00 00 00  ........................).......
00039f60  2b 03 00 00 00 00 00 00 35 03 00 00 00 00 00 00 37 03 00 00 00 00 00 00 3b 03 00 00 00 00 00 00  +.......5.......7.......;.......
00039f80  3d 03 00 00 00 00 00 00 47 03 00 00 00 00 00 00 55 03 00 00 00 00 00 00 59 03 00 00 00 00 00 00  =.......G.......U.......Y.......
00039fa0  5b 03 00 00 00 00 00 00 5f 03 00 00 00 00 00 00 6d 03 00 00 00 00 00 00 71 03 00 00 00 00 00 00  [......._.......m.......q.......
00039fc0  73 03 00 00 00 00 00 00 77 03 00 00 00 00 00 00 8b 03 00 00 00 00 00 00 8f 03 00 00 00 00 00 00  s.......w.......................
00039fe0  97 03 00 00 00 00 00 00 a1 03 00 00 00 00 00 00 a9 03 00 00 00 00 00 00 ad 03 00 00 00 00 00 00  ................................
0003a000  b3 03 00 00 00 00 00 00 b9 03 00 00 00 00 00 00 c7 03 00 00 00 00 00 00 cb 03 00 00 00 00 00 00  ................................
0003a020  d1 03 00 00 00 00 00 00 d7 03 00 00 00 00 00 00 df 03 00 00 00 00 00 00 e5 03 00 00 00 00 00 00  ................................
0003a040  f1 03 00 00 00 00 00 00 f5 03 00 00 00 00 00 00 fb 03 00 00 00 00 00 00 fd 03 00 00 00 00 00 00  ................................
0003a060  07 04 00 00 00 00 00 00 09 04 00 00 00 00 00 00 0f 04 00 00 00 00 00 00 19 04 00 00 00 00 00 00  ................................
0003a080  1b 04 00 00 00 00 00 00 25 04 00 00 00 00 00 00 27 04 00 00 00 00 00 00 2d 04 00 00 00 00 00 00  ........%.......'.......-.......
0003a0a0  3f 04 00 00 00 00 00 00 43 04 00 00 00 00 00 00 45 04 00 00 00 00 00 00 49 04 00 00 00 00 00 00  ?.......C.......E.......I.......
0003a0c0  4f 04 00 00 00 00 00 00 55 04 00 00 00 00 00 00 5d 04 00 00 00 00 00 00 63 04 00 00 00 00 00 00  O.......U.......].......c.......
0003a0e0  69 04 00 00 00 00 00 00 7f 04 00 00 00 00 00 00 81 04 00 00 00 00 00 00 8b 04 00 00 00 00 00 00  i...............................
0003a100  93 04 00 00 00 00 00 00 9d 04 00 00 00 00 00 00 a3 04 00 00 00 00 00 00 a9 04 00 00 00 00 00 00  ................................
0003a120  b1 04 00 00 00 00 00 00 bd 04 00 00 00 00 00 00 c1 04 00 00 00 00 00 00 c7 04 00 00 00 00 00 00  ................................
0003a140  cd 04 00 00 00 00 00 00 cf 04 00 00 00 00 00 00 d5 04 00 00 00 00 00 00 e1 04 00 00 00 00 00 00  ................................
0003a160  eb 04 00 00 00 00 00 00 fd 04 00 00 00 00 00 00 ff 04 00 00 00 00 00 00 03 05 00 00 00 00 00 00  ................................
0003a180  09 05 00 00 00 00 00 00 0b 05 00 00 00 00 00 00 11 05 00 00 00 00 00 00 15 05 00 00 00 00 00 00  ................................
0003a1a0  17 05 00 00 00 00 00 00 1b 05 00 00 00 00 00 00 27 05 00 00 00 00 00 00 29 05 00 00 00 00 00 00  ................'.......).......
0003a1c0  2f 05 00 00 00 00 00 00 51 05 00 00 00 00 00 00 57 05 00 00 00 00 00 00 5d 05 00 00 00 00 00 00  /.......Q.......W.......].......
0003a1e0  65 05 00 00 00 00 00 00 77 05 00 00 00 00 00 00 81 05 00 00 00 00 00 00 8f 05 00 00 00 00 00 00  e.......w.......................
0003a200  93 05 00 00 00 00 00 00 95 05 00 00 00 00 00 00 99 05 00 00 00 00 00 00 9f 05 00 00 00 00 00 00  ................................
0003a220  a7 05 00 00 00 00 00 00 ab 05 00 00 00 00 00 00 ad 05 00 00 00 00 00 00 b3 05 00 00 00 00 00 00  ................................
0003a240  bf 05 00 00 00 00 00 00 c9 05 00 00 00 00 00 00 cb 05 00 00 00 00 00 00 cf 05 00 00 00 00 00 00  ................................
0003a260  d1 05 00 00 00 00 00 00 d5 05 00 00 00 00 00 00 db 05 00 00 00 00 00 00 e7 05 00 00 00 00 00 00  ................................
0003a280  f3 05 00 00 00 00 00 00 fb 05 00 00 00 00 00 00 07 06 00 00 00 00 00 00 0d 06 00 00 00 00 00 00  ................................
0003a2a0  11 06 00 00 00 00 00 00 17 06 00 00 00 00 00 00 1f 06 00 00 00 00 00 00 23 06 00 00 00 00 00 00  ........................#.......
0003a2c0  2b 06 00 00 00 00 00 00 2f 06 00 00 00 00 00 00 3d 06 00 00 00 00 00 00 41 06 00 00 00 00 00 00  +......./.......=.......A.......
0003a2e0  47 06 00 00 00 00 00 00 49 06 00 00 00 00 00 00 4d 06 00 00 00 00 00 00 53 06 00 00 00 00 00 00  G.......I.......M.......S.......
0003a300  rem_105:
0003a300  00 00 01 01 00 01 01 01 01 00 01 01 01 01 01 00 00 01 01 01 01 00 01 01 01 00 01 01 01 01 00 01  ................................
0003a320  01 01 01 01 00 01 01 00 01 01 01 01 01 01 00 01 01 00 01 00 01 01 01 01 01 01 01 01 00 01 01 01  ................................
0003a340  00 01 01 01 01 01 00 01 01 01 01 01 01 01 01 00 01 00 01 01 00 00 01 01 01 01 01 00 01 01 01 01  ................................
0003a360  01 01 01 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
0003a380  rem_128:
0003a380  00 00 01 01 00 01 01 01 01 00 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01  ................................
0003a3a0  01 00 01 01 00 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01  ................................
0003a3c0  00 00 01 01 00 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01  ................................
0003a3e0  01 00 01 01 00 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01  ................................

0003a400  uint64_t mp_s_rmap_reverse_sz = 0x58

0003a408                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
0003a420  mp_s_rmap_reverse:
0003a420  ff ff ff 3e ff ff ff 3f 00 01 02 03 04 05 06 07 08 09 ff ff ff ff ff ff ff 0a 0b 0c 0d 0e 0f 10  ...>...?........................
0003a440  11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 ff ff ff ff ff ff 24 25 26 27 28 29 2a  ............... !"#......$%&'()*
0003a460  2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d ff ff ff ff ff                          +,-./0123456789:;<=.....

0003a478  char const data_3a478[0x41] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/", 0
.rodata (PROGBITS) section ended  {0x34000-0x3a4b9}

0003a4b9                                                                             00 00 00                                       ...

.eh_frame_hdr (PROGBITS) section started  {0x3a4bc-0x3ba58}
0003a4bc  __GNU_EH_FRAME_HDR:
0003a4bc                                                                                      01 1b 03 3b                              ...;
0003a4c0  98 15 00 00 b2 02 00 00 64 ab fc ff cc 15 00 00 c4 b3 fc ff f4 15 00 00 04 b4 fc ff e4 63 00 00  ........d....................c..
0003a4e0  94 b4 fc ff b4 15 00 00 7d b5 fc ff 0c 16 00 00 e4 b5 fc ff 30 16 00 00 61 b6 fc ff 54 16 00 00  ........}...........0...a...T...
0003a500  70 b6 fc ff 68 16 00 00 15 b7 fc ff 80 16 00 00 bd b7 fc ff 98 16 00 00 cf b7 fc ff ac 16 00 00  p...h...........................
0003a520  8b b8 fc ff c8 16 00 00 ed b8 fc ff f0 16 00 00 65 b9 fc ff 1c 17 00 00 ab b9 fc ff 38 17 00 00  ................e...........8...
0003a540  48 ba fc ff 64 17 00 00 3f bb fc ff 94 17 00 00 cd bb fc ff cc 17 00 00 22 bc fc ff e4 17 00 00  H...d...?...............".......
0003a560  da bd fc ff 30 18 00 00 3c be fc ff 50 18 00 00 c5 be fc ff 80 18 00 00 54 bf fc ff d0 18 00 00  ....0...<...P...........T.......
0003a580  8a bf fc ff ec 18 00 00 ab bf fc ff 00 19 00 00 3e c0 fc ff 20 19 00 00 7d c0 fc ff 38 19 00 00  ................>... ...}...8...
0003a5a0  bc c0 fc ff 60 19 00 00 7f c1 fc ff a4 19 00 00 4d c2 fc ff c0 19 00 00 5f c2 fc ff d4 19 00 00  ....`...........M......._.......
0003a5c0  70 c2 fc ff e8 19 00 00 81 c2 fc ff fc 19 00 00 b5 c2 fc ff 18 1a 00 00 ba c2 fc ff 2c 1a 00 00  p...........................,...
0003a5e0  d2 c2 fc ff 48 1a 00 00 1c c3 fc ff 64 1a 00 00 40 c3 fc ff 80 1a 00 00 67 c3 fc ff 98 1a 00 00  ....H.......d...@.......g.......
0003a600  8e c3 fc ff b0 1a 00 00 aa c3 fc ff c8 1a 00 00 d9 c3 fc ff e0 1a 00 00 00 c4 fc ff f8 1a 00 00  ................................
0003a620  20 c4 fc ff 10 1b 00 00 48 c4 fc ff 28 1b 00 00 59 c4 fc ff 40 1b 00 00 88 c4 fc ff 6c 1b 00 00   .......H...(...Y...@.......l...
0003a640  b1 c4 fc ff 84 1b 00 00 da c4 fc ff 9c 1b 00 00 0d c5 fc ff bc 1b 00 00 90 c5 fc ff fc 1b 00 00  ................................
0003a660  ae c5 fc ff 14 1c 00 00 dc c5 fc ff 34 1c 00 00 6e c6 fc ff 6c 1c 00 00 75 c6 fc ff 80 1c 00 00  ............4...n...l...u.......
0003a680  7f c6 fc ff 94 1c 00 00 aa c6 fc ff c0 1c 00 00 e5 c6 fc ff ec 1c 00 00 13 c7 fc ff 0c 1d 00 00  ................................
0003a6a0  1b c7 fc ff 20 1d 00 00 06 c8 fc ff 58 1d 00 00 73 c8 fc ff 84 1d 00 00 7e c8 fc ff 9c 1d 00 00  .... .......X...s.......~.......
0003a6c0  9c c8 fc ff b4 1d 00 00 48 c9 fc ff cc 1d 00 00 09 ca fc ff ec 1d 00 00 bd ca fc ff 0c 1e 00 00  ........H.......................
0003a6e0  dd ca fc ff 24 1e 00 00 2a cb fc ff 5c 1e 00 00 ef cb fc ff 90 1e 00 00 0d cc fc ff a8 1e 00 00  ....$...*...\...................
0003a700  4f cc fc ff d0 1e 00 00 a7 cc fc ff 0c 1f 00 00 ca cc fc ff 20 1f 00 00 10 cd fc ff 48 1f 00 00  O................... .......H...
0003a720  5d cd fc ff 60 1f 00 00 90 cd fc ff 78 1f 00 00 d8 cd fc ff 8c 1f 00 00 64 cf fc ff d8 1f 00 00  ]...`.......x...........d.......
0003a740  c3 d0 fc ff 1c 20 00 00 62 d1 fc ff 54 20 00 00 d1 d1 fc ff 98 20 00 00 64 d2 fc ff b4 20 00 00  ..... ..b...T ....... ..d.... ..
0003a760  69 d2 fc ff c8 20 00 00 21 d3 fc ff 10 21 00 00 b0 d4 fc ff 5c 21 00 00 f8 d5 fc ff ac 21 00 00  i.... ..!....!......\!.......!..
0003a780  a8 d7 fc ff f0 21 00 00 76 d8 fc ff 1c 22 00 00 39 d9 fc ff 48 22 00 00 6d d9 fc ff 64 22 00 00  .....!..v...."..9...H"..m...d"..
0003a7a0  bf d9 fc ff 8c 22 00 00 23 da fc ff c0 22 00 00 86 db fc ff 0c 23 00 00 ca dd fc ff 5c 23 00 00  ....."..#....".......#......\#..
0003a7c0  a5 de fc ff a8 23 00 00 2e df fc ff e4 23 00 00 27 e0 fc ff 28 24 00 00 a6 e2 fc ff 64 24 00 00  .....#.......#..'...($......d$..
0003a7e0  6c e3 fc ff a4 24 00 00 7f e3 fc ff b8 24 00 00 8d e3 fc ff cc 24 00 00 e0 e3 fc ff f4 24 00 00  l....$.......$.......$.......$..
0003a800  09 e4 fc ff 0c 25 00 00 4a e4 fc ff 34 25 00 00 b9 e4 fc ff 70 25 00 00 ca e4 fc ff 84 25 00 00  .....%..J...4%......p%.......%..
0003a820  d1 e4 fc ff 98 25 00 00 d8 e4 fc ff ac 25 00 00 df e4 fc ff c0 25 00 00 09 e5 fc ff d8 25 00 00  .....%.......%.......%.......%..
0003a840  38 e5 fc ff f4 25 00 00 3f e5 fc ff 08 26 00 00 46 e5 fc ff 1c 26 00 00 4d e5 fc ff 34 26 00 00  8....%..?....&..F....&..M...4&..
0003a860  9e e5 fc ff 4c 26 00 00 de e5 fc ff 64 26 00 00 0f e6 fc ff 80 26 00 00 95 e6 fc ff a8 26 00 00  ....L&......d&.......&.......&..
0003a880  c5 e9 fc ff e4 26 00 00 a3 ea fc ff 1c 27 00 00 b2 ea fc ff 30 27 00 00 ea ea fc ff 44 27 00 00  .....&.......'......0'......D'..
0003a8a0  70 eb fc ff 6c 27 00 00 8a ec fc ff ac 27 00 00 d2 ec fc ff cc 27 00 00 83 ed fc ff 04 28 00 00  p...l'.......'.......'.......(..
0003a8c0  a8 ed fc ff 24 28 00 00 e8 f0 fc ff 68 28 00 00 33 f6 fc ff dc 28 00 00 cb f7 fc ff 2c 29 00 00  ....$(......h(..3....(......,)..
0003a8e0  d9 f7 fc ff 44 29 00 00 a5 f8 fc ff 64 29 00 00 c0 f8 fc ff 78 29 00 00 18 f9 fc ff 8c 29 00 00  ....D)......d)......x).......)..
0003a900  46 f9 fc ff a0 29 00 00 74 fa fc ff bc 29 00 00 a1 fa fc ff d0 29 00 00 c0 fa fc ff e4 29 00 00  F....)..t....).......).......)..
0003a920  df fa fc ff f8 29 00 00 97 fb fc ff 24 2a 00 00 9f fb fc ff 38 2a 00 00 3c fc fc ff 74 2a 00 00  .....)......$*......8*..<...t*..
0003a940  1e fe fc ff c0 2a 00 00 50 ff fc ff fc 2a 00 00 bb ff fc ff 18 2b 00 00 75 00 fd ff 54 2b 00 00  .....*..P....*.......+..u...T+..
0003a960  f7 00 fd ff 84 2b 00 00 ce 01 fd ff c0 2b 00 00 7b 02 fd ff f4 2b 00 00 b6 05 fd ff 40 2c 00 00  .....+.......+..{....+......@,..
0003a980  6f 06 fd ff 74 2c 00 00 54 08 fd ff c0 2c 00 00 cc 0b fd ff 0c 2d 00 00 b2 0c fd ff 4c 2d 00 00  o...t,..T....,.......-......L-..
0003a9a0  5b 0d fd ff 74 2d 00 00 86 0d fd ff 8c 2d 00 00 d9 0d fd ff ac 2d 00 00 41 0e fd ff d4 2d 00 00  [...t-.......-.......-..A....-..
0003a9c0  df 0e fd ff fc 2d 00 00 60 0f fd ff 24 2e 00 00 54 11 fd ff 74 2e 00 00 80 11 fd ff 8c 2e 00 00  .....-..`...$...T...t...........
0003a9e0  9c 11 fd ff a0 2e 00 00 c5 11 fd ff c8 2e 00 00 e9 11 fd ff e0 2e 00 00 ee 11 fd ff f4 2e 00 00  ................................
0003aa00  f3 11 fd ff 0c 2f 00 00 0e 13 fd ff 44 2f 00 00 57 13 fd ff 58 2f 00 00 34 15 fd ff ac 2f 00 00  ...../......D/..W...X/..4..../..
0003aa20  4f 16 fd ff f4 2f 00 00 d8 17 fd ff 44 30 00 00 1b 18 fd ff 5c 30 00 00 99 18 fd ff 84 30 00 00  O..../......D0......\0.......0..
0003aa40  be 19 fd ff a8 30 00 00 da 19 fd ff c4 30 00 00 17 1f fd ff f8 30 00 00 3b 21 fd ff 18 31 00 00  .....0.......0.......0..;!...1..
0003aa60  66 21 fd ff 34 31 00 00 6b 21 fd ff 48 31 00 00 83 21 fd ff 5c 31 00 00 98 22 fd ff 78 31 00 00  f!..41..k!..H1...!..\1..."..x1..
0003aa80  fd 22 fd ff 94 31 00 00 cc 24 fd ff b0 31 00 00 dd 24 fd ff c4 31 00 00 d2 25 fd ff 08 32 00 00  ."...1...$...1...$...1...%...2..
0003aaa0  bf 26 fd ff 34 32 00 00 e8 29 fd ff 90 32 00 00 75 2c fd ff f4 32 00 00 9e 2c fd ff 10 33 00 00  .&..42...)...2..u,...2...,...3..
0003aac0  9a 31 fd ff 6c 33 00 00 03 32 fd ff 98 33 00 00 14 32 fd ff ac 33 00 00 1b 32 fd ff c0 33 00 00  .1..l3...2...3...2...3...2...3..
0003aae0  3e 32 fd ff d8 33 00 00 58 32 fd ff f4 33 00 00 04 33 fd ff 3c 34 00 00 0b 33 fd ff 50 34 00 00  >2...3..X2...3...3..<4...3..P4..
0003ab00  07 34 fd ff 9c 34 00 00 2a 34 fd ff b0 34 00 00 f5 35 fd ff fc 34 00 00 6b 36 fd ff 24 35 00 00  .4...4..*4...4...5...4..k6..$5..
0003ab20  d5 37 fd ff 74 35 00 00 dd 37 fd ff 88 35 00 00 e9 37 fd ff 9c 35 00 00 13 38 fd ff b4 35 00 00  .7..t5...7...5...7...5...8...5..
0003ab40  bf 3a fd ff e4 35 00 00 a4 3e fd ff 30 36 00 00 1a 40 fd ff 7c 36 00 00 b0 43 fd ff c8 36 00 00  .:...5...>..06...@..|6...C...6..
0003ab60  79 45 fd ff 00 37 00 00 de 45 fd ff 18 37 00 00 04 46 fd ff 30 37 00 00 44 46 fd ff 44 37 00 00  yE...7...E...7...F..07..DF..D7..
0003ab80  70 46 fd ff 58 37 00 00 99 46 fd ff 6c 37 00 00 5f 48 fd ff 98 37 00 00 7d 49 fd ff d4 37 00 00  pF..X7...F..l7.._H...7..}I...7..
0003aba0  8e 49 fd ff e8 37 00 00 9f 49 fd ff fc 37 00 00 32 4a fd ff 18 38 00 00 8a 4a fd ff 34 38 00 00  .I...7...I...7..2J...8...J..48..
0003abc0  ea 4a fd ff 60 38 00 00 85 4b fd ff 98 38 00 00 40 4d fd ff d4 38 00 00 b7 4d fd ff f0 38 00 00  .J..`8...K...8..@M...8...M...8..
0003abe0  e3 4f fd ff 34 39 00 00 2b 50 fd ff 50 39 00 00 89 51 fd ff 94 39 00 00 cb 52 fd ff e0 39 00 00  .O..49..+P..P9...Q...9...R...9..
0003ac00  3c 53 fd ff 0c 3a 00 00 75 53 fd ff 28 3a 00 00 af 53 fd ff 44 3a 00 00 b6 53 fd ff 58 3a 00 00  <S...:..uS..(:...S..D:...S..X:..
0003ac20  02 55 fd ff a4 3a 00 00 45 55 fd ff c4 3a 00 00 55 56 fd ff 00 3b 00 00 72 56 fd ff 18 3b 00 00  .U...:..EU...:..UV...;..rV...;..
0003ac40  96 56 fd ff 30 3b 00 00 fd 57 fd ff 6c 3b 00 00 13 58 fd ff 84 3b 00 00 46 58 fd ff a0 3b 00 00  .V..0;...W..l;...X...;..FX...;..
0003ac60  87 59 fd ff ec 3b 00 00 bc 59 fd ff 08 3c 00 00 03 5a fd ff 30 3c 00 00 38 5a fd ff 4c 3c 00 00  .Y...;...Y...<...Z..0<..8Z..L<..
0003ac80  f1 5a fd ff 78 3c 00 00 68 5b fd ff 98 3c 00 00 90 5b fd ff b0 3c 00 00 a8 5b fd ff c8 3c 00 00  .Z..x<..h[...<...[...<...[...<..
0003aca0  c0 5b fd ff e0 3c 00 00 01 5c fd ff f4 3c 00 00 46 5c fd ff 1c 3d 00 00 57 5c fd ff 34 3d 00 00  .[...<...\...<..F\...=..W\..4=..
0003acc0  5c 5c fd ff 48 3d 00 00 b5 5c fd ff 68 3d 00 00 33 5d fd ff a0 3d 00 00 ce 5d fd ff d8 3d 00 00  \\..H=...\..h=..3]...=...]...=..
0003ace0  19 5e fd ff 10 3e 00 00 68 5e fd ff 3c 3e 00 00 bf 60 fd ff 98 3e 00 00 24 61 fd ff c4 3e 00 00  .^...>..h^..<>...`...>..$a...>..
0003ad00  43 61 fd ff d8 3e 00 00 0a 62 fd ff 04 3f 00 00 01 63 fd ff 2c 3f 00 00 29 63 fd ff 44 3f 00 00  Ca...>...b...?...c..,?..)c..D?..
0003ad20  64 63 fd ff 60 3f 00 00 6c 63 fd ff 74 3f 00 00 74 63 fd ff 8c 3f 00 00 9c 63 fd ff a8 3f 00 00  dc..`?..lc..t?..tc...?...c...?..
0003ad40  0d 65 fd ff fc 3f 00 00 1c 66 fd ff 44 40 00 00 43 66 fd ff 5c 40 00 00 a1 66 fd ff 94 40 00 00  .e...?...f..D@..Cf..\@...f...@..
0003ad60  21 67 fd ff dc 40 00 00 42 68 fd ff 24 41 00 00 9a 68 fd ff 60 41 00 00 df 68 fd ff 88 41 00 00  !g...@..Bh..$A...h..`A...h...A..
0003ad80  19 69 fd ff a4 41 00 00 46 69 fd ff bc 41 00 00 8c 6a fd ff ec 41 00 00 0a 6b fd ff 24 42 00 00  .i...A..Fi...A...j...A...k..$B..
0003ada0  06 6c fd ff 4c 42 00 00 27 6c fd ff 60 42 00 00 b0 6c fd ff 80 42 00 00 70 6d fd ff bc 42 00 00  .l..LB..'l..`B...l...B..pm...B..
0003adc0  aa 6d fd ff d8 42 00 00 d0 6d fd ff f4 42 00 00 d8 6d fd ff 08 43 00 00 e2 6d fd ff 1c 43 00 00  .m...B...m...B...m...C...m...C..
0003ade0  89 6e fd ff 34 43 00 00 c6 6e fd ff 48 43 00 00 07 6f fd ff 70 43 00 00 61 6f fd ff 98 43 00 00  .n..4C...n..HC...o..pC..ao...C..
0003ae00  97 6f fd ff b4 43 00 00 e0 6f fd ff dc 43 00 00 fa 6f fd ff f4 43 00 00 40 70 fd ff 14 44 00 00  .o...C...o...C...o...C..@p...D..
0003ae20  52 70 fd ff 28 44 00 00 b5 70 fd ff 50 44 00 00 cb 70 fd ff 64 44 00 00 21 72 fd ff c0 44 00 00  Rp..(D...p..PD...p..dD..!r...D..
0003ae40  f4 72 fd ff fc 44 00 00 23 73 fd ff 14 45 00 00 2c 74 fd ff 4c 45 00 00 35 74 fd ff 60 45 00 00  .r...D..#s...E..,t..LE..5t..`E..
0003ae60  c6 74 fd ff a8 45 00 00 19 75 fd ff e0 45 00 00 6d 75 fd ff f8 45 00 00 c1 75 fd ff 10 46 00 00  .t...E...u...E..mu...E...u...F..
0003ae80  74 76 fd ff 40 46 00 00 9c 79 fd ff a8 46 00 00 5f 7a fd ff e4 46 00 00 a1 7d fd ff 30 47 00 00  tv..@F...y...F.._z...F...}..0G..
0003aea0  6e 7e fd ff 7c 47 00 00 62 7f fd ff cc 47 00 00 2c 81 fd ff 18 48 00 00 87 81 fd ff 44 48 00 00  n~..|G..b....G..,....H......DH..
0003aec0  18 82 fd ff 74 48 00 00 90 82 fd ff 94 48 00 00 b1 82 fd ff ac 48 00 00 2d 83 fd ff cc 48 00 00  ....tH.......H.......H..-....H..
0003aee0  28 84 fd ff 04 49 00 00 42 84 fd ff 18 49 00 00 55 85 fd ff 5c 49 00 00 79 85 fd ff 74 49 00 00  (....I..B....I..U...\I..y...tI..
0003af00  d8 86 fd ff bc 49 00 00 27 87 fd ff d8 49 00 00 43 87 fd ff f0 49 00 00 0d 88 fd ff 2c 4a 00 00  .....I..'....I..C....I......,J..
0003af20  d0 88 fd ff 64 4a 00 00 02 89 fd ff 80 4a 00 00 fa 8b fd ff cc 4a 00 00 11 8c fd ff e0 4a 00 00  ....dJ.......J.......J.......J..
0003af40  2e 8c fd ff f4 4a 00 00 67 8c fd ff 08 4b 00 00 ba 8c fd ff 1c 4b 00 00 8f 8d fd ff 38 4b 00 00  .....J..g....K.......K......8K..
0003af60  d9 8d fd ff 4c 4b 00 00 26 8e fd ff 60 4b 00 00 5a 8f fd ff 88 4b 00 00 bc 8f fd ff a0 4b 00 00  ....LK..&...`K..Z....K.......K..
0003af80  b6 92 fd ff ec 4b 00 00 59 93 fd ff 14 4c 00 00 e6 93 fd ff 50 4c 00 00 2c 96 fd ff 7c 4c 00 00  .....K..Y....L......PL..,...|L..
0003afa0  54 97 fd ff b8 4c 00 00 f7 97 fd ff f4 4c 00 00 83 9d fd ff 40 4d 00 00 dd 9d fd ff 68 4d 00 00  T....L.......L......@M......hM..
0003afc0  8e 9e fd ff ac 4d 00 00 71 a1 fd ff fc 4d 00 00 80 a1 fd ff 10 4e 00 00 08 a2 fd ff 24 4e 00 00  .....M..q....M.......N......$N..
0003afe0  21 a2 fd ff 38 4e 00 00 4e a2 fd ff 4c 4e 00 00 7b a2 fd ff 60 4e 00 00 98 a2 fd ff 74 4e 00 00  !...8N..N...LN..{...`N......tN..
0003b000  db a2 fd ff 8c 4e 00 00 05 a3 fd ff a0 4e 00 00 4f a3 fd ff b4 4e 00 00 ad a3 fd ff d8 4e 00 00  .....N.......N..O....N.......N..
0003b020  9f a5 fd ff f4 4e 00 00 78 a7 fd ff 40 4f 00 00 07 a8 fd ff 60 4f 00 00 f4 a8 fd ff 84 4f 00 00  .....N..x...@O......`O.......O..
0003b040  03 a9 fd ff 98 4f 00 00 33 a9 fd ff ac 4f 00 00 bb a9 fd ff c8 4f 00 00 ec a9 fd ff e4 4f 00 00  .....O..3....O.......O.......O..
0003b060  24 ae fd ff 30 50 00 00 7f af fd ff 7c 50 00 00 c3 b0 fd ff c0 50 00 00 fb b1 fd ff f4 50 00 00  $...0P......|P.......P.......P..
0003b080  5e b2 fd ff 0c 51 00 00 c1 b2 fd ff 24 51 00 00 24 b3 fd ff 3c 51 00 00 46 b3 fd ff 50 51 00 00  ^....Q......$Q..$...<Q..F...PQ..
0003b0a0  c8 b3 fd ff 68 51 00 00 0d b4 fd ff 7c 51 00 00 c7 b4 fd ff 90 51 00 00 2b b5 fd ff a4 51 00 00  ....hQ......|Q.......Q..+....Q..
0003b0c0  8d b6 fd ff e0 51 00 00 ba b6 fd ff f4 51 00 00 df ba fd ff 48 52 00 00 0e bb fd ff 5c 52 00 00  .....Q.......Q......HR......\R..
0003b0e0  a5 bb fd ff 98 52 00 00 3d bc fd ff ac 52 00 00 7d bc fd ff c4 52 00 00 97 be fd ff 18 53 00 00  .....R..=....R..}....R.......S..
0003b100  29 bf fd ff 50 53 00 00 e0 c1 fd ff 9c 53 00 00 5e c2 fd ff c8 53 00 00 ee c2 fd ff 00 54 00 00  )...PS.......S..^....S.......T..
0003b120  98 c3 fd ff 2c 54 00 00 58 c4 fd ff 50 54 00 00 a3 c4 fd ff 64 54 00 00 21 c5 fd ff 84 54 00 00  ....,T..X...PT......dT..!....T..
0003b140  a0 c7 fd ff e4 54 00 00 ab cb fd ff 30 55 00 00 db cb fd ff 44 55 00 00 63 cc fd ff 60 55 00 00  .....T......0U......DU..c...`U..
0003b160  be cc fd ff 8c 55 00 00 77 cf fd ff d8 55 00 00 f7 cf fd ff f8 55 00 00 b0 d2 fd ff 44 56 00 00  .....U..w....U.......U......DV..
0003b180  06 d3 fd ff 5c 56 00 00 a9 d3 fd ff a0 56 00 00 ac d6 fd ff f4 56 00 00 dc d6 fd ff 08 57 00 00  ....\V.......V.......V.......W..
0003b1a0  27 de fd ff 54 57 00 00 76 ec fd ff e8 57 00 00 da f2 fd ff 40 58 00 00 cc f3 fd ff 7c 58 00 00  '...TW..v....W......@X......|X..
0003b1c0  9a f6 fd ff c0 58 00 00 a9 ff fd ff 24 59 00 00 c8 03 fe ff 6c 59 00 00 f3 03 fe ff 80 59 00 00  .....X......$Y......lY.......Y..
0003b1e0  35 04 fe ff 9c 59 00 00 f9 05 fe ff d0 59 00 00 42 06 fe ff e8 59 00 00 27 0b fe ff 34 5a 00 00  5....Y.......Y..B....Y..'...4Z..
0003b200  a0 0b fe ff 60 5a 00 00 1d 0c fe ff 80 5a 00 00 8a 0d fe ff cc 5a 00 00 dd 0d fe ff e4 5a 00 00  ....`Z.......Z.......Z.......Z..
0003b220  7d 0f fe ff 2c 5b 00 00 37 11 fe ff 6c 5b 00 00 a7 11 fe ff a4 5b 00 00 9a 19 fe ff f4 5b 00 00  }...,[..7...l[.......[.......[..
0003b240  00 1a fe ff 2c 5c 00 00 1f 1a fe ff 40 5c 00 00 3d 1a fe ff 54 5c 00 00 5c 1a fe ff 68 5c 00 00  ....,\......@\..=...T\..\...h\..
0003b260  7b 1a fe ff 7c 5c 00 00 ea 1a fe ff b8 5c 00 00 42 1b fe ff d4 5c 00 00 ee 1b fe ff f0 5c 00 00  {...|\.......\..B....\.......\..
0003b280  0e 20 fe ff 3c 5d 00 00 62 20 fe ff 54 5d 00 00 9b 20 fe ff 6c 5d 00 00 28 22 fe ff a4 5d 00 00  . ..<]..b ..T]... ..l]..("...]..
0003b2a0  b1 23 fe ff 08 5e 00 00 cb 24 fe ff 34 5e 00 00 fd 24 fe ff 5c 5e 00 00 c3 25 fe ff 7c 5e 00 00  .#...^...$..4^...$..\^...%..|^..
0003b2c0  ec 25 fe ff 90 5e 00 00 da 26 fe ff c4 5e 00 00 48 28 fe ff fc 5e 00 00 b9 28 fe ff 3c 5f 00 00  .%...^...&...^..H(...^...(..<_..
0003b2e0  18 29 fe ff 68 5f 00 00 bd 29 fe ff 9c 5f 00 00 39 2a fe ff b8 5f 00 00 04 2b fe ff d8 5f 00 00  .)..h_...)..._..9*..._...+..._..
0003b300  b1 2b fe ff fc 5f 00 00 39 2c fe ff 38 60 00 00 8b 2e fe ff 58 60 00 00 dc 33 fe ff c0 60 00 00  .+..._..9,..8`......X`...3...`..
0003b320  fa 37 fe ff 0c 61 00 00 2d 38 fe ff 20 61 00 00 92 38 fe ff 54 61 00 00 be 38 fe ff 6c 61 00 00  .7...a..-8.. a...8..Ta...8..la..
0003b340  04 3a fe ff 98 61 00 00 4e 42 fe ff d4 61 00 00 95 43 fe ff 04 62 00 00 cd 43 fe ff 2c 62 00 00  .:...a..NB...a...C...b...C..,b..
0003b360  4a 44 fe ff 64 62 00 00 73 45 fe ff ac 62 00 00 ed 47 fe ff 0c 63 00 00 fc 47 fe ff 20 63 00 00  JD..db..sE...b...G...c...G.. c..
0003b380  f1 48 fe ff 44 63 00 00 88 49 fe ff 58 63 00 00 a9 49 fe ff 6c 63 00 00 4f 4a fe ff a0 63 00 00  .H..Dc...I..Xc...I..lc..OJ...c..
0003b3a0  0d 51 fe ff 04 64 00 00 42 51 fe ff 1c 64 00 00 99 52 fe ff 68 64 00 00 3f 53 fe ff 98 64 00 00  .Q...d..BQ...d...R..hd..?S...d..
0003b3c0  b4 55 fe ff dc 64 00 00 f8 55 fe ff f0 64 00 00 4b 56 fe ff 04 65 00 00 55 56 fe ff 18 65 00 00  .U...d...U...d..KV...e..UV...e..
0003b3e0  5a 56 fe ff 2c 65 00 00 17 59 fe ff 78 65 00 00 05 5c fe ff c4 65 00 00 0d 5f fe ff 10 66 00 00  ZV..,e...Y..xe...\...e..._...f..
0003b400  62 5f fe ff 2c 66 00 00 6c 5f fe ff 40 66 00 00 d3 5f fe ff 58 66 00 00 93 61 fe ff a4 66 00 00  b_..,f..l_..@f..._..Xf...a...f..
0003b420  76 62 fe ff d0 66 00 00 68 63 fe ff 0c 67 00 00 72 63 fe ff 20 67 00 00 10 64 fe ff 38 67 00 00  vb...f..hc...g..rc.. g...d..8g..
0003b440  a8 64 fe ff 64 67 00 00 b2 64 fe ff 78 67 00 00 50 65 fe ff 90 67 00 00 3c 67 fe ff dc 67 00 00  .d..dg...d..xg..Pe...g..<g...g..
0003b460  1d 68 fe ff 08 68 00 00 27 69 fe ff 44 68 00 00 d6 6a fe ff 94 68 00 00 a6 6c fe ff e4 68 00 00  .h...h..'i..Dh...j...h...l...h..
0003b480  3e 6d fe ff 1c 69 00 00 b1 6f fe ff 60 69 00 00 8e 70 fe ff 78 69 00 00 a9 71 fe ff b8 69 00 00  >m...i...o..`i...p..xi...q...i..
0003b4a0  eb 73 fe ff 04 6a 00 00 36 74 fe ff 18 6a 00 00 b0 74 fe ff 30 6a 00 00 2a 75 fe ff 48 6a 00 00  .s...j..6t...j...t..0j..*u..Hj..
0003b4c0  9c 75 fe ff 70 6a 00 00 16 76 fe ff 88 6a 00 00 1b 76 fe ff 9c 6a 00 00 7d 76 fe ff b4 6a 00 00  .u..pj...v...j...v...j..}v...j..
0003b4e0  11 77 fe ff dc 6a 00 00 70 77 fe ff f4 6a 00 00 cf 77 fe ff 0c 6b 00 00 49 78 fe ff 24 6b 00 00  .w...j..pw...j...w...k..Ix..$k..
0003b500  a8 78 fe ff 3c 6b 00 00 07 79 fe ff 54 6b 00 00 66 79 fe ff 6c 6b 00 00 c5 79 fe ff 84 6b 00 00  .x..<k...y..Tk..fy..lk...y...k..
0003b520  24 7a fe ff 9c 6b 00 00 49 7a fe ff b4 6b 00 00 86 7a fe ff cc 6b 00 00 b1 7a fe ff e4 6b 00 00  $z...k..Iz...k...z...k...z...k..
0003b540  d4 7a fe ff fc 6b 00 00 19 7b fe ff 14 6c 00 00 a1 7b fe ff 34 6c 00 00 e6 7b fe ff 4c 6c 00 00  .z...k...{...l...{..4l...{..Ll..
0003b560  2c 7c fe ff 64 6c 00 00 71 7c fe ff 7c 6c 00 00 b6 7c fe ff 94 6c 00 00 fb 7c fe ff ac 6c 00 00  ,|..dl..q|..|l...|...l...|...l..
0003b580  40 7d fe ff c4 6c 00 00 85 7d fe ff dc 6c 00 00 d0 7d fe ff f4 6c 00 00 f3 7d fe ff 0c 6d 00 00  @}...l...}...l...}...l...}...m..
0003b5a0  41 7e fe ff 24 6d 00 00 86 7e fe ff 3c 6d 00 00 b1 7e fe ff 54 6d 00 00 d4 7e fe ff 6c 6d 00 00  A~..$m...~..<m...~..Tm...~..lm..
0003b5c0  0a 7f fe ff 84 6d 00 00 5a 7f fe ff 9c 6d 00 00 7d 7f fe ff b4 6d 00 00 a8 7f fe ff cc 6d 00 00  .....m..Z....m..}....m.......m..
0003b5e0  ed 7f fe ff e4 6d 00 00 32 80 fe ff fc 6d 00 00 6b 80 fe ff 14 6e 00 00 db 80 fe ff 34 6e 00 00  .....m..2....m..k....n......4n..
0003b600  56 81 fe ff 6c 6e 00 00 7d 82 fe ff 98 6e 00 00 1e 83 fe ff b0 6e 00 00 d1 83 fe ff d4 6e 00 00  V...ln..}....n.......n.......n..
0003b620  43 85 fe ff 10 6f 00 00 4b 85 fe ff 24 6f 00 00 56 85 fe ff 3c 6f 00 00 c7 86 fe ff 5c 6f 00 00  C....o..K...$o..V...<o......\o..
0003b640  f0 86 fe ff 74 6f 00 00 4e 87 fe ff a4 6f 00 00 ac 87 fe ff d4 6f 00 00 d5 87 fe ff ec 6f 00 00  ....to..N....o.......o.......o..
0003b660  5d 88 fe ff 04 70 00 00 f4 88 fe ff 34 70 00 00 82 89 fe ff 64 70 00 00 87 89 fe ff 7c 70 00 00  ]....p......4p......dp......|p..
0003b680  e0 89 fe ff 94 70 00 00 ee 8a fe ff d0 70 00 00 73 8c fe ff 34 71 00 00 38 8e fe ff 9c 71 00 00  .....p.......p..s...4q..8....q..
0003b6a0  ec 8f fe ff ec 71 00 00 24 90 fe ff 04 72 00 00 02 93 fe ff 5c 72 00 00 4d 93 fe ff 84 72 00 00  .....q..$....r......\r..M....r..
0003b6c0  7c 93 fe ff 9c 72 00 00 9c 95 fe ff dc 72 00 00 e0 9b fe ff 28 73 00 00 f1 9b fe ff 3c 73 00 00  |....r.......r......(s......<s..
0003b6e0  28 a1 fe ff 8c 73 00 00 6b a1 fe ff a8 73 00 00 96 a1 fe ff c4 73 00 00 60 ac fe ff 14 74 00 00  (....s..k....s.......s..`....t..
0003b700  95 b3 fe ff 5c 74 00 00 fb b8 fe ff ac 74 00 00 7a b9 fe ff c4 74 00 00 bc b9 fe ff dc 74 00 00  ....\t.......t..z....t.......t..
0003b720  95 ba fe ff f4 74 00 00 b8 bb fe ff 44 75 00 00 e1 bb fe ff 5c 75 00 00 14 bc fe ff 74 75 00 00  .....t......Du......\u......tu..
0003b740  a4 bc fe ff b4 75 00 00 24 bd fe ff 14 76 00 00 54 c0 fe ff 4c 76 00 00 f4 c0 fe ff 9c 76 00 00  .....u..$....v..T...Lv.......v..
0003b760  64 c2 fe ff b4 76 00 00 c4 c2 fe ff dc 76 00 00 84 c3 fe ff 04 77 00 00 d4 c3 fe ff 1c 77 00 00  d....v.......v.......w.......w..
0003b780  04 c4 fe ff 34 77 00 00 84 c6 fe ff 4c 77 00 00 34 c8 fe ff 64 77 00 00 24 cb fe ff 9c 77 00 00  ....4w......Lw..4...dw..$....w..
0003b7a0  54 cb fe ff b4 77 00 00 b4 d3 fe ff 04 78 00 00 74 d6 fe ff 44 78 00 00 c4 d9 fe ff 94 78 00 00  T....w.......x..t...Dx.......x..
0003b7c0  f4 d9 fe ff ac 78 00 00 d4 db fe ff 2c 79 00 00 84 dd fe ff 7c 79 00 00 d4 df fe ff e4 79 00 00  .....x......,y......|y.......y..
0003b7e0  04 e0 fe ff 04 7a 00 00 34 e0 fe ff 1c 7a 00 00 b4 e0 fe ff 54 7a 00 00 f4 e0 fe ff 74 7a 00 00  .....z..4....z......Tz......tz..
0003b800  54 e1 fe ff ac 7a 00 00 94 e4 fe ff ec 7a 00 00 04 e5 fe ff 24 7b 00 00 84 e5 fe ff 74 7b 00 00  T....z.......z......${......t{..
0003b820  94 e6 fe ff c4 7b 00 00 a4 e9 fe ff ec 7b 00 00 64 ea fe ff 34 7c 00 00 34 eb fe ff 84 7c 00 00  .....{.......{..d...4|..4....|..
0003b840  44 eb fe ff 9c 7c 00 00 e4 ed fe ff ec 7c 00 00 c4 f0 fe ff 84 7d 00 00 54 f1 fe ff 9c 7d 00 00  D....|.......|.......}..T....}..
0003b860  04 f2 fe ff cc 7d 00 00 c4 f4 fe ff 0c 7e 00 00 14 f7 fe ff 54 7e 00 00 04 f9 fe ff 94 7e 00 00  .....}.......~......T~.......~..
0003b880  a4 f9 fe ff e4 7e 00 00 f4 f9 fe ff 14 7f 00 00 44 fe fe ff 64 7f 00 00 44 01 ff ff b4 7f 00 00  .....~..........D...d...D.......
0003b8a0  14 09 ff ff 04 80 00 00 04 0a ff ff 1c 80 00 00 14 0a ff ff 30 80 00 00 84 0c ff ff 7c 80 00 00  ....................0.......|...
0003b8c0  34 0e ff ff e4 80 00 00 a4 0f ff ff 0c 81 00 00 74 12 ff ff 24 81 00 00 34 15 ff ff 6c 81 00 00  4...............t...$...4...l...
0003b8e0  94 15 ff ff 84 81 00 00 e4 15 ff ff 9c 81 00 00 54 16 ff ff b4 81 00 00 a4 16 ff ff d4 81 00 00  ................T...............
0003b900  34 17 ff ff 1c 82 00 00 b4 17 ff ff 5c 82 00 00 f4 1a ff ff 94 82 00 00 94 1b ff ff e4 82 00 00  4...........\...................
0003b920  94 1f ff ff 34 83 00 00 94 21 ff ff 84 83 00 00 c4 21 ff ff 9c 83 00 00 f4 21 ff ff b4 83 00 00  ....4....!.......!.......!......
0003b940  b4 26 ff ff 1c 84 00 00 54 2c ff ff 6c 84 00 00 53 3f ff ff bc 84 00 00 64 3f ff ff d4 84 00 00  .&......T,..l...S?......d?......
0003b960  c4 52 ff ff 24 85 00 00 64 56 ff ff 94 85 00 00 14 5b ff ff 0c 86 00 00 34 64 ff ff 74 86 00 00  .R..$...dV.......[......4d..t...
0003b980  44 67 ff ff dc 86 00 00 a4 6a ff ff 2c 87 00 00 84 6c ff ff 74 87 00 00 c4 6c ff ff 8c 87 00 00  Dg.......j..,....l..t....l......
0003b9a0  d4 6f ff ff dc 87 00 00 44 74 ff ff 2c 88 00 00 f4 78 ff ff 7c 88 00 00 24 79 ff ff 9c 88 00 00  .o......Dt..,....x..|...$y......
0003b9c0  84 7c ff ff 34 89 00 00 84 7d ff ff 4c 89 00 00 f4 7f ff ff cc 89 00 00 14 80 ff ff e4 89 00 00  .|..4....}..L...................
0003b9e0  44 80 ff ff 14 8a 00 00 e4 82 ff ff 54 8a 00 00 74 84 ff ff a4 8a 00 00 b4 85 ff ff f4 8a 00 00  D...........T...t...............
0003ba00  a4 86 ff ff 44 8b 00 00 44 87 ff ff 84 8b 00 00 d4 87 ff ff c4 8b 00 00 14 88 ff ff fc 8b 00 00  ....D...D.......................
0003ba20  94 89 ff ff 44 8c 00 00 84 8c ff ff ac 8c 00 00 04 90 ff ff fc 8c 00 00 d4 91 ff ff 4c 8d 00 00  ....D.......................L...
0003ba40  f4 91 ff ff 6c 8d 00 00 14 92 ff ff 84 8d 00 00 44 92 ff ff b4 8d 00 00                          ....l...........D.......
.eh_frame_hdr (PROGBITS) section ended  {0x3a4bc-0x3ba58}

.eh_frame (PROGBITS) section started  {0x3ba58-0x43290}
0003ba58                                                                          14 00 00 00 00 00 00 00                          ........
0003ba60  01 7a 52 00 01 78 10 01 1b 0c 07 08 90 01 00 00 14 00 00 00 1c 00 00 00 d8 9e fc ff 26 00 00 00  .zR..x......................&...
0003ba80  00 44 07 10 00 00 00 00 24 00 00 00 34 00 00 00 90 95 fc ff 60 08 00 00 00 0e 10 46 0e 18 4a 0f  .D......$...4.......`......F..J.
0003baa0  0b 77 08 80 00 3f 1a 3b 2a 33 24 22 00 00 00 00 14 00 00 00 5c 00 00 00 c8 9d fc ff 10 00 00 00  .w...?.;*3$"........\...........
0003bac0  00 00 00 00 00 00 00 00 20 00 00 00 74 00 00 00 69 9f fc ff 67 00 00 00 00 42 0e 10 8c 02 50 0e  ........ ...t...i...g....B....P.
0003bae0  18 86 03 4e 0e 20 83 04 49 0e e0 02 20 00 00 00 98 00 00 00 ac 9f fc ff 7d 00 00 00 00 41 0e 10  ...N. ..I... ...........}....A..
0003bb00  83 02 54 0e a0 08 02 62 0e 10 41 0e 08 00 00 00 10 00 00 00 bc 00 00 00 05 a0 fc ff 0f 00 00 00  ..T....b..A.....................
0003bb20  00 00 00 00 14 00 00 00 d0 00 00 00 00 a0 fc ff a5 00 00 00 00 47 0e e0 01 00 00 00 14 00 00 00  .....................G..........
0003bb40  e8 00 00 00 8d a0 fc ff a8 00 00 00 00 47 0e e0 01 00 00 00 10 00 00 00 00 01 00 00 1d a1 fc ff  .............G..................
0003bb60  12 00 00 00 00 41 0e 10 18 00 00 00 14 01 00 00 1b a1 fc ff bc 00 00 00 00 47 0e e0 01 02 b0 0e  .....A...................G......
0003bb80  08 00 00 00 24 00 00 00 30 01 00 00 bb a1 fc ff 62 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 41  ....$...0.......b....A....D....A
0003bba0  0e 20 02 55 0e 18 41 0e 10 41 0e 08 28 00 00 00 58 01 00 00 f5 a1 fc ff 78 00 00 00 00 42 0e 10  . .U..A..A..(...X.......x....B..
0003bbc0  8c 02 46 0e 18 86 03 44 0e 20 83 04 02 64 0e 18 41 0e 10 42 0e 08 00 00 18 00 00 00 84 01 00 00  ..F....D. ...d..A..B............
0003bbe0  41 a2 fc ff 46 00 00 00 00 45 0e 10 83 02 77 0e 08 45 c3 00 28 00 00 00 a0 01 00 00 6b a2 fc ff  A...F....E....w..E..(.......k...
0003bc00  9d 00 00 00 00 41 0e 10 86 02 4e 0e 18 83 03 47 0e a0 01 02 7e 0e 18 43 0e 10 41 0e 08 00 00 00  .....A....N....G....~..C..A.....
0003bc20  2c 00 00 00 cc 01 00 00 dc a2 fc ff f7 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04  ,................B....D....A. ..
0003bc40  4a 0e 60 02 dd 0e 20 41 0e 18 41 0e 10 42 0e 08 34 00 00 00 fc 01 00 00 a3 a3 fc ff 8e 00 00 00  J.`... A..A..B..4...............
0003bc60  00 42 0e 10 8d 02 44 0e 18 8c 03 49 0e 20 86 04 41 0e 28 83 05 44 0e 30 02 6d 0e 28 43 0e 20 41  .B....D....I. ..A.(..D.0.m.(C. A
0003bc80  0e 18 42 0e 10 42 0e 08 14 00 00 00 34 02 00 00 f9 a3 fc ff 55 00 00 00 00 44 0e 20 02 4c 0e 08  ..B..B......4.......U....D. .L..
0003bca0  48 00 00 00 4c 02 00 00 36 a4 fc ff b8 01 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 45 0e 20 8d 04  H...L...6........B....E....E. ..
0003bcc0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 70 03 90 01 0e 38 43 0e 30 41 0e 28 42 0e 20  B.(..A.0..A.8..G.p....8C.0A.(B. 
0003bce0  42 0e 18 42 0e 10 42 0e 08 00 00 00 1c 00 00 00 98 02 00 00 a2 a5 fc ff 62 00 00 00 00 41 0e 10  B..B..B.................b....A..
0003bd00  83 02 4c 0e 30 02 4f 0e 10 41 0e 08 2c 00 00 00 b8 02 00 00 e4 a5 fc ff 89 00 00 00 00 42 0e 10  ..L.0.O..A..,................B..
0003bd20  8c 02 46 0e 18 86 03 44 0e 20 83 04 44 0e 30 02 70 0e 20 41 0e 18 41 0e 10 42 0e 08 4c 00 00 00  ..F....D. ..D.0.p. A..A..B..L...
0003bd40  e8 02 00 00 3d a6 fc ff 8f 00 00 00 00 42 0e 10 8d 02 47 0e 18 8c 03 4b 0e 20 86 04 41 0e 28 83  ....=........B....G....K. ..A.(.
0003bd60  05 44 0e 30 4f 0a 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 45 0b 70 0e 38 4d 0e 40 4e 0e 28 44  .D.0O..(D. A..B..B..E.p.8M.@N.(D
0003bd80  0e 20 41 0e 18 42 0e 10 42 0e 08 00 18 00 00 00 38 03 00 00 7c a6 fc ff 36 00 00 00 00 41 0e 10  . A..B..B.......8...|...6....A..
0003bda0  83 02 70 0e 08 00 00 00 10 00 00 00 54 03 00 00 96 a6 fc ff 21 00 00 00 00 00 00 00 1c 00 00 00  ..p.........T.......!...........
0003bdc0  68 03 00 00 a3 a6 fc ff 93 00 00 00 00 41 0e 10 83 02 47 0e 30 02 85 0e 10 41 0e 08 14 00 00 00  h............A....G.0....A......
0003bde0  88 03 00 00 16 a7 fc ff 3f 00 00 00 00 44 0e 30 76 0e 08 00 24 00 00 00 a0 03 00 00 3d a7 fc ff  ........?....D.0v...$.......=...
0003be00  3f 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 41 0e 20 72 0e 18 44 0e 10 41 0e 08 00 40 00 00 00  ?....A....A....A. r..D..A...@...
0003be20  c8 03 00 00 54 a7 fc ff c3 00 00 00 00 42 0e 10 8e 02 47 0e 18 8d 03 45 0e 20 8c 04 41 0e 28 86  ....T........B....G....E. ..A.(.
0003be40  05 44 0e 30 83 06 4c 0e d0 01 02 97 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00  .D.0..L......0A.(A. B..B..B.....
0003be60  18 00 00 00 0c 04 00 00 d3 a7 fc ff ce 00 00 00 00 47 0e e0 01 02 c2 0e 08 00 00 00 10 00 00 00  .................G..............
0003be80  28 04 00 00 85 a8 fc ff 12 00 00 00 00 4c 0e 10 10 00 00 00 3c 04 00 00 83 a8 fc ff 11 00 00 00  (............L......<...........
0003bea0  00 4c 0e 10 10 00 00 00 50 04 00 00 80 a8 fc ff 11 00 00 00 00 4c 0e 10 18 00 00 00 64 04 00 00  .L......P............L......d...
0003bec0  7d a8 fc ff 34 00 00 00 00 41 0e 10 83 02 6e 0e 08 00 00 00 10 00 00 00 80 04 00 00 95 a8 fc ff  }...4....A....n.................
0003bee0  05 00 00 00 00 00 00 00 18 00 00 00 94 04 00 00 86 a8 fc ff 18 00 00 00 00 41 0e 10 83 02 52 0e  .........................A....R.
0003bf00  08 00 00 00 18 00 00 00 b0 04 00 00 82 a8 fc ff 4a 00 00 00 00 41 0e 10 83 02 02 44 0e 08 00 00  ................J....A.....D....
0003bf20  18 00 00 00 cc 04 00 00 b0 a8 fc ff 24 00 00 00 00 41 0e 10 83 02 5e 0e 08 00 00 00 14 00 00 00  ............$....A....^.........
0003bf40  e8 04 00 00 b8 a8 fc ff 27 00 00 00 00 46 0e 10 4e 0e 08 00 14 00 00 00 00 05 00 00 c7 a8 fc ff  ........'....F..N...............
0003bf60  27 00 00 00 00 51 0e 10 4e 0e 08 00 14 00 00 00 18 05 00 00 d6 a8 fc ff 1c 00 00 00 00 46 0e 10  '....Q..N....................F..
0003bf80  4e 0e 08 00 14 00 00 00 30 05 00 00 da a8 fc ff 2f 00 00 00 00 51 0e 10 4e 0e 08 00 14 00 00 00  N.......0......./....Q..N.......
0003bfa0  48 05 00 00 f1 a8 fc ff 27 00 00 00 00 51 0e 10 4e 0e 08 00 14 00 00 00 60 05 00 00 00 a9 fc ff  H.......'....Q..N.......`.......
0003bfc0  20 00 00 00 00 48 0e 10 4e 0e 08 00 14 00 00 00 78 05 00 00 08 a9 fc ff 28 00 00 00 00 49 0e 10   ....H..N.......x.......(....I..
0003bfe0  4e 0e 08 00 14 00 00 00 90 05 00 00 18 a9 fc ff 11 00 00 00 00 41 0e 10 46 0e 08 00 28 00 00 00  N....................A..F...(...
0003c000  a8 05 00 00 11 a9 fc ff 2f 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04 5d 0e 18 41  ......../....B....D....D. ..]..A
0003c020  0e 10 42 0e 08 00 00 00 14 00 00 00 d4 05 00 00 14 a9 fc ff 29 00 00 00 00 53 0e 10 4e 0e 08 00  ..B.................)....S..N...
0003c040  14 00 00 00 ec 05 00 00 25 a9 fc ff 29 00 00 00 00 53 0e 10 4e 0e 08 00 1c 00 00 00 04 06 00 00  ........%...)....S..N...........
0003c060  36 a9 fc ff 33 00 00 00 00 41 0e 10 86 02 49 0e 20 5f 0e 10 45 0e 08 00 3c 00 00 00 24 06 00 00  6...3....A....I. _..E...<...$...
0003c080  49 a9 fc ff 83 00 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 44 0e 30  I........B....B....B. ..D.(..D.0
0003c0a0  83 06 44 0e 40 02 64 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 14 00 00 00 64 06 00 00  ..D.@.d.0A.(A. B..B..B......d...
0003c0c0  8c a9 fc ff 1e 00 00 00 00 44 0e 20 53 0e 08 00 1c 00 00 00 7c 06 00 00 92 a9 fc ff 2e 00 00 00  .........D. S.......|...........
0003c0e0  00 41 0e 10 86 02 4d 0e 20 5a 0e 10 41 0e 08 00 34 00 00 00 9c 06 00 00 a0 a9 fc ff 92 00 00 00  .A....M. Z..A...4...............
0003c100  00 42 0e 10 8d 02 45 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83 05 41 0e 30 02 77 0e 28 44 0e 20 41  .B....E....D. ..A.(..A.0.w.(D. A
0003c120  0e 18 42 0e 10 42 0e 08 10 00 00 00 d4 06 00 00 fa a9 fc ff 07 00 00 00 00 00 00 00 10 00 00 00  ..B..B..........................
0003c140  e8 06 00 00 ed a9 fc ff 0a 00 00 00 00 00 00 00 28 00 00 00 fc 06 00 00 e3 a9 fc ff 2b 00 00 00  ................(...........+...
0003c160  00 42 0e 10 8c 02 44 0e 18 86 03 46 0e 20 83 04 57 0e 18 41 0e 10 42 0e 08 00 00 00 28 00 00 00  .B....D....F. ..W..A..B.....(...
0003c180  28 07 00 00 e2 a9 fc ff 3b 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 43 0e 20 83 04 6d 0e 18 41  (.......;....B....A....C. ..m..A
0003c1a0  0e 10 42 0e 08 00 00 00 1c 00 00 00 54 07 00 00 f1 a9 fc ff 2e 00 00 00 00 42 0e 10 8c 02 49 0e  ..B.........T............B....I.
0003c1c0  20 5c 0e 10 42 0e 08 00 10 00 00 00 74 07 00 00 ff a9 fc ff 08 00 00 00 00 00 00 00 34 00 00 00   \..B.......t...............4...
0003c1e0  88 07 00 00 f3 a9 fc ff eb 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83  .............B....B....A. ..A.(.
0003c200  05 44 0e 40 02 d6 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 28 00 00 00 c0 07 00 00 a6 aa fc ff  .D.@...(A. A..B..B..(...........
0003c220  6d 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04 02 5b 0e 18 41 0e 10 42 0e 08 00 00  m....B....D....D. ...[..A..B....
0003c240  14 00 00 00 ec 07 00 00 e7 aa fc ff 0b 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 04 08 00 00  ................................
0003c260  da aa fc ff 1e 00 00 00 00 41 0e 10 58 0e 08 00 14 00 00 00 1c 08 00 00 e0 aa fc ff ac 00 00 00  .........A..X...................
0003c280  00 44 0e 60 02 a3 0e 08 1c 00 00 00 34 08 00 00 74 ab fc ff c1 00 00 00 00 41 0e 10 83 02 47 0e  .D.`........4...t........A....G.
0003c2a0  60 02 b3 0e 10 41 0e 08 1c 00 00 00 54 08 00 00 15 ac fc ff b4 00 00 00 00 41 0e 10 83 02 47 0e  `....A......T............A....G.
0003c2c0  60 02 a6 0e 10 41 0e 08 14 00 00 00 74 08 00 00 a9 ac fc ff 20 00 00 00 00 41 0e 10 5a 0e 08 00  `....A......t....... ....A..Z...
0003c2e0  34 00 00 00 8c 08 00 00 b1 ac fc ff 4d 00 00 00 00 42 0e 10 8d 02 45 0e 18 8c 03 49 0e 20 86 04  4...........M....B....E....I. ..
0003c300  44 0e 28 83 05 41 0e 30 6a 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 00 30 00 00 00 c4 08 00 00  D.(..A.0j.(D. A..B..B...0.......
0003c320  c6 ac fc ff c5 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04 47 0e a0 02 02 ab 0e 20  .........B....D....A. ..G...... 
0003c340  44 0e 18 41 0e 10 42 0e 08 00 00 00 14 00 00 00 f8 08 00 00 57 ad fc ff 1e 00 00 00 00 41 0e 10  D..A..B.............W........A..
0003c360  58 0e 08 00 24 00 00 00 10 09 00 00 5d ad fc ff 42 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 41  X...$.......]...B....A....A....A
0003c380  0e 20 78 0e 18 41 0e 10 41 0e 08 00 38 00 00 00 38 09 00 00 77 ad fc ff 58 00 00 00 00 42 0e 10  . x..A..A...8...8...w...X....B..
0003c3a0  8e 02 49 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 43 0e 30 83 06 78 0e 28 41 0e 20 42 0e 18 42  ..I....B. ..D.(..C.0..x.(A. B..B
0003c3c0  0e 10 42 0e 08 00 00 00 10 00 00 00 74 09 00 00 93 ad fc ff 23 00 00 00 00 00 00 00 24 00 00 00  ..B.........t.......#.......$...
0003c3e0  88 09 00 00 a2 ad fc ff 46 00 00 00 00 41 0e 10 86 02 46 0e 20 68 0a 0e 10 43 0e 08 45 0b 44 0e  ........F....A....F. h...C..E.D.
0003c400  10 46 0e 08 14 00 00 00 b0 09 00 00 c0 ad fc ff 4d 00 00 00 00 41 0e 10 02 47 0e 08 14 00 00 00  .F..............M....A...G......
0003c420  c8 09 00 00 f5 ad fc ff 33 00 00 00 00 4d 0e 10 5f 0e 08 00 10 00 00 00 e0 09 00 00 10 ae fc ff  ........3....M.._...............
0003c440  48 00 00 00 00 00 00 00 48 00 00 00 f4 09 00 00 44 ae fc ff 8c 01 00 00 00 42 0e 10 8f 02 42 0e  H.......H.......D........B....B.
0003c460  18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 50 03 67 01 0e 38 43  ...B. ..E.(..A.0..A.8..G.P.g..8C
0003c480  0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 40 00 00 00 40 0a 00 00 84 af fc ff  .0A.(B. B..B..B.....@...@.......
0003c4a0  5f 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 45 0e 20 8c 04 41 0e 28 86 05 44 0e 30 83 06 44 0e  _....B....B....E. ..A.(..D.0..D.
0003c4c0  40 03 3e 01 0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 34 00 00 00 84 0a 00 00  @.>..0C.(A. B..B..B.....4.......
0003c4e0  9f b0 fc ff 9f 00 00 00 00 42 0e 10 8d 02 4a 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83 05 43 0e 30  .........B....J....D. ..A.(..C.0
0003c500  02 7d 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 40 00 00 00 bc 0a 00 00 06 b1 fc ff 6f 00 00 00  .}.(D. A..B..B..@...........o...
0003c520  00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04 49 0a 0e 18 41 0e 10 42 0e 08 45 0b 65 0a 0e 18  .B....D....D. ..I...A..B..E.e...
0003c540  44 0e 10 42 0e 08 45 0b 4b 0a 0e 18 44 0e 10 42 0e 08 45 0b 18 00 00 00 00 0b 00 00 31 b1 fc ff  D..B..E.K...D..B..E.........1...
0003c560  93 00 00 00 00 41 0e 10 83 02 02 8d 0e 08 00 00 10 00 00 00 1c 0b 00 00 a8 b1 fc ff 05 00 00 00  .....A..........................
0003c580  00 00 00 00 44 00 00 00 30 0b 00 00 99 b1 fc ff b8 00 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 4a  ....D...0............B....E....J
0003c5a0  0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 42 0e 40 02 89 0e 38 44 0e 30 41 0e 28  . ..E.(..D.0..A.8..B.@...8D.0A.(
0003c5c0  42 0e 20 42 0e 18 42 0e 10 42 0e 08 48 00 00 00 78 0b 00 00 09 b2 fc ff 8f 01 00 00 00 42 0e 10  B. B..B..B..H...x............B..
0003c5e0  8f 02 47 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 47 0e 50 03 67  ..G....B. ..B.(..A.0..D.8..G.P.g
0003c600  01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 4c 00 00 00 c4 0b 00 00  ..8A.0A.(B. B..B..B.....L.......
0003c620  4c b3 fc ff 48 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  L...H....B....B....B. ..B.(..A.0
0003c640  86 06 41 0e 38 83 07 44 0e 70 03 2b 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e  ..A.8..D.p.+..8A.0A.(B. B..B..B.
0003c660  08 00 00 00 00 00 00 00 40 00 00 00 14 0c 00 00 44 b4 fc ff b0 01 00 00 00 4c 0e 10 8e 02 42 0e  ........@.......D........L....B.
0003c680  18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 47 0e a0 02 03 8a 01 0e 30 41 0e 28 41 0e  ...B. ..A.(..A.0..G.......0A.(A.
0003c6a0  20 42 0e 18 42 0e 10 42 0e 08 00 00 28 00 00 00 58 0c 00 00 b0 b5 fc ff ce 00 00 00 00 42 0e 10   B..B..B....(...X............B..
0003c6c0  8c 02 41 0e 18 86 03 41 0e 20 83 04 02 c2 0e 18 41 0e 10 42 0e 08 00 00 28 00 00 00 84 0c 00 00  ..A....A. ......A..B....(.......
0003c6e0  52 b6 fc ff c3 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04 02 b7 0e 18 41 0e 10 42  R........B....A....A. ......A..B
0003c700  0e 08 00 00 18 00 00 00 b0 0c 00 00 e9 b6 fc ff 34 00 00 00 00 46 0e 10 83 02 64 c3 0e 08 00 00  ................4....F....d.....
0003c720  24 00 00 00 cc 0c 00 00 01 b7 fc ff 52 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 41 0e 20 02 48  $...........R....A....A....A. .H
0003c740  0e 18 41 0e 10 41 0e 08 30 00 00 00 f4 0c 00 00 2b b7 fc ff 64 00 00 00 00 41 0e 10 86 02 41 0e  ..A..A..0.......+...d....A....A.
0003c760  18 83 03 41 0e 20 02 4f 0a 0e 18 44 0e 10 41 0e 08 45 0b 41 0e 18 41 0e 10 41 0e 08 48 00 00 00  ...A. .O...D..A..E.A..A..A..H...
0003c780  28 0d 00 00 5b b7 fc ff 63 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 4a 0e 20 8d 04 42 0e 28 8c  (...[...c....B....B....J. ..B.(.
0003c7a0  05 44 0e 30 86 06 41 0e 38 83 07 44 0e a0 01 03 39 01 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18  .D.0..A.8..D....9..8C.0A.(B. B..
0003c7c0  42 0e 10 42 0e 08 00 00 4c 00 00 00 74 0d 00 00 72 b8 fc ff 44 02 00 00 00 42 0e 10 8f 02 47 0e  B..B....L...t...r...D....B....G.
0003c7e0  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e d0 01 03 1f 02 0e 38  ...B. ..B.(..A.0..A.8..G.......8
0003c800  41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 48 00 00 00 c4 0d 00 00  A.0A.(B. B..B..B........H.......
0003c820  66 ba fc ff db 00 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  f........B....B....B. ..B.(..A.0
0003c840  86 06 41 0e 38 83 07 49 0e e0 20 02 b7 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e  ..A.8..I.. ...8C.0A.(B. B..B..B.
0003c860  08 00 00 00 38 00 00 00 10 0e 00 00 f5 ba fc ff 89 00 00 00 00 42 0e 10 8d 02 49 0e 18 8c 03 44  ....8................B....I....D
0003c880  0e 20 86 04 41 0e 28 83 05 47 0e 90 02 02 67 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00  . ..A.(..G....g.(A. A..B..B.....
0003c8a0  40 00 00 00 4c 0e 00 00 42 bb fc ff f9 00 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04  @...L...B........B....B....B. ..
0003c8c0  41 0e 28 86 05 41 0e 30 83 06 47 0e b0 02 02 dd 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e  A.(..A.0..G......0A.(A. B..B..B.
0003c8e0  08 00 00 00 38 00 00 00 90 0e 00 00 f7 bb fc ff 7f 02 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 48  ....8................B....B....H
0003c900  0e 20 86 04 41 0e 28 83 05 47 0e d0 02 03 60 02 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00  . ..A.(..G....`..(A. A..B..B....
0003c920  3c 00 00 00 cc 0e 00 00 3a be fc ff c6 00 00 00 00 4c 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04  <.......:........L....B....B. ..
0003c940  44 0e 28 86 05 41 0e 30 83 06 49 0e 40 02 98 0e 30 44 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08  D.(..A.0..I.@...0D.(A. B..B..B..
0003c960  10 00 00 00 0c 0f 00 00 c0 be fc ff 13 00 00 00 00 00 00 00 10 00 00 00 20 0f 00 00 bf be fc ff  ........................ .......
0003c980  0e 00 00 00 00 00 00 00 24 00 00 00 34 0f 00 00 b9 be fc ff 53 00 00 00 00 41 0e 10 86 02 41 0e  ........$...4.......S....A....A.
0003c9a0  18 83 03 44 0e 20 02 46 0e 18 41 0e 10 41 0e 08 14 00 00 00 5c 0f 00 00 e4 be fc ff 29 00 00 00  ...D. .F..A..A......\.......)...
0003c9c0  00 49 0e 10 58 0e 08 00 24 00 00 00 74 0f 00 00 f5 be fc ff 41 00 00 00 00 41 0e 10 86 02 44 0e  .I..X...$...t.......A....A....D.
0003c9e0  18 83 03 49 0e 20 6c 0e 18 41 0e 10 41 0e 08 00 38 00 00 00 9c 0f 00 00 0e bf fc ff 6f 00 00 00  ...I. l..A..A...8...........o...
0003ca00  00 42 0e 10 8e 02 45 0e 18 8d 03 45 0e 20 8c 04 44 0e 28 86 05 44 0e 30 83 06 02 4f 0e 28 41 0e  .B....E....E. ..D.(..D.0...O.(A.
0003ca20  20 42 0e 18 42 0e 10 42 0e 08 00 00 10 00 00 00 d8 0f 00 00 41 bf fc ff 11 00 00 00 00 4c 0e 10   B..B..B............A........L..
0003ca40  10 00 00 00 ec 0f 00 00 3e bf fc ff 07 00 00 00 00 00 00 00 10 00 00 00 00 10 00 00 31 bf fc ff  ........>...................1...
0003ca60  07 00 00 00 00 00 00 00 10 00 00 00 14 10 00 00 24 bf fc ff 07 00 00 00 00 00 00 00 14 00 00 00  ................$...............
0003ca80  28 10 00 00 17 bf fc ff 2a 00 00 00 00 46 0e 10 58 0e 08 00 18 00 00 00 40 10 00 00 29 bf fc ff  (.......*....F..X.......@...)...
0003caa0  2f 00 00 00 00 41 0e 10 83 02 69 0e 08 00 00 00 10 00 00 00 5c 10 00 00 3c bf fc ff 07 00 00 00  /....A....i.........\...<.......
0003cac0  00 00 00 00 10 00 00 00 70 10 00 00 2f bf fc ff 07 00 00 00 00 00 00 00 14 00 00 00 84 10 00 00  ........p.../...................
0003cae0  22 bf fc ff 07 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 9c 10 00 00 11 bf fc ff 51 00 00 00  "...........................Q...
0003cb00  00 74 0e 10 52 0e 08 00 14 00 00 00 b4 10 00 00 4a bf fc ff 40 00 00 00 00 5c 0e 10 5f 0e 08 00  .t..R...........J...@....\.._...
0003cb20  18 00 00 00 cc 10 00 00 72 bf fc ff 31 00 00 00 00 41 0e 10 83 02 6b 0e 08 00 00 00 24 00 00 00  ........r...1....A....k.....$...
0003cb40  e8 10 00 00 87 bf fc ff 86 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 47 0e 30 02 76 0e 18 41 0e  .............A....A....G.0.v..A.
0003cb60  10 41 0e 08 38 00 00 00 10 11 00 00 e5 bf fc ff 30 03 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41  .A..8...........0....B....B....A
0003cb80  0e 20 86 04 41 0e 28 83 05 47 0e 60 03 15 03 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00  . ..A.(..G.`....(D. A..B..B.....
0003cba0  34 00 00 00 4c 11 00 00 d9 c2 fc ff de 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04  4...L............B....B....A. ..
0003cbc0  41 0e 28 83 05 41 0e 30 02 c9 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 10 00 00 00 84 11 00 00  A.(..A.0...(D. A..B..B..........
0003cbe0  7f c3 fc ff 0f 00 00 00 00 00 00 00 10 00 00 00 98 11 00 00 7a c3 fc ff 38 00 00 00 00 00 00 00  ....................z...8.......
0003cc00  24 00 00 00 ac 11 00 00 9e c3 fc ff 86 00 00 00 00 41 0e 10 86 02 43 0e 18 83 03 41 0e 20 02 7a  $................A....C....A. .z
0003cc20  0e 18 41 0e 10 41 0e 08 3c 00 00 00 d4 11 00 00 fc c3 fc ff 1a 01 00 00 00 42 0e 10 8e 02 42 0e  ..A..A..<................B....B.
0003cc40  18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 44 0e 40 02 fe 0e 30 44 0e 28 41 0e 20 42  ...B. ..A.(..A.0..D.@...0D.(A. B
0003cc60  0e 18 42 0e 10 42 0e 08 1c 00 00 00 14 12 00 00 d6 c4 fc ff 48 00 00 00 00 41 0e 10 83 02 44 0e  ..B..B..............H....A....D.
0003cc80  20 7a 0e 10 44 0e 08 00 34 00 00 00 34 12 00 00 fe c4 fc ff b1 00 00 00 00 42 0e 10 8d 02 42 0e   z..D...4...4............B....B.
0003cca0  18 8c 03 41 0e 20 86 04 41 0e 28 83 05 47 0e 60 02 99 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08  ...A. ..A.(..G.`...(A. A..B..B..
0003ccc0  1c 00 00 00 6c 12 00 00 77 c5 fc ff 25 00 00 00 00 41 0e 10 86 02 47 0e 20 57 0e 10 41 0e 08 00  ....l...w...%....A....G. W..A...
0003cce0  40 00 00 00 8c 12 00 00 7c c5 fc ff 40 03 00 00 00 42 0e 10 8e 02 44 0e 18 8d 03 45 0e 20 8c 04  @.......|...@....B....D....E. ..
0003cd00  41 0e 28 86 05 44 0e 30 83 06 47 0e c0 03 03 1c 03 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42  A.(..D.0..G.......0A.(A. B..B..B
0003cd20  0e 08 00 00 70 00 00 00 d0 12 00 00 78 c8 fc ff 4b 05 00 00 00 42 0e 10 8f 02 44 0e 18 8e 03 42  ....p.......x...K....B....D....B
0003cd40  0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e d0 03 02 75 0e d8 03 49 0e e0 03  . ..E.(..D.0..A.8..G....u...I...
0003cd60  46 0e e8 03 46 0e f0 03 55 0e d0 03 03 14 04 0e d8 03 46 0e e0 03 44 0e e8 03 44 0e f0 03 6f 0e  F...F...U.........F...D...D...o.
0003cd80  d0 03 70 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 4c 00 00 00 44 13 00 00  ..p.8D.0A.(B. B..B..B...L...D...
0003cda0  4f cd fc ff 98 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 41 0e 30  O........B....B....E. ..E.(..A.0
0003cdc0  86 06 44 0e 38 83 07 47 0e e0 02 03 6d 01 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..D.8..G....m..8C.0A.(B. B..B..B
0003cde0  0e 08 00 00 00 00 00 00 14 00 00 00 94 13 00 00 97 ce fc ff 0e 00 00 00 00 41 0e 10 48 0e 08 00  .........................A..H...
0003ce00  1c 00 00 00 ac 13 00 00 8d ce fc ff cc 00 00 00 00 41 0e 10 83 02 4b 0e 40 02 ba 0e 10 41 0e 08  .................A....K.@....A..
0003ce20  10 00 00 00 cc 13 00 00 39 cf fc ff 1b 00 00 00 00 00 00 00 10 00 00 00 e0 13 00 00 40 cf fc ff  ........9...................@...
0003ce40  58 00 00 00 00 00 00 00 10 00 00 00 f4 13 00 00 84 cf fc ff 2e 00 00 00 00 00 00 00 18 00 00 00  X...............................
0003ce60  08 14 00 00 9e cf fc ff 2e 01 00 00 00 47 0e a0 02 03 22 01 0e 08 00 00 10 00 00 00 24 14 00 00  .............G....".........$...
0003ce80  b0 d0 fc ff 2d 00 00 00 00 00 00 00 10 00 00 00 38 14 00 00 c9 d0 fc ff 1f 00 00 00 00 00 00 00  ....-...........8...............
0003cea0  10 00 00 00 4c 14 00 00 d4 d0 fc ff 1f 00 00 00 00 00 00 00 28 00 00 00 60 14 00 00 df d0 fc ff  ....L...............(...`.......
0003cec0  b8 00 00 00 00 41 0e 10 86 02 4c 0e 18 83 03 4a 0e a0 02 02 9a 0e 18 41 0e 10 41 0e 08 00 00 00  .....A....L....J.......A..A.....
0003cee0  10 00 00 00 8c 14 00 00 6b d1 fc ff 08 00 00 00 00 00 00 00 38 00 00 00 a0 14 00 00 5f d1 fc ff  ........k...........8......._...
0003cf00  9d 00 00 00 00 42 0e 10 8d 02 4a 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 4c 0e c0 01 02 78 0e  .....B....J....A. ..A.(..L....x.
0003cf20  28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 48 00 00 00 dc 14 00 00 c0 d1 fc ff e2 01 00 00  (A. A..B..B.....H...............
0003cf40  00 42 0e 10 8f 02 4c 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 47  .B....L....B. ..B.(..A.0..D.8..G
0003cf60  0e 80 0a 03 b5 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 38 00 00 00  .......8A.0A.(B. B..B..B....8...
0003cf80  28 15 00 00 56 d3 fc ff 32 01 00 00 00 42 0e 10 8e 02 51 0e 18 8d 03 42 0e 20 8c 04 48 0e 28 86  (...V...2....B....Q....B. ..H.(.
0003cfa0  05 46 0e 30 83 06 03 03 01 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 18 00 00 00 64 15 00 00  .F.0......(A. B..B..B.......d...
0003cfc0  4c d4 fc ff 6b 00 00 00 00 47 0e a0 04 02 5f 0e 08 00 00 00 38 00 00 00 80 15 00 00 9b d4 fc ff  L...k....G...._.....8...........
0003cfe0  ba 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 44 0e 28 83 05 47 0e e0 03 02 9f 0e  .....B....B....A. ..D.(..G......
0003d000  28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 2c 00 00 00 bc 15 00 00 19 d5 fc ff 82 00 00 00  (A. A..B..B.....,...............
0003d020  00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04 44 0e 70 02 71 0e 20 41 0e 18 41 0e 10 42 0e 08  .B....A....A. ..D.p.q. A..A..B..
0003d040  38 00 00 00 ec 15 00 00 6b d5 fc ff d7 00 00 00 00 42 0e 10 8e 02 4c 0e 18 8d 03 42 0e 20 8c 04  8.......k........B....L....B. ..
0003d060  47 0e 28 86 05 46 0e 30 83 06 02 ae 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 30 00 00 00  G.(..F.0.....(A. B..B..B....0...
0003d080  28 16 00 00 06 d6 fc ff ad 00 00 00 00 42 0e 10 8c 02 4f 0e 18 86 03 41 0e 20 83 04 4a 0e b0 04  (............B....O....A. ..J...
0003d0a0  02 88 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 00 48 00 00 00 5c 16 00 00 7f d6 fc ff 3b 03 00 00  ... A..A..B.....H...\.......;...
0003d0c0  00 42 0e 10 8f 02 4c 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 4c  .B....L....B. ..B.(..A.0..A.8..L
0003d0e0  0e a0 0c 03 0c 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 30 00 00 00  .......8A.0A.(B. B..B..B....0...
0003d100  a8 16 00 00 6e d9 fc ff b9 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04 47 0e f0 04  ....n........B....D....A. ..G...
0003d120  02 a2 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 00 48 00 00 00 dc 16 00 00 f3 d9 fc ff e5 01 00 00  ... A..A..B.....H...............
0003d140  00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 4a  .B....B....E. ..E.(..D.0..A.8..J
0003d160  0e f0 0b 03 b9 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 48 00 00 00  .......8A.0A.(B. B..B..B....H...
0003d180  28 17 00 00 8c db fc ff 78 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  (.......x....B....B....B. ..B.(.
0003d1a0  05 41 0e 30 86 06 41 0e 38 83 07 47 0e b0 10 03 58 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18  .A.0..A.8..G....X..8A.0A.(B. B..
0003d1c0  42 0e 10 42 0e 08 00 00 3c 00 00 00 74 17 00 00 b8 de fc ff e6 00 00 00 00 42 0e 10 8e 02 42 0e  B..B....<...t............B....B.
0003d1e0  18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 44 0e 40 02 cd 0e 30 41 0e 28 41 0e 20 42  ...B. ..A.(..A.0..D.@...0A.(A. B
0003d200  0e 18 42 0e 10 42 0e 08 24 00 00 00 b4 17 00 00 5e df fc ff a9 00 00 00 00 41 0e 10 86 02 41 0e  ..B..B..$.......^........A....A.
0003d220  18 83 03 41 0e 20 02 9f 0e 18 41 0e 10 41 0e 08 14 00 00 00 dc 17 00 00 df df fc ff 2b 00 00 00  ...A. ....A..A..............+...
0003d240  00 49 0e 20 58 0e 08 00 1c 00 00 00 f4 17 00 00 f2 df fc ff 53 00 00 00 00 41 0e 10 83 02 44 0e  .I. X...............S....A....D.
0003d260  20 7f 0e 10 4a 0e 08 00 24 00 00 00 14 18 00 00 25 e0 fc ff 68 00 00 00 00 41 0e 10 86 02 41 0e   ...J...$.......%...h....A....A.
0003d280  18 83 03 41 0e 20 02 52 0e 18 48 0e 10 46 0e 08 24 00 00 00 3c 18 00 00 65 e0 fc ff 9e 00 00 00  ...A. .R..H..F..$...<...e.......
0003d2a0  00 41 0e 10 86 02 41 0e 18 83 03 44 0e 70 02 91 0e 18 41 0e 10 41 0e 08 24 00 00 00 64 18 00 00  .A....A....D.p....A..A..$...d...
0003d2c0  db e0 fc ff 81 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 44 0e 30 02 72 0e 18 41 0e 10 42 0e 08  .........B....A....D.0.r..A..B..
0003d2e0  4c 00 00 00 8c 18 00 00 34 e1 fc ff f4 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L.......4........B....B....B. ..
0003d300  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e e0 02 03 d1 01 0e 38 44 0e 30 41 0e 28 42 0e  B.(..A.0..A.8..G.......8D.0A.(B.
0003d320  20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 14 00 00 00 dc 18 00 00 d8 e2 fc ff 2c 00 00 00   B..B..B....................,...
0003d340  00 41 0e 10 66 0e 08 00 10 00 00 00 f4 18 00 00 ec e2 fc ff 1c 00 00 00 00 4e 0e 10 24 00 00 00  .A..f....................N..$...
0003d360  08 19 00 00 f4 e2 fc ff 29 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 44 0e 20 5c 0e 18 41 0e 10  ........)....A....A....D. \..A..
0003d380  41 0e 08 00 14 00 00 00 30 19 00 00 f5 e2 fc ff 24 00 00 00 00 41 0e 10 5e 0e 08 00 10 00 00 00  A.......0.......$....A..^.......
0003d3a0  48 19 00 00 01 e3 fc ff 05 00 00 00 00 00 00 00 14 00 00 00 5c 19 00 00 f2 e2 fc ff 05 00 00 00  H...................\...........
0003d3c0  00 00 00 00 00 00 00 00 34 00 00 00 74 19 00 00 df e2 fc ff 1b 01 00 00 00 42 0e 10 8d 02 47 0e  ........4...t............B....G.
0003d3e0  18 8c 03 49 0e 20 86 04 44 0e 28 83 05 48 0e 30 02 f0 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08  ...I. ..D.(..H.0...(C. A..B..B..
0003d400  10 00 00 00 ac 19 00 00 c2 e3 fc ff 49 00 00 00 00 00 00 00 50 00 00 00 c0 19 00 00 f7 e3 fc ff  ............I.......P...........
0003d420  dd 01 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 41 0e 30 83 06 46 0e  .....B....E....B. ..D.(..A.0..F.
0003d440  40 02 db 0e 48 4d 0e 50 56 0e 48 42 0e 40 02 ba 0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e  @...HM.PV.HB.@...0C.(A. B..B..B.
0003d460  08 00 00 00 00 00 00 00 44 00 00 00 14 1a 00 00 80 e5 fc ff 1b 01 00 00 00 42 0e 10 8f 02 45 0e  ........D................B....E.
0003d480  18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 48 0e 38 83 07 44 0e 60 02 ee 0e 38 41 0e  ...E. ..B.(..D.0..H.8..D.`...8A.
0003d4a0  30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4c 00 00 00 5c 1a 00 00 53 e6 fc ff 89 01 00 00  0A.(B. B..B..B..L...\...S.......
0003d4c0  00 42 0e 10 8f 02 47 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 43 0e 38 83 07 44  .B....G....B. ..B.(..A.0..C.8..D
0003d4e0  0e 90 01 03 62 01 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00  ....b..8D.0A.(B. B..B..B........
0003d500  14 00 00 00 ac 1a 00 00 8c e7 fc ff 43 00 00 00 00 44 0e 20 7a 0e 08 00 24 00 00 00 c4 1a 00 00  ............C....D. z...$.......
0003d520  b7 e7 fc ff 7e 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 48 0e 20 02 6d 0e 18 41 0e 10 41 0e 08  ....~....A....A....H. .m..A..A..
0003d540  20 00 00 00 ec 1a 00 00 0d e8 fc ff 25 01 00 00 00 41 0e 10 83 02 03 19 01 0a 0e 08 45 0b 41 0e   ...........%....A..........E.A.
0003d560  08 00 00 00 18 00 00 00 10 1b 00 00 0e e9 fc ff 1c 00 00 00 00 41 0e 10 83 02 56 0e 08 00 00 00  .....................A....V.....
0003d580  30 00 00 00 2c 1b 00 00 0e e9 fc ff 3d 05 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  0...,.......=....B....B....B. ..
0003d5a0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 90 06 00 1c 00 00 00 60 1b 00 00 17 ee fc ff  B.(..A.0..A.8..G........`.......
0003d5c0  24 02 00 00 00 4e 0e 10 83 02 03 05 02 0e 08 4c c3 00 00 00 18 00 00 00 80 1b 00 00 1b f0 fc ff  $....N.........L................
0003d5e0  2b 00 00 00 00 41 0e 10 83 02 65 0e 08 00 00 00 10 00 00 00 9c 1b 00 00 2a f0 fc ff 05 00 00 00  +....A....e.............*.......
0003d600  00 00 00 00 10 00 00 00 b0 1b 00 00 1b f0 fc ff 18 00 00 00 00 00 00 00 18 00 00 00 c4 1b 00 00  ................................
0003d620  1f f0 fc ff 15 01 00 00 00 41 0e 10 83 02 03 0f 01 0e 08 00 18 00 00 00 e0 1b 00 00 18 f1 fc ff  .........A......................
0003d640  65 00 00 00 00 58 0e 10 83 02 02 43 0e 08 45 c3 18 00 00 00 fc 1b 00 00 61 f1 fc ff cf 01 00 00  e....X.....C..E.........a.......
0003d660  00 45 0e 10 83 02 03 94 01 0e 08 00 10 00 00 00 18 1c 00 00 14 f3 fc ff 11 00 00 00 00 4c 0e 10  .E...........................L..
0003d680  40 00 00 00 2c 1c 00 00 11 f3 fc ff f5 00 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04  @...,............B....B....B. ..
0003d6a0  41 0e 28 86 05 41 0e 30 83 06 47 0e 80 04 02 d9 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e  A.(..A.0..G......0A.(A. B..B..B.
0003d6c0  08 00 00 00 28 00 00 00 70 1c 00 00 c2 f3 fc ff ed 00 00 00 00 41 0e 10 86 02 48 0e 18 83 03 4a  ....(...p............A....H....J
0003d6e0  0e e0 06 02 d3 0e 18 41 0e 10 41 0e 08 00 00 00 58 00 00 00 9c 1c 00 00 83 f4 fc ff 29 03 00 00  .......A..A.....X...........)...
0003d700  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44  .B....B....B. ..B.(..A.0..A.8..D
0003d720  0e 80 01 02 9d 0e 88 01 48 0e 90 01 47 0e 88 01 42 0e 80 01 03 5e 02 0e 38 41 0e 30 41 0e 28 42  ........H...G...B....^..8A.0A.(B
0003d740  0e 20 42 0e 18 42 0e 10 42 0e 08 00 60 00 00 00 f8 1c 00 00 50 f7 fc ff 8d 02 00 00 00 42 0e 10  . B..B..B...`.......P........B..
0003d760  8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 60 03 dd  ..B....B. ..B.(..A.0..A.8..D.`..
0003d780  01 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 02 84 0e 38 41 0e 30 41  ...8A.0A.(B. B..B..B..E....8A.0A
0003d7a0  0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 18 00 00 00 5c 1d 00 00 79 f9 fc ff 29 00 00 00  .(B. B..B..B........\...y...)...
0003d7c0  00 41 0e 10 83 02 5d 0e 08 00 00 00 58 00 00 00 78 1d 00 00 86 f9 fc ff fc 04 00 00 00 42 0e 10  .A....].....X...x............B..
0003d7e0  8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 80 01 03  ..B....B. ..B.(..A.0..A.8..D....
0003d800  bc 03 0e 88 01 42 0e 90 01 55 0e 88 01 41 0e 80 01 03 0b 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42  .....B...U...A.......8A.0A.(B. B
0003d820  0e 18 42 0e 10 42 0e 08 28 00 00 00 d4 1d 00 00 26 fe fc ff 69 00 00 00 00 4a 0e 10 86 02 41 0e  ..B..B..(.......&...i....J....A.
0003d840  18 83 03 41 0e 20 02 51 0e 18 41 0e 10 41 0e 08 45 c3 c6 00 10 00 00 00 00 1e 00 00 63 fe fc ff  ...A. .Q..A..A..E...........c...
0003d860  11 00 00 00 00 4c 0e 10 10 00 00 00 14 1e 00 00 60 fe fc ff 07 00 00 00 00 00 00 00 14 00 00 00  .....L..........`...............
0003d880  28 1e 00 00 53 fe fc ff 23 00 00 00 00 49 0e 10 4e 0e 08 00 18 00 00 00 40 1e 00 00 5e fe fc ff  (...S...#....I..N.......@...^...
0003d8a0  1a 00 00 00 00 44 0e 18 42 0e 20 4f 0e 08 00 00 44 00 00 00 5c 1e 00 00 5c fe fc ff ac 00 00 00  .....D..B. O....D...\...\.......
0003d8c0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 46 0e 30 86 06 43 0e 38 83 07 44  .B....B....B. ..B.(..F.0..C.8..D
0003d8e0  0e 40 02 83 0e 38 46 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 10 00 00 00 a4 1e 00 00  .@...8F.0A.(B. B..B..B..........
0003d900  c0 fe fc ff 07 00 00 00 00 00 00 00 48 00 00 00 b8 1e 00 00 b3 fe fc ff fc 00 00 00 00 42 0e 10  ............H................B..
0003d920  8f 02 48 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e f0 03 02  ..H....B. ..B.(..D.0..A.8..G....
0003d940  d1 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 10 00 00 00 04 1f 00 00  ..8C.0A.(B. B..B..B.............
0003d960  63 ff fc ff 23 00 00 00 00 00 00 00 48 00 00 00 18 1f 00 00 72 ff fc ff cb 01 00 00 00 42 0e 10  c...#.......H.......r........B..
0003d980  8f 02 42 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e a0 07 03  ..B....E. ..B.(..A.0..A.8..G....
0003d9a0  a5 01 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 24 00 00 00 64 1f 00 00  ...8D.0A.(B. B..B..B....$...d...
0003d9c0  f1 00 fd ff 76 00 00 00 00 41 0e 10 86 02 49 0e 18 83 03 44 0e 30 02 61 0e 18 41 0e 10 41 0e 08  ....v....A....I....D.0.a..A..A..
0003d9e0  4c 00 00 00 8c 1f 00 00 3f 01 fd ff 6a 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L.......?...j....B....B....B. ..
0003da00  42 0e 28 8c 05 41 0e 30 86 06 43 0e 38 83 07 47 0e f0 10 03 46 01 0e 38 43 0e 30 41 0e 28 42 0e  B.(..A.0..C.8..G....F..8C.0A.(B.
0003da20  20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 10 00 00 00 dc 1f 00 00 59 02 fd ff 08 00 00 00   B..B..B................Y.......
0003da40  00 00 00 00 10 00 00 00 f0 1f 00 00 4d 02 fd ff 0c 00 00 00 00 00 00 00 14 00 00 00 04 20 00 00  ............M................ ..
0003da60  45 02 fd ff 2a 00 00 00 00 41 0e 10 64 0e 08 00 2c 00 00 00 1c 20 00 00 57 02 fd ff ac 02 00 00  E...*....A..d...,.... ..W.......
0003da80  00 47 0e 10 83 02 03 a2 01 0e 18 41 0e 20 47 0e 18 42 0e 10 02 e7 0a 0e 08 4c 0b 41 0e 08 00 00  .G.........A. G..B.......L.A....
0003daa0  48 00 00 00 4c 20 00 00 d3 04 fd ff e5 03 00 00 00 42 0e 10 8f 02 47 0e 18 8e 03 42 0e 20 8d 04  H...L ...........B....G....B. ..
0003dac0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 46 0e 60 03 c1 03 0e 38 41 0e 30 41 0e 28 42 0e 20  B.(..A.0..A.8..F.`....8A.0A.(B. 
0003dae0  42 0e 18 42 0e 10 42 0e 08 00 00 00 48 00 00 00 98 20 00 00 6c 08 fd ff 76 01 00 00 00 42 0e 10  B..B..B.....H.... ..l...v....B..
0003db00  8f 02 42 0e 18 8e 03 48 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 47 0e 80 03 03  ..B....H. ..B.(..A.0..D.8..G....
0003db20  4d 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 48 00 00 00 e4 20 00 00  M..8A.0A.(B. B..B..B....H.... ..
0003db40  96 09 fd ff 96 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  .........B....B....B. ..B.(..A.0
0003db60  86 06 41 0e 38 83 07 47 0e e0 03 03 76 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G....v..8A.0A.(B. B..B..B
0003db80  0e 08 00 00 34 00 00 00 30 21 00 00 e0 0c fd ff c9 01 00 00 00 42 0e 10 8c 02 54 0e 18 86 03 48  ....4...0!...........B....T....H
0003dba0  0e 20 83 04 03 9a 01 0a 0e 18 41 0e 10 42 0e 08 45 0b 41 0e 18 41 0e 10 42 0e 08 00 14 00 00 00  . ........A..B..E.A..A..B.......
0003dbc0  68 21 00 00 71 0e fd ff 65 00 00 00 00 41 0e 10 02 5f 0e 08 14 00 00 00 80 21 00 00 be 0e fd ff  h!..q...e....A..._.......!......
0003dbe0  26 00 00 00 00 41 0e 10 60 0e 08 00 10 00 00 00 98 21 00 00 cc 0e fd ff 40 00 00 00 00 00 00 00  &....A..`........!......@.......
0003dc00  10 00 00 00 ac 21 00 00 f8 0e fd ff 2c 00 00 00 00 00 00 00 10 00 00 00 c0 21 00 00 10 0f fd ff  .....!......,............!......
0003dc20  29 00 00 00 00 00 00 00 28 00 00 00 d4 21 00 00 25 0f fd ff c6 01 00 00 00 41 0e 10 86 02 41 0e  ).......(....!..%........A....A.
0003dc40  18 83 03 41 0e 20 03 bc 01 0e 18 41 0e 10 41 0e 08 00 00 00 38 00 00 00 00 22 00 00 bf 10 fd ff  ...A. .....A..A.....8...."......
0003dc60  1e 01 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 47 0e 90 02 03 06 01  .....B....B....A. ..A.(..G......
0003dc80  0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 10 00 00 00 3c 22 00 00 a1 11 fd ff 11 00 00 00  .(A. A..B..B........<"..........
0003dca0  00 4c 0e 10 10 00 00 00 50 22 00 00 9e 11 fd ff 11 00 00 00 00 4c 0e 10 18 00 00 00 64 22 00 00  .L......P"...........L......d"..
0003dcc0  9b 11 fd ff 93 00 00 00 00 41 0e 10 83 02 02 8d 0e 08 00 00 18 00 00 00 80 22 00 00 12 12 fd ff  .........A..............."......
0003dce0  58 00 00 00 00 41 0e 10 83 02 02 52 0e 08 00 00 28 00 00 00 9c 22 00 00 4e 12 fd ff 60 00 00 00  X....A.....R....(...."..N...`...
0003dd00  00 42 0e 10 8c 02 49 0e 18 86 03 43 0e 20 83 04 02 4a 0e 18 41 0e 10 42 0e 08 00 00 34 00 00 00  .B....I....C. ...J..A..B....4...
0003dd20  c8 22 00 00 82 12 fd ff 9b 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 43 0e 20 83 04 02 82 0a 0e  ."...........B....A....C. ......
0003dd40  18 43 0e 10 42 0e 08 45 0b 41 0e 18 41 0e 10 42 0e 08 00 00 38 00 00 00 00 23 00 00 e5 12 fd ff  .C..B..E.A..A..B....8....#......
0003dd60  bb 01 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 40 03 a6 01 0e  .....B....B....A. ..A.(..D.@....
0003dd80  28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 18 00 00 00 3c 23 00 00 64 14 fd ff 77 00 00 00  (A. A..B..B.........<#..d...w...
0003dda0  00 41 0e 10 83 02 02 71 0e 08 00 00 40 00 00 00 58 23 00 00 bf 14 fd ff 2c 02 00 00 00 42 0e 10  .A.....q....@...X#......,....B..
0003ddc0  8e 02 45 0e 18 8d 03 45 0e 20 8c 04 44 0e 28 86 05 41 0e 30 83 06 4a 0e 90 01 03 02 02 0e 30 43  ..E....E. ..D.(..A.0..J.......0C
0003dde0  0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 18 00 00 00 9c 23 00 00 a7 16 fd ff 48 00 00 00  .(A. B..B..B.........#......H...
0003de00  00 41 0e 10 83 02 02 42 0e 08 00 00 40 00 00 00 b8 23 00 00 d3 16 fd ff 5e 01 00 00 00 41 0e 10  .A.....B....@....#......^....A..
0003de20  86 02 46 0e 18 83 03 44 0e 20 02 8c 0a 0e 18 44 0e 10 41 0e 08 45 0b 02 ab 0a 0e 18 44 0e 10 41  ..F....D. .....D..A..E......D..A
0003de40  0e 08 45 0b 41 0e 18 41 0e 10 41 0e 08 00 00 00 48 00 00 00 fc 23 00 00 ed 17 fd ff 42 01 00 00  ..E.A..A..A.....H....#......B...
0003de60  00 42 0e 10 8f 02 45 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 44  .B....E....E. ..E.(..D.0..A.8..D
0003de80  0e 50 03 16 01 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 28 00 00 00  .P....8D.0A.(B. B..B..B.....(...
0003dea0  48 24 00 00 e3 18 fd ff 71 00 00 00 00 42 0e 10 8c 02 4b 0e 18 86 03 48 0e 20 83 04 02 54 0e 18  H$......q....B....K....H. ...T..
0003dec0  41 0e 10 42 0e 08 00 00 18 00 00 00 74 24 00 00 28 19 fd ff 39 00 00 00 00 41 0e 10 83 02 6d 0e  A..B........t$..(...9....A....m.
0003dee0  08 00 00 00 18 00 00 00 90 24 00 00 45 19 fd ff 3a 00 00 00 00 41 0e 10 83 02 6d 0e 08 00 00 00  .........$..E...:....A....m.....
0003df00  10 00 00 00 ac 24 00 00 63 19 fd ff 07 00 00 00 00 00 00 00 48 00 00 00 c0 24 00 00 56 19 fd ff  .....$..c...........H....$..V...
0003df20  4c 01 00 00 00 42 0e 10 8f 02 48 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 41 0e 30 86 06 44 0e  L....B....H....E. ..E.(..A.0..D.
0003df40  38 83 07 41 0e 40 03 20 01 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00  8..A.@. ..8D.0A.(B. B..B..B.....
0003df60  1c 00 00 00 0c 25 00 00 56 1a fd ff 43 00 00 00 00 41 0e 10 83 02 64 0a 0e 08 45 0b 54 0e 08 00  .....%..V...C....A....d...E.T...
0003df80  38 00 00 00 2c 25 00 00 79 1a fd ff 10 01 00 00 00 42 0e 10 8e 02 44 0e 18 8d 03 49 0e 20 8c 04  8...,%..y........B....D....I. ..
0003dfa0  44 0e 28 86 05 44 0e 30 83 06 02 ea 0e 28 44 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 14 00 00 00  D.(..D.0.....(D. B..B..B........
0003dfc0  68 25 00 00 4d 1b fd ff 1d 00 00 00 00 41 0e 10 57 0e 08 00 14 00 00 00 80 25 00 00 52 1b fd ff  h%..M........A..W........%..R...
0003dfe0  24 00 00 00 00 41 0e 10 5e 0e 08 00 38 00 00 00 98 25 00 00 5e 1b fd ff 67 01 00 00 00 42 0e 10  $....A..^...8....%..^...g....B..
0003e000  8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 40 03 52 01 0e 28 41 0e 20 41 0e 18 42  ..B....A. ..A.(..D.@.R..(A. A..B
0003e020  0e 10 42 0e 08 00 00 00 14 00 00 00 d4 25 00 00 89 1c fd ff 16 00 00 00 00 41 0e 10 50 0e 08 00  ..B..........%...........A..P...
0003e040  18 00 00 00 ec 25 00 00 87 1c fd ff 33 00 00 00 00 41 0e 10 83 02 6d 0e 08 00 00 00 48 00 00 00  .....%......3....A....m.....H...
0003e060  08 26 00 00 9e 1c fd ff 41 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  .&......A....B....B....B. ..B.(.
0003e080  05 41 0e 30 86 06 41 0e 38 83 07 44 0e 50 03 24 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42  .A.0..A.8..D.P.$..8A.0A.(B. B..B
0003e0a0  0e 10 42 0e 08 00 00 00 18 00 00 00 54 26 00 00 93 1d fd ff 35 00 00 00 00 47 0e 10 83 02 64 c3  ..B.........T&......5....G....d.
0003e0c0  0e 08 00 00 24 00 00 00 70 26 00 00 ac 1d fd ff 47 00 00 00 00 41 0e 10 83 02 59 0a 0e 08 45 0b  ....$...p&......G....A....Y...E.
0003e0e0  60 0a 0e 08 42 0b 41 0e 08 00 00 00 18 00 00 00 98 26 00 00 cb 1d fd ff 35 00 00 00 00 47 0e 10  `...B.A..........&......5....G..
0003e100  83 02 64 c3 0e 08 00 00 28 00 00 00 b4 26 00 00 e4 1d fd ff b9 00 00 00 00 42 0e 10 8c 02 48 0e  ..d.....(....&...........B....H.
0003e120  18 86 03 45 0e 20 83 04 02 a2 0e 18 41 0e 10 42 0e 08 00 00 1c 00 00 00 e0 26 00 00 71 1e fd ff  ...E. ......A..B.........&..q...
0003e140  77 00 00 00 00 41 0e 10 83 02 02 6b 0a 0e 08 45 0b 41 0e 08 14 00 00 00 00 27 00 00 c8 1e fd ff  w....A.....k...E.A.......'......
0003e160  28 00 00 00 00 41 0e 10 62 0e 08 00 14 00 00 00 18 27 00 00 d8 1e fd ff 18 00 00 00 00 41 0e 10  (....A..b........'...........A..
0003e180  52 0e 08 00 14 00 00 00 30 27 00 00 d8 1e fd ff 18 00 00 00 00 41 0e 10 52 0e 08 00 10 00 00 00  R.......0'...........A..R.......
0003e1a0  48 27 00 00 d8 1e fd ff 41 00 00 00 00 00 00 00 24 00 00 00 5c 27 00 00 05 1f fd ff 45 00 00 00  H'......A.......$...\'......E...
0003e1c0  00 41 0e 10 86 02 44 0e 18 83 03 49 0e 20 6e 0e 18 43 0e 10 41 0e 08 00 14 00 00 00 84 27 00 00  .A....D....I. n..C..A........'..
0003e1e0  22 1f fd ff 11 00 00 00 00 4c 0e 10 00 00 00 00 10 00 00 00 9c 27 00 00 1b 1f fd ff 05 00 00 00  "........L...........'..........
0003e200  00 00 00 00 1c 00 00 00 b0 27 00 00 0c 1f fd ff 59 00 00 00 00 41 0e 10 83 02 46 0e 30 02 4c 0e  .........'......Y....A....F.0.L.
0003e220  10 41 0e 08 34 00 00 00 d0 27 00 00 45 1f fd ff 7e 00 00 00 00 42 0e 10 8d 02 4b 0e 18 8c 03 47  .A..4....'..E...~....B....K....G
0003e240  0e 20 86 04 44 0e 28 83 05 44 0e 30 02 54 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08 34 00 00 00  . ..D.(..D.0.T.(D. A..B..B..4...
0003e260  08 28 00 00 8b 1f fd ff 9b 00 00 00 00 42 0e 10 8d 02 44 0e 18 8c 03 44 0e 20 86 04 49 0e 28 83  .(...........B....D....D. ..I.(.
0003e280  05 45 0e 30 02 73 0e 28 46 0e 20 41 0e 18 42 0e 10 42 0e 08 34 00 00 00 40 28 00 00 ee 1f fd ff  .E.0.s.(F. A..B..B..4...@(......
0003e2a0  4b 00 00 00 00 42 0e 10 8d 02 45 0e 18 8c 03 44 0e 20 86 04 48 0e 28 83 05 44 0e 40 66 0e 28 44  K....B....E....D. ..H.(..D.@f.(D
0003e2c0  0e 20 41 0e 18 42 0e 10 42 0e 08 00 28 00 00 00 78 28 00 00 01 20 fd ff 4f 00 00 00 00 47 0e 10  . A..B..B...(...x(... ..O....G..
0003e2e0  8c 02 44 0e 18 86 03 50 0e 20 83 04 6c 0e 18 41 0e 10 42 0e 08 00 00 00 58 00 00 00 a4 28 00 00  ..D....P. ..l..A..B.....X....(..
0003e300  24 20 fd ff 57 02 00 00 00 42 0e 10 8f 02 4c 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 48 0e 30  $ ..W....B....L....B. ..B.(..H.0
0003e320  86 06 44 0e 38 83 07 4b 0e 80 0c 02 c7 0e 88 0c 4d 0e 90 0c 62 0e 88 0c 41 0e 80 0c 03 28 01 0e  ..D.8..K........M...b...A....(..
0003e340  38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 28 00 00 00 00 29 00 00 1f 22 fd ff  8A.0A.(B. B..B..B...(....)..."..
0003e360  65 00 00 00 00 47 0e 10 8c 02 44 0e 18 86 03 49 0e 20 83 04 02 49 0e 18 41 0e 10 42 0e 08 00 00  e....G....D....I. ...I..A..B....
0003e380  10 00 00 00 2c 29 00 00 58 22 fd ff 1f 00 00 00 00 00 00 00 28 00 00 00 40 29 00 00 63 22 fd ff  ....,)..X"..........(...@)..c"..
0003e3a0  c7 00 00 00 00 42 0e 10 8c 02 4d 0e 18 86 03 47 0e 20 83 04 02 a9 0e 18 41 0e 10 42 0e 08 00 00  .....B....M....G. ......A..B....
0003e3c0  24 00 00 00 6c 29 00 00 fe 22 fd ff f7 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 44 0e 30 02 ea  $...l)...".......A....A....D.0..
0003e3e0  0e 18 41 0e 10 41 0e 08 14 00 00 00 94 29 00 00 cd 23 fd ff 28 00 00 00 00 4d 0e 10 56 0e 08 00  ..A..A.......)...#..(....M..V...
0003e400  18 00 00 00 ac 29 00 00 dd 23 fd ff 3b 00 00 00 00 41 0e 10 83 02 75 0e 08 00 00 00 10 00 00 00  .....)...#..;....A....u.........
0003e420  c8 29 00 00 fc 23 fd ff 08 00 00 00 00 00 00 00 14 00 00 00 dc 29 00 00 f0 23 fd ff 08 00 00 00  .)...#...............)...#......
0003e440  00 00 00 00 00 00 00 00 18 00 00 00 f4 29 00 00 e0 23 fd ff 28 00 00 00 00 41 0e 10 83 02 62 0e  .............)...#..(....A....b.
0003e460  08 00 00 00 50 00 00 00 10 2a 00 00 ec 23 fd ff 71 01 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 42  ....P....*...#..q....B....E....B
0003e480  0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 47 0e f0 09 02 5a 0e f8 09 42 0e 80 0a 50 0e f8 09 41  . ..A.(..A.0..G....Z...B...P...A
0003e4a0  0e f0 09 02 e5 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 44 00 00 00 64 2a 00 00  ......0A.(A. B..B..B....D...d*..
0003e4c0  09 25 fd ff 0f 01 00 00 00 42 0e 10 8d 02 50 0e 18 8c 03 41 0e 20 86 04 49 0e 28 83 05 47 0e 70  .%.......B....P....A. ..I.(..G.p
0003e4e0  7b 0e 78 4f 0e 80 01 50 0e 78 41 0e 70 02 86 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00  {.xO...P.xA.p...(A. A..B..B.....
0003e500  14 00 00 00 ac 2a 00 00 d0 25 fd ff 27 00 00 00 00 41 0e 10 61 0e 08 00 34 00 00 00 c4 2a 00 00  .....*...%..'....A..a...4....*..
0003e520  df 25 fd ff 5e 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 43 0e 28 83 05 41 0e 30  .%..^....B....B....D. ..C.(..A.0
0003e540  02 47 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 44 00 00 00 fc 2a 00 00 05 26 fd ff 80 00 00 00  .G.(A. A..B..B..D....*...&......
0003e560  00 42 0e 10 8f 02 48 0e 18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 41 0e 30 86 06 43 0e 38 83 07 41  .B....H....B. ..E.(..A.0..C.8..A
0003e580  0e 40 02 5b 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 44 00 00 00 44 2b 00 00  .@.[.8A.0A.(B. B..B..B..D...D+..
0003e5a0  3d 26 fd ff 21 01 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 44 0e 30  =&..!....B....E....E. ..E.(..D.0
0003e5c0  86 06 43 0e 38 83 07 46 0e 50 02 f4 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08  ..C.8..F.P...8A.0A.(B. B..B..B..
0003e5e0  38 00 00 00 8c 2b 00 00 16 27 fd ff 58 00 00 00 00 49 0e 10 8e 02 45 0e 18 8d 03 45 0e 20 8c 04  8....+...'..X....I....E....E. ..
0003e600  44 0e 28 86 05 43 0e 30 83 06 72 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 24 00 00 00  D.(..C.0..r.(A. B..B..B.....$...
0003e620  c8 2b 00 00 32 27 fd ff 45 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 45 0e 20 77 0e 18 41 0e 10  .+..2'..E....A....A....E. w..A..
0003e640  41 0e 08 00 18 00 00 00 f0 2b 00 00 4f 27 fd ff 3a 00 00 00 00 41 0e 10 83 02 6d 0e 08 00 00 00  A........+..O'..:....A....m.....
0003e660  14 00 00 00 0c 2c 00 00 6d 27 fd ff 2d 00 00 00 00 41 0e 10 67 0e 08 00 2c 00 00 00 24 2c 00 00  .....,..m'..-....A..g...,...$,..
0003e680  82 27 fd ff 46 01 00 00 00 42 0e 10 8c 02 4b 0e 18 86 03 41 0e 20 83 04 03 29 01 0e 18 41 0e 10  .'..F....B....K....A. ...)...A..
0003e6a0  49 0e 08 00 00 00 00 00 34 00 00 00 54 2c 00 00 98 28 fd ff 7e 00 00 00 00 42 0e 10 8d 02 45 0e  I.......4...T,...(..~....B....E.
0003e6c0  18 8c 03 44 0e 20 86 04 49 0e 28 83 05 41 0e 30 02 5c 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08  ...D. ..I.(..A.0.\.(C. A..B..B..
0003e6e0  24 00 00 00 8c 2c 00 00 de 28 fd ff fc 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 41 0e 20 02 f2  $....,...(.......A....A....A. ..
0003e700  0e 18 41 0e 10 41 0e 08 10 00 00 00 b4 2c 00 00 b2 29 fd ff 21 00 00 00 00 00 00 00 1c 00 00 00  ..A..A.......,...)..!...........
0003e720  c8 2c 00 00 bf 29 fd ff 89 00 00 00 00 41 0e 10 83 02 44 0e 20 02 7e 0e 10 41 0e 08 38 00 00 00  .,...).......A....D. .~..A..8...
0003e740  e8 2c 00 00 28 2a fd ff c0 00 00 00 00 44 0e 10 8e 02 45 0e 18 8d 03 45 0e 20 8c 04 41 0e 28 86  .,..(*.......D....E....E. ..A.(.
0003e760  05 44 0e 30 83 06 02 9f 0e 28 43 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 18 00 00 00 24 2d 00 00  .D.0.....(C. B..B..B........$-..
0003e780  ac 2a fd ff 3a 00 00 00 00 41 0e 10 83 02 74 0e 08 00 00 00 18 00 00 00 40 2d 00 00 ca 2a fd ff  .*..:....A....t.........@-...*..
0003e7a0  26 00 00 00 00 41 0e 10 83 02 60 0e 08 00 00 00 10 00 00 00 5c 2d 00 00 d4 2a fd ff 08 00 00 00  &....A....`.........\-...*......
0003e7c0  00 00 00 00 10 00 00 00 70 2d 00 00 c8 2a fd ff 0a 00 00 00 00 00 00 00 14 00 00 00 84 2d 00 00  ........p-...*...............-..
0003e7e0  be 2a fd ff a7 00 00 00 00 41 0e 10 02 a1 0e 08 10 00 00 00 9c 2d 00 00 4d 2b fd ff 3d 00 00 00  .*.......A...........-..M+..=...
0003e800  00 00 00 00 24 00 00 00 b0 2d 00 00 76 2b fd ff 41 00 00 00 00 41 0e 10 86 02 43 0e 18 83 03 44  ....$....-..v+..A....A....C....D
0003e820  0e 20 72 0e 18 41 0e 10 41 0e 08 00 24 00 00 00 d8 2d 00 00 8f 2b fd ff 5a 00 00 00 00 41 0e 10  . r..A..A...$....-...+..Z....A..
0003e840  86 02 44 0e 18 83 03 43 0e 20 02 4b 0e 18 41 0e 10 41 0e 08 18 00 00 00 00 2e 00 00 c1 2b fd ff  ..D....C. .K..A..A...........+..
0003e860  36 00 00 00 00 48 0e 10 58 0e 08 00 00 00 00 00 24 00 00 00 1c 2e 00 00 db 2b fd ff 49 00 00 00  6....H..X.......$........+..I...
0003e880  00 41 0e 10 86 02 44 0e 18 83 03 49 0e 20 74 0e 18 41 0e 10 41 0e 08 00 14 00 00 00 44 2e 00 00  .A....D....I. t..A..A.......D...
0003e8a0  fc 2b fd ff 1a 00 00 00 00 41 0e 10 54 0e 08 00 1c 00 00 00 5c 2e 00 00 fe 2b fd ff 46 00 00 00  .+.......A..T.......\....+..F...
0003e8c0  00 49 0e 10 83 02 78 0e 08 00 00 00 00 00 00 00 10 00 00 00 7c 2e 00 00 24 2c fd ff 12 00 00 00  .I....x.............|...$,......
0003e8e0  00 00 00 00 24 00 00 00 90 2e 00 00 22 2c fd ff 63 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 44  ....$.......",..c....A....D....D
0003e900  0e 20 02 50 0e 18 44 0e 10 41 0e 08 10 00 00 00 b8 2e 00 00 5d 2c fd ff 16 00 00 00 00 00 00 00  . .P..D..A..........],..........
0003e920  58 00 00 00 cc 2e 00 00 5f 2c fd ff 56 01 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 42 0e 20 8d 04  X......._,..V....B....E....B. ..
0003e940  45 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 44 0e 90 01 02 ca 0e 98 01 50 0e a0 01 4b 0e 98 01  E.(..D.0..D.8..D........P...K...
0003e960  41 0e 90 01 02 44 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 38 00 00 00  A....D.8D.0A.(B. B..B..B....8...
0003e980  28 2f 00 00 59 2d fd ff d3 00 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 45 0e 20 8c 04 44 0e 28 86  (/..Y-.......B....E....E. ..D.(.
0003e9a0  05 49 0e 30 83 06 02 ae 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 14 00 00 00 64 2f 00 00  .I.0.....(A. B..B..B........d/..
0003e9c0  f0 2d fd ff 2f 00 00 00 00 52 0e 10 58 0e 08 00 34 00 00 00 7c 2f 00 00 07 2e fd ff 09 01 00 00  .-../....R..X...4...|/..........
0003e9e0  00 42 0e 10 8d 02 48 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 40 02 ee 0e 28 41 0e 20 41  .B....H....A. ..A.(..D.@...(A. A
0003ea00  0e 18 42 0e 10 42 0e 08 10 00 00 00 b4 2f 00 00 d8 2e fd ff 09 00 00 00 00 00 00 00 44 00 00 00  ..B..B......./..............D...
0003ea20  c8 2f 00 00 cd 2e fd ff 91 00 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c  ./...........B....B....E. ..B.(.
0003ea40  05 41 0e 30 86 06 44 0e 38 83 07 41 0e 40 02 71 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e  .A.0..D.8..A.@.q.8A.0A.(B. B..B.
0003ea60  10 42 0e 08 34 00 00 00 10 30 00 00 16 2f fd ff 53 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 41  .B..4....0.../..S....B....D....A
0003ea80  0e 20 83 04 66 0a 0e 18 41 0e 10 42 0e 08 45 0b 56 0e 18 41 0e 10 42 0e 08 00 00 00 14 00 00 00  . ..f...A..B..E.V..A..B.........
0003eaa0  48 30 00 00 31 2f fd ff 54 00 00 00 00 44 0e 20 02 4b 0e 08 14 00 00 00 60 30 00 00 6d 2f fd ff  H0..1/..T....D. .K......`0..m/..
0003eac0  54 00 00 00 00 44 0e 20 02 4b 0e 08 2c 00 00 00 78 30 00 00 a9 2f fd ff b3 00 00 00 00 42 0e 10  T....D. .K..,...x0.../.......B..
0003eae0  8c 02 41 0e 18 86 03 41 0e 20 83 04 46 0e 30 02 a0 0e 20 41 0e 18 41 0e 10 42 0e 08 64 00 00 00  ..A....A. ..F.0... A..A..B..d...
0003eb00  a8 30 00 00 2c 30 fd ff 28 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  .0..,0..(....B....B....B. ..B.(.
0003eb20  05 41 0e 30 86 06 41 0e 38 83 07 44 0e 90 01 03 39 01 0a 0e 98 01 53 0e a0 01 42 0b 02 6c 0e 98  .A.0..A.8..D....9.....S...B..l..
0003eb40  01 51 0e a0 01 50 0e 98 01 41 0e 90 01 03 2f 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e  .Q...P...A..../..8A.0A.(B. B..B.
0003eb60  10 42 0e 08 38 00 00 00 10 31 00 00 ec 32 fd ff c3 00 00 00 00 41 0e 10 86 02 49 0e 18 83 03 47  .B..8....1...2.......A....I....G
0003eb80  0e d0 01 02 67 0e d8 01 46 0e e0 01 5e 0e d8 01 41 0e d0 01 5f 0e 18 41 0e 10 41 0e 08 00 00 00  ....g...F...^...A..._..A..A.....
0003eba0  48 00 00 00 4c 31 00 00 73 33 fd ff 42 03 00 00 00 42 0e 10 8f 02 4a 0e 18 8e 03 42 0e 20 8d 04  H...L1..s3..B....B....J....B. ..
0003ebc0  42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e c0 01 03 17 03 0e 38 41 0e 30 41 0e 28 42 0e  B.(..D.0..A.8..G.......8A.0A.(B.
0003ebe0  20 42 0e 18 42 0e 10 42 0e 08 00 00 48 00 00 00 98 31 00 00 69 36 fd ff cd 00 00 00 00 42 0e 10   B..B..B....H....1..i6.......B..
0003ec00  8d 02 42 0e 18 8c 03 41 0e 20 86 04 49 0e 28 83 05 47 0e e0 08 77 0e e8 08 47 0e f0 08 52 0e e8  ..B....A. ..I.(..G...w...G...R..
0003ec20  08 41 0e e0 08 02 5c 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 4c 00 00 00 e4 31 00 00  .A....\.(A. A..B..B.....L....1..
0003ec40  ea 36 fd ff f4 00 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30  .6.......B....B....B. ..B.(..D.0
0003ec60  86 06 44 0e 38 83 07 4a 0e e0 01 02 cb 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e  ..D.8..J......8A.0A.(B. B..B..B.
0003ec80  08 00 00 00 00 00 00 00 48 00 00 00 34 32 00 00 8e 37 fd ff ca 01 00 00 00 42 0e 10 8f 02 42 0e  ........H...42...7.......B....B.
0003eca0  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 4a 0e 80 02 03 a4 01 0e 38  ...B. ..B.(..A.0..A.8..J.......8
0003ecc0  44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 28 00 00 00 80 32 00 00 0c 39 fd ff  D.0A.(B. B..B..B....(....2...9..
0003ece0  5b 00 00 00 00 4b 0e 10 86 02 4c 0e 18 83 03 47 0e 20 71 0e 18 41 0e 10 41 0e 08 45 c3 c6 00 00  [....K....L....G. q..A..A..E....
0003ed00  2c 00 00 00 ac 32 00 00 3b 39 fd ff 91 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04  ,....2..;9.......B....A....A. ..
0003ed20  44 0e 40 02 80 0e 20 41 0e 18 41 0e 10 42 0e 08 1c 00 00 00 dc 32 00 00 9c 39 fd ff 78 00 00 00  D.@... A..A..B.......2...9..x...
0003ed40  00 41 0e 10 83 02 44 0e 40 02 6a 0e 10 44 0e 08 14 00 00 00 fc 32 00 00 f4 39 fd ff 21 00 00 00  .A....D.@.j..D.......2...9..!...
0003ed60  00 44 0e 20 58 0e 08 00 1c 00 00 00 14 33 00 00 fd 39 fd ff 7c 00 00 00 00 41 0e 10 83 02 47 0e  .D. X........3...9..|....A....G.
0003ed80  40 02 6e 0e 10 41 0e 08 34 00 00 00 34 33 00 00 59 3a fd ff fb 00 00 00 00 42 0e 10 8d 02 42 0e  @.n..A..4...43..Y:.......B....B.
0003eda0  18 8c 03 41 0e 20 86 04 44 0e 28 83 05 47 0e 60 02 e0 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08  ...A. ..D.(..G.`...(A. A..B..B..
0003edc0  10 00 00 00 6c 33 00 00 1c 3b fd ff 1a 00 00 00 00 00 00 00 40 00 00 00 80 33 00 00 22 3b fd ff  ....l3...;..........@....3..";..
0003ede0  13 01 00 00 00 42 0e 10 8e 02 47 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 44 0e  .....B....G....B. ..A.(..A.0..D.
0003ee00  80 01 02 f2 0e 30 44 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 14 00 00 00 c4 33 00 00  .....0D.(A. B..B..B..........3..
0003ee20  f1 3b fd ff 24 00 00 00 00 44 0e 20 5b 0e 08 00 44 00 00 00 dc 33 00 00 fd 3b fd ff 5f 01 00 00  .;..$....D. [...D....3...;.._...
0003ee40  00 42 0e 10 8e 02 4c 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30 83 06 47 0e 70 03 36 01  .B....L....B. ..A.(..D.0..G.p.6.
0003ee60  0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 18 00 00 00 24 34 00 00  .0A.(A. B..B..B.............$4..
0003ee80  14 3d fd ff 4f 00 00 00 00 41 0e 10 83 02 02 49 0e 08 00 00 14 00 00 00 40 34 00 00 47 3d fd ff  .=..O....A.....I........@4..G=..
0003eea0  1c 00 00 00 00 44 0e 20 53 0e 08 00 38 00 00 00 58 34 00 00 4b 3d fd ff ca 00 00 00 00 42 0e 10  .....D. S...8...X4..K=.......B..
0003eec0  8d 02 42 0e 18 8c 03 44 0e 20 86 04 47 0e 28 83 05 41 0e 30 02 af 0e 28 41 0e 20 41 0e 18 42 0e  ..B....D. ..G.(..A.0...(A. A..B.
0003eee0  10 42 0e 08 00 00 00 00 34 00 00 00 94 34 00 00 d9 3d fd ff c3 00 00 00 00 42 0e 10 8d 02 47 0e  .B......4....4...=.......B....G.
0003ef00  18 8c 03 41 0e 20 86 04 41 0e 28 83 05 41 0e 30 02 a9 0e 28 44 0e 20 41 0e 18 42 0e 10 42 0e 08  ...A. ..A.(..A.0...(D. A..B..B..
0003ef20  18 00 00 00 cc 34 00 00 64 3e fd ff 32 00 00 00 00 41 0e 10 83 02 6c 0e 08 00 00 00 48 00 00 00  .....4..d>..2....A....l.....H...
0003ef40  e8 34 00 00 7a 3e fd ff f8 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  .4..z>.......B....B....B. ..B.(.
0003ef60  05 41 0e 30 86 06 44 0e 38 83 07 4a 0e c0 02 03 d2 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18  .A.0..D.8..J.......8A.0A.(B. B..
0003ef80  42 0e 10 42 0e 08 00 00 10 00 00 00 34 35 00 00 26 41 fd ff 17 00 00 00 00 00 00 00 10 00 00 00  B..B........45..&A..............
0003efa0  48 35 00 00 29 41 fd ff 1d 00 00 00 00 00 00 00 10 00 00 00 5c 35 00 00 32 41 fd ff 39 00 00 00  H5..)A..............\5..2A..9...
0003efc0  00 00 00 00 10 00 00 00 70 35 00 00 57 41 fd ff 53 00 00 00 00 00 00 00 18 00 00 00 84 35 00 00  ........p5..WA..S............5..
0003efe0  96 41 fd ff d5 00 00 00 00 47 0e e0 2f 02 c9 0e 08 00 00 00 10 00 00 00 a0 35 00 00 4f 42 fd ff  .A.......G../............5..OB..
0003f000  4a 00 00 00 00 00 00 00 10 00 00 00 b4 35 00 00 85 42 fd ff 4d 00 00 00 00 00 00 00 24 00 00 00  J............5...B..M.......$...
0003f020  c8 35 00 00 be 42 fd ff 34 01 00 00 00 41 0e 10 86 02 43 0d 06 4b 8e 03 8d 04 8c 05 83 06 03 20  .5...B..4....A....C..K......... 
0003f040  01 0c 07 08 14 00 00 00 f0 35 00 00 ca 43 fd ff 62 00 00 00 00 44 0e 20 02 59 0e 08 48 00 00 00  .........5...C..b....D. .Y..H...
0003f060  08 36 00 00 14 44 fd ff fa 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  .6...D.......B....B....B. ..B.(.
0003f080  05 41 0e 30 86 06 41 0e 38 83 07 47 0e d0 30 03 da 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18  .A.0..A.8..G..0....8A.0A.(B. B..
0003f0a0  42 0e 10 42 0e 08 00 00 24 00 00 00 54 36 00 00 c2 46 fd ff a3 00 00 00 00 41 0e 10 86 02 43 0d  B..B....$...T6...F.......A....C.
0003f0c0  06 44 8d 03 8c 04 51 83 05 02 85 0c 07 08 00 00 38 00 00 00 7c 36 00 00 3d 47 fd ff 8d 00 00 00  .D....Q.........8...|6..=G......
0003f0e0  00 42 0e 10 8d 02 42 0e 18 8c 03 49 0e 20 86 04 44 0e 28 83 05 47 0e f0 08 02 6a 0e 28 41 0e 20  .B....B....I. ..D.(..G....j.(A. 
0003f100  41 0e 18 42 0e 10 42 0e 08 00 00 00 28 00 00 00 b8 36 00 00 8e 47 fd ff 46 02 00 00 00 41 0e 10  A..B..B.....(....6...G..F....A..
0003f120  86 02 43 0d 06 49 8f 03 8e 04 8d 05 8c 06 83 07 03 34 02 0c 07 08 00 00 38 00 00 00 e4 36 00 00  ..C..I...........4......8....6..
0003f140  a8 49 fd ff 28 01 00 00 00 42 0e 10 8d 02 48 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83 05 47 0e 80  .I..(....B....H....D. ..A.(..G..
0003f160  30 03 07 01 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 38 00 00 00 20 37 00 00 94 4a fd ff  0....(A. A..B..B....8... 7...J..
0003f180  a3 00 00 00 00 42 0e 10 8d 02 45 0e 18 8c 03 47 0e 20 86 04 41 0e 28 83 05 4a 0e 80 01 02 7f 0e  .....B....E....G. ..A.(..J......
0003f1a0  28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 48 00 00 00 5c 37 00 00 fb 4a fd ff 8c 05 00 00  (A. A..B..B.....H...\7...J......
0003f1c0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....B....B. ..B.(..A.0..A.8..G
0003f1e0  0e a0 60 03 6c 05 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 24 00 00 00  ..`.l..8A.0A.(B. B..B..B....$...
0003f200  a8 37 00 00 3b 50 fd ff 5a 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 44 0e 20 02 48 0e 18 43 0e  .7..;P..Z....A....D....D. .H..C.
0003f220  10 41 0e 08 40 00 00 00 d0 37 00 00 6d 50 fd ff b1 00 00 00 00 42 0e 10 8e 02 47 0e 18 8d 03 42  .A..@....7..mP.......B....G....B
0003f240  0e 20 8c 04 49 0e 28 86 05 41 0e 30 83 06 4a 0e a0 08 02 83 0e 30 43 0e 28 41 0e 20 42 0e 18 42  . ..I.(..A.0..J......0C.(A. B..B
0003f260  0e 10 42 0e 08 00 00 00 4c 00 00 00 14 38 00 00 da 50 fd ff e3 02 00 00 00 42 0e 10 8f 02 42 0e  ..B.....L....8...P.......B....B.
0003f280  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e a0 5c 03 be 02 0e 38  ...B. ..B.(..D.0..A.8..G..\....8
0003f2a0  43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 10 00 00 00 64 38 00 00  C.0A.(B. B..B..B............d8..
0003f2c0  6d 53 fd ff 0f 00 00 00 00 00 00 00 10 00 00 00 78 38 00 00 68 53 fd ff 88 00 00 00 00 00 00 00  mS..............x8..hS..........
0003f2e0  10 00 00 00 8c 38 00 00 dc 53 fd ff 19 00 00 00 00 00 00 00 10 00 00 00 a0 38 00 00 e1 53 fd ff  .....8...S...............8...S..
0003f300  2d 00 00 00 00 00 00 00 10 00 00 00 b4 38 00 00 fa 53 fd ff 2d 00 00 00 00 00 00 00 10 00 00 00  -............8...S..-...........
0003f320  c8 38 00 00 13 54 fd ff 1d 00 00 00 00 00 00 00 14 00 00 00 dc 38 00 00 1c 54 fd ff 43 00 00 00  .8...T...............8...T..C...
0003f340  00 41 0e 10 7d 0e 08 00 10 00 00 00 f4 38 00 00 47 54 fd ff 2a 00 00 00 00 00 00 00 10 00 00 00  .A..}........8..GT..*...........
0003f360  08 39 00 00 5d 54 fd ff 4a 00 00 00 00 00 00 00 20 00 00 00 1c 39 00 00 93 54 fd ff 5e 00 00 00  .9..]T..J....... ....9...T..^...
0003f380  00 41 0e 10 86 02 46 0e 18 83 03 02 51 0e 10 41 0e 08 00 00 18 00 00 00 40 39 00 00 cd 54 fd ff  .A....F.....Q..A........@9...T..
0003f3a0  f2 01 00 00 00 44 0e 40 03 e9 01 0e 08 00 00 00 48 00 00 00 5c 39 00 00 a3 56 fd ff d9 01 00 00  .....D.@........H...\9...V......
0003f3c0  00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....B....E. ..B.(..A.0..A.8..G
0003f3e0  0e c0 01 03 b3 01 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 1c 00 00 00  .......8D.0A.(B. B..B..B........
0003f400  a8 39 00 00 30 58 fd ff 8f 00 00 00 00 44 0e 60 6b 0e 80 01 6f 0e 60 6c 0e 08 00 00 20 00 00 00  .9..0X.......D.`k...o.`l.... ...
0003f420  c8 39 00 00 9f 58 fd ff ed 00 00 00 00 47 0e a0 01 02 93 0e c0 01 6c 0e a0 01 62 0e 08 00 00 00  .9...X.......G........l...b.....
0003f440  10 00 00 00 ec 39 00 00 68 59 fd ff 0f 00 00 00 00 00 00 00 10 00 00 00 00 3a 00 00 63 59 fd ff  .....9..hY...............:..cY..
0003f460  30 00 00 00 00 00 00 00 18 00 00 00 14 3a 00 00 7f 59 fd ff 88 00 00 00 00 47 0e c0 03 02 7c 0e  0............:...Y.......G....|.
0003f480  08 00 00 00 18 00 00 00 30 3a 00 00 eb 59 fd ff 31 00 00 00 00 44 0e 20 5a 0a 0e 08 45 0b 00 00  ........0:...Y..1....D. Z...E...
0003f4a0  48 00 00 00 4c 3a 00 00 00 5a fd ff 38 04 00 00 00 42 0e 10 8f 02 4f 0e 18 8e 03 42 0e 20 8d 04  H...L:...Z..8....B....O....B. ..
0003f4c0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 4e 0e 90 02 03 04 04 0e 38 41 0e 30 41 0e 28 42 0e  B.(..A.0..A.8..N.......8A.0A.(B.
0003f4e0  20 42 0e 18 42 0e 10 42 0e 08 00 00 48 00 00 00 98 3a 00 00 ec 5d fd ff 5b 01 00 00 00 42 0e 10   B..B..B....H....:...]..[....B..
0003f500  8f 02 45 0e 18 8e 03 49 0e 20 8d 04 49 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e c0 01 03  ..E....I. ..I.(..A.0..A.8..G....
0003f520  2a 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 40 00 00 00 e4 3a 00 00  *..8A.0A.(B. B..B..B....@....:..
0003f540  fb 5e fd ff 44 01 00 00 00 42 0e 10 8e 02 4c 0e 18 8d 03 49 0e 20 8c 04 41 0e 28 86 05 41 0e 30  .^..D....B....L....I. ..A.(..A.0
0003f560  83 06 44 0e a0 01 03 1a 01 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 30 00 00 00  ..D.......0A.(A. B..B..B....0...
0003f580  28 3b 00 00 fb 5f fd ff 38 01 00 00 00 42 0e 10 8c 02 4b 0e 18 86 03 48 0e 20 83 04 44 0e 90 01  (;..._..8....B....K....H. ..D...
0003f5a0  03 16 01 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 14 00 00 00 5c 3b 00 00 ff 60 fd ff 63 00 00 00  .... A..A..B........\;...`..c...
0003f5c0  00 44 0e 60 02 5a 0e 08 14 00 00 00 74 3b 00 00 4a 61 fd ff 63 00 00 00 00 44 0e 40 02 5a 0e 08  .D.`.Z......t;..Ja..c....D.@.Z..
0003f5e0  14 00 00 00 8c 3b 00 00 95 61 fd ff 63 00 00 00 00 44 0e 40 02 5a 0e 08 10 00 00 00 a4 3b 00 00  .....;...a..c....D.@.Z.......;..
0003f600  e0 61 fd ff 22 00 00 00 00 00 00 00 14 00 00 00 b8 3b 00 00 ee 61 fd ff 82 00 00 00 00 44 0e 40  .a.."............;...a.......D.@
0003f620  02 79 0e 08 10 00 00 00 d0 3b 00 00 58 62 fd ff 45 00 00 00 00 00 00 00 10 00 00 00 e4 3b 00 00  .y.......;..Xb..E............;..
0003f640  89 62 fd ff ba 00 00 00 00 00 00 00 10 00 00 00 f8 3b 00 00 2f 63 fd ff 64 00 00 00 00 00 00 00  .b...............;../c..d.......
0003f660  38 00 00 00 0c 3c 00 00 7f 63 fd ff 62 01 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04  8....<...c..b....B....E....B. ..
0003f680  41 0e 28 86 05 41 0e 30 83 06 03 1e 01 0e 28 48 0e 20 42 0e 18 49 0e 10 42 0e 08 00 10 00 00 00  A.(..A.0......(H. B..I..B.......
0003f6a0  48 3c 00 00 a5 64 fd ff 2d 00 00 00 00 00 00 00 50 00 00 00 5c 3c 00 00 be 64 fd ff 25 04 00 00  H<...d..-.......P...\<...d..%...
0003f6c0  00 42 0e 10 8f 02 4a 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....J....B. ..B.(..A.0..A.8..G
0003f6e0  0e d0 15 02 83 0e f0 15 02 65 0e d0 15 03 15 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e  .........e.......8A.0A.(B. B..B.
0003f700  10 42 0e 08 10 00 00 00 b0 3c 00 00 8f 68 fd ff 2f 00 00 00 00 00 00 00 38 00 00 00 c4 3c 00 00  .B.......<...h../.......8....<..
0003f720  aa 68 fd ff 97 00 00 00 00 42 0e 10 8e 02 4b 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30  .h.......B....K....B. ..A.(..A.0
0003f740  83 06 02 6b 0e 28 45 0e 20 45 0e 18 42 0e 10 4a 0e 08 00 00 10 00 00 00 00 3d 00 00 05 69 fd ff  ...k.(E. E..B..J.........=...i..
0003f760  98 00 00 00 00 00 00 00 14 00 00 00 14 3d 00 00 89 69 fd ff 40 00 00 00 00 44 0e 40 77 0e 08 00  .............=...i..@....D.@w...
0003f780  50 00 00 00 2c 3d 00 00 b1 69 fd ff 1a 02 00 00 00 42 0e 10 8f 02 4f 0e 18 8e 03 42 0e 20 8d 04  P...,=...i.......B....O....B. ..
0003f7a0  45 0e 28 8c 05 44 0e 30 86 06 46 0e 38 83 07 4a 0e b0 02 02 79 0e d0 02 03 1c 01 0e b0 02 02 4a  E.(..D.0..F.8..J....y..........J
0003f7c0  0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 34 00 00 00 80 3d 00 00 77 6b fd ff  .8A.0A.(B. B..B..B..4....=..wk..
0003f7e0  92 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83 05 46 0e 50 02 78 0e 28  .....B....B....D. ..A.(..F.P.x.(
0003f800  41 0e 20 41 0e 18 42 0e 10 42 0e 08 48 00 00 00 b8 3d 00 00 d1 6b fd ff b7 02 00 00 00 42 0e 10  A. A..B..B..H....=...k.......B..
0003f820  8f 02 45 0e 18 8e 03 48 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 47 0e d0 07 03  ..E....H. ..B.(..A.0..D.8..G....
0003f840  8b 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 28 00 00 00 04 3e 00 00  ...8A.0A.(B. B..B..B....(....>..
0003f860  3c 6e fd ff 7e 00 00 00 00 41 0e 10 86 02 49 0e 18 83 03 47 0e 90 01 02 66 0e 18 41 0e 10 41 0e  <n..~....A....I....G....f..A..A.
0003f880  08 00 00 00 34 00 00 00 30 3e 00 00 8e 6e fd ff 90 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41  ....4...0>...n.......B....B....A
0003f8a0  0e 20 86 04 44 0e 28 83 05 46 0e 50 02 76 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 28 00 00 00  . ..D.(..F.P.v.(A. A..B..B..(...
0003f8c0  68 3e 00 00 e6 6e fd ff aa 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 4a 0e d0 01 02 94 0e 18 44  h>...n.......A....A....J.......D
0003f8e0  0e 10 41 0e 08 00 00 00 20 00 00 00 94 3e 00 00 64 6f fd ff c0 00 00 00 00 41 0e 10 83 02 54 0e  ..A..... ....>..do.......A....T.
0003f900  a0 04 02 a2 0e 10 44 0e 08 00 00 00 10 00 00 00 b8 3e 00 00 00 70 fd ff 4b 00 00 00 00 00 00 00  ......D..........>...p..K.......
0003f920  1c 00 00 00 cc 3e 00 00 37 70 fd ff 7e 00 00 00 00 44 0e 60 6a 0e 80 01 68 0e 60 63 0e 08 00 00  .....>..7p..~....D.`j...h.`c....
0003f940  5c 00 00 00 ec 3e 00 00 95 70 fd ff 7f 02 00 00 00 42 0e 10 8f 02 4f 0e 18 8e 03 42 0e 20 8d 04  \....>...p.......B....O....B. ..
0003f960  45 0e 28 8c 05 47 0e 30 86 06 44 0e 38 83 07 49 0e e0 02 02 7e 0e 80 03 02 63 0e e0 02 49 0e 80  E.(..G.0..D.8..I....~....c...I..
0003f980  03 03 10 01 0e e0 02 02 4a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00  ........J.8A.0A.(B. B..B..B.....
0003f9a0  48 00 00 00 4c 3f 00 00 b4 72 fd ff 0b 04 00 00 00 42 0e 10 8f 02 49 0e 18 8e 03 45 0e 20 8d 04  H...L?...r.......B....I....E. ..
0003f9c0  42 0e 28 8c 05 41 0e 30 86 06 46 0e 38 83 07 47 0e d0 01 03 d9 03 0e 38 44 0e 30 41 0e 28 42 0e  B.(..A.0..F.8..G.......8D.0A.(B.
0003f9e0  20 42 0e 18 42 0e 10 42 0e 08 00 00 10 00 00 00 98 3f 00 00 73 76 fd ff 30 00 00 00 00 00 00 00   B..B..B.........?..sv..0.......
0003fa00  18 00 00 00 ac 3f 00 00 8f 76 fd ff 88 00 00 00 00 47 0e c0 03 02 7c 0e 08 00 00 00 28 00 00 00  .....?...v.......G....|.....(...
0003fa20  c8 3f 00 00 fb 76 fd ff 5b 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 47 0e f0 01 02 4b 0e 18 41  .?...v..[....A....A....G....K..A
0003fa40  0e 10 41 0e 08 00 00 00 48 00 00 00 f4 3f 00 00 2a 77 fd ff b9 02 00 00 00 42 0e 10 8f 02 45 0e  ..A.....H....?..*w.......B....E.
0003fa60  18 8e 03 48 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 47 0e d0 07 03 8d 02 0e 38  ...H. ..B.(..A.0..D.8..G.......8
0003fa80  41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 1c 00 00 00 40 40 00 00 97 79 fd ff  A.0A.(B. B..B..B........@@...y..
0003faa0  80 00 00 00 00 41 0e 10 83 02 47 0e 60 02 72 0e 10 41 0e 08 48 00 00 00 60 40 00 00 f7 79 fd ff  .....A....G.`.r..A..H...`@...y..
0003fac0  b9 02 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 48 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e  .....B....E....H. ..B.(..A.0..D.
0003fae0  38 83 07 47 0e d0 07 03 8d 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00  8..G.......8A.0A.(B. B..B..B....
0003fb00  14 00 00 00 ac 40 00 00 64 7c fd ff 56 00 00 00 00 44 0e 40 02 4d 0e 08 40 00 00 00 c4 40 00 00  .....@..d|..V....D.@.M..@....@..
0003fb20  a2 7c fd ff a3 00 00 00 00 42 0e 10 8e 02 47 0e 18 8d 03 45 0e 20 8c 04 41 0e 28 86 05 44 0e 30  .|.......B....G....E. ..A.(..D.0
0003fb40  83 06 47 0e c0 03 02 7c 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 50 00 00 00  ..G....|.0A.(A. B..B..B.....P...
0003fb60  08 41 00 00 01 7d fd ff 03 03 00 00 00 42 0e 10 8f 02 45 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c  .A...}.......B....E....E. ..B.(.
0003fb80  05 41 0e 30 86 06 41 0e 38 83 07 47 0e c0 1d 03 55 01 0e e0 1d 02 9f 0e c0 1d 02 e6 0e 38 44 0e  .A.0..A.8..G....U............8D.
0003fba0  30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 10 00 00 00 5c 41 00 00 b0 7f fd ff 30 00 00 00  0A.(B. B..B..B......\A......0...
0003fbc0  00 00 00 00 48 00 00 00 70 41 00 00 cc 7f fd ff 4b 07 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42  ....H...pA......K....B....B....B
0003fbe0  0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e c0 76 03 2b 07 0e 38 41 0e 30 41  . ..B.(..A.0..A.8..G..v.+..8A.0A
0003fc00  0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 90 00 00 00 bc 41 00 00 cb 86 fd ff 4f 0e 00 00  .(B. B..B..B.........A......O...
0003fc20  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 4a  .B....B....B. ..B.(..A.0..A.8..J
0003fc40  0e a0 a3 01 03 ac 04 0e c0 a3 01 02 c2 0e a0 a3 01 03 2d 01 0e c0 a3 01 02 5d 0e a0 a3 01 02 ed  ..................-......]......
0003fc60  0e c0 a3 01 02 4e 0e a0 a3 01 4c 0e c0 a3 01 02 8e 0e a0 a3 01 02 d8 0e c0 a3 01 02 6e 0e a0 a3  .....N....L.................n...
0003fc80  01 03 f4 02 0e c0 a3 01 02 69 0e a0 a3 01 02 bc 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e  .........i.......8A.0A.(B. B..B.
0003fca0  10 42 0e 08 54 00 00 00 50 42 00 00 86 94 fd ff 64 06 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42  .B..T...PB......d....B....B....B
0003fcc0  0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 90 e2 01 03 11 02 0e b0 e2 01 02  . ..B.(..A.0..A.8..G............
0003fce0  cf 0e 90 e2 01 03 64 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 38 00 00 00  ......d..8A.0A.(B. B..B..B..8...
0003fd00  a8 42 00 00 92 9a fd ff f2 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83  .B...........B....B....D. ..A.(.
0003fd20  05 47 0e 80 3a 02 d5 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 40 00 00 00 e4 42 00 00  .G..:...(C. A..B..B.....@....B..
0003fd40  48 9b fd ff ce 02 00 00 00 42 0e 10 8e 02 4a 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30  H........B....J....B. ..A.(..D.0
0003fd60  83 06 47 0e c0 48 03 a5 02 0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 60 00 00 00  ..G..H....0C.(A. B..B..B....`...
0003fd80  28 43 00 00 d2 9d fd ff 0f 09 00 00 00 42 0e 10 8f 02 4a 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  (C...........B....J....B. ..B.(.
0003fda0  05 41 0e 30 86 06 41 0e 38 83 07 49 0e d0 79 03 83 04 0e f0 79 02 a9 0e d0 79 02 7c 0e f0 79 02  .A.0..A.8..I..y.....y....y.|..y.
0003fdc0  63 0e d0 79 03 d8 02 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00  c..y....8C.0A.(B. B..B..B.......
0003fde0  44 00 00 00 8c 43 00 00 7d a6 fd ff 1f 04 00 00 00 42 0e 10 8e 02 47 0e 18 8d 03 42 0e 20 8c 04  D....C..}........B....G....B. ..
0003fe00  41 0e 28 86 05 41 0e 30 83 06 44 0e 60 03 01 04 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e  A.(..A.0..D.`....0A.(A. B..B..B.
0003fe20  08 00 00 00 00 00 00 00 10 00 00 00 d4 43 00 00 54 aa fd ff 2b 00 00 00 00 00 00 00 18 00 00 00  .............C..T...+...........
0003fe40  e8 43 00 00 6b aa fd ff 42 00 00 00 00 41 0e 10 83 02 7c 0e 08 00 00 00 30 00 00 00 04 44 00 00  .C..k...B....A....|.....0....D..
0003fe60  91 aa fd ff c4 01 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04 44 0e 40 03 b0 01 0e 20  .........B....D....A. ..D.@.... 
0003fe80  41 0e 18 41 0e 10 42 0e 08 00 00 00 14 00 00 00 38 44 00 00 21 ac fd ff 49 00 00 00 00 41 0e 10  A..A..B.........8D..!...I....A..
0003fea0  02 43 0e 08 48 00 00 00 50 44 00 00 52 ac fd ff e5 04 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42  .C..H...PD..R........B....B....B
0003fec0  0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 70 03 c8 04 0e 38 41 0e 30 41 0e  . ..B.(..A.0..A.8..D.p....8A.0A.
0003fee0  28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 28 00 00 00 9c 44 00 00 eb b0 fd ff 79 00 00 00  (B. B..B..B.....(....D......y...
0003ff00  00 42 0e 10 8c 02 49 0e 18 86 03 44 0e 20 83 04 02 62 0e 18 41 0e 10 42 0e 08 00 00 1c 00 00 00  .B....I....D. ...b..A..B........
0003ff20  c8 44 00 00 38 b1 fd ff 7d 00 00 00 00 41 0e 10 83 02 02 65 0a 0e 08 51 0b 41 0e 08 48 00 00 00  .D..8...}....A.....e...Q.A..H...
0003ff40  e8 44 00 00 95 b1 fd ff 6d 01 00 00 00 42 0e 10 8d 02 4a 0e 18 8c 03 48 0e 20 86 04 49 0e 28 83  .D......m....B....J....H. ..I.(.
0003ff60  05 42 0e 30 03 26 01 0a 0e 28 46 0e 20 44 0e 18 49 0e 10 44 0e 08 45 0b 41 0e 28 41 0e 20 41 0e  .B.0.&...(F. D..I..D..E.A.(A. A.
0003ff80  18 42 0e 10 42 0e 08 00 14 00 00 00 34 45 00 00 b6 b2 fd ff 53 00 00 00 00 44 0e 20 02 4a 0e 08  .B..B.......4E......S....D. .J..
0003ffa0  44 00 00 00 4c 45 00 00 f1 b2 fd ff a0 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04  D...LE...........B....B....B. ..
0003ffc0  41 0e 28 86 05 4b 0e 30 83 06 47 0e d0 01 03 7a 01 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42  A.(..K.0..G....z..0A.(A. B..B..B
0003ffe0  0e 08 00 00 00 00 00 00 3c 00 00 00 94 45 00 00 49 b4 fd ff ba 01 00 00 00 42 0e 10 8d 02 42 0e  ........<....E..I........B....B.
00040000  18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 40 03 a5 01 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e  ...A. ..A.(..D.@....(A. A..B..B.
00040020  08 00 00 00 00 00 00 00 34 00 00 00 d4 45 00 00 c3 b5 fd ff 70 00 00 00 00 50 0e 10 8c 02 41 0e  ........4....E......p....P....A.
00040040  18 86 03 41 0e 20 83 04 6a 0e 28 4d 0e 30 5a 0e 28 44 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 00  ...A. ..j.(M.0Z.(D. A..A..B.....
00040060  4c 00 00 00 0c 46 00 00 fb b5 fd ff f3 07 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L....F...........B....B....B. ..
00040080  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e c0 02 03 d3 07 0e 38 41 0e 30 41 0e 28 42 0e  B.(..A.0..A.8..G.......8A.0A.(B.
000400a0  20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 34 00 00 00 5c 46 00 00 9e bd fd ff 66 00 00 00   B..B..B........4...\F......f...
000400c0  00 42 0e 10 8d 02 45 0e 18 8c 03 41 0e 20 86 04 47 0e 28 83 05 44 0e 40 02 48 0e 28 41 0e 20 41  .B....E....A. ..G.(..D.@.H.(A. A
000400e0  0e 18 42 0e 10 42 0e 08 10 00 00 00 94 46 00 00 cc bd fd ff 1f 00 00 00 00 00 00 00 10 00 00 00  ..B..B.......F..................
00040100  a8 46 00 00 d7 bd fd ff 1e 00 00 00 00 00 00 00 10 00 00 00 bc 46 00 00 e1 bd fd ff 1f 00 00 00  .F...................F..........
00040120  00 00 00 00 10 00 00 00 d0 46 00 00 ec bd fd ff 1f 00 00 00 00 00 00 00 38 00 00 00 e4 46 00 00  .........F..............8....F..
00040140  f7 bd fd ff 6f 00 00 00 00 5c 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 44 0e 28 83 05 41 0e 30  ....o....\....B....D. ..D.(..A.0
00040160  78 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 45 c3 c6 cc cd 18 00 00 00 20 47 00 00 2a be fd ff  x.(A. A..B..B..E........ G..*...
00040180  58 00 00 00 00 54 0e 10 83 02 7a 0e 08 45 c3 00 18 00 00 00 3c 47 00 00 66 be fd ff ac 00 00 00  X....T....z..E......<G..f.......
000401a0  00 48 0e 10 83 02 02 9f 0e 08 00 00 48 00 00 00 58 47 00 00 f6 be fd ff 20 04 00 00 00 42 0e 10  .H..........H...XG...... ....B..
000401c0  8f 02 49 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 60 03 f9  ..I....B. ..B.(..A.0..A.8..G.`..
000401e0  03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 14 00 00 00 a4 47 00 00  ..8A.0A.(B. B..B..B..........G..
00040200  ca c2 fd ff 54 00 00 00 00 41 0e 10 02 4e 0e 08 14 00 00 00 bc 47 00 00 06 c3 fd ff 39 00 00 00  ....T....A...N.......G......9...
00040220  00 41 0e 10 73 0e 08 00 34 00 00 00 d4 47 00 00 27 c3 fd ff 8d 01 00 00 00 42 0e 10 8d 02 49 0e  .A..s...4....G..'........B....I.
00040240  18 8c 03 48 0e 20 86 04 41 0e 28 83 05 44 0e 50 02 82 0e 58 46 0e 60 02 43 0e 58 41 0e 50 00 00  ...H. ..A.(..D.P...XF.`.C.XA.P..
00040260  60 00 00 00 0c 48 00 00 7c c4 fd ff 89 01 00 00 00 42 0e 10 8d 02 4d 0e 18 8c 03 46 0e 20 86 04  `....H..|........B....M....F. ..
00040280  41 0e 28 83 05 47 0e c0 04 02 72 0a 0e c8 04 49 0e d0 04 42 0b 52 0a 0e c8 04 48 0e d0 04 42 0b  A.(..G....r....I...B.R....H...B.
000402a0  4d 0e c8 04 4a 0e d0 04 52 0e d8 04 44 0e e0 04 4c 0e c0 04 44 0e c8 04 4c 0e d0 04 5a 0e c8 04  M...J...R...D...L...D...L...Z...
000402c0  41 0e c0 04 28 00 00 00 70 48 00 00 a1 c5 fd ff 1a 01 00 00 00 41 0e 10 86 02 4e 0e 18 83 03 49  A...(...pH...........A....N....I
000402e0  0e d0 08 02 fb 0e 18 41 0e 10 41 0e 08 00 00 00 24 00 00 00 9c 48 00 00 8f c6 fd ff 32 00 00 00  .......A..A.....$....H......2...
00040300  00 41 0e 10 86 02 48 0e 18 83 03 44 0e 20 5e 0e 18 41 0e 10 41 0e 08 00 1c 00 00 00 c4 48 00 00  .A....H....D. ^..A..A........H..
00040320  99 c6 fd ff c6 00 00 00 00 41 0e 10 83 02 44 0e 20 02 bb 0e 10 41 0e 08 10 00 00 00 e4 48 00 00  .........A....D. ....A.......H..
00040340  3f c7 fd ff 29 00 00 00 00 00 00 00 30 00 00 00 f8 48 00 00 54 c7 fd ff ee 00 00 00 00 41 0e 10  ?...).......0....H..T........A..
00040360  86 02 41 0e 18 83 03 42 0e 20 02 d8 0a 0e 18 44 0e 10 41 0e 08 45 0b 41 0e 18 41 0e 10 41 0e 08  ..A....B. .....D..A..E.A..A..A..
00040380  34 00 00 00 2c 49 00 00 0e c8 fd ff 6e 01 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04  4...,I......n....B....A....A. ..
000403a0  03 59 01 0a 0e 18 41 0e 10 42 0e 08 45 0b 41 0e 18 41 0e 10 42 0e 08 00 3c 00 00 00 64 49 00 00  .Y....A..B..E.A..A..B...<...dI..
000403c0  44 c9 fd ff 71 00 00 00 00 48 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 30  D...q....H....B....A. ..A.(..D.0
000403e0  02 4c 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08 45 c3 c6 cc cd 00 00 00 28 00 00 00 a4 49 00 00  .L.(C. A..B..B..E.......(....I..
00040400  75 c9 fd ff 5f 00 00 00 00 42 0e 10 8c 02 4c 0e 18 86 03 4b 0e 20 83 04 7e 0e 18 41 0e 10 42 0e  u..._....B....L....K. ..~..A..B.
00040420  08 00 00 00 30 00 00 00 d0 49 00 00 a8 c9 fd ff a5 00 00 00 00 42 0e 10 8c 02 48 0e 18 86 03 41  ....0....I...........B....H....A
00040440  0e 20 83 04 47 0e c0 01 02 8a 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 00 18 00 00 00 04 4a 00 00  . ..G...... A..A..B..........J..
00040460  19 ca fd ff 7c 00 00 00 00 41 0e 10 83 02 02 76 0e 08 00 00 1c 00 00 00 20 4a 00 00 79 ca fd ff  ....|....A.....v........ J..y...
00040480  cb 00 00 00 00 41 0e 10 83 02 44 0e 20 02 c0 0e 10 41 0e 08 20 00 00 00 40 4a 00 00 24 cb fd ff  .....A....D. ....A.. ...@J..$...
000404a0  ad 00 00 00 00 41 0e 10 83 02 47 0e b0 01 02 9f 0e 10 41 0e 08 00 00 00 38 00 00 00 64 4a 00 00  .....A....G.......A.....8...dJ..
000404c0  ad cb fd ff 88 00 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30  .........B....E....B. ..A.(..D.0
000404e0  83 06 02 6e 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 1c 00 00 00 a0 4a 00 00 f9 cb fd ff  ...n.(A. B..B..B.........J......
00040500  52 02 00 00 00 42 0e 10 8c 02 48 0e 18 86 03 47 0e 20 83 04 64 00 00 00 c0 4a 00 00 2b ce fd ff  R....B....H....G. ..d....J..+...
00040520  51 05 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 41 0e 30 83 06 47 0e  Q....B....B....B. ..D.(..A.0..G.
00040540  80 02 03 64 01 0e 88 02 4b 0e 90 02 44 0e 98 02 44 0e a0 02 53 0e 80 02 71 0e 88 02 44 0e 90 02  ...d....K...D...D...S...q...D...
00040560  79 0e 88 02 42 0e 80 02 03 35 03 0e 30 44 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 48 00 00 00  y...B....5..0D.(A. B..B..B..H...
00040580  28 4b 00 00 14 d3 fd ff 1e 04 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c  (K...........B....B....B. ..B.(.
000405a0  05 41 0e 30 86 06 41 0e 38 83 07 47 0e f0 01 03 fe 03 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18  .A.0..A.8..G.......8A.0A.(B. B..
000405c0  42 0e 10 42 0e 08 00 00 10 00 00 00 74 4b 00 00 e6 d6 fd ff 33 00 00 00 00 00 00 00 30 00 00 00  B..B........tK......3.......0...
000405e0  88 4b 00 00 05 d7 fd ff 65 00 00 00 00 44 0e 18 53 0e 20 55 0e 28 4c 0e 30 41 0e 38 48 0e 40 49  .K......e....D..S. U.(L.0A.8H.@I
00040600  0e 48 42 0e 50 41 0e 58 48 0e 60 4b 0e 08 00 00 14 00 00 00 bc 4b 00 00 36 d7 fd ff 2c 00 00 00  .HB.PA.XH.`K.........K..6...,...
00040620  00 4b 0e 10 51 0e 08 00 28 00 00 00 d4 4b 00 00 4a d7 fd ff 46 01 00 00 00 41 0e 10 86 02 41 0e  .K..Q...(....K..J...F....A....A.
00040640  18 83 03 44 0e 40 03 39 01 0e 18 41 0e 10 41 0e 08 00 00 00 38 00 00 00 00 4c 00 00 64 d8 fd ff  ...D.@.9...A..A.....8....L..d...
00040660  4a 08 00 00 00 42 0e 10 8d 02 4e 0e 18 8c 03 41 0e 20 86 04 43 0e 28 83 05 49 0e 90 02 03 22 08  J....B....N....A. ..C.(..I....".
00040680  0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 2c 00 00 00 3c 4c 00 00 72 e0 fd ff 47 01 00 00  .(A. A..B..B....,...<L..r...G...
000406a0  00 42 0e 10 8c 02 48 0e 18 86 03 41 0e 20 83 04 03 34 01 0e 18 41 0e 10 42 0e 08 00 00 00 00 00  .B....H....A. ...4...A..B.......
000406c0  24 00 00 00 6c 4c 00 00 89 e1 fd ff 38 00 00 00 00 41 0e 10 83 02 66 0a 0e 08 45 0b 41 0a 0e 08  $...lL......8....A....f...E.A...
000406e0  45 0b 41 0e 08 00 00 00 34 00 00 00 94 4c 00 00 99 e1 fd ff 7d 00 00 00 00 49 0e 10 8c 02 41 0e  E.A.....4....L......}....I....A.
00040700  18 86 03 41 0e 20 83 04 78 0e 28 4c 0e 30 5c 0e 28 44 0e 20 41 c3 0e 18 41 c6 0e 10 42 cc 0e 08  ...A. ..x.(L.0\.(D. A...A...B...
00040720  44 00 00 00 cc 4c 00 00 de e1 fd ff 29 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04  D....L......)....B....B....B. ..
00040740  41 0e 28 86 05 41 0e 30 83 06 02 9d 0e 38 4d 0e 40 6d 0e 38 41 0e 30 7d 0e 28 41 0e 20 42 0e 18  A.(..A.0.....8M.@m.8A.0}.(A. B..
00040760  42 0e 10 42 0e 08 00 00 5c 00 00 00 14 4d 00 00 bf e2 fd ff 7a 02 00 00 00 42 0e 10 8f 02 42 0e  B..B....\....M......z....B....B.
00040780  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e c0 02 03 33 01 0e c8  ...B. ..B.(..A.0..A.8..G....3...
000407a0  02 4d 0e d0 02 02 46 0e c8 02 41 0e c0 02 02 d3 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e  .M....F...A......8A.0A.(B. B..B.
000407c0  10 42 0e 08 00 00 00 00 10 00 00 00 74 4d 00 00 d9 e4 fd ff 0f 00 00 00 00 00 00 00 20 00 00 00  .B..........tM.............. ...
000407e0  88 4d 00 00 d4 e4 fd ff f5 00 00 00 00 41 0e 10 83 02 47 0e b0 01 02 e7 0e 10 41 0e 08 00 00 00  .M...........A....G.......A.....
00040800  10 00 00 00 ac 4d 00 00 a5 e5 fd ff 97 00 00 00 00 44 0e 30 10 00 00 00 c0 4d 00 00 28 e6 fd ff  .....M...........D.0.....M..(...
00040820  21 00 00 00 00 41 0e 10 30 00 00 00 d4 4d 00 00 35 e6 fd ff a6 00 00 00 00 42 0e 10 8c 02 41 0e  !....A..0....M..5........B....A.
00040840  18 86 03 41 0e 20 83 04 47 0e c0 01 02 92 0e 20 41 0e 18 41 0e 10 42 0e 08 00 00 00 40 00 00 00  ...A. ..G...... A..A..B.....@...
00040860  08 4e 00 00 a7 e6 fd ff be 06 00 00 00 42 0e 10 8f 02 49 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c  .N...........B....I....E. ..B.(.
00040880  05 41 0e 30 86 06 41 0e 38 83 07 49 0e a0 07 02 73 0e a8 07 4b 0e b0 07 5a 0e a8 07 43 0e a0 07  .A.0..A.8..I....s...K...Z...C...
000408a0  1c 00 00 00 4c 4e 00 00 18 50 fc ff 82 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 43 0e 20 00 00  ....LN...P.......A....D....C. ..
000408c0  14 00 00 00 6c 4e 00 00 01 ed fd ff 35 00 00 00 00 55 0e 10 4e 0e 08 00 48 00 00 00 84 4e 00 00  ....lN......5....U..N...H....N..
000408e0  1e ed fd ff 57 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30  ....W....B....B....B. ..A.(..A.0
00040900  83 06 44 0e 60 02 ea 0e 68 4f 0e 70 4f 0e 68 41 0e 60 73 0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e  ..D.`...hO.pO.hA.`s.0C.(A. B..B.
00040920  10 42 0e 08 2c 00 00 00 d0 4e 00 00 29 ee fd ff a6 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41  .B..,....N..)........B....A....A
00040940  0e 20 83 04 44 0e 30 02 92 0e 20 44 0e 18 41 0e 10 42 0e 08 40 00 00 00 00 4f 00 00 9f ee fd ff  . ..D.0... D..A..B..@....O......
00040960  75 02 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 44 0e  u....B....B....B. ..A.(..A.0..D.
00040980  80 01 03 5c 02 0e 30 41 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 10 00 00 00 44 4f 00 00  ...\..0A.(A. B..B..B........DO..
000409a0  d0 f0 fd ff 44 00 00 00 00 00 00 00 10 00 00 00 58 4f 00 00 00 f1 fd ff 53 00 00 00 00 00 00 00  ....D...........XO......S.......
000409c0  10 00 00 00 6c 4f 00 00 3f f1 fd ff 0a 00 00 00 00 00 00 00 10 00 00 00 80 4f 00 00 35 f1 fd ff  ....lO..?................O..5...
000409e0  05 00 00 00 00 00 00 00 48 00 00 00 94 4f 00 00 26 f1 fd ff bd 02 00 00 00 42 0e 10 8f 02 42 0e  ........H....O..&........B....B.
00040a00  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 50 03 9e 02 0e 38 43  ...B. ..B.(..A.0..A.8..D.P....8C
00040a20  0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 48 00 00 00 e0 4f 00 00 97 f3 fd ff  .0A.(B. B..B..B.....H....O......
00040a40  ee 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e  .....B....B....B. ..B.(..A.0..A.
00040a60  38 83 07 41 0e 40 03 d4 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00  8..A.@....8A.0A.(B. B..B..B.....
00040a80  48 00 00 00 2c 50 00 00 39 f6 fd ff 08 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  H...,P..9........B....B....B. ..
00040aa0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 41 0e 40 03 ee 02 0e 38 41 0e 30 41 0e 28 42 0e 20  B.(..A.0..A.8..A.@....8A.0A.(B. 
00040ac0  42 0e 18 42 0e 10 42 0e 08 00 00 00 18 00 00 00 78 50 00 00 f5 f8 fd ff 55 00 00 00 00 46 0e 10  B..B..B.........xP......U....F..
00040ae0  58 0e 08 00 00 00 00 00 10 00 00 00 94 50 00 00 2e f9 fd ff 0a 00 00 00 00 00 00 00 14 00 00 00  X............P..................
00040b00  a8 50 00 00 24 f9 fd ff 67 00 00 00 00 46 0e 10 58 0e 08 00 48 00 00 00 c0 50 00 00 73 f9 fd ff  .P..$...g....F..X...H....P..s...
00040b20  c0 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e  .....B....B....B. ..B.(..A.0..A.
00040b40  38 83 07 47 0e f0 02 03 a0 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00  8..G.......8A.0A.(B. B..B..B....
00040b60  28 00 00 00 0c 51 00 00 e7 fa fd ff e3 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04  (....Q...........B....A....A. ..
00040b80  02 d7 0e 18 41 0e 10 42 0e 08 00 00 38 00 00 00 38 51 00 00 9e fb fd ff f2 00 00 00 00 42 0e 10  ....A..B....8...8Q...........B..
00040ba0  8e 02 42 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 02 de 0e 28 41 0e 20 42 0e 18  ..B....B. ..A.(..A.0.....(A. B..
00040bc0  42 0e 10 42 0e 08 00 00 10 00 00 00 74 51 00 00 54 fc fd ff 0a 00 00 00 00 00 00 00 14 00 00 00  B..B........tQ..T...............
00040be0  88 51 00 00 4a fc fd ff 9e 00 00 00 00 46 0e 10 58 0e 08 00 28 00 00 00 a0 51 00 00 d0 fc fd ff  .Q..J........F..X...(....Q......
00040c00  98 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 44 0e 70 02 8b 0e 18 41 0e 10 41 0e 08 00 00 00 00  .....A....A....D.p....A..A......
00040c20  10 00 00 00 cc 51 00 00 3c fd fd ff 0a 00 00 00 00 00 00 00 14 00 00 00 e0 51 00 00 32 fd fd ff  .....Q..<................Q..2...
00040c40  9e 00 00 00 00 46 0e 10 58 0e 08 00 48 00 00 00 f8 51 00 00 b8 fd fd ff ec 01 00 00 00 42 0e 10  .....F..X...H....Q...........B..
00040c60  8f 02 4a 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 90 06 03  ..J....B. ..B.(..A.0..A.8..G....
00040c80  c4 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 28 00 00 00 44 52 00 00  ...8A.0A.(B. B..B..B....(...DR..
00040ca0  58 ff fd ff e1 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04 02 d5 0e 18 41 0e 10 42  X........B....A....A. ......A..B
00040cc0  0e 08 00 00 38 00 00 00 70 52 00 00 0d 00 fe ff 0a 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42  ....8...pR...........B....B....B
00040ce0  0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 02 f6 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00  . ..A.(..A.0.....(A. B..B..B....
00040d00  4c 00 00 00 ac 52 00 00 db 00 fe ff af 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L....R...........B....B....B. ..
00040d20  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e e0 02 03 8f 01 0e 38 41 0e 30 41 0e 28 42 0e  B.(..A.0..A.8..G.......8A.0A.(B.
00040d40  20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 4c 00 00 00 fc 52 00 00 3a 02 fe ff d0 01 00 00   B..B..B........L....R..:.......
00040d60  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....B....B. ..B.(..A.0..A.8..G
00040d80  0e e0 01 03 b0 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00  .......8A.0A.(B. B..B..B........
00040da0  34 00 00 00 4c 53 00 00 ba 03 fe ff 98 00 00 00 00 42 0e 10 8c 02 41 0e 18 83 03 44 0e 30 02 7a  4...LS...........B....A....D.0.z
00040dc0  0a 0e 18 44 0e 10 42 0e 08 45 0b 44 0e 18 41 0e 10 42 0e 08 00 00 00 00 40 00 00 00 84 53 00 00  ...D..B..E.D..A..B......@....S..
00040de0  1a 04 fe ff 73 02 00 00 00 42 0e 10 8f 02 51 0e 18 8e 03 42 0e 20 8d 04 49 0e 28 8c 05 44 0e 30  ....s....B....Q....B. ..I.(..D.0
00040e00  86 06 45 0e 38 83 07 03 2d 02 0e 30 45 0e 28 46 0e 20 42 0e 18 45 0e 10 42 0e 08 00 14 00 00 00  ..E.8...-..0E.(F. B..E..B.......
00040e20  c8 53 00 00 49 06 fe ff dd 00 00 00 00 42 0e 10 02 d6 0e 08 3c 00 00 00 e0 53 00 00 0e 07 fe ff  .S..I........B......<....S......
00040e40  1b 01 00 00 00 4b 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 44 0e 28 83 05 42 0e 30 02 f3 0e 28  .....K....B....A. ..D.(..B.0...(
00040e60  43 0e 20 41 0e 18 42 0e 10 42 0e 08 45 c3 c6 cc cd 00 00 00 48 00 00 00 20 54 00 00 e9 07 fe ff  C. A..B..B..E.......H... T......
00040e80  42 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e  B....B....B....B. ..B.(..A.0..A.
00040ea0  38 83 07 41 0e 40 03 28 02 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00  8..A.@.(..8A.0A.(B. B..B..B.....
00040ec0  10 00 00 00 6c 54 00 00 df 09 fe ff 4b 00 00 00 00 00 00 00 14 00 00 00 80 54 00 00 16 0a fe ff  ....lT......K............T......
00040ee0  7a 00 00 00 00 42 0e 10 02 73 0e 08 14 00 00 00 98 54 00 00 78 0a fe ff 7a 00 00 00 00 42 0e 10  z....B...s.......T..x...z....B..
00040f00  02 73 0e 08 24 00 00 00 b0 54 00 00 da 0a fe ff 72 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 41  .s..$....T......r....A....A....A
00040f20  0e 20 02 68 0e 18 41 0e 10 41 0e 08 14 00 00 00 d8 54 00 00 24 0b fe ff 7a 00 00 00 00 42 0e 10  . .h..A..A.......T..$...z....B..
00040f40  02 73 0e 08 10 00 00 00 f0 54 00 00 86 0b fe ff 05 00 00 00 00 00 00 00 14 00 00 00 04 55 00 00  .s.......T...................U..
00040f60  77 0b fe ff 62 00 00 00 00 41 0e 10 02 5c 0e 08 24 00 00 00 1c 55 00 00 c1 0b fe ff 94 00 00 00  w...b....A...\..$....U..........
00040f80  00 42 0e 10 8c 02 41 0e 18 86 03 44 0e 30 02 85 0e 18 41 0e 10 42 0e 08 14 00 00 00 44 55 00 00  .B....A....D.0....A..B......DU..
00040fa0  2d 0c fe ff 5f 00 00 00 00 41 0e 10 02 59 0e 08 14 00 00 00 5c 55 00 00 74 0c fe ff 5f 00 00 00  -..._....A...Y......\U..t..._...
00040fc0  00 41 0e 10 02 59 0e 08 14 00 00 00 74 55 00 00 bb 0c fe ff 7a 00 00 00 00 42 0e 10 02 73 0e 08  .A...Y......tU......z....B...s..
00040fe0  14 00 00 00 8c 55 00 00 1d 0d fe ff 5f 00 00 00 00 41 0e 10 02 59 0e 08 14 00 00 00 a4 55 00 00  .....U......_....A...Y.......U..
00041000  64 0d fe ff 5f 00 00 00 00 41 0e 10 02 59 0e 08 14 00 00 00 bc 55 00 00 ab 0d fe ff 5f 00 00 00  d..._....A...Y.......U......_...
00041020  00 41 0e 10 02 59 0e 08 14 00 00 00 d4 55 00 00 f2 0d fe ff 5f 00 00 00 00 41 0e 10 02 59 0e 08  .A...Y.......U......_....A...Y..
00041040  14 00 00 00 ec 55 00 00 39 0e fe ff 5f 00 00 00 00 41 0e 10 02 59 0e 08 14 00 00 00 04 56 00 00  .....U..9..._....A...Y.......V..
00041060  80 0e fe ff 25 00 00 00 00 46 0e 10 58 0e 08 00 14 00 00 00 1c 56 00 00 8d 0e fe ff 3d 00 00 00  ....%....F..X........V......=...
00041080  00 46 0e 10 58 0e 08 00 14 00 00 00 34 56 00 00 b2 0e fe ff 2b 00 00 00 00 41 0e 10 65 0e 08 00  .F..X.......4V......+....A..e...
000410a0  14 00 00 00 4c 56 00 00 c5 0e fe ff 23 00 00 00 00 46 0e 10 58 0e 08 00 14 00 00 00 64 56 00 00  ....LV......#....F..X.......dV..
000410c0  d0 0e fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 1c 00 00 00 7c 56 00 00 fd 0e fe ff 88 00 00 00  ....E....A..........|V..........
000410e0  00 41 0e 10 83 02 44 0e 20 02 7d 0e 10 41 0e 08 14 00 00 00 9c 56 00 00 65 0f fe ff 45 00 00 00  .A....D. .}..A.......V..e...E...
00041100  00 41 0e 10 7f 0e 08 00 14 00 00 00 b4 56 00 00 92 0f fe ff 46 00 00 00 00 42 0e 10 7f 0e 08 00  .A...........V......F....B......
00041120  14 00 00 00 cc 56 00 00 c0 0f fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 14 00 00 00 e4 56 00 00  .....V......E....A...........V..
00041140  ed 0f fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 14 00 00 00 fc 56 00 00 1a 10 fe ff 45 00 00 00  ....E....A...........V......E...
00041160  00 41 0e 10 7f 0e 08 00 14 00 00 00 14 57 00 00 47 10 fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00  .A...........W..G...E....A......
00041180  14 00 00 00 2c 57 00 00 74 10 fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 14 00 00 00 44 57 00 00  ....,W..t...E....A..........DW..
000411a0  a1 10 fe ff 4b 00 00 00 00 41 0e 10 02 45 0e 08 14 00 00 00 5c 57 00 00 d4 10 fe ff 23 00 00 00  ....K....A...E......\W......#...
000411c0  00 46 0e 10 58 0e 08 00 14 00 00 00 74 57 00 00 df 10 fe ff 4e 00 00 00 00 41 0e 10 02 48 0e 08  .F..X.......tW......N....A...H..
000411e0  14 00 00 00 8c 57 00 00 15 11 fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 14 00 00 00 a4 57 00 00  .....W......E....A...........W..
00041200  42 11 fe ff 2b 00 00 00 00 41 0e 10 65 0e 08 00 14 00 00 00 bc 57 00 00 55 11 fe ff 23 00 00 00  B...+....A..e........W..U...#...
00041220  00 46 0e 10 58 0e 08 00 14 00 00 00 d4 57 00 00 60 11 fe ff 36 00 00 00 00 41 0e 10 70 0e 08 00  .F..X........W..`...6....A..p...
00041240  14 00 00 00 ec 57 00 00 7e 11 fe ff 50 00 00 00 00 41 0e 10 02 4a 0e 08 14 00 00 00 04 58 00 00  .....W..~...P....A...J.......X..
00041260  b6 11 fe ff 23 00 00 00 00 46 0e 10 58 0e 08 00 14 00 00 00 1c 58 00 00 c1 11 fe ff 2b 00 00 00  ....#....F..X........X......+...
00041280  00 41 0e 10 65 0e 08 00 14 00 00 00 34 58 00 00 d4 11 fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00  .A..e.......4X......E....A......
000412a0  14 00 00 00 4c 58 00 00 01 12 fe ff 45 00 00 00 00 41 0e 10 7f 0e 08 00 14 00 00 00 64 58 00 00  ....LX......E....A..........dX..
000412c0  2e 12 fe ff 39 00 00 00 00 44 0e 20 70 0e 08 00 1c 00 00 00 7c 58 00 00 4f 12 fe ff 70 00 00 00  ....9....D. p.......|X..O...p...
000412e0  00 41 0e 10 86 02 44 0e 20 02 65 0e 10 41 0e 08 34 00 00 00 9c 58 00 00 9f 12 fe ff 7b 00 00 00  .A....D. .e..A..4....X......{...
00041300  00 41 0e 10 86 02 41 0e 18 83 03 42 0e 20 02 61 0a 0e 18 41 0e 10 43 0e 08 45 0b 41 0e 18 46 0e  .A....A....B. .a...A..C..E.A..F.
00041320  10 41 0e 08 00 00 00 00 28 00 00 00 d4 58 00 00 e2 12 fe ff 27 01 00 00 00 41 0e 10 86 02 44 0e  .A......(....X......'....A....D.
00041340  18 83 03 46 0e 90 01 03 15 01 0e 18 41 0e 10 41 0e 08 00 00 14 00 00 00 00 59 00 00 dd 13 fe ff  ...F........A..A.........Y......
00041360  a1 00 00 00 00 44 0e 60 02 98 0e 08 20 00 00 00 18 59 00 00 66 14 fe ff b3 00 00 00 00 41 0e 10  .....D.`.... ....Y..f........A..
00041380  83 02 47 0e 60 02 a5 0e 10 41 0e 08 00 00 00 00 38 00 00 00 3c 59 00 00 f5 14 fe ff 72 01 00 00  ..G.`....A......8...<Y......r...
000413a0  00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 45 0e 30 03 59 01 0e 28 44 0e 20  .B....B....A. ..A.(..E.0.Y..(D. 
000413c0  41 0e 18 42 0e 10 42 0e 08 00 00 00 10 00 00 00 78 59 00 00 2b 16 fe ff 08 00 00 00 00 00 00 00  A..B..B.........xY..+...........
000413e0  14 00 00 00 8c 59 00 00 1f 16 fe ff 0b 00 00 00 00 00 00 00 00 00 00 00 1c 00 00 00 a4 59 00 00  .....Y.......................Y..
00041400  12 16 fe ff 71 01 00 00 00 41 0e 10 83 02 03 6b 01 0e 08 00 00 00 00 00 14 00 00 00 c4 59 00 00  ....q....A.....k.............Y..
00041420  63 17 fe ff 29 00 00 00 00 41 0e 10 00 00 00 00 2c 00 00 00 dc 59 00 00 74 17 fe ff 5e 00 00 00  c...)....A......,....Y..t...^...
00041440  00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04 02 52 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00  .B....A....A. ...R..A..B........
00041460  2c 00 00 00 0c 5a 00 00 a2 17 fe ff 5e 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04  ,....Z......^....B....A....A. ..
00041480  02 52 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00 14 00 00 00 3c 5a 00 00 d0 17 fe ff 29 00 00 00  .R..A..B............<Z......)...
000414a0  00 00 00 00 00 00 00 00 14 00 00 00 54 5a 00 00 e1 17 fe ff 88 00 00 00 00 46 0e 10 58 0e 08 00  ............TZ...........F..X...
000414c0  2c 00 00 00 6c 5a 00 00 51 18 fe ff 97 00 00 00 00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04  ,...lZ..Q........B....A....A. ..
000414e0  02 8b 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00 2c 00 00 00 9c 5a 00 00 b8 18 fe ff 8e 00 00 00  ....A..B........,....Z..........
00041500  00 42 0e 10 8c 02 41 0e 18 86 03 41 0e 20 83 04 02 82 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00  .B....A....A. ......A..B........
00041520  14 00 00 00 cc 5a 00 00 16 19 fe ff 05 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 e4 5a 00 00  .....Z.......................Z..
00041540  03 19 fe ff 59 00 00 00 00 42 0e 10 02 52 0e 08 38 00 00 00 fc 5a 00 00 44 19 fe ff 0e 01 00 00  ....Y....B...R..8....Z..D.......
00041560  00 42 0e 10 8e 02 49 0e 18 8d 03 45 0e 20 8c 04 44 0e 28 86 05 44 0e 30 83 06 02 ea 0e 28 41 0e  .B....I....E. ..D.(..D.0.....(A.
00041580  20 42 0e 18 42 0e 10 42 0e 08 00 00 60 00 00 00 38 5b 00 00 16 1a fe ff 85 01 00 00 00 42 0e 10   B..B..B....`...8[...........B..
000415a0  8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 42 0e 40 03 49  ..B....B. ..B.(..A.0..A.8..B.@.I
000415c0  01 0a 0e 38 4a 0e 30 44 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 46 0e 38 41 0e 30 41 0e  ...8J.0D.(B. B..B..B..E.F.8A.0A.
000415e0  28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 64 00 00 00 9c 5b 00 00 37 1b fe ff c5 01 00 00  (B. B..B..B.....d....[..7.......
00041600  00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44  .B....B....E. ..B.(..A.0..A.8..D
00041620  0e 60 03 59 01 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 7d 0e 38 41  .`.Y...8A.0A.(B. B..B..B..E.}.8A
00041640  0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 4c 00 00 00 04 5c 00 00  .0A.(B. B..B..B.........L....\..
00041660  94 1c fe ff b4 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  .........B....B....B. ..B.(..A.0
00041680  86 06 41 0e 38 83 07 47 0e e0 02 03 94 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G.......8A.0A.(B. B..B..B
000416a0  0e 08 00 00 00 00 00 00 14 00 00 00 54 5c 00 00 f8 1d fe ff 38 00 00 00 00 46 0e 10 58 0e 08 00  ............T\......8....F..X...
000416c0  54 00 00 00 6c 5c 00 00 18 1e fe ff de 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  T...l\...........B....B....B. ..
000416e0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 60 02 db 0e 68 4c 0e 70 5b 0e 68 41 0e 60 03  B.(..A.0..A.8..D.`...hL.p[.hA.`.
00041700  bc 01 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 24 00 00 00 c4 5c 00 00  ...8C.0A.(B. B..B..B....$....\..
00041720  9e 20 fe ff 4b 00 00 00 00 41 0e 10 86 02 43 0e 18 83 03 45 0e 20 7b 0e 18 41 0e 10 41 0e 08 00  . ..K....A....C....E. {..A..A...
00041740  14 00 00 00 ec 5c 00 00 c1 20 fe ff 2f 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 5d 00 00  .....\... ../...........<....]..
00041760  d8 20 fe ff 20 02 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 50  . .. ....B....B....A. ..A.(..D.P
00041780  03 09 02 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 48 00 00 00 44 5d 00 00  ....(C. A..B..B.........H...D]..
000417a0  b8 22 fe ff 44 06 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  ."..D....B....B....B. ..B.(..A.0
000417c0  86 06 41 0e 38 83 07 47 0e 90 02 03 24 06 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G....$..8A.0A.(B. B..B..B
000417e0  0e 08 00 00 10 00 00 00 90 5d 00 00 b0 28 fe ff 11 00 00 00 00 4c 0e 10 4c 00 00 00 a4 5d 00 00  .........]...(.......L..L....]..
00041800  ad 28 fe ff 37 05 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  .(..7....B....B....B. ..B.(..A.0
00041820  86 06 41 0e 38 83 07 44 0e a0 01 03 17 05 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..D.......8D.0A.(B. B..B..B
00041840  0e 08 00 00 00 00 00 00 18 00 00 00 f4 5d 00 00 94 2d fe ff 43 00 00 00 00 41 0e 10 83 02 7d 0e  .............]...-..C....A....}.
00041860  08 00 00 00 18 00 00 00 10 5e 00 00 bb 2d fe ff 2b 00 00 00 00 46 0e 10 83 02 5b c3 0e 08 00 00  .........^...-..+....F....[.....
00041880  4c 00 00 00 2c 5e 00 00 ca 2d fe ff ca 0a 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L...,^...-.......B....B....B. ..
000418a0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 70 03 ab 0a 0e 38 43 0e 30 41 0e 28 42 0e 20  B.(..A.0..A.8..D.p....8C.0A.(B. 
000418c0  42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 44 00 00 00 7c 5e 00 00 44 38 fe ff 35 07 00 00  B..B..B.........D...|^..D8..5...
000418e0  00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 44 0e 50 03 1a 07  .B....B....B. ..A.(..A.0..D.P...
00041900  0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 4c 00 00 00 c4 5e 00 00  .0C.(A. B..B..B.........L....^..
00041920  31 3f fe ff 66 05 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  1?..f....B....B....B. ..B.(..A.0
00041940  86 06 41 0e 38 83 07 47 0e a0 02 03 46 05 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G....F..8A.0A.(B. B..B..B
00041960  0e 08 00 00 00 00 00 00 14 00 00 00 14 5f 00 00 47 44 fe ff 7f 00 00 00 00 42 0e 10 02 78 0e 08  ............._..GD.......B...x..
00041980  14 00 00 00 2c 5f 00 00 ae 44 fe ff 42 00 00 00 00 4b 0e 10 58 0e 08 00 14 00 00 00 44 5f 00 00  ....,_...D..B....K..X.......D_..
000419a0  d8 44 fe ff d9 00 00 00 00 42 0e 10 02 d2 0e 08 4c 00 00 00 5c 5f 00 00 99 45 fe ff 23 01 00 00  .D.......B......L...\_...E..#...
000419c0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44  .B....B....B. ..B.(..A.0..A.8..D
000419e0  0e 50 03 06 01 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00  .P....8A.0A.(B. B..B..B.........
00041a00  14 00 00 00 ac 5f 00 00 6c 46 fe ff 29 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 c4 5f 00 00  ....._..lF..)................_..
00041a20  7d 46 fe ff 26 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 dc 5f 00 00 98 46 fe ff 8a 00 00 00  }F..&...........<...._...F......
00041a40  00 46 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 44 0e 28 83 05 4e 0e 30 02 4e 0e 28 41 0e 20 41  .F....B....D. ..D.(..N.0.N.(A. A
00041a60  0e 18 42 0e 10 42 0e 08 4e c3 c6 cc cd 00 00 00 5c 00 00 00 1c 60 00 00 e8 46 fe ff 79 00 00 00  ..B..B..N.......\....`...F..y...
00041a80  00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 44 0e 30 83 06 69 0a 0e 28 41 0e  .B....B....B. ..D.(..D.0..i..(A.
00041aa0  20 42 0e 18 42 0e 10 42 0e 08 4a 0b 4f 0a 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 4a 0b 45 0e   B..B..B..J.O..(A. B..B..B..J.E.
00041ac0  28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 34 00 00 00 7c 60 00 00 08 47 fe ff 22 03 00 00  (A. B..B..B.....4...|`...G.."...
00041ae0  00 42 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04 47 0e 50 03 34 02 0a 0e 20 41 0e 18 41 0e 10 42  .B....D....A. ..G.P.4... A..A..B
00041b00  0e 08 4a 0b 00 00 00 00 4c 00 00 00 b4 60 00 00 00 4a fe ff 96 00 00 00 00 42 0e 10 8f 02 42 0e  ..J.....L....`...J.......B....B.
00041b20  18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 44 0e 60 73 0a 0e 38 43 0e  ...B. ..E.(..D.0..D.8..D.`s..8C.
00041b40  30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4a 0b 00 00 00 00 00 00 14 00 00 00 04 61 00 00  0A.(B. B..B..B..J............a..
00041b60  50 4a fe ff 69 01 00 00 00 00 00 00 00 00 00 00 24 00 00 00 1c 61 00 00 a8 4b fe ff 52 00 00 00  PJ..i...........$....a...K..R...
00041b80  00 41 0e 10 86 02 41 0e 18 83 03 47 0e 20 02 42 0e 18 41 0e 10 41 0e 08 24 00 00 00 44 61 00 00  .A....A....G. .B..A..A..$...Da..
00041ba0  e0 4b fe ff b2 00 00 00 00 41 0e 10 83 02 44 0e 60 02 81 0a 0e 10 41 0e 08 49 0b 00 00 00 00 00  .K.......A....D.`.....A..I......
00041bc0  14 00 00 00 6c 61 00 00 78 4c fe ff 45 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 84 61 00 00  ....la..xL..E................a..
00041be0  b0 4c fe ff 2b 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 9c 61 00 00 c8 4c fe ff 6e 02 00 00  .L..+................a...L..n...
00041c00  00 00 00 00 00 00 00 00 14 00 00 00 b4 61 00 00 30 4f fe ff a2 01 00 00 00 00 00 00 00 00 00 00  .............a..0O..............
00041c20  34 00 00 00 cc 61 00 00 c8 50 fe ff e7 02 00 00 00 4b 0e 10 8c 02 44 0e 18 86 03 41 0e 20 83 04  4....a...P.......K....D....A. ..
00041c40  03 9c 01 0a 0e 18 41 0e 10 42 0e 08 49 0b 03 28 01 0e 08 c3 c6 cc 00 00 14 00 00 00 04 62 00 00  ......A..B..I..(.............b..
00041c60  80 53 fe ff 2f 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 1c 62 00 00 98 53 fe ff 55 08 00 00  .S../...........L....b...S..U...
00041c80  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....B....B. ..B.(..A.0..A.8..G
00041ca0  0e e0 02 02 74 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4f 0b 00 00 00 00  ....t..8C.0A.(B. B..B..B..O.....
00041cc0  3c 00 00 00 6c 62 00 00 a8 5b fe ff b8 02 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04  <...lb...[.......B....B....A. ..
00041ce0  44 0e 28 83 05 47 0e 30 03 7b 02 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 4f 0b 00 00 00 00  D.(..G.0.{...(A. A..B..B..O.....
00041d00  4c 00 00 00 ac 62 00 00 28 5e fe ff 4c 03 00 00 00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04  L....b..(^..L....B....E....B. ..
00041d20  44 0e 28 86 05 44 0e 30 83 06 03 c8 02 0a 0e 28 44 0e 20 42 0e 18 42 0e 10 42 0e 08 4d 0b 59 0a  D.(..D.0.......(D. B..B..B..M.Y.
00041d40  0e 28 44 0e 20 42 0e 18 42 0e 10 42 0e 08 4d 0b 14 00 00 00 fc 62 00 00 28 61 fe ff 28 00 00 00  .(D. B..B..B..M......b..(a..(...
00041d60  00 00 00 00 00 00 00 00 7c 00 00 00 14 63 00 00 40 61 fe ff dc 01 00 00 00 42 0e 10 8f 02 42 0e  ........|....c..@a.......B....B.
00041d80  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 90 01 02 69 0a 0e 38  ...B. ..B.(..A.0..A.8..D....i..8
00041da0  4a 0e 30 44 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4b 0b 7e 0a 0e 38 4a 0e 30 44 0e 28 42 0e  J.0D.(B. B..B..B..K.~..8J.0D.(B.
00041dc0  20 42 0e 18 42 0e 10 42 0e 08 4c 0b 75 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42   B..B..B..L.u..8C.0A.(B. B..B..B
00041de0  0e 08 47 0b 00 00 00 00 4c 00 00 00 94 63 00 00 a0 62 fe ff a1 01 00 00 00 42 0e 10 8d 02 45 0e  ..G.....L....c...b.......B....E.
00041e00  18 8c 03 41 0e 20 86 04 44 0e 28 83 05 47 0e 30 03 5b 01 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42  ...A. ..D.(..G.0.[...(A. A..B..B
00041e20  0e 08 4c 0b 56 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 64 00 00 00 e4 63 00 00  ..L.V.(A. A..B..B.......d....c..
00041e40  00 64 fe ff 47 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  .d..G....B....B....E. ..B.(..A.0
00041e60  86 06 41 0e 38 83 07 44 0e 90 01 02 4f 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..D....O..8C.0A.(B. B..B..B
00041e80  0e 08 4c 0b 02 43 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4b 0b 00 00 00  ..L..C..8A.0A.(B. B..B..B..K....
00041ea0  1c 00 00 00 4c 64 00 00 e8 65 fe ff 21 00 00 00 00 41 0e 10 83 02 4f 0a 0e 08 48 0b 44 0e 08 00  ....Ld...e..!....A....O...H.D...
00041ec0  14 00 00 00 6c 64 00 00 f8 65 fe ff 2d 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 84 64 00 00  ....ld...e..-...........4....d..
00041ee0  10 66 fe ff 7b 00 00 00 00 45 0e 10 86 02 44 0e 18 83 03 46 0e 20 4e 0a 0e 18 41 0e 10 41 0e 08  .f..{....E....D....F. N...A..A..
00041f00  49 0b 02 42 0e 08 c3 c6 4a 0e 20 83 03 86 02 00 1c 00 00 00 bc 64 00 00 58 66 fe ff 40 00 00 00  I..B....J. ..........d..Xf..@...
00041f20  00 41 0e 10 83 02 6f 0a 0e 08 45 0b 46 0e 08 00 34 00 00 00 dc 64 00 00 78 66 fe ff 52 00 00 00  .A....o...E.F...4....d..xf..R...
00041f40  00 41 0e 10 86 02 44 0e 18 83 03 47 0e 30 4f 0a 0e 18 41 0e 10 41 0e 08 4b 0b 63 0e 18 41 0e 10  .A....D....G.0O...A..A..K.c..A..
00041f60  41 0e 08 00 00 00 00 00 3c 00 00 00 14 65 00 00 a0 66 fe ff 34 03 00 00 00 42 0e 10 8d 02 42 0e  A.......<....e...f..4....B....B.
00041f80  18 8c 03 41 0e 20 86 04 44 0e 28 83 05 46 0e a0 01 02 96 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42  ...A. ..D.(..F.......(A. A..B..B
00041fa0  0e 08 45 0b 00 00 00 00 34 00 00 00 54 65 00 00 a0 69 fe ff 61 00 00 00 00 45 0e 10 86 02 49 0e  ..E.....4...Te...i..a....E....I.
00041fc0  18 83 03 44 0e 20 75 0e 18 41 0e 10 41 0e 08 47 c3 c6 4a 0e 20 83 03 86 02 00 00 00 00 00 00 00  ...D. u..A..A..G..J. ...........
00041fe0  4c 00 00 00 8c 65 00 00 d8 69 fe ff 78 00 00 00 00 48 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04  L....e...i..x....H....D....D. ..
00042000  6e 0a c3 0e 18 41 c6 0e 10 42 cc 0e 08 4f 0b 41 0a c3 0e 18 41 c6 0e 10 42 cc 0e 08 4c 0b 41 0e  n....A...B...O.A....A...B...L.A.
00042020  18 46 0e 10 42 0e 08 45 c3 c6 cc 00 00 00 00 00 4c 00 00 00 dc 65 00 00 08 6a fe ff 05 01 00 00  .F..B..E........L....e...j......
00042040  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 47 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 44  .B....B....B. ..G.(..D.0..D.8..D
00042060  0e 80 01 7e 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4d 0b 00 00 00 00 00  ...~..8C.0A.(B. B..B..B..M......
00042080  24 00 00 00 2c 66 00 00 c8 6a fe ff 03 03 00 00 00 49 0e 10 83 02 46 0e 20 03 9d 01 0e 10 41 0e  $...,f...j.......I....F. .....A.
000420a0  08 4b c3 48 0e 20 83 02 44 00 00 00 54 66 00 00 b0 6d fe ff b7 00 00 00 00 42 0e 10 8e 02 45 0e  .K.H. ..D...Tf...m.......B....E.
000420c0  18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30 83 06 44 0e 50 75 0a 0e 30 43 0e 28 41 0e 20 42  ...B. ..A.(..D.0..D.Pu..0C.(A. B
000420e0  0e 18 42 0e 10 42 0e 08 4f 0b 00 00 00 00 00 00 4c 00 00 00 9c 66 00 00 28 6e fe ff cc 00 00 00  ..B..B..O.......L....f..(n......
00042100  00 42 0e 10 8d 02 42 0e 18 8c 03 44 0e 20 86 04 41 0e 28 83 05 44 0e 30 02 95 0a 0e 28 41 0e 20  .B....B....D. ..A.(..D.0....(A. 
00042120  41 0e 18 42 0e 10 42 0e 08 48 0b 44 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42 0e 08 46 0b 00 00 00  A..B..B..H.D..(A. A..B..B..F....
00042140  14 00 00 00 ec 66 00 00 a8 6e fe ff 0a 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 04 67 00 00  .....f...n..............L....g..
00042160  a0 6e fe ff 83 02 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 47 0e 30  .n.......B....B....B. ..D.(..G.0
00042180  83 06 03 02 02 0a 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 46 0b 5b 0a 0e 28 41 0e 20 42 0e 18  .......(A. B..B..B..F.[..(A. B..
000421a0  42 0e 10 42 0e 08 4e 0b 94 00 00 00 54 67 00 00 f0 70 fe ff d3 02 00 00 00 42 0e 10 8f 02 48 0e  B..B..N.....Tg...p.......B....H.
000421c0  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 44 0e 50 03 4d 02 0a 0e 38  ...B. ..B.(..D.0..A.8..D.P.M...8
000421e0  43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 60 0a 0e 38 41 0e 30 41 0e 28 42 0e  C.0A.(B. B..B..B..E.`..8A.0A.(B.
00042200  20 42 0e 18 42 0e 10 42 0e 08 45 0b 44 0a 0e 38 4a 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42   B..B..B..E.D..8J.0A.(B. B..B..B
00042220  0e 08 45 0b 44 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00  ..E.D.8A.0A.(B. B..B..B.........
00042240  14 00 00 00 ec 67 00 00 38 73 fe ff 8a 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 68 00 00  .....g..8s..............,....h..
00042260  b0 73 fe ff a5 00 00 00 00 41 0e 10 86 02 41 0e 18 83 03 47 0e 20 02 6e 0a 0e 18 41 0e 10 41 0e  .s.......A....A....G. .n...A..A.
00042280  08 47 0b 00 00 00 00 00 3c 00 00 00 34 68 00 00 30 74 fe ff b5 02 00 00 00 42 0e 10 8d 02 42 0e  .G......<...4h..0t.......B....B.
000422a0  18 8c 03 41 0e 20 86 04 44 0e 28 83 05 47 0e 30 03 82 02 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42  ...A. ..D.(..G.0.....(A. A..B..B
000422c0  0e 08 48 0b 00 00 00 00 44 00 00 00 74 68 00 00 b0 76 fe ff 4c 02 00 00 00 4a 0e 10 8d 02 45 0e  ..H.....D...th...v..L....J....E.
000422e0  18 8c 03 41 0e 20 86 04 41 0e 28 83 05 46 0e 30 03 f3 01 0a 0e 28 41 0e 20 41 0e 18 42 0e 10 42  ...A. ..A.(..F.0.....(A. A..B..B
00042300  0e 08 48 0b 6a 0e 08 c3 c6 cc cd 00 00 00 00 00 3c 00 00 00 bc 68 00 00 b8 78 fe ff e7 01 00 00  ..H.j...........<....h...x......
00042320  00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30 83 06 03 a3 01 0a 0e 28  .B....E....B. ..A.(..D.0.......(
00042340  41 0e 20 42 0e 18 42 0e 10 42 0e 08 48 0b 00 00 4c 00 00 00 fc 68 00 00 68 7a fe ff 96 00 00 00  A. B..B..B..H...L....h..hz......
00042360  00 42 0e 10 8f 02 45 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 44  .B....E....E. ..B.(..A.0..D.8..D
00042380  0e 60 75 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 48 0b 00 00 00 00 00 00  .`u..8C.0A.(B. B..B..B..H.......
000423a0  2c 00 00 00 4c 69 00 00 b8 7a fe ff 4b 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 47 0e 20 67 0a  ,...Li...z..K....A....D....G. g.
000423c0  0e 18 41 0e 10 41 0e 08 4b 0b 00 00 00 00 00 00 4c 00 00 00 7c 69 00 00 d8 7a fe ff 50 04 00 00  ..A..A..K.......L...|i...z..P...
000423e0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47  .B....B....B. ..B.(..D.0..A.8..G
00042400  0e 80 01 03 43 03 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00  ....C...8D.0A.(B. B..B..B..E....
00042420  4c 00 00 00 cc 69 00 00 d8 7e fe ff f5 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L....i...~.......B....B....B. ..
00042440  42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 4f 0e b0 01 02 54 0a 0e 38 44 0e 30 41 0e 28 42 0e  B.(..D.0..A.8..O....T..8D.0A.(B.
00042460  20 42 0e 18 42 0e 10 42 0e 08 4b 0b 00 00 00 00 4c 00 00 00 1c 6a 00 00 88 81 fe ff c4 07 00 00   B..B..B..K.....L....j..........
00042480  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 4a  .B....B....B. ..B.(..A.0..A.8..J
000424a0  0e 90 11 03 db 03 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00  ........8A.0A.(B. B..B..B..E....
000424c0  14 00 00 00 6c 6a 00 00 08 89 fe ff e8 00 00 00 00 00 00 00 00 00 00 00 10 00 00 00 84 6a 00 00  ....lj.......................j..
000424e0  e0 89 fe ff 0c 00 00 00 00 00 00 00 48 00 00 00 98 6a 00 00 dc 89 fe ff 64 02 00 00 00 42 0e 10  ............H....j......d....B..
00042500  8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e 40 03 32  ..B....B. ..B.(..D.0..A.8..G.@.2
00042520  02 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4e 0b 64 00 00 00 e4 6a 00 00  ...8C.0A.(B. B..B..B..N.d....j..
00042540  00 8c fe ff a9 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30  .........B....B....B. ..B.(..D.0
00042560  86 06 44 0e 38 83 07 47 0e 50 02 de 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e  ..D.8..G.P....8A.0A.(B. B..B..B.
00042580  08 49 0b 02 90 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00  .I....8C.0A.(B. B..B..B.........
000425a0  24 00 00 00 4c 6b 00 00 48 8d fe ff 67 01 00 00 00 61 0e 10 83 02 03 26 01 0a 0e 08 49 0b 43 0e  $...Lk..H...g....a.....&....I.C.
000425c0  08 4d c3 00 00 00 00 00 14 00 00 00 74 6b 00 00 90 8e fe ff c3 02 00 00 00 00 00 00 00 00 00 00  .M..........tk..................
000425e0  44 00 00 00 8c 6b 00 00 48 91 fe ff c0 02 00 00 00 49 0e 10 86 02 41 0e 18 83 03 47 0e 20 03 7f  D....k..H........I....A....G. ..
00042600  01 0e 18 41 0e 10 41 0e 08 4e c3 c6 48 0e 20 83 03 86 02 03 04 01 0a 0e 18 41 c3 0e 10 41 c6 0e  ...A..A..N..H. ..........A...A..
00042620  08 4a 0b 00 00 00 00 00 14 00 00 00 d4 6b 00 00 c0 93 fe ff 55 00 00 00 00 00 00 00 00 00 00 00  .J...........k......U...........
00042640  14 00 00 00 ec 6b 00 00 08 94 fe ff 45 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 04 6c 00 00  .....k......E................l..
00042660  40 94 fe ff 6c 00 00 00 00 00 00 00 00 00 00 00 1c 00 00 00 1c 6c 00 00 98 94 fe ff 42 00 00 00  @...l................l......B...
00042680  00 43 0e 10 83 02 61 0a 0e 08 4c 0b 4d 0e 08 00 44 00 00 00 3c 6c 00 00 c8 94 fe ff 8b 00 00 00  .C....a...L.M...D...<l..........
000426a0  00 42 0e 10 8e 02 45 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 44 0e 30 83 06 44 0e 50 73 0a 0e  .B....E....B. ..A.(..D.0..D.Ps..
000426c0  30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 49 0b 00 00 00 00 00 00 3c 00 00 00 84 6c 00 00  0C.(A. B..B..B..I.......<....l..
000426e0  10 95 fe ff 7d 00 00 00 00 42 0e 10 8d 02 41 0e 18 83 03 47 0e 30 52 0a 0e 18 41 0e 10 42 0e 08  ....}....B....A....G.0R...A..B..
00042700  49 0b 64 0a 0e 18 44 0e 10 42 0e 08 4e 0b 55 0e 18 41 0e 10 42 0e 08 00 34 00 00 00 c4 6c 00 00  I.d...D..B..N.U..A..B...4....l..
00042720  50 95 fe ff 3e 03 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04 44 0e 50 02 90 0a 0e 20  P...>....B....D....D. ..D.P.... 
00042740  41 0e 18 41 0e 10 42 0e 08 4e 0b 00 00 00 00 00 4c 00 00 00 fc 6c 00 00 58 98 fe ff 96 00 00 00  A..A..B..N......L....l..X.......
00042760  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 44  .B....B....B. ..E.(..D.0..D.8..D
00042780  0e 60 73 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4a 0b 00 00 00 00 00 00  .`s..8C.0A.(B. B..B..B..J.......
000427a0  4c 00 00 00 4c 6d 00 00 a8 98 fe ff f8 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L...Lm...........B....B....B. ..
000427c0  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e b0 01 02 6b 0a 0e 38 44 0e 30 41 0e 28 42 0e  B.(..A.0..A.8..D....k..8D.0A.(B.
000427e0  20 42 0e 18 42 0e 10 42 0e 08 4a 0b 00 00 00 00 4c 00 00 00 9c 6d 00 00 58 9c fe ff f4 01 00 00   B..B..B..J.....L....m..X.......
00042800  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 47  .B....B....B. ..B.(..D.0..D.8..G
00042820  0e 70 03 a8 01 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4c 0b 00 00 00 00  .p.....8D.0A.(B. B..B..B..L.....
00042840  14 00 00 00 ec 6d 00 00 08 9e fe ff 22 00 00 00 00 44 0e 10 56 0e 08 00 14 00 00 00 04 6e 00 00  .....m......"....D..V........n..
00042860  20 9e fe ff 2d 00 00 00 00 00 00 00 00 00 00 00 64 00 00 00 1c 6e 00 00 38 9e fe ff c0 04 00 00   ...-...........d....n..8.......
00042880  00 42 0e 10 8f 02 48 0e 18 8e 03 45 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 44  .B....H....E. ..B.(..A.0..D.8..D
000428a0  0e 50 03 64 04 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 46 0b 61 0e 38 41  .P.d...8C.0A.(B. B..B..B..F.a.8A
000428c0  0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 00 00 00 00 00 00 4c 00 00 00 84 6e 00 00  .0A.(B. B..B..B.........L....n..
000428e0  90 a2 fe ff 98 05 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 41 0e 30  .........B....B....E. ..E.(..A.0
00042900  86 06 41 0e 38 83 07 47 0e f0 01 02 5c 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G....\..8C.0A.(B. B..B..B
00042920  0e 08 49 0b 00 00 00 00 4c 00 00 00 d4 6e 00 00 e0 a7 fe ff ff 12 00 00 00 42 0e 10 8f 02 42 0e  ..I.....L....n...........B....B.
00042940  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 80 32 03 40 0b 0a 0e  ...B. ..B.(..A.0..A.8..G..2.@...
00042960  38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4a 0b 00 00 00 14 00 00 00 24 6f 00 00  8D.0A.(B. B..B..B..J........$o..
00042980  8f ba fe ff 11 00 00 00 00 4c 0e 10 00 00 00 00 4c 00 00 00 3c 6f 00 00 88 ba fe ff 53 13 00 00  .........L......L...<o......S...
000429a0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 4a  .B....B....B. ..B.(..D.0..A.8..J
000429c0  0e e0 31 03 37 0b 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00  ..1.7...8D.0A.(B. B..B..B..E....
000429e0  6c 00 00 00 8c 6f 00 00 98 cd fe ff 9e 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  l....o...........B....B....B. ..
00042a00  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e a0 02 02 72 0e a8 02 48 0e b0 02 48 0e a8 02  B.(..A.0..A.8..G....r...H...H...
00042a20  41 0e a0 02 62 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4e 0b 02 4a 0e a8  A...b..8C.0A.(B. B..B..B..N..J..
00042a40  02 48 0e b0 02 56 0e a8 02 41 0e a0 02 00 00 00 74 00 00 00 fc 6f 00 00 c8 d0 fe ff a1 04 00 00  .H...V...A......t....o..........
00042a60  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47  .B....B....B. ..B.(..A.0..A.8..G
00042a80  0e f0 02 02 73 0e f8 02 48 0e 80 03 4a 0e 88 03 4a 0e 90 03 49 0e f0 02 65 0a 0e 38 44 0e 30 41  ....s...H...J...J...I...e..8D.0A
00042aa0  0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 02 78 0e f8 02 48 0e 80 03 47 0e 88 03 42 0e 90  .(B. B..B..B..E..x...H...G...B..
00042ac0  03 58 0e f0 02 00 00 00 64 00 00 00 74 70 00 00 00 d5 fe ff 1a 09 00 00 00 42 0e 10 8f 02 42 0e  .X......d...tp...........B....B.
00042ae0  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 80 41 03 2c 08 0a 0e  ...B. ..B.(..A.0..A.8..G..A.,...
00042b00  38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 02 40 0a 0e 38 47 0e 30 41 0e 28  8A.0A.(B. B..B..B..E..@..8G.0A.(
00042b20  42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 64 00 00 00 dc 70 00 00 b8 dd fe ff 0d 03 00 00  B. B..B..B..E...d....p..........
00042b40  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44  .B....B....B. ..B.(..A.0..A.8..D
00042b60  0e 90 01 03 a7 02 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4e 0b 61 0a 0e  ........8D.0A.(B. B..B..B..N.a..
00042b80  38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00 4c 00 00 00 44 71 00 00  8A.0A.(B. B..B..B..E....L...Dq..
00042ba0  60 e0 fe ff 5c 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  `...\....B....B....B. ..B.(..A.0
00042bc0  86 06 41 0e 38 83 07 47 0e 80 21 03 18 03 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10  ..A.8..G..!.....8A.0A.(B. B..B..
00042be0  42 0e 08 45 0b 00 00 00 44 00 00 00 94 71 00 00 70 e3 fe ff c7 01 00 00 00 42 0e 10 8e 02 42 0e  B..E....D....q..p........B....B.
00042c00  18 8d 03 42 0e 20 8c 04 44 0e 28 86 05 41 0e 30 83 06 47 0e 40 03 92 01 0a 0e 30 41 0e 28 41 0e  ...B. ..D.(..A.0..G.@.....0A.(A.
00042c20  20 42 0e 18 42 0e 10 42 0e 08 4c 0b 00 00 00 00 14 00 00 00 dc 71 00 00 08 e5 fe ff 40 00 00 00   B..B..B..L..........q......@...
00042c40  00 00 00 00 00 00 00 00 4c 00 00 00 f4 71 00 00 30 e5 fe ff 10 03 00 00 00 42 0e 10 8f 02 42 0e  ........L....q..0........B....B.
00042c60  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 80 01 03 e8 02 0a 0e  ...B. ..B.(..A.0..A.8..G........
00042c80  38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00 4c 00 00 00 44 72 00 00  8D.0A.(B. B..B..B..E....L...Dr..
00042ca0  f0 e7 fe ff 6d 04 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  ....m....B....B....B. ..B.(..A.0
00042cc0  86 06 41 0e 38 83 07 4a 0e f0 20 03 26 04 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10  ..A.8..J.. .&...8A.0A.(B. B..B..
00042ce0  42 0e 08 45 0b 00 00 00 4c 00 00 00 94 72 00 00 10 ec fe ff a9 04 00 00 00 42 0e 10 8e 02 45 0e  B..E....L....r...........B....E.
00042d00  18 8d 03 45 0e 20 8c 04 41 0e 28 86 05 41 0e 30 83 06 03 5f 04 0a 0e 28 43 0e 20 42 0e 18 42 0e  ...E. ..A.(..A.0..._...(C. B..B.
00042d20  10 42 0e 08 4a 0b 54 0a 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 1c 00 00 00 e4 72 00 00  .B..J.T..(A. B..B..B..E......r..
00042d40  70 f0 fe ff 21 00 00 00 00 41 0e 10 83 02 5b 0e 08 00 00 00 00 00 00 00 94 00 00 00 04 73 00 00  p...!....A....[..............s..
00042d60  80 f0 fe ff 55 03 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  ....U....B....B....B. ..B.(..A.0
00042d80  86 06 41 0e 38 83 07 44 0e 90 01 02 5e 0a 0e 38 47 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..D....^..8G.0A.(B. B..B..B
00042da0  0e 08 4c 0b 03 18 01 0a 0e 38 49 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4e 0b 03 46  ..L......8I.0A.(B. B..B..B..N..F
00042dc0  01 0a 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 48 0b 54 0a 0e 38 47 0e 30 41  ...8A.0A.(B. B..B..B..H.T..8G.0A
00042de0  0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 14 00 00 00 9c 73 00 00 48 f3 fe ff f7 00 00 00  .(B. B..B..B..E......s..H.......
00042e00  00 00 00 00 00 00 00 00 7c 00 00 00 b4 73 00 00 30 f4 fe ff 69 02 00 00 00 42 0e 10 8f 02 42 0e  ........|....s..0...i....B....B.
00042e20  18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 44 0e 50 03 07 02 0a 0e 38  ...B. ..E.(..A.0..D.8..D.P.....8
00042e40  41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4b 0b 48 0a 0e 38 43 0e 30 41 0e 28 42 0e  A.0A.(B. B..B..B..K.H..8C.0A.(B.
00042e60  20 42 0e 18 42 0e 10 42 0e 08 45 0b 51 0e 38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e   B..B..B..E.Q.8A.0A.(B. B..B..B.
00042e80  08 00 00 00 00 00 00 00 14 00 00 00 34 74 00 00 20 f6 fe ff 19 00 00 00 00 00 00 00 00 00 00 00  ............4t.. ...............
00042ea0  2c 00 00 00 4c 74 00 00 28 f6 fe ff 2b 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04  ,...Lt..(...+....B....D....D. ..
00042ec0  59 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00 00 3c 00 00 00 7c 74 00 00 28 f6 fe ff 9f 02 00 00  Y..A..B.........<...|t..(.......
00042ee0  00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04 41 0e 28 83 05 44 0e 60 02 c0 0a 0e 28 43 0e 20  .B....B....A. ..A.(..D.`....(C. 
00042f00  41 0e 18 42 0e 10 42 0e 08 4e 0b 00 00 00 00 00 4c 00 00 00 bc 74 00 00 88 f8 fe ff 8c 01 00 00  A..B..B..N......L....t..........
00042f20  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 44 0e 30 86 06 44 0e 38 83 07 44  .B....B....B. ..B.(..D.0..D.8..D
00042f40  0e 60 7d 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 4b 0b 00 00 00 00 00 00  .`}..8C.0A.(B. B..B..B..K.......
00042f60  4c 00 00 00 0c 75 00 00 c8 f9 fe ff 40 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  L....u......@....B....B....B. ..
00042f80  42 0e 28 8c 05 44 0e 30 86 06 41 0e 38 83 07 47 0e 60 78 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42  B.(..D.0..A.8..G.`x..8D.0A.(B. B
00042fa0  0e 18 42 0e 10 42 0e 08 47 0b 00 00 00 00 00 00 4c 00 00 00 5c 75 00 00 b8 fa fe ff e5 00 00 00  ..B..B..G.......L...\u..........
00042fc0  00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 45 0e 28 8c 05 41 0e 30 86 06 44 0e 38 83 07 44  .B....B....B. ..E.(..A.0..D.8..D
00042fe0  0e 60 77 0a 0e 38 43 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 49 0b 00 00 00 00 00 00  .`w..8C.0A.(B. B..B..B..I.......
00043000  3c 00 00 00 ac 75 00 00 58 fb fe ff 9a 00 00 00 00 42 0e 10 8d 02 45 0e 18 8c 03 41 0e 20 86 04  <....u..X........B....E....A. ..
00043020  41 0e 28 83 05 44 0e 50 73 0a 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08 48 0b 00 00 00 00 00 00  A.(..D.Ps..(C. A..B..B..H.......
00043040  3c 00 00 00 ec 75 00 00 b8 fb fe ff 8a 00 00 00 00 42 0e 10 8d 02 42 0e 18 8c 03 41 0e 20 86 04  <....u...........B....B....A. ..
00043060  44 0e 28 83 05 44 0e 50 73 0a 0e 28 43 0e 20 41 0e 18 42 0e 10 42 0e 08 48 0b 00 00 00 00 00 00  D.(..D.Ps..(C. A..B..B..H.......
00043080  34 00 00 00 2c 76 00 00 08 fc fe ff 3e 00 00 00 00 41 0e 10 86 02 44 0e 18 83 03 47 0e 20 50 0a  4...,v......>....A....D....G. P.
000430a0  0e 18 41 0e 10 41 0e 08 4a 0b 44 0e 18 4c 0e 10 41 0e 08 00 00 00 00 00 44 00 00 00 64 76 00 00  ..A..A..J.D..L..A.......D...dv..
000430c0  10 fc fe ff 7c 01 00 00 00 42 0e 10 8e 02 42 0e 18 8d 03 42 0e 20 8c 04 41 0e 28 86 05 41 0e 30  ....|....B....B....B. ..A.(..A.0
000430e0  83 06 44 0e 70 02 52 0a 0e 30 43 0e 28 41 0e 20 42 0e 18 42 0e 10 42 0e 08 48 0b 00 00 00 00 00  ..D.p.R..0C.(A. B..B..B..H......
00043100  64 00 00 00 ac 76 00 00 48 fd fe ff f0 02 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04  d....v..H........B....B....B. ..
00043120  42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 44 0e 80 01 03 8d 02 0a 0e 38 44 0e 30 41 0e 28 42  B.(..A.0..A.8..D........8D.0A.(B
00043140  0e 20 42 0e 18 42 0e 10 42 0e 08 48 0b 61 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10  . B..B..B..H.a..8D.0A.(B. B..B..
00043160  42 0e 08 45 0b 00 00 00 4c 00 00 00 14 77 00 00 d0 ff fe ff 56 03 00 00 00 42 0e 10 8f 02 42 0e  B..E....L....w......V....B....B.
00043180  18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30 86 06 41 0e 38 83 07 47 0e 80 21 03 f7 02 0a 0e  ...B. ..B.(..A.0..A.8..G..!.....
000431a0  38 41 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 45 0b 00 00 00 4c 00 00 00 64 77 00 00  8A.0A.(B. B..B..B..E....L...dw..
000431c0  00 03 ff ff c8 01 00 00 00 42 0e 10 8f 02 42 0e 18 8e 03 42 0e 20 8d 04 42 0e 28 8c 05 41 0e 30  .........B....B....B. ..B.(..A.0
000431e0  86 06 41 0e 38 83 07 47 0e 70 03 9c 01 0a 0e 38 44 0e 30 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42  ..A.8..G.p.....8D.0A.(B. B..B..B
00043200  0e 08 45 0b 00 00 00 00 1c 00 00 00 b4 77 00 00 80 04 ff ff 20 00 00 00 00 41 0e 10 83 02 4f 0a  ..E..........w...... ....A....O.
00043220  0e 08 48 0b 43 0e 08 00 14 00 00 00 d4 77 00 00 80 04 ff ff 13 00 00 00 00 00 00 00 00 00 00 00  ..H.C........w..................
00043240  2c 00 00 00 ec 77 00 00 88 04 ff ff 2b 00 00 00 00 42 0e 10 8c 02 44 0e 18 86 03 44 0e 20 83 04  ,....w......+....B....D....D. ..
00043260  59 0e 18 41 0e 10 42 0e 08 00 00 00 00 00 00 00 18 00 00 00 1c 78 00 00 88 04 ff ff 13 01 00 00  Y..A..B..............x..........
00043280  00 02 a4 0e 10 83 02 02 6e 0e 08 00                                                              ........n...
0004328c  __FRAME_END__:
0004328c                                      00 00 00 00                                                              ....
.eh_frame (PROGBITS) section ended  {0x3ba58-0x43290}

.init_array section started  {0x44bd0-0x44bd8}
00044bd0  void (* __frame_dummy_init_array_entry[0x1])() = 
00044bd0  {
00044bd0      [0x0] = frame_dummy
00044bd8  }
.init_array section ended  {0x44bd0-0x44bd8}

.fini_array section started  {0x44bd8-0x44be0}
00044bd8  void (* __do_global_dtors_aux_fini_array_entry[0x1])() = 
00044bd8  {
00044bd8      [0x0] = __do_global_dtors_aux
00044be0  }
.fini_array section ended  {0x44bd8-0x44be0}

.data.rel.ro (PROGBITS) section started  {0x44be0-0x45960}
00044be0  char const (* signkey_names)[0x8] = data_342e4 {"ssh-rsa"}
00044be8  char const (* data_44be8)[0x14] = data_342ec {"ecdsa-sha2-nistp256"}
00044bf0  char const (* data_44bf0)[0x14] = data_34300 {"ecdsa-sha2-nistp384"}
00044bf8  char const (* data_44bf8)[0x14] = data_34314 {"ecdsa-sha2-nistp521"}
00044c00  char const (* data_44c00)[0x23] = data_34328 {"sk-ecdsa-sha2-nistp256@openssh.c…"}
00044c08  char const (* data_44c08)[0xc] = data_3434b {"ssh-ed25519"}
00044c10  char const (* data_44c10)[0x1b] = data_34357 {"sk-ssh-ed25519@openssh.com"}

00044c18                                                                          00 00 00 00 00 00 00 00                          ........

00044c20  char const (* dropbear_prng_desc)[0xe] = data_3451f {"dropbear_prng"}

00044c28                          00 00 00 00 00 00 00 00                                                          ........

00044c30  void* data_44c30 = dropbear_prng_start
00044c38  void* data_44c38 = dropbear_prng_add_entropy
00044c40  void* data_44c40 = dropbear_prng_ready
00044c48  void* data_44c48 = dropbear_prng_read
00044c50  void* data_44c50 = dropbear_prng_done
00044c58  void* data_44c58 = dropbear_prng_export
00044c60  void* data_44c60 = dropbear_prng_import
00044c68  void* data_44c68 = dropbear_prng_test

00044c70                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00044c80  void* dropbear_mode_none = void_start
00044c88  void* data_44c88 = void_cipher
00044c90  void* data_44c90 = void_cipher

00044c98                                                                          00 00 00 00 00 00 00 00                          ........
00044ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00044cc0  signames:
00044cc0  06 00 00 00 00 00 00 00                                                                          ........

00044cc8  char const (* data_44cc8)[0x5] = data_34e26 {"ABRT"}

00044cd0                                                  0e 00 00 00 00 00 00 00                                          ........

00044cd8  char const (* data_44cd8)[0x5] = data_34e2b {"ALRM"}

00044ce0  08 00 00 00 00 00 00 00                                                                          ........

00044ce8  void* data_44ce8 = 0x34e30

00044cf0                                                  01 00 00 00 00 00 00 00                                          ........

00044cf8  void* data_44cf8 = 0x34e34

00044d00  04 00 00 00 00 00 00 00                                                                          ........

00044d08  char const (* data_44d08)[0x4] = &data_34e3c[0x1] {00034e3d} {"ILL"}

00044d10                                                  02 00 00 00 00 00 00 00                                          ........

00044d18  void* data_44d18 = 0x34e38

00044d20  09 00 00 00 00 00 00 00                                                                          ........

00044d28  char const (* data_44d28)[0x5] = data_34e3c {"KILL"}

00044d30                                                  0d 00 00 00 00 00 00 00                                          ........

00044d38  char const (* data_44d38)[0x5] = data_34e41 {"PIPE"}

00044d40  03 00 00 00 00 00 00 00                                                                          ........

00044d48  char const (* data_44d48)[0x5] = data_34e46 {"QUIT"}

00044d50                                                  0b 00 00 00 00 00 00 00                                          ........

00044d58  char const (* data_44d58)[0x5] = data_34e4b {"SEGV"}

00044d60  0f 00 00 00 00 00 00 00                                                                          ........

00044d68  char const (* data_44d68)[0x5] = data_34e50 {"TERM"}

00044d70                                                  0a 00 00 00 00 00 00 00                                          ........

00044d78  char const (* data_44d78)[0x5] = data_34e55 {"USR1"}

00044d80  0c 00 00 00 00 00 00 00                                                                          ........

00044d88  char const (* data_44d88)[0x5] = data_34e5a {"USR2"}

00044d90                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00044da0  void* dropbear_mode_chachapoly = dropbear_chachapoly_start

00044da8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                  ................

00044db8  void* data_44db8 = dropbear_chachapoly_crypt
00044dc0  void* data_44dc0 = dropbear_chachapoly_getlength
00044dc8  void* data_44dc8 = dropbear_chachapoly_mac
00044dd0  void* dropbear_chachapoly = dummy

00044dd8                                                                          40 00 00 00 00 00 00 00                          @.......
00044de0  08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00044e00  char const (* svrchansess)[0x8] = data_3612b {"session"}
00044e08  void* data_44e08 = newchansess
00044e10  void* data_44e10 = sesscheckclose
00044e18  void* data_44e18 = chansessionrequest
00044e20  void* data_44e20 = closechansess
00044e28  void* data_44e28 = cleanupchansess

00044e30                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00044e40  char const (* chan_svr_agent)[0x17] = data_36967 {"auth-agent@openssh.com"}

00044e48                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00044e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00044e80  char const (* svr_chan_streamlocal)[0x1f] = data_36af5 {"direct-streamlocal@openssh.com"}
00044e88  void* data_44e88 = newstreamlocal

00044e90                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00044ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00044ec0  char const (* svr_chan_tcpdirect)[0xd] = data_36b14 {"direct-tcpip"}
00044ec8  void* data_44ec8 = newtcpdirect

00044ed0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00044ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00044f00  char const (* svr_chan_tcpremote)[0x10] = data_36b21 {"forwarded-tcpip"}

00044f08                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00044f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00044f40  void* aes_desc = 0x36b7a

00044f48                          06 00 00 00 10 00 00 00 20 00 00 00 10 00 00 00 0a 00 00 00 00 00 00 00          ........ ...............

00044f60  void* data_44f60 = rijndael_setup
00044f68  void* data_44f68 = rijndael_ecb_encrypt
00044f70  void* data_44f70 = rijndael_ecb_decrypt
00044f78  void* data_44f78 = rijndael_test
00044f80  void* data_44f80 = rijndael_done
00044f88  void* data_44f88 = rijndael_keysize

00044f90                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00044fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00044fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00044fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00045000  char const (* sha256_desc)[0x7] = &data_34b03[0x17] {00034b1a} {"sha256"}

00045008                          00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00          ........ .......@.......
00045020  02 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 48 03 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................H...............
00045040  65 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  e...............................
00045060  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000450a0  09 00 00 00 00 00 00 00                                                                          ........

000450a8  void* data_450a8 = sha256_init
000450b0  void* data_450b0 = sha256_process
000450b8  void* data_450b8 = sha256_done
000450c0  void* data_450c0 = sha256_test

000450c8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

000450e0  char const (* sha512_desc)[0x7] = &data_34a4b[0x10] {00034a5b} {"sha512"}

000450e8                          05 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00          ........@...............
00045100  02 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 48 03 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................H...............
00045120  65 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  e...............................
00045140  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045180  09 00 00 00 00 00 00 00                                                                          ........

00045188  void* data_45188 = sha512_init
00045190  void* data_45190 = sha512_process
00045198  void* data_45198 = sha512_done
000451a0  void* data_451a0 = sha512_test

000451a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
000451c0  ltc_ecc_sets:
000451c0  20 00 00 00 00 00 00 00                                                                           .......

000451c8  char const (* data_451c8)[0x8] = data_36ebc {"ECC-256"}
000451d0  char const (* data_451d0)[0x41] = data_36ec4 {"FFFFFFFF000000010000000000000000…"}
000451d8  char const (* data_451d8)[0x41] = data_36f05 {"5AC635D8AA3A93E7B3EBBD55769886BC…"}
000451e0  char const (* data_451e0)[0x41] = data_36f46 {"FFFFFFFF00000000FFFFFFFFFFFFFFFF…"}
000451e8  char const (* data_451e8)[0x41] = data_36f87 {"6B17D1F2E12C4247F8BCE6E563A440F2…"}
000451f0  char const (* data_451f0)[0x41] = data_36fc8 {"4FE342E2FE1A7F9B8EE7EB4A7C0F9E16…"}

000451f8                                                                          30 00 00 00 00 00 00 00                          0.......

00045200  char const (* data_45200)[0x8] = data_37009 {"ECC-384"}
00045208  char const (* data_45208)[0x61] = data_37011 {"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF…"}
00045210  char const (* data_45210)[0x61] = data_37072 {"B3312FA7E23EE7E4988E056BE3F82D19…"}
00045218  char const (* data_45218)[0x61] = data_370d3 {"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF…"}
00045220  char const (* data_45220)[0x61] = data_37134 {"AA87CA22BE8B05378EB1C71EF320AD74…"}
00045228  char const (* data_45228)[0x61] = data_37195 {"3617DE4A96262C6F5D9E98BF9292DC29…"}

00045230                                                  42 00 00 00 00 00 00 00                                          B.......

00045238  char const (* data_45238)[0x8] = data_371f6 {"ECC-521"}
00045240  char const (* data_45240)[0x82] = data_371fe {"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF…"}
00045248  char const (* data_45248)[0x83] = data_37282 {"51953EB9618E1C9A1F929A21A0B68540…"}
00045250  char const (* data_45250)[0x84] = data_37305 {"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF…"}
00045258  char const (* data_45258)[0x83] = data_37389 {"C6858E06B70404E9CD9E3ECB662395B4…"}
00045260  char const (* data_45260)[0x84] = data_3740c {"11839296A789A3BC0045C8A5FB42C7D1…"}

00045268                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000452a0  uint64_t mp_s_rmap = 0x3a478

000452a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
000452c0  kex_sntrup761:
000452c0  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

000452d8  void* data_452d8 = sntrup761_desc
000452e0  void* data_452e0 = sha512_desc

000452e8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045300  sntrup761_desc:
00045300  86 04 00 00 e3 06 00 00 0f 04 00 00 20 00 00 00                                                  ............ ...

00045310  void* data_45310 = crypto_kem_sntrup761_keypair
00045318  void* data_45318 = crypto_kem_sntrup761_enc
00045320  void* data_45320 = crypto_kem_sntrup761_dec

00045328                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045340  kex_mlkem768:
00045340  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00045358  void* data_45358 = mlkem768_desc
00045360  void* data_45360 = sha256_desc

00045368                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045380  mlkem768_desc:
00045380  a0 04 00 00 60 09 00 00 40 04 00 00 20 00 00 00                                                  ....`...@... ...

00045390  void* data_45390 = crypto_kem_mlkem768_keypair
00045398  void* data_45398 = crypto_kem_mlkem768_enc
000453a0  void* data_453a0 = crypto_kem_mlkem768_dec

000453a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
000453c0  kex_curve25519:
000453c0  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000453e0  void* data_453e0 = sha256_desc

000453e8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045400  kex_ecdh_nistp521:
00045400  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00045418  void* data_45418 = ecc_curve_nistp521
00045420  void* data_45420 = sha512_desc

00045428                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045440  kex_ecdh_nistp384:
00045440  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00045458  void* data_45458 = ecc_curve_nistp384
00045460  void* data_45460 = sha384_desc

00045468                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00045480  kex_ecdh_nistp256:
00045480  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00045498  void* data_45498 = ecc_curve_nistp256
000454a0  void* data_454a0 = sha256_desc

000454a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
000454c0  kex_dh_group14_sha256:
000454c0  00 00 00 00 00 00 00 00                                                                          ........

000454c8  void* data_454c8 = dh_p_14

000454d0                                                  00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

000454e0  void* data_454e0 = sha256_desc

000454e8                          00 00 00 00 00 00 00 00                                                          ........

000454f0  void* dropbear_sha2_256 = sha256_desc

000454f8                                                                          20 00 00 00 00 00 00 00                           .......
00045500  20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............................

00045520  void* dropbear_mode_ctr = dropbear_big_endian_ctr_start
00045528  void* data_45528 = ctr_encrypt
00045530  void* data_45530 = ctr_decrypt

00045538                                                                          00 00 00 00 00 00 00 00                          ........
00045540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00045550  void* dropbear_aes128 = aes_desc

00045558                                                                          10 00 00 00 00 00 00 00                          ........
00045560  10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00045570  void* dropbear_aes256 = aes_desc

00045578                                                                          20 00 00 00 00 00 00 00                           .......
00045580  10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000455a0  svr_packettypes:
000455a0  5e 00 00 00 00 00 00 00                                                                          ^.......

000455a8  void* data_455a8 = recv_msg_channel_data

000455b0                                                  5d 00 00 00 00 00 00 00                                          ].......

000455b8  void* data_455b8 = recv_msg_channel_window_adjust

000455c0  32 00 00 00 00 00 00 00                                                                          2.......

000455c8  void* data_455c8 = recv_msg_userauth_request

000455d0                                                  05 00 00 00 00 00 00 00                                          ........

000455d8  void* data_455d8 = recv_msg_service_request

000455e0  14 00 00 00 00 00 00 00                                                                          ........

000455e8  void* data_455e8 = recv_msg_kexinit

000455f0                                                  1e 00 00 00 00 00 00 00                                          ........

000455f8  void* data_455f8 = recv_msg_kexdh_init

00045600  15 00 00 00 00 00 00 00                                                                          ........

00045608  void* data_45608 = recv_msg_newkeys

00045610                                                  50 00 00 00 00 00 00 00                                          P.......

00045618  void* data_45618 = recv_msg_global_request_remotetcp

00045620  62 00 00 00 00 00 00 00                                                                          b.......

00045628  void* data_45628 = recv_msg_channel_request

00045630                                                  5a 00 00 00 00 00 00 00                                          Z.......

00045638  void* data_45638 = recv_msg_channel_open

00045640  60 00 00 00 00 00 00 00                                                                          `.......

00045648  void* data_45648 = recv_msg_channel_eof

00045650                                                  61 00 00 00 00 00 00 00                                          a.......

00045658  void* data_45658 = recv_msg_channel_close

00045660  63 00 00 00 00 00 00 00                                                                          c.......

00045668  void* data_45668 = ignore_recv_response

00045670                                                  64 00 00 00 00 00 00 00                                          d.......

00045678  void* data_45678 = ignore_recv_response

00045680  52 00 00 00 00 00 00 00                                                                          R.......

00045688  void* data_45688 = ignore_recv_response

00045690                                                  51 00 00 00 00 00 00 00                                          Q.......

00045698  void* data_45698 = ignore_recv_response

000456a0  5b 00 00 00 00 00 00 00                                                                          [.......

000456a8  void* data_456a8 = recv_msg_channel_open_confirmation

000456b0                                                  5c 00 00 00 00 00 00 00                                          \.......

000456b8  void* data_456b8 = recv_msg_channel_open_failure

000456c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000456e0  char const (* sha384_desc)[0x7] = data_36bc6 {"sha384"}

000456e8                          04 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00          ........0...............
00045700  02 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 48 03 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................H...............
00045720  65 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  e...............................
00045740  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045780  09 00 00 00 00 00 00 00                                                                          ........

00045788  void* data_45788 = sha384_init
00045790  void* data_45790 = sha512_process
00045798  void* data_45798 = sha384_done
000457a0  void* data_457a0 = sha384_test

000457a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

000457c0  char const (* ltm_desc)[0xb] = data_36cba {"LibTomMath"}

000457c8                          3c 00 00 00 00 00 00 00                                                          <.......

000457d0  void* data_457d0 = init
000457d8  void* data_457d8 = init_copy
000457e0  void* data_457e0 = deinit
000457e8  void* data_457e8 = neg
000457f0  void* data_457f0 = copy
000457f8  void* data_457f8 = set_int
00045800  void* data_45800 = get_int
00045808  void* data_45808 = get_digit
00045810  void* data_45810 = get_digit_count
00045818  void* data_45818 = compare
00045820  void* data_45820 = compare_d
00045828  void* data_45828 = count_bits
00045830  void* data_45830 = count_lsb_bits
00045838  void* data_45838 = twoexpt
00045840  void* data_45840 = read_radix
00045848  void* data_45848 = write_radix
00045850  void* data_45850 = unsigned_size
00045858  void* data_45858 = unsigned_write
00045860  void* data_45860 = unsigned_read
00045868  void* data_45868 = add
00045870  void* data_45870 = addi
00045878  void* data_45878 = sub
00045880  void* data_45880 = subi
00045888  void* data_45888 = mul
00045890  void* data_45890 = muli
00045898  void* data_45898 = sqr
000458a0  void* data_458a0 = divide
000458a8  void* data_458a8 = div_2
000458b0  void* data_458b0 = modi
000458b8  void* data_458b8 = gcd
000458c0  void* data_458c0 = lcm
000458c8  void* data_458c8 = mulmod
000458d0  void* data_458d0 = sqrmod
000458d8  void* data_458d8 = invmod
000458e0  void* data_458e0 = montgomery_setup
000458e8  void* data_458e8 = montgomery_normalization
000458f0  void* data_458f0 = montgomery_reduce
000458f8  void* data_458f8 = montgomery_deinit
00045900  void* data_45900 = exptmod
00045908  void* data_45908 = isprime
00045910  void* data_45910 = ltc_ecc_mulmod
00045918  void* data_45918 = ltc_ecc_projective_add_point
00045920  void* data_45920 = ltc_ecc_projective_dbl_point
00045928  void* data_45928 = ltc_ecc_map
00045930  void* data_45930 = ltc_ecc_mul2add

00045938                                                                          00 00 00 00 00 00 00 00                          ........
00045940  00 00 00 00 00 00 00 00                                                                          ........

00045948  void* data_45948 = addmod
00045950  void* data_45950 = submod
00045958  void* data_45958 = set_rand
.data.rel.ro (PROGBITS) section ended  {0x44be0-0x45960}

.dynamic (DYNAMIC) section started  {0x45960-0x45b80}
00045960  struct Elf64_Dyn _DYNAMIC[0x1e] = 
00045960  {
00045960      [0x00] = 
00045960      {
00045960          enum e_dyn_tag d_tag = DT_NEEDED
00045968          uint64_t d_val = 0x4e0
00045970      }
00045970      [0x01] = 
00045970      {
00045970          enum e_dyn_tag d_tag = DT_NEEDED
00045978          uint64_t d_val = 0x4ea
00045980      }
00045980      [0x02] = 
00045980      {
00045980          enum e_dyn_tag d_tag = DT_NEEDED
00045988          uint64_t d_val = 0x4f8
00045990      }
00045990      [0x03] = 
00045990      {
00045990          enum e_dyn_tag d_tag = DT_INIT
00045998          uint64_t d_val = 0x5000
000459a0      }
000459a0      [0x04] = 
000459a0      {
000459a0          enum e_dyn_tag d_tag = DT_FINI
000459a8          uint64_t d_val = 0x33814
000459b0      }
000459b0      [0x05] = 
000459b0      {
000459b0          enum e_dyn_tag d_tag = DT_INIT_ARRAY
000459b8          uint64_t d_val = 0x44bd0
000459c0      }
000459c0      [0x06] = 
000459c0      {
000459c0          enum e_dyn_tag d_tag = DT_INIT_ARRAYSZ
000459c8          uint64_t d_val = 0x8
000459d0      }
000459d0      [0x07] = 
000459d0      {
000459d0          enum e_dyn_tag d_tag = DT_FINI_ARRAY
000459d8          uint64_t d_val = 0x44bd8
000459e0      }
000459e0      [0x08] = 
000459e0      {
000459e0          enum e_dyn_tag d_tag = DT_FINI_ARRAYSZ
000459e8          uint64_t d_val = 0x8
000459f0      }
000459f0      [0x09] = 
000459f0      {
000459f0          enum e_dyn_tag d_tag = DT_HASH
000459f8          uint64_t d_val = 0x3c0
00045a00      }
00045a00      [0x0a] = 
00045a00      {
00045a00          enum e_dyn_tag d_tag = DT_GNU_HASH
00045a08          uint64_t d_val = 0x810
00045a10      }
00045a10      [0x0b] = 
00045a10      {
00045a10          enum e_dyn_tag d_tag = DT_STRTAB
00045a18          uint64_t d_val = 0x15b0
00045a20      }
00045a20      [0x0c] = 
00045a20      {
00045a20          enum e_dyn_tag d_tag = DT_SYMTAB
00045a28          uint64_t d_val = 0x848
00045a30      }
00045a30      [0x0d] = 
00045a30      {
00045a30          enum e_dyn_tag d_tag = DT_STRSZ
00045a38          uint64_t d_val = 0x586
00045a40      }
00045a40      [0x0e] = 
00045a40      {
00045a40          enum e_dyn_tag d_tag = DT_SYMENT
00045a48          uint64_t d_val = 0x18
00045a50      }
00045a50      [0x0f] = 
00045a50      {
00045a50          enum e_dyn_tag d_tag = DT_DEBUG
00045a58          uint64_t d_val = 0x0
00045a60      }
00045a60      [0x10] = 
00045a60      {
00045a60          enum e_dyn_tag d_tag = DT_PLTGOT
00045a68          uint64_t d_val = 0x45b80
00045a70      }
00045a70      [0x11] = 
00045a70      {
00045a70          enum e_dyn_tag d_tag = DT_PLTRELSZ
00045a78          uint64_t d_val = 0xc78
00045a80      }
00045a80      [0x12] = 
00045a80      {
00045a80          enum e_dyn_tag d_tag = DT_PLTREL
00045a88          uint64_t d_val = 0x7
00045a90      }
00045a90      [0x13] = 
00045a90      {
00045a90          enum e_dyn_tag d_tag = DT_JMPREL
00045a98          uint64_t d_val = 0x3508
00045aa0      }
00045aa0      [0x14] = 
00045aa0      {
00045aa0          enum e_dyn_tag d_tag = DT_RELA
00045aa8          uint64_t d_val = 0x1d38
00045ab0      }
00045ab0      [0x15] = 
00045ab0      {
00045ab0          enum e_dyn_tag d_tag = DT_RELASZ
00045ab8          uint64_t d_val = 0x17d0
00045ac0      }
00045ac0      [0x16] = 
00045ac0      {
00045ac0          enum e_dyn_tag d_tag = DT_RELAENT
00045ac8          uint64_t d_val = 0x18
00045ad0      }
00045ad0      [0x17] = 
00045ad0      {
00045ad0          enum e_dyn_tag d_tag = DT_FLAGS
00045ad8          uint64_t d_val = 0x8
00045ae0      }
00045ae0      [0x18] = 
00045ae0      {
00045ae0          enum e_dyn_tag d_tag = DT_FLAGS_1
00045ae8          uint64_t d_val = 0x8000001
00045af0      }
00045af0      [0x19] = 
00045af0      {
00045af0          enum e_dyn_tag d_tag = DT_VERNEED
00045af8          uint64_t d_val = 0x1c58
00045b00      }
00045b00      [0x1a] = 
00045b00      {
00045b00          enum e_dyn_tag d_tag = DT_VERNEEDNUM
00045b08          uint64_t d_val = 0x2
00045b10      }
00045b10      [0x1b] = 
00045b10      {
00045b10          enum e_dyn_tag d_tag = DT_VERSYM
00045b18          uint64_t d_val = 0x1b36
00045b20      }
00045b20      [0x1c] = 
00045b20      {
00045b20          enum e_dyn_tag d_tag = DT_RELACOUNT
00045b28          uint64_t d_val = 0xf6
00045b30      }
00045b30      [0x1d] = 
00045b30      {
00045b30          enum e_dyn_tag d_tag = DT_NULL
00045b38          uint64_t d_val = 0x0
00045b40      }
00045b40  }

00045b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00045b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
.dynamic (DYNAMIC) section ended  {0x45960-0x45b80}

.got (PROGBITS) section started  {0x45b80-0x45ff0}
00045b80  _GLOBAL_OFFSET_TABLE_:
00045b80  60 59 04 00 00 00 00 00                                                                          `Y......

00045b88  int64_t data_45b88 = 0x0
00045b90  int64_t data_45b90 = 0x0
00045b98  char* (* const getenv)(char const* name) = getenv
00045ba0  int64_t (* const __isoc23_strtoul)() = __isoc23_strtoul
00045ba8  int32_t (* const __snprintf_chk)(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, ...) = __snprintf_chk
00045bb0  void (* const free)(void* ptr) = free
00045bb8  struct tm* (* const localtime)(time_t* t) = localtime
00045bc0  void (* const abort)() __noreturn = abort
00045bc8  int32_t* (* const __errno_location)() = __errno_location
00045bd0  int64_t (* const unlink)() = unlink
00045bd8  char* (* const strncpy)(char*, char const*, uint64_t) = strncpy
00045be0  int32_t (* const strncmp)(char const*, char const*, uint64_t) = strncmp
00045be8  void (* const _exit)(int32_t status) __noreturn = _exit
00045bf0  int64_t (* const logout)() = logout
00045bf8  int64_t (* const inflate)() = inflate
00045c00  int64_t (* const mkdir)() = mkdir
00045c08  ssize_t (* const writev)(int32_t fd, struct iovec* iov, int32_t iovcnt) = writev
00045c10  int32_t (* const sigaction)(int32_t sig, struct sigaction* act, struct sigaction* oact) = sigaction
00045c18  int64_t (* const logwtmp)() = logwtmp
00045c20  int64_t (* const setsockopt)() = setsockopt
00045c28  int32_t (* const fcntl)(int32_t fd, int32_t cmd, ...) = fcntl
00045c30  int32_t (* const clock_gettime)(clockid_t clock_id, struct timespec* tp) = clock_gettime
00045c38  int64_t (* const getpid)() = getpid
00045c40  int64_t (* const getpeername)() = getpeername
00045c48  clock_t (* const clock)() = clock
00045c50  int32_t (* const fclose)(FILE* fp) = fclose
00045c58  struct passwd* (* const getpwuid)(uid_t uid) = getpwuid
00045c60  int32_t (* const clearenv)() = clearenv
00045c68  int64_t (* const shutdown)() = shutdown
00045c70  int64_t (* const rmdir)() = rmdir
00045c78  uint64_t (* const strlen)(char const*) = strlen
00045c80  int64_t (* const chdir)() = chdir
00045c88  void (* const __stack_chk_fail)() __noreturn = __stack_chk_fail
00045c90  int64_t (* const getuid)() = getuid
00045c98  int64_t (* const dup2)() = dup2
00045ca0  char* (* const strchr)(char const*, int32_t) = strchr
00045ca8  int64_t (* const __fdelt_chk)(int64_t d) = __fdelt_chk
00045cb0  int32_t (* const nanosleep)(struct timespec* requested_time, struct timespec* remaining) = nanosleep
00045cb8  char const* (* const gai_strerror)(int32_t code) = gai_strerror
00045cc0  char* (* const strrchr)(char const*, int32_t) = strrchr
00045cc8  char* (* const dirname)(char* path) = dirname
00045cd0  off64_t (* const lseek)(int32_t fd, int64_t __arg2, int32_t whence) = lseek
00045cd8  int32_t (* const gettimeofday)(struct timeval*, void*) = gettimeofday
00045ce0  void (* const __assert_fail)(char const* assertion, char const* file, uint32_t line, char const* function) __noreturn = __assert_fail
00045ce8  int32_t (* const fputs)(char const* str, FILE* fp) = fputs
00045cf0  int64_t (* const deflate)() = deflate
00045cf8  void* (* const memset)(void*, int32_t, uint64_t) = memset
00045d00  int64_t (* const geteuid)() = geteuid
00045d08  void (* const setusershell)() = setusershell
00045d10  int64_t (* const ioctl)() = ioctl
00045d18  int32_t (* const fgetc)(FILE* fp) = fgetc
00045d20  int32_t (* const close)(int32_t fd) = close
00045d28  int64_t (* const pipe)() = pipe
00045d30  int32_t (* const getnameinfo)(struct sockaddr* sa, socklen_t addrlen, char* host, socklen_t hostlen, char* serv, socklen_t servlen, int32_t flags) = getnameinfo
00045d38  int64_t (* const setsid)() = setsid
00045d40  char* (* const getusershell)() = getusershell
00045d48  int64_t (* const deflateInit2_)() = deflateInit2_
00045d50  void* (* const memchr)(void const*, int32_t, uint64_t) = memchr
00045d58  ssize_t (* const read)(int32_t fd, void* buf, uint64_t nbytes) = read
00045d60  int32_t (* const memcmp)(void const*, void const*, uint64_t) = memcmp
00045d68  int64_t (* const getsockopt)() = getsockopt
00045d70  int64_t (* const login)() = login
00045d78  void* (* const calloc)(size_t nmemb, size_t size) = calloc
00045d80  int32_t (* const putenv)(char* string) = putenv
00045d88  int32_t (* const strcmp)(char const*, char const*) = strcmp
00045d90  __sighandler_t (* const signal)(int32_t sig, __sighandler_t handler) = signal
00045d98  struct passwd* (* const getpwnam)(char const* name) = getpwnam
00045da0  int32_t (* const fexecve)(int32_t fd, char* const* argv, char* const* envp) = fexecve
00045da8  void* (* const __memcpy_chk)(void*, void const*, uint64_t, uint64_t) = __memcpy_chk
00045db0  int64_t (* const syscall)() = syscall
00045db8  int32_t (* const sigemptyset)(sigset_t* set) = sigemptyset
00045dc0  int64_t (* const stat)() = stat
00045dc8  void* (* const memcpy)(void*, void const*, uint64_t) = memcpy
00045dd0  struct group* (* const getgrnam)(char const* name) = getgrnam
00045dd8  int32_t (* const prctl)(int32_t option, ...) = prctl
00045de0  int64_t (* const inflateEnd)() = inflateEnd
00045de8  int64_t (* const kill)() = kill
00045df0  char* (* const __xpg_basename)(char* filename) = __xpg_basename
00045df8  time_t (* const time)(time_t*) = time
00045e00  int64_t (* const strlcat)() = strlcat
00045e08  int64_t (* const getgid)() = getgid
00045e10  int32_t (* const select)(int32_t nfds, struct fd_set* readfds, struct fd_set* writefds, struct fd_set* exceptfds, struct timeval* timeout) = select
00045e18  void* (* const malloc)(size_t n) = malloc
00045e20  int32_t (* const strncasecmp)(char const*, char const*, uint64_t) = strncasecmp
00045e28  int64_t (* const openpty)() = openpty
00045e30  int64_t (* const listen)() = listen
00045e38  int32_t (* const daemon)(int32_t nochdir, int32_t noclose) = daemon
00045e40  int64_t (* const strlcpy)() = strlcpy
00045e48  int64_t (* const deflateEnd)() = deflateEnd
00045e50  int32_t (* const __vsnprintf_chk)(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, struct __va_list_tag* ap) = __vsnprintf_chk
00045e58  int32_t (* const setrlimit)(enum __rlimit_resource resource, struct rlimit64* rlimits) = setrlimit
00045e60  int64_t (* const chown)() = chown
00045e68  char* (* const ttyname)(int32_t fd) = ttyname
00045e70  void* (* const realloc)(void* ptr, size_t n) = realloc
00045e78  int64_t (* const inflateInit_)() = inflateInit_
00045e80  int64_t (* const chmod)() = chmod
00045e88  int64_t (* const bind)() = bind
00045e90  uint64_t (* const strftime)(char* s, uint64_t maxsize, char const* format, struct tm* tp) = strftime
00045e98  void* (* const memmove)(void*, void const*, uint64_t) = memmove
00045ea0  void (* const __syslog_chk)(int32_t pri, int32_t flag, char const* fmt, ...) = __syslog_chk
00045ea8  int32_t (* const fsync)(int32_t fd) = fsync
00045eb0  int32_t (* const setgid)(gid_t gid) = setgid
00045eb8  int32_t (* const getgrouplist)(char const* user, gid_t group, gid_t* groups, int32_t* ngroups) = getgrouplist
00045ec0  pid_t (* const waitpid)(pid_t pid, int32_t* stat_loc, int32_t options) = waitpid
00045ec8  int32_t (* const tcgetattr)(int32_t fd, struct termios* termios_p) = tcgetattr
00045ed0  int32_t (* const tcsetattr)(int32_t fd, int32_t optional_actions, struct termios* termios_p) = tcsetattr
00045ed8  void (* const __explicit_bzero_chk)(void* dst, uint64_t len, uint64_t dstlen) = __explicit_bzero_chk
00045ee0  int64_t (* const atol)(char const* nptr) = atol
00045ee8  struct spwd* (* const getspnam)(char const* name) = getspnam
00045ef0  int32_t (* const open)(char const* file, int32_t oflag, ...) = open
00045ef8  FILE* (* const fopen)(char const* filename, char const* mode) = fopen
00045f00  int32_t (* const accept)(int32_t fd, union __SOCKADDR_ARG addr, socklen_t* len) = accept
00045f08  int64_t (* const getsockname)() = getsockname
00045f10  int32_t (* const atoi)(char const* nptr) = atoi
00045f18  void (* const openlog)(char const* ident, int32_t logstat, int32_t logfac) = openlog
00045f20  int64_t (* const link)() = link
00045f28  void (* const exit)(int32_t status) __noreturn = exit
00045f30  int32_t (* const connect)(int32_t fd, union __CONST_SOCKADDR_ARG addr, socklen_t len) = connect
00045f38  uint64_t (* const fwrite)(void const* buf, uint64_t size, uint64_t count, FILE* fp) = fwrite
00045f40  int32_t (* const __fprintf_chk)(FILE* fp, int32_t flag, char const* format, ...) = __fprintf_chk
00045f48  int32_t (* const getrlimit)(enum __rlimit_resource resource, struct rlimit64* rlimits) = getrlimit
00045f50  ssize_t (* const getrandom)(void* buffer, uint64_t length, uint32_t flags) = getrandom
00045f58  int32_t (* const setuid)(uid_t uid) = setuid
00045f60  int32_t (* const getaddrinfo)(char const* name, char const* service, struct addrinfo* hints, struct addrinfo** pai) = getaddrinfo
00045f68  char* (* const strerror)(int32_t errnum) = strerror
00045f70  int32_t (* const initgroups)(char const* user, gid_t group) = initgroups
00045f78  int64_t (* const crypt)() = crypt
00045f80  void (* const endusershell)() = endusershell
00045f88  int32_t (* const execv)(char const* path, char* const* argv) = execv
00045f90  int32_t (* const setegid)(gid_t gid, gid_t gid) = setegid
00045f98  pid_t (* const fork)() = fork
00045fa0  uint16_t** (* const __ctype_b_loc)() = __ctype_b_loc
00045fa8  void (* const freeaddrinfo)(struct addrinfo* ai) = freeaddrinfo
00045fb0  int64_t (* const socket)() = socket
00045fb8  int32_t (* const seteuid)(uid_t uid, uid_t uid) = seteuid
00045fc0  void (* const __libc_start_main)(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn = __libc_start_main
00045fc8  int64_t (* const _ITM_deregisterTMCloneTable)() = _ITM_deregisterTMCloneTable
00045fd0  ssize_t (* const write)(int32_t fd, void const* buf, uint64_t nbytes) = write
00045fd8  int64_t (* const __gmon_start__)() = __gmon_start__
00045fe0  int64_t (* const _ITM_registerTMCloneTable)() = _ITM_registerTMCloneTable
00045fe8  void (* const __cxa_finalize)(void* d) = __cxa_finalize
.got (PROGBITS) section ended  {0x45b80-0x45ff0}

00045ff0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

.data (PROGBITS) section started  {0x46000-0x466f8}
00046000  __data_start:
00046000  00 00 00 00 00 00 00 00                                                                          ........

00046008  void* __dso_handle = __dso_handle
00046010  uint64_t _dropbear_log = 0x5aa0
00046018  uint64_t _dropbear_exit = 0x5a39
00046020  void* dropbear_ecc_curves = ecc_curve_nistp256
00046028  void* data_46028 = ecc_curve_nistp384
00046030  void* data_46030 = ecc_curve_nistp521

00046038                                                                          00 00 00 00 00 00 00 00                          ........
00046040  ecc_curve_nistp521:
00046040  42 00 00 00 00 00 00 00                                                                          B.......

00046048  int64_t data_46048 = 0x0
00046050  void* data_46050 = sha512_desc
00046058  char const (* data_46058)[0x9] = &data_34314[0xb] {0003431f} {"nistp521"}

00046060  ecc_curve_nistp384:
00046060  30 00 00 00 00 00 00 00                                                                          0.......

00046068  int64_t data_46068 = 0x0
00046070  void* data_46070 = sha384_desc
00046078  char const (* data_46078)[0x9] = &data_34300[0xb] {0003430b} {"nistp384"}

00046080  ecc_curve_nistp256:
00046080  20 00 00 00 00 00 00 00                                                                           .......

00046088  int64_t data_46088 = 0x0
00046090  void* data_46090 = sha256_desc
00046098  char const (* data_46098)[0x9] = &data_342ec[0xb] {000342f7} {"nistp256"}
000460a0  uint32_t dropbear_ltc_prng = 0xffffffff

000460a4              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................

000460c0  char const (* sshkex)[0x17] = data_34a4b {"sntrup761x25519-sha512"}

000460c8                          00 00 00 00 00 00 00 00                                                          ........

000460d0  void* data_460d0 = kex_sntrup761

000460d8                                                                          01 00 00 00 00 00 00 00                          ........
000460e0  00 00 00 00 00 00 00 00                                                                          ........

000460e8  char const (* data_460e8)[0x23] = data_34a62 {"sntrup761x25519-sha512@openssh.c…"}

000460f0                                                  00 00 00 00 00 00 00 00                                          ........

000460f8  void* data_460f8 = kex_sntrup761

00046100  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046110  char const (* data_46110)[0x16] = data_34a85 {"mlkem768x25519-sha256"}

00046118                                                                          00 00 00 00 00 00 00 00                          ........

00046120  void* data_46120 = kex_mlkem768

00046128                          01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                  ................

00046138  char const (* data_46138)[0x12] = data_34a9b {"curve25519-sha256"}

00046140  00 00 00 00 00 00 00 00                                                                          ........

00046148  void* data_46148 = kex_curve25519

00046150                                                  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00046160  char const (* data_46160)[0x1d] = data_34aad {"curve25519-sha256@libssh.org"}

00046168                          00 00 00 00 00 00 00 00                                                          ........

00046170  void* data_46170 = kex_curve25519

00046178                                                                          01 00 00 00 00 00 00 00                          ........
00046180  00 00 00 00 00 00 00 00                                                                          ........

00046188  char const (* data_46188)[0x13] = data_34aca {"ecdh-sha2-nistp521"}

00046190                                                  00 00 00 00 00 00 00 00                                          ........

00046198  void* data_46198 = kex_ecdh_nistp521

000461a0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

000461b0  char const (* data_461b0)[0x13] = data_34add {"ecdh-sha2-nistp384"}

000461b8                                                                          00 00 00 00 00 00 00 00                          ........

000461c0  void* data_461c0 = kex_ecdh_nistp384

000461c8                          01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                  ................

000461d8  char const (* data_461d8)[0x13] = data_34af0 {"ecdh-sha2-nistp256"}

000461e0  00 00 00 00 00 00 00 00                                                                          ........

000461e8  void* data_461e8 = kex_ecdh_nistp256

000461f0                                                  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00046200  char const (* data_46200)[0x1e] = data_34b03 {"diffie-hellman-group14-sha256"}

00046208                          00 00 00 00 00 00 00 00                                                          ........

00046210  void* data_46210 = kex_dh_group14_sha256

00046218                                                                          01 00 00 00 00 00 00 00                          ........
00046220  00 00 00 00 00 00 00 00                                                                          ........

00046228  char const (* data_46228)[0x1a] = data_34b21 {"kexguess2@matt.ucc.asn.au"}

00046230                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00046240  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046250  char const (* data_46250)[0xb] = data_34b3b {"ext-info-c"}

00046258                                                                          00 00 00 00 00 00 00 00                          ........
00046260  00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00046278  char const (* data_46278)[0x1d] = data_34b46 {"kex-strict-c-v00@openssh.com"}

00046280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000462a0  char const (* data_462a0)[0x1d] = data_34b63 {"kex-strict-s-v00@openssh.com"}

000462a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
000462c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000462e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046300  char const (* sigalgs)[0xc] = data_3434b {"ssh-ed25519"}

00046308                          05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
00046320  00 00 00 00 00 00 00 00                                                                          ........

00046328  char const (* data_46328)[0x1b] = data_34357 {"sk-ssh-ed25519@openssh.com"}

00046330                                                  06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00046340  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046350  char const (* data_46350)[0x14] = data_342ec {"ecdsa-sha2-nistp256"}

00046358                                                                          01 00 00 00 00 00 00 00                          ........
00046360  00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00046378  char const (* data_46378)[0x14] = data_34300 {"ecdsa-sha2-nistp384"}

00046380  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000463a0  char const (* data_463a0)[0x14] = data_34314 {"ecdsa-sha2-nistp521"}

000463a8                          03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
000463c0  00 00 00 00 00 00 00 00                                                                          ........

000463c8  char const (* data_463c8)[0x23] = data_34328 {"sk-ecdsa-sha2-nistp256@openssh.c…"}

000463d0                                                  04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
000463e0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

000463f0  char const (* data_463f0)[0xd] = data_341bb {"rsa-sha2-256"}

000463f8                                                                          65 00 00 00 00 00 00 00                          e.......
00046400  00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046440  char const (* ssh_nocompress)[0x5] = data_34b80 {"none"}

00046448                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
00046460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000464a0  char const (* ssh_delaycompress)[0x11] = data_34b85 {"zlib@openssh.com"}

000464a8                          02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
000464c0  00 00 00 00 00 00 00 00                                                                          ........

000464c8  char const (* data_464c8)[0x5] = data_34b80 {"none"}

000464d0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
000464e0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046520  char const (* ssh_compress)[0x11] = data_34b85 {"zlib@openssh.com"}

00046528                          02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00          ........................
00046540  00 00 00 00 00 00 00 00                                                                          ........

00046548  char const (* data_46548)[0x5] = data_34b96 {"zlib"}

00046550                                                  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00046560  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046570  char const (* data_46570)[0x5] = data_34b80 {"none"}

00046578                                                                          00 00 00 00 00 00 00 00                          ........
00046580  00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000465a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000465c0  char const (* sshhashes)[0xe] = data_34b9b {"hmac-sha2-256"}

000465c8                          00 00 00 00 00 00 00 00                                                          ........

000465d0  void* data_465d0 = dropbear_sha2_256

000465d8                                                                          01 00 00 00 00 00 00 00                          ........
000465e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046620  char const (* sshciphers)[0x1e] = data_34ba9 {"chacha20-poly1305@openssh.com"}

00046628                          00 00 00 00 00 00 00 00                                                          ........

00046630  void* data_46630 = dropbear_chachapoly

00046638                                                                          01 00 00 00 00 00 00 00                          ........

00046640  void* data_46640 = dropbear_mode_chachapoly
00046648  char const (* data_46648)[0xb] = data_34bc7 {"aes256-ctr"}

00046650                                                  00 00 00 00 00 00 00 00                                          ........

00046658  void* data_46658 = dropbear_aes256

00046660  01 00 00 00 00 00 00 00                                                                          ........

00046668  void* data_46668 = dropbear_mode_ctr
00046670  char const (* data_46670)[0xb] = data_34bd2 {"aes128-ctr"}

00046678                                                                          00 00 00 00 00 00 00 00                          ........

00046680  void* data_46680 = dropbear_aes128

00046688                          01 00 00 00 00 00 00 00                                                          ........

00046690  void* data_46690 = dropbear_mode_ctr

00046698                                                                          00 00 00 00 00 00 00 00                          ........
000466a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000466c0  void* svr_chantypes = svrchansess
000466c8  void* data_466c8 = svr_chan_tcpdirect
000466d0  void* data_466d0 = svr_chan_streamlocal

000466d8                                                                          00 00 00 00 00 00 00 00                          ........

000466e0  uint64_t s_mp_prime_tab = 0x39b00
000466e8  uint32_t TOOM_SQR_CUTOFF = 0x190
000466ec  uint32_t TOOM_MUL_CUTOFF = 0x15e
000466f0  uint32_t KARATSUBA_SQR_CUTOFF = 0x78
000466f4  uint32_t KARATSUBA_MUL_CUTOFF = 0x50
.data (PROGBITS) section ended  {0x46000-0x466f8}

000466f8  __TMC_END__:
000466f8                                                                          00 00 00 00 00 00 00 00                          ........

.bss (NOBITS) section started  {0x46700-0x476b8}
00046700  uint64_t* const __bss_start = nullptr

00046708                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

00046720  uint64_t* const stderr = nullptr
00046728  uint8_t completed.0 = 0x0

00046729                             00 00 00                                                                       ...

0004672c  uint32_t linux_monotonic_failed.0 = 0x0

00046730                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

00046740  uint32_t donerandinit = 0x0

00046744              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
00046760  hashpool:
00046760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046780  uint32_t counter = 0x0

00046784              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................

000467a0  char ses = 0x0

000467a1     00 00 00 00 00 00 00                                                                           .......

000467a8  int64_t data_467a8 = 0x0
000467b0  int32_t data_467b0 = 0x0
000467b4  int32_t data_467b4 = 0x0
000467b8  int64_t data_467b8 = 0x0
000467c0  int32_t data_467c0 = 0x0

000467c4              00 00 00 00                                                                              ....

000467c8  int64_t data_467c8 = 0x0

000467d0  data_467d0:
000467d0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
000467e0  00 00 00 00 00 00 00 00                                                                          ........

000467e8  int32_t data_467e8 = 0x0

000467ec                                      00 00 00 00                                                              ....

000467f0  int64_t data_467f0 = 0x0
000467f8  int64_t data_467f8 = 0x0
00046800  int32_t data_46800 = 0x0

00046804              00 00 00 00                                                                              ....

00046808  int32_t data_46808 = 0x0

0004680c                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

00046818  char data_46818 = 0x0
00046819  char data_46819 = 0x0

0004681a                                                                                00 00 00 00 00 00                            ......

00046820  int32_t data_46820 = 0x0
00046824  int32_t data_46824 = 0x0
00046828  int64_t data_46828 = 0x0

00046830                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00046840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046850  int64_t data_46850 = 0x0
00046858  char data_46858 = 0x0

00046859                                                                             00 00 00                                       ...

0004685c  int32_t data_4685c = 0x0
00046860  int32_t data_46860 = 0x0
00046864  char data_46864 = 0x0

00046865                 00 00 00                                                                               ...

00046868  int32_t data_46868 = 0x0

0004686c                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

00046878  int64_t data_46878 = 0x0
00046880  int64_t data_46880 = 0x0
00046888  int64_t data_46888 = 0x0

00046890                                                  00 00 00 00 00 00 00 00                                          ........

00046898  int64_t data_46898 = 0x0

000468a0  00 00 00 00 00 00 00 00                                                                          ........

000468a8  int64_t data_468a8 = 0x0
000468b0  int64_t data_468b0 = 0x0
000468b8  int64_t data_468b8 = 0x0
000468c0  int64_t data_468c0 = 0x0
000468c8  int64_t data_468c8 = 0x0
000468d0  int32_t data_468d0 = 0x0

000468d4                                                              00 00 00 00                                              ....

000468d8  int64_t data_468d8 = 0x0
000468e0  int64_t data_468e0 = 0x0
000468e8  int64_t data_468e8 = 0x0
000468f0  int64_t data_468f0 = 0x0
000468f8  int64_t data_468f8 = 0x0
00046900  int64_t data_46900 = 0x0
00046908  char data_46908 = 0x0

00046909                             00 00 00                                                                       ...

0004690c  int32_t data_4690c = 0x0
00046910  int32_t data_46910 = 0x0

00046914                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
00046920  data_46920:
00046920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00046930  int32_t data_46930 = 0x0
00046934  int32_t data_46934 = 0x0
00046938  int64_t data_46938 = 0x0
00046940  int64_t data_46940 = 0x0
00046948  int64_t data_46948 = 0x0
00046950  int64_t data_46950 = 0x0
00046958  int64_t data_46958 = 0x0
00046960  int64_t data_46960 = 0x0
00046968  int64_t data_46968 = 0x0
00046970  int32_t data_46970 = 0x0
00046974  int32_t data_46974 = 0x0
00046978  int64_t data_46978 = 0x0
00046980  int32_t data_46980 = 0x0

00046984              00 00 00 00                                                                              ....

00046988  int64_t data_46988 = 0x0
00046990  int32_t data_46990 = 0x0
00046994  int32_t data_46994 = 0x0
00046998  int32_t data_46998 = 0x0
0004699c  int32_t data_4699c = 0x0
000469a0  uint64_t crypto_int64_optblocker = 0x0
000469a8  uint32_t crypto_int32_optblocker = 0x0
000469ac  uint16_t crypto_int16_optblocker = 0x0

000469ae                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                ..................

000469c0  int32_t opts = 0x0
000469c4  int32_t data_469c4 = 0x0
000469c8  int32_t data_469c8 = 0x0

000469cc                                      00 00 00 00                                                              ....

000469d0  int64_t data_469d0 = 0x0
000469d8  int64_t data_469d8 = 0x0
000469e0  int32_t data_469e0 = 0x0
000469e4  int32_t data_469e4 = 0x0
000469e8  int64_t data_469e8 = 0x0
000469f0  int64_t data_469f0 = 0x0

000469f8                                                                          00 00 00 00 00 00 00 00                          ........

00046a00  int32_t svr_ses = 0x0

00046a04              00 00 00 00                                                                              ....

00046a08  int64_t data_46a08 = 0x0
00046a10  int32_t data_46a10 = 0x0
00046a14  int32_t data_46a14 = 0x0

00046a18                                                                          00 00 00 00 00 00 00 00                          ........
00046a20  00 00 00 00 00 00 00 00                                                                          ........

00046a28  int64_t data_46a28 = 0x0
00046a30  int64_t data_46a30 = 0x0

00046a38                                                                          00 00 00 00 00 00 00 00                          ........

00046a40  int64_t svr_opts = 0x0
00046a48  int32_t data_46a48 = 0x0

00046a4c                                      00 00 00 00                                                              ....

00046a50  int64_t data_46a50 = 0x0

00046a58                                                                          00 00 00 00 00 00 00 00                          ........
00046a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046aa0  int32_t data_46aa0 = 0x0

00046aa4              00 00 00 00                                                                              ....

00046aa8  int64_t data_46aa8 = 0x0

00046ab0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
00046ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

00046af8  int32_t data_46af8 = 0x0
00046afc  int32_t data_46afc = 0x0
00046b00  int32_t data_46b00 = 0x0
00046b04  int32_t data_46b04 = 0x0
00046b08  int64_t data_46b08 = 0x0
00046b10  int32_t data_46b10 = 0x0
00046b14  int32_t data_46b14 = 0x0
00046b18  int32_t data_46b18 = 0x0
00046b1c  int32_t data_46b1c = 0x0
00046b20  int64_t data_46b20 = 0x0
00046b28  int32_t data_46b28 = 0x0
00046b2c  int32_t data_46b2c = 0x0
00046b30  int64_t data_46b30 = 0x0
00046b38  int32_t data_46b38 = 0x0

00046b3c                                                                                      00 00 00 00                              ....
00046b40  data_46b40:
00046b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046b60  int32_t data_46b60 = 0x0

00046b64              00 00 00 00                                                                              ....

00046b68  int64_t data_46b68 = 0x0
00046b70  int64_t data_46b70 = 0x0
00046b78  int64_t data_46b78 = 0x0
00046b80  int64_t data_46b80 = 0x0
00046b88  int64_t data_46b88 = 0x0
00046b90  int32_t data_46b90 = 0x0

00046b94                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
00046ba0  hash_descriptor:
00046ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00046fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

00046fc0  int64_t ltc_mp = 0x0

00046fc8                          00 00 00 00 00 00 00 00                                                          ........

00046fd0  int64_t data_46fd0 = 0x0

00046fd8                                                                          00 00 00 00 00 00 00 00                          ........

00046fe0  int64_t data_46fe0 = 0x0

00046fe8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00047000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00047050  int64_t data_47050 = 0x0

00047058                                                                          00 00 00 00 00 00 00 00                          ........
00047060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000470a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000470c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

000470e0  int64_t data_470e0 = 0x0

000470e8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
00047100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

00047110  int64_t data_47110 = 0x0

00047118                                                                          00 00 00 00 00 00 00 00                          ........
00047120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047160  cipher_descriptor:
00047160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000471a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000471c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000471e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000472a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000472c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000472e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000473a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000473c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000473e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000474a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000474c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000474e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047520  prng_descriptor:
00047520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000475a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000475c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000475e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00047680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
000476a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

000476b0  uint64_t s_mp_rand_source = 0x0
.bss (NOBITS) section ended  {0x46700-0x476b8}

.extern section started  {0x476c0-0x47b20}
000476c0  extern _ITM_deregisterTMCloneTable
000476c8  extern _ITM_registerTMCloneTable
000476d0  extern void __assert_fail(char const* assertion, char const* file, uint32_t line, char const* function) __noreturn
000476d8  extern uint16_t** __ctype_b_loc()
000476e0  extern void __cxa_finalize(void* d)
000476e8  extern int32_t* __errno_location()
000476f0  extern void __explicit_bzero_chk(void* dst, uint64_t len, uint64_t dstlen)
000476f8  extern int64_t __fdelt_chk(int64_t d)
00047700  extern int32_t __fprintf_chk(FILE* fp, int32_t flag, char const* format, ...)
00047708  extern __gmon_start__
00047710  extern __isoc23_strtoul
00047718  extern void __libc_start_main(int32_t (* main)(int32_t argc, char** argv, char** envp), int32_t argc, char** ubp_av, void (* init)(), void (* fini)(), void (* rtld_fini)(), void* stack_end) __noreturn
00047720  extern void* __memcpy_chk(void*, void const*, uint64_t, uint64_t)
00047728  extern int32_t __snprintf_chk(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, ...)
00047730  extern void __stack_chk_fail() __noreturn
00047738  extern void __syslog_chk(int32_t pri, int32_t flag, char const* fmt, ...)
00047740  extern int32_t __vsnprintf_chk(char* s, uint64_t maxlen, int32_t flag, uint64_t slen, char const* format, struct __va_list_tag* ap)
00047748  extern char* __xpg_basename(char* filename)
00047750  extern void _exit(int32_t status) __noreturn
00047758  extern void abort() __noreturn
00047760  extern int32_t accept(int32_t fd, union __SOCKADDR_ARG addr, socklen_t* len)
00047768  extern int32_t atoi(char const* nptr)
00047770  extern int64_t atol(char const* nptr)
00047778  extern bind
00047780  extern void* calloc(size_t nmemb, size_t size)
00047788  extern chdir
00047790  extern chmod
00047798  extern chown
000477a0  extern int32_t clearenv()
000477a8  extern clock_t clock()
000477b0  extern int32_t clock_gettime(clockid_t clock_id, struct timespec* tp)
000477b8  extern int32_t close(int32_t fd)
000477c0  extern int32_t connect(int32_t fd, union __CONST_SOCKADDR_ARG addr, socklen_t len)
000477c8  extern crypt
000477d0  extern crypt@XCRYPT_2.0
000477d8  extern int32_t daemon(int32_t nochdir, int32_t noclose)
000477e0  extern deflate
000477e8  extern deflateEnd
000477f0  extern deflateInit2_
000477f8  extern char* dirname(char* path)
00047800  extern dup2
00047808  extern void endusershell()
00047810  extern int32_t execv(char const* path, char* const* argv)
00047818  extern void exit(int32_t status) __noreturn
00047820  extern int32_t fclose(FILE* fp)
00047828  extern int32_t fcntl(int32_t fd, int32_t cmd, ...)
00047830  extern int32_t fexecve(int32_t fd, char* const* argv, char* const* envp)
00047838  extern int32_t fgetc(FILE* fp)
00047840  extern FILE* fopen(char const* filename, char const* mode)
00047848  extern pid_t fork()
00047850  extern int32_t fputs(char const* str, FILE* fp)
00047858  extern void free(void* ptr)
00047860  extern void freeaddrinfo(struct addrinfo* ai)
00047868  extern int32_t fsync(int32_t fd)
00047870  extern uint64_t fwrite(void const* buf, uint64_t size, uint64_t count, FILE* fp)
00047878  extern char const* gai_strerror(int32_t code)
00047880  extern int32_t getaddrinfo(char const* name, char const* service, struct addrinfo* hints, struct addrinfo** pai)
00047888  extern char* getenv(char const* name)
00047890  extern geteuid
00047898  extern getgid
000478a0  extern struct group* getgrnam(char const* name)
000478a8  extern int32_t getgrouplist(char const* user, gid_t group, gid_t* groups, int32_t* ngroups)
000478b0  extern int32_t getnameinfo(struct sockaddr* sa, socklen_t addrlen, char* host, socklen_t hostlen, char* serv, socklen_t servlen, int32_t flags)
000478b8  extern getpeername
000478c0  extern getpid
000478c8  extern struct passwd* getpwnam(char const* name)
000478d0  extern struct passwd* getpwuid(uid_t uid)
000478d8  extern ssize_t getrandom(void* buffer, uint64_t length, uint32_t flags)
000478e0  extern int32_t getrlimit(enum __rlimit_resource resource, struct rlimit64* rlimits)
000478e8  extern getsockname
000478f0  extern getsockopt
000478f8  extern struct spwd* getspnam(char const* name)
00047900  extern int32_t gettimeofday(struct timeval*, void*)
00047908  extern getuid
00047910  extern char* getusershell()
00047918  extern inflate
00047920  extern inflateEnd
00047928  extern inflateInit_
00047930  extern int32_t initgroups(char const* user, gid_t group)
00047938  extern ioctl
00047940  extern kill
00047948  extern link
00047950  extern listen
00047958  extern struct tm* localtime(time_t* t)
00047960  extern login
00047968  extern logout
00047970  extern logwtmp
00047978  extern off64_t lseek(int32_t fd, int64_t __arg2, int32_t whence)
00047980  extern void* malloc(size_t n)
00047988  extern void* memchr(void const*, int32_t, uint64_t)
00047990  extern int32_t memcmp(void const*, void const*, uint64_t)
00047998  extern void* memcpy(void*, void const*, uint64_t)
000479a0  extern void* memmove(void*, void const*, uint64_t)
000479a8  extern void* memset(void*, int32_t, uint64_t)
000479b0  extern mkdir
000479b8  extern int32_t nanosleep(struct timespec* requested_time, struct timespec* remaining)
000479c0  extern int32_t open(char const* file, int32_t oflag, ...)
000479c8  extern void openlog(char const* ident, int32_t logstat, int32_t logfac)
000479d0  extern openpty
000479d8  extern pipe
000479e0  extern int32_t prctl(int32_t option, ...)
000479e8  extern int32_t putenv(char* string)
000479f0  extern ssize_t read(int32_t fd, void* buf, uint64_t nbytes)
000479f8  extern void* realloc(void* ptr, size_t n)
00047a00  extern rmdir
00047a08  extern int32_t select(int32_t nfds, struct fd_set* readfds, struct fd_set* writefds, struct fd_set* exceptfds, struct timeval* timeout)
00047a10  extern int32_t setegid(gid_t gid, gid_t gid)
00047a18  extern int32_t seteuid(uid_t uid, uid_t uid)
00047a20  extern int32_t setgid(gid_t gid)
00047a28  extern int32_t setrlimit(enum __rlimit_resource resource, struct rlimit64* rlimits)
00047a30  extern setsid
00047a38  extern setsockopt
00047a40  extern int32_t setuid(uid_t uid)
00047a48  extern void setusershell()
00047a50  extern shutdown
00047a58  extern int32_t sigaction(int32_t sig, struct sigaction* act, struct sigaction* oact)
00047a60  extern int32_t sigemptyset(sigset_t* set)
00047a68  extern __sighandler_t signal(int32_t sig, __sighandler_t handler)
00047a70  extern socket
00047a78  extern stat
00047a80  extern char* strchr(char const*, int32_t)
00047a88  extern int32_t strcmp(char const*, char const*)
00047a90  extern char* strerror(int32_t errnum)
00047a98  extern uint64_t strftime(char* s, uint64_t maxsize, char const* format, struct tm* tp)
00047aa0  extern strlcat
00047aa8  extern strlcpy
00047ab0  extern uint64_t strlen(char const*)
00047ab8  extern int32_t strncasecmp(char const*, char const*, uint64_t)
00047ac0  extern int32_t strncmp(char const*, char const*, uint64_t)
00047ac8  extern char* strncpy(char*, char const*, uint64_t)
00047ad0  extern char* strrchr(char const*, int32_t)
00047ad8  extern syscall
00047ae0  extern int32_t tcgetattr(int32_t fd, struct termios* termios_p)
00047ae8  extern int32_t tcsetattr(int32_t fd, int32_t optional_actions, struct termios* termios_p)
00047af0  extern time_t time(time_t*)
00047af8  extern char* ttyname(int32_t fd)
00047b00  extern unlink
00047b08  extern pid_t waitpid(pid_t pid, int32_t* stat_loc, int32_t options)
00047b10  extern ssize_t write(int32_t fd, void const* buf, uint64_t nbytes)
00047b18  extern ssize_t writev(int32_t fd, struct iovec* iov, int32_t iovcnt)
.extern section ended  {0x476c0-0x47b20}

.synthetic_builtins section started  {0x47b20-0x47b48}
00047b20  extern void* __builtin_memcpy(void* dest, void const* src, uint64_t n)
00047b28  extern void* __builtin_memset(void* s, int32_t c, uint64_t n)
00047b30  extern char* __builtin_strcpy(char* dest, char const* src)
00047b38  extern char* __builtin_strncpy(char* dest, char const* src, uint64_t n)
00047b40  extern wchar32* __builtin_wcscpy(wchar32* dest, wchar32 const* src)
.synthetic_builtins section ended  {0x47b20-0x47b48}

